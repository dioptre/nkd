//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Data.Mapping.EntityViewGenerationAttribute(typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySetsEED167E04F2EBF9522DDEE23864EA4A60729AF8981F854E1424B56165BD0329B))]

namespace Edm_EntityMappingGeneratedViews
{
    
    
    /// <Summary>
    /// The type contains views for EntitySets and AssociationSets that were generated at design time.
    /// </Summary>
    public sealed class ViewsForBaseEntitySetsEED167E04F2EBF9522DDEE23864EA4A60729AF8981F854E1424B56165BD0329B : System.Data.Mapping.EntityViewContainer
    {
        
        /// <Summary>
        /// The constructor stores the views for the extents and also the hash values generated based on the metadata and mapping closure and views.
        /// </Summary>
        public ViewsForBaseEntitySetsEED167E04F2EBF9522DDEE23864EA4A60729AF8981F854E1424B56165BD0329B()
        {
            this.EdmEntityContainerName = "NKDC";
            this.StoreEntityContainerName = "NKDModuleBusinessObjectsStoreContainer";
            this.HashOverMappingClosure = "a64bec335f43e0ba1f923064c7caa218cbf684e4436d4349ae075baa046efeec";
            this.HashOverAllExtentViews = "aedee8d0ebcdc6aa2f7b891bda37fdcc42b0a32361417c6b68ad8f4bc3114aca";
            this.ViewCount = 802;
        }
        
        /// <Summary>
        /// The method returns the view for the index given.
        /// </Summary>
        protected override System.Collections.Generic.KeyValuePair<string, string> GetViewAt(int index)
        {
            if ((index == 0))
            {
                return GetView0();
            }
            if ((index == 1))
            {
                return GetView1();
            }
            if ((index == 2))
            {
                return GetView2();
            }
            if ((index == 3))
            {
                return GetView3();
            }
            if ((index == 4))
            {
                return GetView4();
            }
            if ((index == 5))
            {
                return GetView5();
            }
            if ((index == 6))
            {
                return GetView6();
            }
            if ((index == 7))
            {
                return GetView7();
            }
            if ((index == 8))
            {
                return GetView8();
            }
            if ((index == 9))
            {
                return GetView9();
            }
            if ((index == 10))
            {
                return GetView10();
            }
            if ((index == 11))
            {
                return GetView11();
            }
            if ((index == 12))
            {
                return GetView12();
            }
            if ((index == 13))
            {
                return GetView13();
            }
            if ((index == 14))
            {
                return GetView14();
            }
            if ((index == 15))
            {
                return GetView15();
            }
            if ((index == 16))
            {
                return GetView16();
            }
            if ((index == 17))
            {
                return GetView17();
            }
            if ((index == 18))
            {
                return GetView18();
            }
            if ((index == 19))
            {
                return GetView19();
            }
            if ((index == 20))
            {
                return GetView20();
            }
            if ((index == 21))
            {
                return GetView21();
            }
            if ((index == 22))
            {
                return GetView22();
            }
            if ((index == 23))
            {
                return GetView23();
            }
            if ((index == 24))
            {
                return GetView24();
            }
            if ((index == 25))
            {
                return GetView25();
            }
            if ((index == 26))
            {
                return GetView26();
            }
            if ((index == 27))
            {
                return GetView27();
            }
            if ((index == 28))
            {
                return GetView28();
            }
            if ((index == 29))
            {
                return GetView29();
            }
            if ((index == 30))
            {
                return GetView30();
            }
            if ((index == 31))
            {
                return GetView31();
            }
            if ((index == 32))
            {
                return GetView32();
            }
            if ((index == 33))
            {
                return GetView33();
            }
            if ((index == 34))
            {
                return GetView34();
            }
            if ((index == 35))
            {
                return GetView35();
            }
            if ((index == 36))
            {
                return GetView36();
            }
            if ((index == 37))
            {
                return GetView37();
            }
            if ((index == 38))
            {
                return GetView38();
            }
            if ((index == 39))
            {
                return GetView39();
            }
            if ((index == 40))
            {
                return GetView40();
            }
            if ((index == 41))
            {
                return GetView41();
            }
            if ((index == 42))
            {
                return GetView42();
            }
            if ((index == 43))
            {
                return GetView43();
            }
            if ((index == 44))
            {
                return GetView44();
            }
            if ((index == 45))
            {
                return GetView45();
            }
            if ((index == 46))
            {
                return GetView46();
            }
            if ((index == 47))
            {
                return GetView47();
            }
            if ((index == 48))
            {
                return GetView48();
            }
            if ((index == 49))
            {
                return GetView49();
            }
            if ((index == 50))
            {
                return GetView50();
            }
            if ((index == 51))
            {
                return GetView51();
            }
            if ((index == 52))
            {
                return GetView52();
            }
            if ((index == 53))
            {
                return GetView53();
            }
            if ((index == 54))
            {
                return GetView54();
            }
            if ((index == 55))
            {
                return GetView55();
            }
            if ((index == 56))
            {
                return GetView56();
            }
            if ((index == 57))
            {
                return GetView57();
            }
            if ((index == 58))
            {
                return GetView58();
            }
            if ((index == 59))
            {
                return GetView59();
            }
            if ((index == 60))
            {
                return GetView60();
            }
            if ((index == 61))
            {
                return GetView61();
            }
            if ((index == 62))
            {
                return GetView62();
            }
            if ((index == 63))
            {
                return GetView63();
            }
            if ((index == 64))
            {
                return GetView64();
            }
            if ((index == 65))
            {
                return GetView65();
            }
            if ((index == 66))
            {
                return GetView66();
            }
            if ((index == 67))
            {
                return GetView67();
            }
            if ((index == 68))
            {
                return GetView68();
            }
            if ((index == 69))
            {
                return GetView69();
            }
            if ((index == 70))
            {
                return GetView70();
            }
            if ((index == 71))
            {
                return GetView71();
            }
            if ((index == 72))
            {
                return GetView72();
            }
            if ((index == 73))
            {
                return GetView73();
            }
            if ((index == 74))
            {
                return GetView74();
            }
            if ((index == 75))
            {
                return GetView75();
            }
            if ((index == 76))
            {
                return GetView76();
            }
            if ((index == 77))
            {
                return GetView77();
            }
            if ((index == 78))
            {
                return GetView78();
            }
            if ((index == 79))
            {
                return GetView79();
            }
            if ((index == 80))
            {
                return GetView80();
            }
            if ((index == 81))
            {
                return GetView81();
            }
            if ((index == 82))
            {
                return GetView82();
            }
            if ((index == 83))
            {
                return GetView83();
            }
            if ((index == 84))
            {
                return GetView84();
            }
            if ((index == 85))
            {
                return GetView85();
            }
            if ((index == 86))
            {
                return GetView86();
            }
            if ((index == 87))
            {
                return GetView87();
            }
            if ((index == 88))
            {
                return GetView88();
            }
            if ((index == 89))
            {
                return GetView89();
            }
            if ((index == 90))
            {
                return GetView90();
            }
            if ((index == 91))
            {
                return GetView91();
            }
            if ((index == 92))
            {
                return GetView92();
            }
            if ((index == 93))
            {
                return GetView93();
            }
            if ((index == 94))
            {
                return GetView94();
            }
            if ((index == 95))
            {
                return GetView95();
            }
            if ((index == 96))
            {
                return GetView96();
            }
            if ((index == 97))
            {
                return GetView97();
            }
            if ((index == 98))
            {
                return GetView98();
            }
            if ((index == 99))
            {
                return GetView99();
            }
            if ((index == 100))
            {
                return GetView100();
            }
            if ((index == 101))
            {
                return GetView101();
            }
            if ((index == 102))
            {
                return GetView102();
            }
            if ((index == 103))
            {
                return GetView103();
            }
            if ((index == 104))
            {
                return GetView104();
            }
            if ((index == 105))
            {
                return GetView105();
            }
            if ((index == 106))
            {
                return GetView106();
            }
            if ((index == 107))
            {
                return GetView107();
            }
            if ((index == 108))
            {
                return GetView108();
            }
            if ((index == 109))
            {
                return GetView109();
            }
            if ((index == 110))
            {
                return GetView110();
            }
            if ((index == 111))
            {
                return GetView111();
            }
            if ((index == 112))
            {
                return GetView112();
            }
            if ((index == 113))
            {
                return GetView113();
            }
            if ((index == 114))
            {
                return GetView114();
            }
            if ((index == 115))
            {
                return GetView115();
            }
            if ((index == 116))
            {
                return GetView116();
            }
            if ((index == 117))
            {
                return GetView117();
            }
            if ((index == 118))
            {
                return GetView118();
            }
            if ((index == 119))
            {
                return GetView119();
            }
            if ((index == 120))
            {
                return GetView120();
            }
            if ((index == 121))
            {
                return GetView121();
            }
            if ((index == 122))
            {
                return GetView122();
            }
            if ((index == 123))
            {
                return GetView123();
            }
            if ((index == 124))
            {
                return GetView124();
            }
            if ((index == 125))
            {
                return GetView125();
            }
            if ((index == 126))
            {
                return GetView126();
            }
            if ((index == 127))
            {
                return GetView127();
            }
            if ((index == 128))
            {
                return GetView128();
            }
            if ((index == 129))
            {
                return GetView129();
            }
            if ((index == 130))
            {
                return GetView130();
            }
            if ((index == 131))
            {
                return GetView131();
            }
            if ((index == 132))
            {
                return GetView132();
            }
            if ((index == 133))
            {
                return GetView133();
            }
            if ((index == 134))
            {
                return GetView134();
            }
            if ((index == 135))
            {
                return GetView135();
            }
            if ((index == 136))
            {
                return GetView136();
            }
            if ((index == 137))
            {
                return GetView137();
            }
            if ((index == 138))
            {
                return GetView138();
            }
            if ((index == 139))
            {
                return GetView139();
            }
            if ((index == 140))
            {
                return GetView140();
            }
            if ((index == 141))
            {
                return GetView141();
            }
            if ((index == 142))
            {
                return GetView142();
            }
            if ((index == 143))
            {
                return GetView143();
            }
            if ((index == 144))
            {
                return GetView144();
            }
            if ((index == 145))
            {
                return GetView145();
            }
            if ((index == 146))
            {
                return GetView146();
            }
            if ((index == 147))
            {
                return GetView147();
            }
            if ((index == 148))
            {
                return GetView148();
            }
            if ((index == 149))
            {
                return GetView149();
            }
            if ((index == 150))
            {
                return GetView150();
            }
            if ((index == 151))
            {
                return GetView151();
            }
            if ((index == 152))
            {
                return GetView152();
            }
            if ((index == 153))
            {
                return GetView153();
            }
            if ((index == 154))
            {
                return GetView154();
            }
            if ((index == 155))
            {
                return GetView155();
            }
            if ((index == 156))
            {
                return GetView156();
            }
            if ((index == 157))
            {
                return GetView157();
            }
            if ((index == 158))
            {
                return GetView158();
            }
            if ((index == 159))
            {
                return GetView159();
            }
            if ((index == 160))
            {
                return GetView160();
            }
            if ((index == 161))
            {
                return GetView161();
            }
            if ((index == 162))
            {
                return GetView162();
            }
            if ((index == 163))
            {
                return GetView163();
            }
            if ((index == 164))
            {
                return GetView164();
            }
            if ((index == 165))
            {
                return GetView165();
            }
            if ((index == 166))
            {
                return GetView166();
            }
            if ((index == 167))
            {
                return GetView167();
            }
            if ((index == 168))
            {
                return GetView168();
            }
            if ((index == 169))
            {
                return GetView169();
            }
            if ((index == 170))
            {
                return GetView170();
            }
            if ((index == 171))
            {
                return GetView171();
            }
            if ((index == 172))
            {
                return GetView172();
            }
            if ((index == 173))
            {
                return GetView173();
            }
            if ((index == 174))
            {
                return GetView174();
            }
            if ((index == 175))
            {
                return GetView175();
            }
            if ((index == 176))
            {
                return GetView176();
            }
            if ((index == 177))
            {
                return GetView177();
            }
            if ((index == 178))
            {
                return GetView178();
            }
            if ((index == 179))
            {
                return GetView179();
            }
            if ((index == 180))
            {
                return GetView180();
            }
            if ((index == 181))
            {
                return GetView181();
            }
            if ((index == 182))
            {
                return GetView182();
            }
            if ((index == 183))
            {
                return GetView183();
            }
            if ((index == 184))
            {
                return GetView184();
            }
            if ((index == 185))
            {
                return GetView185();
            }
            if ((index == 186))
            {
                return GetView186();
            }
            if ((index == 187))
            {
                return GetView187();
            }
            if ((index == 188))
            {
                return GetView188();
            }
            if ((index == 189))
            {
                return GetView189();
            }
            if ((index == 190))
            {
                return GetView190();
            }
            if ((index == 191))
            {
                return GetView191();
            }
            if ((index == 192))
            {
                return GetView192();
            }
            if ((index == 193))
            {
                return GetView193();
            }
            if ((index == 194))
            {
                return GetView194();
            }
            if ((index == 195))
            {
                return GetView195();
            }
            if ((index == 196))
            {
                return GetView196();
            }
            if ((index == 197))
            {
                return GetView197();
            }
            if ((index == 198))
            {
                return GetView198();
            }
            if ((index == 199))
            {
                return GetView199();
            }
            if ((index == 200))
            {
                return GetView200();
            }
            if ((index == 201))
            {
                return GetView201();
            }
            if ((index == 202))
            {
                return GetView202();
            }
            if ((index == 203))
            {
                return GetView203();
            }
            if ((index == 204))
            {
                return GetView204();
            }
            if ((index == 205))
            {
                return GetView205();
            }
            if ((index == 206))
            {
                return GetView206();
            }
            if ((index == 207))
            {
                return GetView207();
            }
            if ((index == 208))
            {
                return GetView208();
            }
            if ((index == 209))
            {
                return GetView209();
            }
            if ((index == 210))
            {
                return GetView210();
            }
            if ((index == 211))
            {
                return GetView211();
            }
            if ((index == 212))
            {
                return GetView212();
            }
            if ((index == 213))
            {
                return GetView213();
            }
            if ((index == 214))
            {
                return GetView214();
            }
            if ((index == 215))
            {
                return GetView215();
            }
            if ((index == 216))
            {
                return GetView216();
            }
            if ((index == 217))
            {
                return GetView217();
            }
            if ((index == 218))
            {
                return GetView218();
            }
            if ((index == 219))
            {
                return GetView219();
            }
            if ((index == 220))
            {
                return GetView220();
            }
            if ((index == 221))
            {
                return GetView221();
            }
            if ((index == 222))
            {
                return GetView222();
            }
            if ((index == 223))
            {
                return GetView223();
            }
            if ((index == 224))
            {
                return GetView224();
            }
            if ((index == 225))
            {
                return GetView225();
            }
            if ((index == 226))
            {
                return GetView226();
            }
            if ((index == 227))
            {
                return GetView227();
            }
            if ((index == 228))
            {
                return GetView228();
            }
            if ((index == 229))
            {
                return GetView229();
            }
            if ((index == 230))
            {
                return GetView230();
            }
            if ((index == 231))
            {
                return GetView231();
            }
            if ((index == 232))
            {
                return GetView232();
            }
            if ((index == 233))
            {
                return GetView233();
            }
            if ((index == 234))
            {
                return GetView234();
            }
            if ((index == 235))
            {
                return GetView235();
            }
            if ((index == 236))
            {
                return GetView236();
            }
            if ((index == 237))
            {
                return GetView237();
            }
            if ((index == 238))
            {
                return GetView238();
            }
            if ((index == 239))
            {
                return GetView239();
            }
            if ((index == 240))
            {
                return GetView240();
            }
            if ((index == 241))
            {
                return GetView241();
            }
            if ((index == 242))
            {
                return GetView242();
            }
            if ((index == 243))
            {
                return GetView243();
            }
            if ((index == 244))
            {
                return GetView244();
            }
            if ((index == 245))
            {
                return GetView245();
            }
            if ((index == 246))
            {
                return GetView246();
            }
            if ((index == 247))
            {
                return GetView247();
            }
            if ((index == 248))
            {
                return GetView248();
            }
            if ((index == 249))
            {
                return GetView249();
            }
            if ((index == 250))
            {
                return GetView250();
            }
            if ((index == 251))
            {
                return GetView251();
            }
            if ((index == 252))
            {
                return GetView252();
            }
            if ((index == 253))
            {
                return GetView253();
            }
            if ((index == 254))
            {
                return GetView254();
            }
            if ((index == 255))
            {
                return GetView255();
            }
            if ((index == 256))
            {
                return GetView256();
            }
            if ((index == 257))
            {
                return GetView257();
            }
            if ((index == 258))
            {
                return GetView258();
            }
            if ((index == 259))
            {
                return GetView259();
            }
            if ((index == 260))
            {
                return GetView260();
            }
            if ((index == 261))
            {
                return GetView261();
            }
            if ((index == 262))
            {
                return GetView262();
            }
            if ((index == 263))
            {
                return GetView263();
            }
            if ((index == 264))
            {
                return GetView264();
            }
            if ((index == 265))
            {
                return GetView265();
            }
            if ((index == 266))
            {
                return GetView266();
            }
            if ((index == 267))
            {
                return GetView267();
            }
            if ((index == 268))
            {
                return GetView268();
            }
            if ((index == 269))
            {
                return GetView269();
            }
            if ((index == 270))
            {
                return GetView270();
            }
            if ((index == 271))
            {
                return GetView271();
            }
            if ((index == 272))
            {
                return GetView272();
            }
            if ((index == 273))
            {
                return GetView273();
            }
            if ((index == 274))
            {
                return GetView274();
            }
            if ((index == 275))
            {
                return GetView275();
            }
            if ((index == 276))
            {
                return GetView276();
            }
            if ((index == 277))
            {
                return GetView277();
            }
            if ((index == 278))
            {
                return GetView278();
            }
            if ((index == 279))
            {
                return GetView279();
            }
            if ((index == 280))
            {
                return GetView280();
            }
            if ((index == 281))
            {
                return GetView281();
            }
            if ((index == 282))
            {
                return GetView282();
            }
            if ((index == 283))
            {
                return GetView283();
            }
            if ((index == 284))
            {
                return GetView284();
            }
            if ((index == 285))
            {
                return GetView285();
            }
            if ((index == 286))
            {
                return GetView286();
            }
            if ((index == 287))
            {
                return GetView287();
            }
            if ((index == 288))
            {
                return GetView288();
            }
            if ((index == 289))
            {
                return GetView289();
            }
            if ((index == 290))
            {
                return GetView290();
            }
            if ((index == 291))
            {
                return GetView291();
            }
            if ((index == 292))
            {
                return GetView292();
            }
            if ((index == 293))
            {
                return GetView293();
            }
            if ((index == 294))
            {
                return GetView294();
            }
            if ((index == 295))
            {
                return GetView295();
            }
            if ((index == 296))
            {
                return GetView296();
            }
            if ((index == 297))
            {
                return GetView297();
            }
            if ((index == 298))
            {
                return GetView298();
            }
            if ((index == 299))
            {
                return GetView299();
            }
            if ((index == 300))
            {
                return GetView300();
            }
            if ((index == 301))
            {
                return GetView301();
            }
            if ((index == 302))
            {
                return GetView302();
            }
            if ((index == 303))
            {
                return GetView303();
            }
            if ((index == 304))
            {
                return GetView304();
            }
            if ((index == 305))
            {
                return GetView305();
            }
            if ((index == 306))
            {
                return GetView306();
            }
            if ((index == 307))
            {
                return GetView307();
            }
            if ((index == 308))
            {
                return GetView308();
            }
            if ((index == 309))
            {
                return GetView309();
            }
            if ((index == 310))
            {
                return GetView310();
            }
            if ((index == 311))
            {
                return GetView311();
            }
            if ((index == 312))
            {
                return GetView312();
            }
            if ((index == 313))
            {
                return GetView313();
            }
            if ((index == 314))
            {
                return GetView314();
            }
            if ((index == 315))
            {
                return GetView315();
            }
            if ((index == 316))
            {
                return GetView316();
            }
            if ((index == 317))
            {
                return GetView317();
            }
            if ((index == 318))
            {
                return GetView318();
            }
            if ((index == 319))
            {
                return GetView319();
            }
            if ((index == 320))
            {
                return GetView320();
            }
            if ((index == 321))
            {
                return GetView321();
            }
            if ((index == 322))
            {
                return GetView322();
            }
            if ((index == 323))
            {
                return GetView323();
            }
            if ((index == 324))
            {
                return GetView324();
            }
            if ((index == 325))
            {
                return GetView325();
            }
            if ((index == 326))
            {
                return GetView326();
            }
            if ((index == 327))
            {
                return GetView327();
            }
            if ((index == 328))
            {
                return GetView328();
            }
            if ((index == 329))
            {
                return GetView329();
            }
            if ((index == 330))
            {
                return GetView330();
            }
            if ((index == 331))
            {
                return GetView331();
            }
            if ((index == 332))
            {
                return GetView332();
            }
            if ((index == 333))
            {
                return GetView333();
            }
            if ((index == 334))
            {
                return GetView334();
            }
            if ((index == 335))
            {
                return GetView335();
            }
            if ((index == 336))
            {
                return GetView336();
            }
            if ((index == 337))
            {
                return GetView337();
            }
            if ((index == 338))
            {
                return GetView338();
            }
            if ((index == 339))
            {
                return GetView339();
            }
            if ((index == 340))
            {
                return GetView340();
            }
            if ((index == 341))
            {
                return GetView341();
            }
            if ((index == 342))
            {
                return GetView342();
            }
            if ((index == 343))
            {
                return GetView343();
            }
            if ((index == 344))
            {
                return GetView344();
            }
            if ((index == 345))
            {
                return GetView345();
            }
            if ((index == 346))
            {
                return GetView346();
            }
            if ((index == 347))
            {
                return GetView347();
            }
            if ((index == 348))
            {
                return GetView348();
            }
            if ((index == 349))
            {
                return GetView349();
            }
            if ((index == 350))
            {
                return GetView350();
            }
            if ((index == 351))
            {
                return GetView351();
            }
            if ((index == 352))
            {
                return GetView352();
            }
            if ((index == 353))
            {
                return GetView353();
            }
            if ((index == 354))
            {
                return GetView354();
            }
            if ((index == 355))
            {
                return GetView355();
            }
            if ((index == 356))
            {
                return GetView356();
            }
            if ((index == 357))
            {
                return GetView357();
            }
            if ((index == 358))
            {
                return GetView358();
            }
            if ((index == 359))
            {
                return GetView359();
            }
            if ((index == 360))
            {
                return GetView360();
            }
            if ((index == 361))
            {
                return GetView361();
            }
            if ((index == 362))
            {
                return GetView362();
            }
            if ((index == 363))
            {
                return GetView363();
            }
            if ((index == 364))
            {
                return GetView364();
            }
            if ((index == 365))
            {
                return GetView365();
            }
            if ((index == 366))
            {
                return GetView366();
            }
            if ((index == 367))
            {
                return GetView367();
            }
            if ((index == 368))
            {
                return GetView368();
            }
            if ((index == 369))
            {
                return GetView369();
            }
            if ((index == 370))
            {
                return GetView370();
            }
            if ((index == 371))
            {
                return GetView371();
            }
            if ((index == 372))
            {
                return GetView372();
            }
            if ((index == 373))
            {
                return GetView373();
            }
            if ((index == 374))
            {
                return GetView374();
            }
            if ((index == 375))
            {
                return GetView375();
            }
            if ((index == 376))
            {
                return GetView376();
            }
            if ((index == 377))
            {
                return GetView377();
            }
            if ((index == 378))
            {
                return GetView378();
            }
            if ((index == 379))
            {
                return GetView379();
            }
            if ((index == 380))
            {
                return GetView380();
            }
            if ((index == 381))
            {
                return GetView381();
            }
            if ((index == 382))
            {
                return GetView382();
            }
            if ((index == 383))
            {
                return GetView383();
            }
            if ((index == 384))
            {
                return GetView384();
            }
            if ((index == 385))
            {
                return GetView385();
            }
            if ((index == 386))
            {
                return GetView386();
            }
            if ((index == 387))
            {
                return GetView387();
            }
            if ((index == 388))
            {
                return GetView388();
            }
            if ((index == 389))
            {
                return GetView389();
            }
            if ((index == 390))
            {
                return GetView390();
            }
            if ((index == 391))
            {
                return GetView391();
            }
            if ((index == 392))
            {
                return GetView392();
            }
            if ((index == 393))
            {
                return GetView393();
            }
            if ((index == 394))
            {
                return GetView394();
            }
            if ((index == 395))
            {
                return GetView395();
            }
            if ((index == 396))
            {
                return GetView396();
            }
            if ((index == 397))
            {
                return GetView397();
            }
            if ((index == 398))
            {
                return GetView398();
            }
            if ((index == 399))
            {
                return GetView399();
            }
            if ((index == 400))
            {
                return GetView400();
            }
            if ((index == 401))
            {
                return GetView401();
            }
            if ((index == 402))
            {
                return GetView402();
            }
            if ((index == 403))
            {
                return GetView403();
            }
            if ((index == 404))
            {
                return GetView404();
            }
            if ((index == 405))
            {
                return GetView405();
            }
            if ((index == 406))
            {
                return GetView406();
            }
            if ((index == 407))
            {
                return GetView407();
            }
            if ((index == 408))
            {
                return GetView408();
            }
            if ((index == 409))
            {
                return GetView409();
            }
            if ((index == 410))
            {
                return GetView410();
            }
            if ((index == 411))
            {
                return GetView411();
            }
            if ((index == 412))
            {
                return GetView412();
            }
            if ((index == 413))
            {
                return GetView413();
            }
            if ((index == 414))
            {
                return GetView414();
            }
            if ((index == 415))
            {
                return GetView415();
            }
            if ((index == 416))
            {
                return GetView416();
            }
            if ((index == 417))
            {
                return GetView417();
            }
            if ((index == 418))
            {
                return GetView418();
            }
            if ((index == 419))
            {
                return GetView419();
            }
            if ((index == 420))
            {
                return GetView420();
            }
            if ((index == 421))
            {
                return GetView421();
            }
            if ((index == 422))
            {
                return GetView422();
            }
            if ((index == 423))
            {
                return GetView423();
            }
            if ((index == 424))
            {
                return GetView424();
            }
            if ((index == 425))
            {
                return GetView425();
            }
            if ((index == 426))
            {
                return GetView426();
            }
            if ((index == 427))
            {
                return GetView427();
            }
            if ((index == 428))
            {
                return GetView428();
            }
            if ((index == 429))
            {
                return GetView429();
            }
            if ((index == 430))
            {
                return GetView430();
            }
            if ((index == 431))
            {
                return GetView431();
            }
            if ((index == 432))
            {
                return GetView432();
            }
            if ((index == 433))
            {
                return GetView433();
            }
            if ((index == 434))
            {
                return GetView434();
            }
            if ((index == 435))
            {
                return GetView435();
            }
            if ((index == 436))
            {
                return GetView436();
            }
            if ((index == 437))
            {
                return GetView437();
            }
            if ((index == 438))
            {
                return GetView438();
            }
            if ((index == 439))
            {
                return GetView439();
            }
            if ((index == 440))
            {
                return GetView440();
            }
            if ((index == 441))
            {
                return GetView441();
            }
            if ((index == 442))
            {
                return GetView442();
            }
            if ((index == 443))
            {
                return GetView443();
            }
            if ((index == 444))
            {
                return GetView444();
            }
            if ((index == 445))
            {
                return GetView445();
            }
            if ((index == 446))
            {
                return GetView446();
            }
            if ((index == 447))
            {
                return GetView447();
            }
            if ((index == 448))
            {
                return GetView448();
            }
            if ((index == 449))
            {
                return GetView449();
            }
            if ((index == 450))
            {
                return GetView450();
            }
            if ((index == 451))
            {
                return GetView451();
            }
            if ((index == 452))
            {
                return GetView452();
            }
            if ((index == 453))
            {
                return GetView453();
            }
            if ((index == 454))
            {
                return GetView454();
            }
            if ((index == 455))
            {
                return GetView455();
            }
            if ((index == 456))
            {
                return GetView456();
            }
            if ((index == 457))
            {
                return GetView457();
            }
            if ((index == 458))
            {
                return GetView458();
            }
            if ((index == 459))
            {
                return GetView459();
            }
            if ((index == 460))
            {
                return GetView460();
            }
            if ((index == 461))
            {
                return GetView461();
            }
            if ((index == 462))
            {
                return GetView462();
            }
            if ((index == 463))
            {
                return GetView463();
            }
            if ((index == 464))
            {
                return GetView464();
            }
            if ((index == 465))
            {
                return GetView465();
            }
            if ((index == 466))
            {
                return GetView466();
            }
            if ((index == 467))
            {
                return GetView467();
            }
            if ((index == 468))
            {
                return GetView468();
            }
            if ((index == 469))
            {
                return GetView469();
            }
            if ((index == 470))
            {
                return GetView470();
            }
            if ((index == 471))
            {
                return GetView471();
            }
            if ((index == 472))
            {
                return GetView472();
            }
            if ((index == 473))
            {
                return GetView473();
            }
            if ((index == 474))
            {
                return GetView474();
            }
            if ((index == 475))
            {
                return GetView475();
            }
            if ((index == 476))
            {
                return GetView476();
            }
            if ((index == 477))
            {
                return GetView477();
            }
            if ((index == 478))
            {
                return GetView478();
            }
            if ((index == 479))
            {
                return GetView479();
            }
            if ((index == 480))
            {
                return GetView480();
            }
            if ((index == 481))
            {
                return GetView481();
            }
            if ((index == 482))
            {
                return GetView482();
            }
            if ((index == 483))
            {
                return GetView483();
            }
            if ((index == 484))
            {
                return GetView484();
            }
            if ((index == 485))
            {
                return GetView485();
            }
            if ((index == 486))
            {
                return GetView486();
            }
            if ((index == 487))
            {
                return GetView487();
            }
            if ((index == 488))
            {
                return GetView488();
            }
            if ((index == 489))
            {
                return GetView489();
            }
            if ((index == 490))
            {
                return GetView490();
            }
            if ((index == 491))
            {
                return GetView491();
            }
            if ((index == 492))
            {
                return GetView492();
            }
            if ((index == 493))
            {
                return GetView493();
            }
            if ((index == 494))
            {
                return GetView494();
            }
            if ((index == 495))
            {
                return GetView495();
            }
            if ((index == 496))
            {
                return GetView496();
            }
            if ((index == 497))
            {
                return GetView497();
            }
            if ((index == 498))
            {
                return GetView498();
            }
            if ((index == 499))
            {
                return GetView499();
            }
            if ((index == 500))
            {
                return GetView500();
            }
            if ((index == 501))
            {
                return GetView501();
            }
            if ((index == 502))
            {
                return GetView502();
            }
            if ((index == 503))
            {
                return GetView503();
            }
            if ((index == 504))
            {
                return GetView504();
            }
            if ((index == 505))
            {
                return GetView505();
            }
            if ((index == 506))
            {
                return GetView506();
            }
            if ((index == 507))
            {
                return GetView507();
            }
            if ((index == 508))
            {
                return GetView508();
            }
            if ((index == 509))
            {
                return GetView509();
            }
            if ((index == 510))
            {
                return GetView510();
            }
            if ((index == 511))
            {
                return GetView511();
            }
            if ((index == 512))
            {
                return GetView512();
            }
            if ((index == 513))
            {
                return GetView513();
            }
            if ((index == 514))
            {
                return GetView514();
            }
            if ((index == 515))
            {
                return GetView515();
            }
            if ((index == 516))
            {
                return GetView516();
            }
            if ((index == 517))
            {
                return GetView517();
            }
            if ((index == 518))
            {
                return GetView518();
            }
            if ((index == 519))
            {
                return GetView519();
            }
            if ((index == 520))
            {
                return GetView520();
            }
            if ((index == 521))
            {
                return GetView521();
            }
            if ((index == 522))
            {
                return GetView522();
            }
            if ((index == 523))
            {
                return GetView523();
            }
            if ((index == 524))
            {
                return GetView524();
            }
            if ((index == 525))
            {
                return GetView525();
            }
            if ((index == 526))
            {
                return GetView526();
            }
            if ((index == 527))
            {
                return GetView527();
            }
            if ((index == 528))
            {
                return GetView528();
            }
            if ((index == 529))
            {
                return GetView529();
            }
            if ((index == 530))
            {
                return GetView530();
            }
            if ((index == 531))
            {
                return GetView531();
            }
            if ((index == 532))
            {
                return GetView532();
            }
            if ((index == 533))
            {
                return GetView533();
            }
            if ((index == 534))
            {
                return GetView534();
            }
            if ((index == 535))
            {
                return GetView535();
            }
            if ((index == 536))
            {
                return GetView536();
            }
            if ((index == 537))
            {
                return GetView537();
            }
            if ((index == 538))
            {
                return GetView538();
            }
            if ((index == 539))
            {
                return GetView539();
            }
            if ((index == 540))
            {
                return GetView540();
            }
            if ((index == 541))
            {
                return GetView541();
            }
            if ((index == 542))
            {
                return GetView542();
            }
            if ((index == 543))
            {
                return GetView543();
            }
            if ((index == 544))
            {
                return GetView544();
            }
            if ((index == 545))
            {
                return GetView545();
            }
            if ((index == 546))
            {
                return GetView546();
            }
            if ((index == 547))
            {
                return GetView547();
            }
            if ((index == 548))
            {
                return GetView548();
            }
            if ((index == 549))
            {
                return GetView549();
            }
            if ((index == 550))
            {
                return GetView550();
            }
            if ((index == 551))
            {
                return GetView551();
            }
            if ((index == 552))
            {
                return GetView552();
            }
            if ((index == 553))
            {
                return GetView553();
            }
            if ((index == 554))
            {
                return GetView554();
            }
            if ((index == 555))
            {
                return GetView555();
            }
            if ((index == 556))
            {
                return GetView556();
            }
            if ((index == 557))
            {
                return GetView557();
            }
            if ((index == 558))
            {
                return GetView558();
            }
            if ((index == 559))
            {
                return GetView559();
            }
            if ((index == 560))
            {
                return GetView560();
            }
            if ((index == 561))
            {
                return GetView561();
            }
            if ((index == 562))
            {
                return GetView562();
            }
            if ((index == 563))
            {
                return GetView563();
            }
            if ((index == 564))
            {
                return GetView564();
            }
            if ((index == 565))
            {
                return GetView565();
            }
            if ((index == 566))
            {
                return GetView566();
            }
            if ((index == 567))
            {
                return GetView567();
            }
            if ((index == 568))
            {
                return GetView568();
            }
            if ((index == 569))
            {
                return GetView569();
            }
            if ((index == 570))
            {
                return GetView570();
            }
            if ((index == 571))
            {
                return GetView571();
            }
            if ((index == 572))
            {
                return GetView572();
            }
            if ((index == 573))
            {
                return GetView573();
            }
            if ((index == 574))
            {
                return GetView574();
            }
            if ((index == 575))
            {
                return GetView575();
            }
            if ((index == 576))
            {
                return GetView576();
            }
            if ((index == 577))
            {
                return GetView577();
            }
            if ((index == 578))
            {
                return GetView578();
            }
            if ((index == 579))
            {
                return GetView579();
            }
            if ((index == 580))
            {
                return GetView580();
            }
            if ((index == 581))
            {
                return GetView581();
            }
            if ((index == 582))
            {
                return GetView582();
            }
            if ((index == 583))
            {
                return GetView583();
            }
            if ((index == 584))
            {
                return GetView584();
            }
            if ((index == 585))
            {
                return GetView585();
            }
            if ((index == 586))
            {
                return GetView586();
            }
            if ((index == 587))
            {
                return GetView587();
            }
            if ((index == 588))
            {
                return GetView588();
            }
            if ((index == 589))
            {
                return GetView589();
            }
            if ((index == 590))
            {
                return GetView590();
            }
            if ((index == 591))
            {
                return GetView591();
            }
            if ((index == 592))
            {
                return GetView592();
            }
            if ((index == 593))
            {
                return GetView593();
            }
            if ((index == 594))
            {
                return GetView594();
            }
            if ((index == 595))
            {
                return GetView595();
            }
            if ((index == 596))
            {
                return GetView596();
            }
            if ((index == 597))
            {
                return GetView597();
            }
            if ((index == 598))
            {
                return GetView598();
            }
            if ((index == 599))
            {
                return GetView599();
            }
            if ((index == 600))
            {
                return GetView600();
            }
            if ((index == 601))
            {
                return GetView601();
            }
            if ((index == 602))
            {
                return GetView602();
            }
            if ((index == 603))
            {
                return GetView603();
            }
            if ((index == 604))
            {
                return GetView604();
            }
            if ((index == 605))
            {
                return GetView605();
            }
            if ((index == 606))
            {
                return GetView606();
            }
            if ((index == 607))
            {
                return GetView607();
            }
            if ((index == 608))
            {
                return GetView608();
            }
            if ((index == 609))
            {
                return GetView609();
            }
            if ((index == 610))
            {
                return GetView610();
            }
            if ((index == 611))
            {
                return GetView611();
            }
            if ((index == 612))
            {
                return GetView612();
            }
            if ((index == 613))
            {
                return GetView613();
            }
            if ((index == 614))
            {
                return GetView614();
            }
            if ((index == 615))
            {
                return GetView615();
            }
            if ((index == 616))
            {
                return GetView616();
            }
            if ((index == 617))
            {
                return GetView617();
            }
            if ((index == 618))
            {
                return GetView618();
            }
            if ((index == 619))
            {
                return GetView619();
            }
            if ((index == 620))
            {
                return GetView620();
            }
            if ((index == 621))
            {
                return GetView621();
            }
            if ((index == 622))
            {
                return GetView622();
            }
            if ((index == 623))
            {
                return GetView623();
            }
            if ((index == 624))
            {
                return GetView624();
            }
            if ((index == 625))
            {
                return GetView625();
            }
            if ((index == 626))
            {
                return GetView626();
            }
            if ((index == 627))
            {
                return GetView627();
            }
            if ((index == 628))
            {
                return GetView628();
            }
            if ((index == 629))
            {
                return GetView629();
            }
            if ((index == 630))
            {
                return GetView630();
            }
            if ((index == 631))
            {
                return GetView631();
            }
            if ((index == 632))
            {
                return GetView632();
            }
            if ((index == 633))
            {
                return GetView633();
            }
            if ((index == 634))
            {
                return GetView634();
            }
            if ((index == 635))
            {
                return GetView635();
            }
            if ((index == 636))
            {
                return GetView636();
            }
            if ((index == 637))
            {
                return GetView637();
            }
            if ((index == 638))
            {
                return GetView638();
            }
            if ((index == 639))
            {
                return GetView639();
            }
            if ((index == 640))
            {
                return GetView640();
            }
            if ((index == 641))
            {
                return GetView641();
            }
            if ((index == 642))
            {
                return GetView642();
            }
            if ((index == 643))
            {
                return GetView643();
            }
            if ((index == 644))
            {
                return GetView644();
            }
            if ((index == 645))
            {
                return GetView645();
            }
            if ((index == 646))
            {
                return GetView646();
            }
            if ((index == 647))
            {
                return GetView647();
            }
            if ((index == 648))
            {
                return GetView648();
            }
            if ((index == 649))
            {
                return GetView649();
            }
            if ((index == 650))
            {
                return GetView650();
            }
            if ((index == 651))
            {
                return GetView651();
            }
            if ((index == 652))
            {
                return GetView652();
            }
            if ((index == 653))
            {
                return GetView653();
            }
            if ((index == 654))
            {
                return GetView654();
            }
            if ((index == 655))
            {
                return GetView655();
            }
            if ((index == 656))
            {
                return GetView656();
            }
            if ((index == 657))
            {
                return GetView657();
            }
            if ((index == 658))
            {
                return GetView658();
            }
            if ((index == 659))
            {
                return GetView659();
            }
            if ((index == 660))
            {
                return GetView660();
            }
            if ((index == 661))
            {
                return GetView661();
            }
            if ((index == 662))
            {
                return GetView662();
            }
            if ((index == 663))
            {
                return GetView663();
            }
            if ((index == 664))
            {
                return GetView664();
            }
            if ((index == 665))
            {
                return GetView665();
            }
            if ((index == 666))
            {
                return GetView666();
            }
            if ((index == 667))
            {
                return GetView667();
            }
            if ((index == 668))
            {
                return GetView668();
            }
            if ((index == 669))
            {
                return GetView669();
            }
            if ((index == 670))
            {
                return GetView670();
            }
            if ((index == 671))
            {
                return GetView671();
            }
            if ((index == 672))
            {
                return GetView672();
            }
            if ((index == 673))
            {
                return GetView673();
            }
            if ((index == 674))
            {
                return GetView674();
            }
            if ((index == 675))
            {
                return GetView675();
            }
            if ((index == 676))
            {
                return GetView676();
            }
            if ((index == 677))
            {
                return GetView677();
            }
            if ((index == 678))
            {
                return GetView678();
            }
            if ((index == 679))
            {
                return GetView679();
            }
            if ((index == 680))
            {
                return GetView680();
            }
            if ((index == 681))
            {
                return GetView681();
            }
            if ((index == 682))
            {
                return GetView682();
            }
            if ((index == 683))
            {
                return GetView683();
            }
            if ((index == 684))
            {
                return GetView684();
            }
            if ((index == 685))
            {
                return GetView685();
            }
            if ((index == 686))
            {
                return GetView686();
            }
            if ((index == 687))
            {
                return GetView687();
            }
            if ((index == 688))
            {
                return GetView688();
            }
            if ((index == 689))
            {
                return GetView689();
            }
            if ((index == 690))
            {
                return GetView690();
            }
            if ((index == 691))
            {
                return GetView691();
            }
            if ((index == 692))
            {
                return GetView692();
            }
            if ((index == 693))
            {
                return GetView693();
            }
            if ((index == 694))
            {
                return GetView694();
            }
            if ((index == 695))
            {
                return GetView695();
            }
            if ((index == 696))
            {
                return GetView696();
            }
            if ((index == 697))
            {
                return GetView697();
            }
            if ((index == 698))
            {
                return GetView698();
            }
            if ((index == 699))
            {
                return GetView699();
            }
            if ((index == 700))
            {
                return GetView700();
            }
            if ((index == 701))
            {
                return GetView701();
            }
            if ((index == 702))
            {
                return GetView702();
            }
            if ((index == 703))
            {
                return GetView703();
            }
            if ((index == 704))
            {
                return GetView704();
            }
            if ((index == 705))
            {
                return GetView705();
            }
            if ((index == 706))
            {
                return GetView706();
            }
            if ((index == 707))
            {
                return GetView707();
            }
            if ((index == 708))
            {
                return GetView708();
            }
            if ((index == 709))
            {
                return GetView709();
            }
            if ((index == 710))
            {
                return GetView710();
            }
            if ((index == 711))
            {
                return GetView711();
            }
            if ((index == 712))
            {
                return GetView712();
            }
            if ((index == 713))
            {
                return GetView713();
            }
            if ((index == 714))
            {
                return GetView714();
            }
            if ((index == 715))
            {
                return GetView715();
            }
            if ((index == 716))
            {
                return GetView716();
            }
            if ((index == 717))
            {
                return GetView717();
            }
            if ((index == 718))
            {
                return GetView718();
            }
            if ((index == 719))
            {
                return GetView719();
            }
            if ((index == 720))
            {
                return GetView720();
            }
            if ((index == 721))
            {
                return GetView721();
            }
            if ((index == 722))
            {
                return GetView722();
            }
            if ((index == 723))
            {
                return GetView723();
            }
            if ((index == 724))
            {
                return GetView724();
            }
            if ((index == 725))
            {
                return GetView725();
            }
            if ((index == 726))
            {
                return GetView726();
            }
            if ((index == 727))
            {
                return GetView727();
            }
            if ((index == 728))
            {
                return GetView728();
            }
            if ((index == 729))
            {
                return GetView729();
            }
            if ((index == 730))
            {
                return GetView730();
            }
            if ((index == 731))
            {
                return GetView731();
            }
            if ((index == 732))
            {
                return GetView732();
            }
            if ((index == 733))
            {
                return GetView733();
            }
            if ((index == 734))
            {
                return GetView734();
            }
            if ((index == 735))
            {
                return GetView735();
            }
            if ((index == 736))
            {
                return GetView736();
            }
            if ((index == 737))
            {
                return GetView737();
            }
            if ((index == 738))
            {
                return GetView738();
            }
            if ((index == 739))
            {
                return GetView739();
            }
            if ((index == 740))
            {
                return GetView740();
            }
            if ((index == 741))
            {
                return GetView741();
            }
            if ((index == 742))
            {
                return GetView742();
            }
            if ((index == 743))
            {
                return GetView743();
            }
            if ((index == 744))
            {
                return GetView744();
            }
            if ((index == 745))
            {
                return GetView745();
            }
            if ((index == 746))
            {
                return GetView746();
            }
            if ((index == 747))
            {
                return GetView747();
            }
            if ((index == 748))
            {
                return GetView748();
            }
            if ((index == 749))
            {
                return GetView749();
            }
            if ((index == 750))
            {
                return GetView750();
            }
            if ((index == 751))
            {
                return GetView751();
            }
            if ((index == 752))
            {
                return GetView752();
            }
            if ((index == 753))
            {
                return GetView753();
            }
            if ((index == 754))
            {
                return GetView754();
            }
            if ((index == 755))
            {
                return GetView755();
            }
            if ((index == 756))
            {
                return GetView756();
            }
            if ((index == 757))
            {
                return GetView757();
            }
            if ((index == 758))
            {
                return GetView758();
            }
            if ((index == 759))
            {
                return GetView759();
            }
            if ((index == 760))
            {
                return GetView760();
            }
            if ((index == 761))
            {
                return GetView761();
            }
            if ((index == 762))
            {
                return GetView762();
            }
            if ((index == 763))
            {
                return GetView763();
            }
            if ((index == 764))
            {
                return GetView764();
            }
            if ((index == 765))
            {
                return GetView765();
            }
            if ((index == 766))
            {
                return GetView766();
            }
            if ((index == 767))
            {
                return GetView767();
            }
            if ((index == 768))
            {
                return GetView768();
            }
            if ((index == 769))
            {
                return GetView769();
            }
            if ((index == 770))
            {
                return GetView770();
            }
            if ((index == 771))
            {
                return GetView771();
            }
            if ((index == 772))
            {
                return GetView772();
            }
            if ((index == 773))
            {
                return GetView773();
            }
            if ((index == 774))
            {
                return GetView774();
            }
            if ((index == 775))
            {
                return GetView775();
            }
            if ((index == 776))
            {
                return GetView776();
            }
            if ((index == 777))
            {
                return GetView777();
            }
            if ((index == 778))
            {
                return GetView778();
            }
            if ((index == 779))
            {
                return GetView779();
            }
            if ((index == 780))
            {
                return GetView780();
            }
            if ((index == 781))
            {
                return GetView781();
            }
            if ((index == 782))
            {
                return GetView782();
            }
            if ((index == 783))
            {
                return GetView783();
            }
            if ((index == 784))
            {
                return GetView784();
            }
            if ((index == 785))
            {
                return GetView785();
            }
            if ((index == 786))
            {
                return GetView786();
            }
            if ((index == 787))
            {
                return GetView787();
            }
            if ((index == 788))
            {
                return GetView788();
            }
            if ((index == 789))
            {
                return GetView789();
            }
            if ((index == 790))
            {
                return GetView790();
            }
            if ((index == 791))
            {
                return GetView791();
            }
            if ((index == 792))
            {
                return GetView792();
            }
            if ((index == 793))
            {
                return GetView793();
            }
            if ((index == 794))
            {
                return GetView794();
            }
            if ((index == 795))
            {
                return GetView795();
            }
            if ((index == 796))
            {
                return GetView796();
            }
            if ((index == 797))
            {
                return GetView797();
            }
            if ((index == 798))
            {
                return GetView798();
            }
            if ((index == 799))
            {
                return GetView799();
            }
            if ((index == 800))
            {
                return GetView800();
            }
            if ((index == 801))
            {
                return GetView801();
            }
            throw new System.IndexOutOfRangeException();
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.aspnet_Applications
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView0()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.aspnet_Applications", @"
    SELECT VALUE -- Constructing aspnet_Applications
        [NKD.Module.BusinessObjects.Store.aspnet_Applications](T1.[aspnet_Applications.ApplicationName], T1.[aspnet_Applications.LoweredApplicationName], T1.[aspnet_Applications.ApplicationId], T1.[aspnet_Applications.Description])
    FROM (
        SELECT 
            T.ApplicationName AS [aspnet_Applications.ApplicationName], 
            T.LoweredApplicationName AS [aspnet_Applications.LoweredApplicationName], 
            T.ApplicationId AS [aspnet_Applications.ApplicationId], 
            T.Description AS [aspnet_Applications.Description], 
            True AS _from0
        FROM NKDC.Applications AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.aspnet_Membership
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView1()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2605);
            viewString.Append("\r\n    SELECT VALUE -- Constructing aspnet_Membership\r\n        [NKD.Module.Busine");
            viewString.Append("ssObjects.Store.aspnet_Membership](T1.[aspnet_Membership.ApplicationId], T1.[asp");
            viewString.Append("net_Membership.UserId], T1.[aspnet_Membership.Password], T1.[aspnet_Membership.P");
            viewString.Append("asswordFormat], T1.[aspnet_Membership.PasswordSalt], T1.[aspnet_Membership.Mobil");
            viewString.Append("ePIN], T1.[aspnet_Membership.Email], T1.[aspnet_Membership.LoweredEmail], T1.[as");
            viewString.Append("pnet_Membership.PasswordQuestion], T1.[aspnet_Membership.PasswordAnswer], T1.[as");
            viewString.Append("pnet_Membership.IsApproved], T1.[aspnet_Membership.IsLockedOut], T1.[aspnet_Memb");
            viewString.Append("ership.CreateDate], T1.[aspnet_Membership.LastLoginDate], T1.[aspnet_Membership.");
            viewString.Append("LastPasswordChangedDate], T1.[aspnet_Membership.LastLockoutDate], T1.[aspnet_Mem");
            viewString.Append("bership.FailedPasswordAttemptCount], T1.[aspnet_Membership.FailedPasswordAttempt");
            viewString.Append("WindowStart], T1.[aspnet_Membership.FailedPasswordAnswerAttemptCount], T1.[aspne");
            viewString.Append("t_Membership.FailedPasswordAnswerAttemptWindowStart], T1.[aspnet_Membership.Comm");
            viewString.Append("ent])\r\n    FROM (\r\n        SELECT \r\n            T.ApplicationId AS [aspnet_Membe");
            viewString.Append("rship.ApplicationId], \r\n            T.UserId AS [aspnet_Membership.UserId], \r\n  ");
            viewString.Append("          T.Password AS [aspnet_Membership.Password], \r\n            T.PasswordFo");
            viewString.Append("rmat AS [aspnet_Membership.PasswordFormat], \r\n            T.PasswordSalt AS [asp");
            viewString.Append("net_Membership.PasswordSalt], \r\n            T.MobilePIN AS [aspnet_Membership.Mo");
            viewString.Append("bilePIN], \r\n            T.Email AS [aspnet_Membership.Email], \r\n            T.Lo");
            viewString.Append("weredEmail AS [aspnet_Membership.LoweredEmail], \r\n            T.PasswordQuestion");
            viewString.Append(" AS [aspnet_Membership.PasswordQuestion], \r\n            T.PasswordAnswer AS [asp");
            viewString.Append("net_Membership.PasswordAnswer], \r\n            T.IsApproved AS [aspnet_Membership");
            viewString.Append(".IsApproved], \r\n            T.IsLockedOut AS [aspnet_Membership.IsLockedOut], \r\n");
            viewString.Append("            T.CreateDate AS [aspnet_Membership.CreateDate], \r\n            T.Last");
            viewString.Append("LoginDate AS [aspnet_Membership.LastLoginDate], \r\n            T.LastPasswordChan");
            viewString.Append("gedDate AS [aspnet_Membership.LastPasswordChangedDate], \r\n            T.LastLock");
            viewString.Append("outDate AS [aspnet_Membership.LastLockoutDate], \r\n            T.FailedPasswordAt");
            viewString.Append("temptCount AS [aspnet_Membership.FailedPasswordAttemptCount], \r\n            T.Fa");
            viewString.Append("iledPasswordAttemptWindowStart AS [aspnet_Membership.FailedPasswordAttemptWindow");
            viewString.Append("Start], \r\n            T.FailedPasswordAnswerAttemptCount AS [aspnet_Membership.F");
            viewString.Append("ailedPasswordAnswerAttemptCount], \r\n            T.FailedPasswordAnswerAttemptWin");
            viewString.Append("dowStart AS [aspnet_Membership.FailedPasswordAnswerAttemptWindowStart], \r\n      ");
            viewString.Append("      T.Comment AS [aspnet_Membership.Comment], \r\n            True AS _from0\r\n  ");
            viewString.Append("      FROM NKDC.Memberships AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.aspnet_Membership", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.aspnet_Paths
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView2()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.aspnet_Paths", @"
    SELECT VALUE -- Constructing aspnet_Paths
        [NKD.Module.BusinessObjects.Store.aspnet_Paths](T1.[aspnet_Paths.ApplicationId], T1.[aspnet_Paths.PathId], T1.[aspnet_Paths.Path], T1.[aspnet_Paths.LoweredPath])
    FROM (
        SELECT 
            T.ApplicationId AS [aspnet_Paths.ApplicationId], 
            T.PathId AS [aspnet_Paths.PathId], 
            T.Path AS [aspnet_Paths.Path], 
            T.LoweredPath AS [aspnet_Paths.LoweredPath], 
            True AS _from0
        FROM NKDC.Paths AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.aspnet_PersonalizationAllUsers
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView3()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.aspnet_PersonalizationAllUsers", @"
    SELECT VALUE -- Constructing aspnet_PersonalizationAllUsers
        [NKD.Module.BusinessObjects.Store.aspnet_PersonalizationAllUsers](T1.[aspnet_PersonalizationAllUsers.PathId], T1.[aspnet_PersonalizationAllUsers.PageSettings], T1.[aspnet_PersonalizationAllUsers.LastUpdatedDate])
    FROM (
        SELECT 
            T.PathId AS [aspnet_PersonalizationAllUsers.PathId], 
            T.PageSettings AS [aspnet_PersonalizationAllUsers.PageSettings], 
            T.LastUpdatedDate AS [aspnet_PersonalizationAllUsers.LastUpdatedDate], 
            True AS _from0
        FROM NKDC.PersonalizationAllUsers AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.aspnet_PersonalizationPerUser
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView4()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.aspnet_PersonalizationPerUser", @"
    SELECT VALUE -- Constructing aspnet_PersonalizationPerUser
        [NKD.Module.BusinessObjects.Store.aspnet_PersonalizationPerUser](T1.[aspnet_PersonalizationPerUser.Id], T1.[aspnet_PersonalizationPerUser.PathId], T1.[aspnet_PersonalizationPerUser.UserId], T1.[aspnet_PersonalizationPerUser.PageSettings], T1.[aspnet_PersonalizationPerUser.LastUpdatedDate])
    FROM (
        SELECT 
            T.Id AS [aspnet_PersonalizationPerUser.Id], 
            T.PathId AS [aspnet_PersonalizationPerUser.PathId], 
            T.UserId AS [aspnet_PersonalizationPerUser.UserId], 
            T.PageSettings AS [aspnet_PersonalizationPerUser.PageSettings], 
            T.LastUpdatedDate AS [aspnet_PersonalizationPerUser.LastUpdatedDate], 
            True AS _from0
        FROM NKDC.PersonalizationPerUsers AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.aspnet_Profile
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView5()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.aspnet_Profile", @"
    SELECT VALUE -- Constructing aspnet_Profile
        [NKD.Module.BusinessObjects.Store.aspnet_Profile](T1.[aspnet_Profile.UserId], T1.[aspnet_Profile.PropertyNames], T1.[aspnet_Profile.PropertyValuesString], T1.[aspnet_Profile.PropertyValuesBinary], T1.[aspnet_Profile.LastUpdatedDate])
    FROM (
        SELECT 
            T.UserId AS [aspnet_Profile.UserId], 
            T.PropertyNames AS [aspnet_Profile.PropertyNames], 
            T.PropertyValuesString AS [aspnet_Profile.PropertyValuesString], 
            T.PropertyValuesBinary AS [aspnet_Profile.PropertyValuesBinary], 
            T.LastUpdatedDate AS [aspnet_Profile.LastUpdatedDate], 
            True AS _from0
        FROM NKDC.Profiles AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.aspnet_Roles
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView6()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.aspnet_Roles", @"
    SELECT VALUE -- Constructing aspnet_Roles
        [NKD.Module.BusinessObjects.Store.aspnet_Roles](T1.[aspnet_Roles.ApplicationId], T1.[aspnet_Roles.RoleId], T1.[aspnet_Roles.RoleName], T1.[aspnet_Roles.LoweredRoleName], T1.[aspnet_Roles.Description])
    FROM (
        SELECT 
            T.ApplicationId AS [aspnet_Roles.ApplicationId], 
            T.RoleId AS [aspnet_Roles.RoleId], 
            T.RoleName AS [aspnet_Roles.RoleName], 
            T.LoweredRoleName AS [aspnet_Roles.LoweredRoleName], 
            T.Description AS [aspnet_Roles.Description], 
            True AS _from0
        FROM NKDC.Roles AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.aspnet_Users
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView7()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.aspnet_Users", @"
    SELECT VALUE -- Constructing aspnet_Users
        [NKD.Module.BusinessObjects.Store.aspnet_Users](T1.[aspnet_Users.ApplicationId], T1.[aspnet_Users.UserId], T1.[aspnet_Users.UserName], T1.[aspnet_Users.LoweredUserName], T1.[aspnet_Users.MobileAlias], T1.[aspnet_Users.IsAnonymous], T1.[aspnet_Users.LastActivityDate])
    FROM (
        SELECT 
            T.ApplicationId AS [aspnet_Users.ApplicationId], 
            T.UserId AS [aspnet_Users.UserId], 
            T.UserName AS [aspnet_Users.UserName], 
            T.LoweredUserName AS [aspnet_Users.LoweredUserName], 
            T.MobileAlias AS [aspnet_Users.MobileAlias], 
            T.IsAnonymous AS [aspnet_Users.IsAnonymous], 
            T.LastActivityDate AS [aspnet_Users.LastActivityDate], 
            True AS _from0
        FROM NKDC.Users AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_Credit
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView8()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_Credit", "\r\n    SELECT VALUE -- Constructing E_Credit\r\n        [NKD.Module.BusinessObjects." +
                    "Store.E_Credit](T1.[E_Credit.CreditID], T1.[E_Credit.SupplyID], T1.[E_Credit.Inv" +
                    "oiceID], T1.[E_Credit.InvoiceLineID], T1.[E_Credit.IsCreditNote], T1.[E_Credit.I" +
                    "sRefund], T1.[E_Credit.OriginalCredit], T1.[E_Credit.CurrencyID], T1.[E_Credit.C" +
                    "reditAmount], T1.[E_Credit.Version], T1.[E_Credit.VersionAntecedentID], T1.[E_Cr" +
                    "edit.VersionCertainty], T1.[E_Credit.VersionWorkflowInstanceID], T1.[E_Credit.Ve" +
                    "rsionUpdatedBy], T1.[E_Credit.VersionDeletedBy], T1.[E_Credit.VersionOwnerContac" +
                    "tID], T1.[E_Credit.VersionOwnerCompanyID], T1.[E_Credit.VersionUpdated])\r\n    FR" +
                    "OM (\r\n        SELECT \r\n            T.CreditID AS [E_Credit.CreditID], \r\n        " +
                    "    T.SupplyID AS [E_Credit.SupplyID], \r\n            T.InvoiceID AS [E_Credit.In" +
                    "voiceID], \r\n            T.InvoiceLineID AS [E_Credit.InvoiceLineID], \r\n         " +
                    "   T.IsCreditNote AS [E_Credit.IsCreditNote], \r\n            T.IsRefund AS [E_Cre" +
                    "dit.IsRefund], \r\n            T.OriginalCredit AS [E_Credit.OriginalCredit], \r\n  " +
                    "          T.CurrencyID AS [E_Credit.CurrencyID], \r\n            T.CreditAmount AS" +
                    " [E_Credit.CreditAmount], \r\n            T.Version AS [E_Credit.Version], \r\n     " +
                    "       T.VersionAntecedentID AS [E_Credit.VersionAntecedentID], \r\n            T." +
                    "VersionCertainty AS [E_Credit.VersionCertainty], \r\n            T.VersionWorkflow" +
                    "InstanceID AS [E_Credit.VersionWorkflowInstanceID], \r\n            T.VersionUpdat" +
                    "edBy AS [E_Credit.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [E_Cred" +
                    "it.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [E_Credit.Version" +
                    "OwnerContactID], \r\n            T.VersionOwnerCompanyID AS [E_Credit.VersionOwner" +
                    "CompanyID], \r\n            T.VersionUpdated AS [E_Credit.VersionUpdated], \r\n     " +
                    "       True AS _from0\r\n        FROM NKDC.Credits AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_Currency
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView9()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_Currency", "\r\n    SELECT VALUE -- Constructing E_Currency\r\n        [NKD.Module.BusinessObject" +
                    "s.Store.E_Currency](T1.[E_Currency.CurrencyID], T1.[E_Currency.CountryID], T1.[E" +
                    "_Currency.PrefixCharacters], T1.[E_Currency.PostfixCharacters], T1.[E_Currency.E" +
                    "quivalentMultiplier], T1.[E_Currency.BuyMultiplier], T1.[E_Currency.SellMultipli" +
                    "er], T1.[E_Currency.Version], T1.[E_Currency.VersionAntecedentID], T1.[E_Currenc" +
                    "y.VersionCertainty], T1.[E_Currency.VersionWorkflowInstanceID], T1.[E_Currency.V" +
                    "ersionUpdatedBy], T1.[E_Currency.VersionDeletedBy], T1.[E_Currency.VersionOwnerC" +
                    "ontactID], T1.[E_Currency.VersionOwnerCompanyID], T1.[E_Currency.VersionUpdated]" +
                    ")\r\n    FROM (\r\n        SELECT \r\n            T.CurrencyID AS [E_Currency.Currency" +
                    "ID], \r\n            T.CountryID AS [E_Currency.CountryID], \r\n            T.Prefix" +
                    "Characters AS [E_Currency.PrefixCharacters], \r\n            T.PostfixCharacters A" +
                    "S [E_Currency.PostfixCharacters], \r\n            T.EquivalentMultiplier AS [E_Cur" +
                    "rency.EquivalentMultiplier], \r\n            T.BuyMultiplier AS [E_Currency.BuyMul" +
                    "tiplier], \r\n            T.SellMultiplier AS [E_Currency.SellMultiplier], \r\n     " +
                    "       T.Version AS [E_Currency.Version], \r\n            T.VersionAntecedentID AS" +
                    " [E_Currency.VersionAntecedentID], \r\n            T.VersionCertainty AS [E_Curren" +
                    "cy.VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [E_Currency.V" +
                    "ersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [E_Currency.Versi" +
                    "onUpdatedBy], \r\n            T.VersionDeletedBy AS [E_Currency.VersionDeletedBy]," +
                    " \r\n            T.VersionOwnerContactID AS [E_Currency.VersionOwnerContactID], \r\n" +
                    "            T.VersionOwnerCompanyID AS [E_Currency.VersionOwnerCompanyID], \r\n   " +
                    "         T.VersionUpdated AS [E_Currency.VersionUpdated], \r\n            True AS " +
                    "_from0\r\n        FROM NKDC.Currencies AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_DictionaryTax
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView10()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2311);
            viewString.Append("\r\n    SELECT VALUE -- Constructing E_DictionaryTax\r\n        [NKD.Module.Business");
            viewString.Append("Objects.Store.E_DictionaryTax](T1.[E_DictionaryTax.TaxID], T1.[E_DictionaryTax.T");
            viewString.Append("axName], T1.[E_DictionaryTax.TaxRate], T1.[E_DictionaryTax.TaxRateUnitID], T1.[E");
            viewString.Append("_DictionaryTax.CountryID], T1.[E_DictionaryTax.CountryStateID], T1.[E_Dictionary");
            viewString.Append("Tax.ProvinceID], T1.[E_DictionaryTax.ApplicableFrom], T1.[E_DictionaryTax.Applic");
            viewString.Append("ableUntil], T1.[E_DictionaryTax.BracketMinimum], T1.[E_DictionaryTax.BracketMaxi");
            viewString.Append("mum], T1.[E_DictionaryTax.Version], T1.[E_DictionaryTax.VersionAntecedentID], T1");
            viewString.Append(".[E_DictionaryTax.VersionCertainty], T1.[E_DictionaryTax.VersionWorkflowInstance");
            viewString.Append("ID], T1.[E_DictionaryTax.VersionUpdatedBy], T1.[E_DictionaryTax.VersionDeletedBy");
            viewString.Append("], T1.[E_DictionaryTax.VersionOwnerContactID], T1.[E_DictionaryTax.VersionOwnerC");
            viewString.Append("ompanyID], T1.[E_DictionaryTax.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n  ");
            viewString.Append("          T.TaxID AS [E_DictionaryTax.TaxID], \r\n            T.TaxName AS [E_Dict");
            viewString.Append("ionaryTax.TaxName], \r\n            T.TaxRate AS [E_DictionaryTax.TaxRate], \r\n    ");
            viewString.Append("        T.TaxRateUnitID AS [E_DictionaryTax.TaxRateUnitID], \r\n            T.Coun");
            viewString.Append("tryID AS [E_DictionaryTax.CountryID], \r\n            T.CountryStateID AS [E_Dicti");
            viewString.Append("onaryTax.CountryStateID], \r\n            T.ProvinceID AS [E_DictionaryTax.Provinc");
            viewString.Append("eID], \r\n            T.ApplicableFrom AS [E_DictionaryTax.ApplicableFrom], \r\n    ");
            viewString.Append("        T.ApplicableUntil AS [E_DictionaryTax.ApplicableUntil], \r\n            T.");
            viewString.Append("BracketMinimum AS [E_DictionaryTax.BracketMinimum], \r\n            T.BracketMaxim");
            viewString.Append("um AS [E_DictionaryTax.BracketMaximum], \r\n            T.Version AS [E_Dictionary");
            viewString.Append("Tax.Version], \r\n            T.VersionAntecedentID AS [E_DictionaryTax.VersionAnt");
            viewString.Append("ecedentID], \r\n            T.VersionCertainty AS [E_DictionaryTax.VersionCertaint");
            viewString.Append("y], \r\n            T.VersionWorkflowInstanceID AS [E_DictionaryTax.VersionWorkflo");
            viewString.Append("wInstanceID], \r\n            T.VersionUpdatedBy AS [E_DictionaryTax.VersionUpdate");
            viewString.Append("dBy], \r\n            T.VersionDeletedBy AS [E_DictionaryTax.VersionDeletedBy], \r\n");
            viewString.Append("            T.VersionOwnerContactID AS [E_DictionaryTax.VersionOwnerContactID], ");
            viewString.Append("\r\n            T.VersionOwnerCompanyID AS [E_DictionaryTax.VersionOwnerCompanyID]");
            viewString.Append(", \r\n            T.VersionUpdated AS [E_DictionaryTax.VersionUpdated], \r\n        ");
            viewString.Append("    True AS _from0\r\n        FROM NKDC.DictionaryTaxes AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_DictionaryTax", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_Invoice
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView11()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3366);
            viewString.Append("\r\n    SELECT VALUE -- Constructing E_Invoice\r\n        [NKD.Module.BusinessObject");
            viewString.Append("s.Store.E_Invoice](T1.[E_Invoice.InvoiceID], T1.[E_Invoice.SupplyID], T1.[E_Invo");
            viewString.Append("ice.Sequence], T1.[E_Invoice.SupplierContactID], T1.[E_Invoice.SupplierCompanyID");
            viewString.Append("], T1.[E_Invoice.SupplierAddressID], T1.[E_Invoice.SupplierAccountID], T1.[E_Inv");
            viewString.Append("oice.SupplierReferenceNumber], T1.[E_Invoice.CustomerContactID], T1.[E_Invoice.C");
            viewString.Append("ustomerCompanyID], T1.[E_Invoice.CustomerAddressID], T1.[E_Invoice.CustomerAccou");
            viewString.Append("ntID], T1.[E_Invoice.CustomerReferenceNumber], T1.[E_Invoice.FreightTax], T1.[E_");
            viewString.Append("Invoice.FreightAmount], T1.[E_Invoice.DiscountIncludesFreight], T1.[E_Invoice.Di");
            viewString.Append("scountAllFreight], T1.[E_Invoice.DiscountAmount], T1.[E_Invoice.TaxAmount], T1.[");
            viewString.Append("E_Invoice.OriginalTotal], T1.[E_Invoice.CurrencyID], T1.[E_Invoice.Total], T1.[E");
            viewString.Append("_Invoice.Dated], T1.[E_Invoice.Communicated], T1.[E_Invoice.Version], T1.[E_Invo");
            viewString.Append("ice.VersionAntecedentID], T1.[E_Invoice.VersionCertainty], T1.[E_Invoice.Version");
            viewString.Append("WorkflowInstanceID], T1.[E_Invoice.VersionUpdatedBy], T1.[E_Invoice.VersionDelet");
            viewString.Append("edBy], T1.[E_Invoice.VersionOwnerContactID], T1.[E_Invoice.VersionOwnerCompanyID");
            viewString.Append("], T1.[E_Invoice.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.In");
            viewString.Append("voiceID AS [E_Invoice.InvoiceID], \r\n            T.SupplyID AS [E_Invoice.SupplyI");
            viewString.Append("D], \r\n            T.Sequence AS [E_Invoice.Sequence], \r\n            T.SupplierCo");
            viewString.Append("ntactID AS [E_Invoice.SupplierContactID], \r\n            T.SupplierCompanyID AS [");
            viewString.Append("E_Invoice.SupplierCompanyID], \r\n            T.SupplierAddressID AS [E_Invoice.Su");
            viewString.Append("pplierAddressID], \r\n            T.SupplierAccountID AS [E_Invoice.SupplierAccoun");
            viewString.Append("tID], \r\n            T.SupplierReferenceNumber AS [E_Invoice.SupplierReferenceNum");
            viewString.Append("ber], \r\n            T.CustomerContactID AS [E_Invoice.CustomerContactID], \r\n    ");
            viewString.Append("        T.CustomerCompanyID AS [E_Invoice.CustomerCompanyID], \r\n            T.Cu");
            viewString.Append("stomerAddressID AS [E_Invoice.CustomerAddressID], \r\n            T.CustomerAccoun");
            viewString.Append("tID AS [E_Invoice.CustomerAccountID], \r\n            T.CustomerReferenceNumber AS");
            viewString.Append(" [E_Invoice.CustomerReferenceNumber], \r\n            T.FreightTax AS [E_Invoice.F");
            viewString.Append("reightTax], \r\n            T.FreightAmount AS [E_Invoice.FreightAmount], \r\n      ");
            viewString.Append("      T.DiscountIncludesFreight AS [E_Invoice.DiscountIncludesFreight], \r\n      ");
            viewString.Append("      T.DiscountAllFreight AS [E_Invoice.DiscountAllFreight], \r\n            T.Di");
            viewString.Append("scountAmount AS [E_Invoice.DiscountAmount], \r\n            T.TaxAmount AS [E_Invo");
            viewString.Append("ice.TaxAmount], \r\n            T.OriginalTotal AS [E_Invoice.OriginalTotal], \r\n  ");
            viewString.Append("          T.CurrencyID AS [E_Invoice.CurrencyID], \r\n            T.Total AS [E_In");
            viewString.Append("voice.Total], \r\n            T.Dated AS [E_Invoice.Dated], \r\n            T.Commun");
            viewString.Append("icated AS [E_Invoice.Communicated], \r\n            T.Version AS [E_Invoice.Versio");
            viewString.Append("n], \r\n            T.VersionAntecedentID AS [E_Invoice.VersionAntecedentID], \r\n  ");
            viewString.Append("          T.VersionCertainty AS [E_Invoice.VersionCertainty], \r\n            T.Ve");
            viewString.Append("rsionWorkflowInstanceID AS [E_Invoice.VersionWorkflowInstanceID], \r\n            ");
            viewString.Append("T.VersionUpdatedBy AS [E_Invoice.VersionUpdatedBy], \r\n            T.VersionDelet");
            viewString.Append("edBy AS [E_Invoice.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [");
            viewString.Append("E_Invoice.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [E_In");
            viewString.Append("voice.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [E_Invoice.Versi");
            viewString.Append("onUpdated], \r\n            True AS _from0\r\n        FROM NKDC.Invoices AS T\r\n    )");
            viewString.Append(" AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_Invoice", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_InvoiceLine
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView12()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2458);
            viewString.Append("\r\n    SELECT VALUE -- Constructing E_InvoiceLine\r\n        [NKD.Module.BusinessOb");
            viewString.Append("jects.Store.E_InvoiceLine](T1.[E_InvoiceLine.InvoiceLineID], T1.[E_InvoiceLine.I");
            viewString.Append("nvoiceID], T1.[E_InvoiceLine.Sequence], T1.[E_InvoiceLine.SupplyItemID], T1.[E_I");
            viewString.Append("nvoiceLine.ReferenceType], T1.[E_InvoiceLine.ReferenceID], T1.[E_InvoiceLine.Des");
            viewString.Append("cription], T1.[E_InvoiceLine.Quantity], T1.[E_InvoiceLine.TaxID], T1.[E_InvoiceL");
            viewString.Append("ine.Tax], T1.[E_InvoiceLine.DiscountAmount], T1.[E_InvoiceLine.OriginalSubtotal]");
            viewString.Append(", T1.[E_InvoiceLine.CurrencyID], T1.[E_InvoiceLine.Subtotal], T1.[E_InvoiceLine.");
            viewString.Append("Version], T1.[E_InvoiceLine.VersionAntecedentID], T1.[E_InvoiceLine.VersionCerta");
            viewString.Append("inty], T1.[E_InvoiceLine.VersionWorkflowInstanceID], T1.[E_InvoiceLine.VersionUp");
            viewString.Append("datedBy], T1.[E_InvoiceLine.VersionDeletedBy], T1.[E_InvoiceLine.VersionOwnerCon");
            viewString.Append("tactID], T1.[E_InvoiceLine.VersionOwnerCompanyID], T1.[E_InvoiceLine.VersionUpda");
            viewString.Append("ted])\r\n    FROM (\r\n        SELECT \r\n            T.InvoiceLineID AS [E_InvoiceLin");
            viewString.Append("e.InvoiceLineID], \r\n            T.InvoiceID AS [E_InvoiceLine.InvoiceID], \r\n    ");
            viewString.Append("        T.Sequence AS [E_InvoiceLine.Sequence], \r\n            T.SupplyItemID AS ");
            viewString.Append("[E_InvoiceLine.SupplyItemID], \r\n            T.ReferenceType AS [E_InvoiceLine.Re");
            viewString.Append("ferenceType], \r\n            T.ReferenceID AS [E_InvoiceLine.ReferenceID], \r\n    ");
            viewString.Append("        T.Description AS [E_InvoiceLine.Description], \r\n            T.Quantity A");
            viewString.Append("S [E_InvoiceLine.Quantity], \r\n            T.TaxID AS [E_InvoiceLine.TaxID], \r\n  ");
            viewString.Append("          T.Tax AS [E_InvoiceLine.Tax], \r\n            T.DiscountAmount AS [E_Inv");
            viewString.Append("oiceLine.DiscountAmount], \r\n            T.OriginalSubtotal AS [E_InvoiceLine.Ori");
            viewString.Append("ginalSubtotal], \r\n            T.CurrencyID AS [E_InvoiceLine.CurrencyID], \r\n    ");
            viewString.Append("        T.Subtotal AS [E_InvoiceLine.Subtotal], \r\n            T.Version AS [E_In");
            viewString.Append("voiceLine.Version], \r\n            T.VersionAntecedentID AS [E_InvoiceLine.Versio");
            viewString.Append("nAntecedentID], \r\n            T.VersionCertainty AS [E_InvoiceLine.VersionCertai");
            viewString.Append("nty], \r\n            T.VersionWorkflowInstanceID AS [E_InvoiceLine.VersionWorkflo");
            viewString.Append("wInstanceID], \r\n            T.VersionUpdatedBy AS [E_InvoiceLine.VersionUpdatedB");
            viewString.Append("y], \r\n            T.VersionDeletedBy AS [E_InvoiceLine.VersionDeletedBy], \r\n    ");
            viewString.Append("        T.VersionOwnerContactID AS [E_InvoiceLine.VersionOwnerContactID], \r\n    ");
            viewString.Append("        T.VersionOwnerCompanyID AS [E_InvoiceLine.VersionOwnerCompanyID], \r\n    ");
            viewString.Append("        T.VersionUpdated AS [E_InvoiceLine.VersionUpdated], \r\n            True A");
            viewString.Append("S _from0\r\n        FROM NKDC.InvoiceLines AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_InvoiceLine", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_Journal
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView13()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_Journal", "\r\n    SELECT VALUE -- Constructing E_Journal\r\n        [NKD.Module.BusinessObjects" +
                    ".Store.E_Journal](T1.[E_Journal.JournalID], T1.[E_Journal.ReferenceType], T1.[E_" +
                    "Journal.ReferenceID], T1.[E_Journal.ReferenceDate], T1.[E_Journal.AccountID], T1" +
                    ".[E_Journal.OriginalAmount], T1.[E_Journal.CurrencyID], T1.[E_Journal.Amount], T" +
                    "1.[E_Journal.Version], T1.[E_Journal.VersionAntecedentID], T1.[E_Journal.Version" +
                    "Certainty], T1.[E_Journal.VersionWorkflowInstanceID], T1.[E_Journal.VersionUpdat" +
                    "edBy], T1.[E_Journal.VersionDeletedBy], T1.[E_Journal.VersionOwnerContactID], T1" +
                    ".[E_Journal.VersionOwnerCompanyID], T1.[E_Journal.VersionUpdated])\r\n    FROM (\r\n" +
                    "        SELECT \r\n            T.JournalID AS [E_Journal.JournalID], \r\n           " +
                    " T.ReferenceType AS [E_Journal.ReferenceType], \r\n            T.ReferenceID AS [E" +
                    "_Journal.ReferenceID], \r\n            T.ReferenceDate AS [E_Journal.ReferenceDate" +
                    "], \r\n            T.AccountID AS [E_Journal.AccountID], \r\n            T.OriginalA" +
                    "mount AS [E_Journal.OriginalAmount], \r\n            T.CurrencyID AS [E_Journal.Cu" +
                    "rrencyID], \r\n            T.Amount AS [E_Journal.Amount], \r\n            T.Version" +
                    " AS [E_Journal.Version], \r\n            T.VersionAntecedentID AS [E_Journal.Versi" +
                    "onAntecedentID], \r\n            T.VersionCertainty AS [E_Journal.VersionCertainty" +
                    "], \r\n            T.VersionWorkflowInstanceID AS [E_Journal.VersionWorkflowInstan" +
                    "ceID], \r\n            T.VersionUpdatedBy AS [E_Journal.VersionUpdatedBy], \r\n     " +
                    "       T.VersionDeletedBy AS [E_Journal.VersionDeletedBy], \r\n            T.Versi" +
                    "onOwnerContactID AS [E_Journal.VersionOwnerContactID], \r\n            T.VersionOw" +
                    "nerCompanyID AS [E_Journal.VersionOwnerCompanyID], \r\n            T.VersionUpdate" +
                    "d AS [E_Journal.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC" +
                    ".Journals AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_Payment
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView14()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2493);
            viewString.Append("\r\n    SELECT VALUE -- Constructing E_Payment\r\n        [NKD.Module.BusinessObject");
            viewString.Append("s.Store.E_Payment](T1.[E_Payment.PaymentID], T1.[E_Payment.SupplierAccountID], T");
            viewString.Append("1.[E_Payment.SupplierContactID], T1.[E_Payment.CustomerAccountID], T1.[E_Payment");
            viewString.Append(".CustomerContactID], T1.[E_Payment.OriginalAmount], T1.[E_Payment.CurrencyID], T");
            viewString.Append("1.[E_Payment.Amount], T1.[E_Payment.InternalReferenceTableType], T1.[E_Payment.I");
            viewString.Append("nternalReferenceID], T1.[E_Payment.InternalReferenceName], T1.[E_Payment.Externa");
            viewString.Append("lProviderType], T1.[E_Payment.ExternalReferenceName], T1.[E_Payment.Paid], T1.[E");
            viewString.Append("_Payment.Version], T1.[E_Payment.VersionAntecedentID], T1.[E_Payment.VersionCert");
            viewString.Append("ainty], T1.[E_Payment.VersionWorkflowInstanceID], T1.[E_Payment.VersionUpdatedBy");
            viewString.Append("], T1.[E_Payment.VersionDeletedBy], T1.[E_Payment.VersionOwnerContactID], T1.[E_");
            viewString.Append("Payment.VersionOwnerCompanyID], T1.[E_Payment.VersionUpdated])\r\n    FROM (\r\n    ");
            viewString.Append("    SELECT \r\n            T.PaymentID AS [E_Payment.PaymentID], \r\n            T.S");
            viewString.Append("upplierAccountID AS [E_Payment.SupplierAccountID], \r\n            T.SupplierConta");
            viewString.Append("ctID AS [E_Payment.SupplierContactID], \r\n            T.CustomerAccountID AS [E_P");
            viewString.Append("ayment.CustomerAccountID], \r\n            T.CustomerContactID AS [E_Payment.Custo");
            viewString.Append("merContactID], \r\n            T.OriginalAmount AS [E_Payment.OriginalAmount], \r\n ");
            viewString.Append("           T.CurrencyID AS [E_Payment.CurrencyID], \r\n            T.Amount AS [E_");
            viewString.Append("Payment.Amount], \r\n            T.InternalReferenceTableType AS [E_Payment.Intern");
            viewString.Append("alReferenceTableType], \r\n            T.InternalReferenceID AS [E_Payment.Interna");
            viewString.Append("lReferenceID], \r\n            T.InternalReferenceName AS [E_Payment.InternalRefer");
            viewString.Append("enceName], \r\n            T.ExternalProviderType AS [E_Payment.ExternalProviderTy");
            viewString.Append("pe], \r\n            T.ExternalReferenceName AS [E_Payment.ExternalReferenceName],");
            viewString.Append(" \r\n            T.Paid AS [E_Payment.Paid], \r\n            T.Version AS [E_Payment");
            viewString.Append(".Version], \r\n            T.VersionAntecedentID AS [E_Payment.VersionAntecedentID");
            viewString.Append("], \r\n            T.VersionCertainty AS [E_Payment.VersionCertainty], \r\n         ");
            viewString.Append("   T.VersionWorkflowInstanceID AS [E_Payment.VersionWorkflowInstanceID], \r\n     ");
            viewString.Append("       T.VersionUpdatedBy AS [E_Payment.VersionUpdatedBy], \r\n            T.Versi");
            viewString.Append("onDeletedBy AS [E_Payment.VersionDeletedBy], \r\n            T.VersionOwnerContact");
            viewString.Append("ID AS [E_Payment.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID A");
            viewString.Append("S [E_Payment.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [E_Paymen");
            viewString.Append("t.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.Payments AS T");
            viewString.Append("\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_Payment", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_PurchaseOrder
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView15()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3132);
            viewString.Append("\r\n    SELECT VALUE -- Constructing E_PurchaseOrder\r\n        [NKD.Module.Business");
            viewString.Append("Objects.Store.E_PurchaseOrder](T1.[E_PurchaseOrder.PurchaseOrderID], T1.[E_Purch");
            viewString.Append("aseOrder.ParentPurchaseOrderID], T1.[E_PurchaseOrder.PurchaseName], T1.[E_Purcha");
            viewString.Append("seOrder.ReferenceCode], T1.[E_PurchaseOrder.ReferenceSystem], T1.[E_PurchaseOrde");
            viewString.Append("r.Sequence], T1.[E_PurchaseOrder.OriginalSubtotal], T1.[E_PurchaseOrder.Currency");
            viewString.Append("ID], T1.[E_PurchaseOrder.Subtotal], T1.[E_PurchaseOrder.Ordered], T1.[E_Purchase");
            viewString.Append("Order.OrderStatusID], T1.[E_PurchaseOrder.ProjectID], T1.[E_PurchaseOrder.Custom");
            viewString.Append("erCompanyID], T1.[E_PurchaseOrder.CustomerContactID], T1.[E_PurchaseOrder.Custom");
            viewString.Append("erAccountID], T1.[E_PurchaseOrder.SupplierCompanyID], T1.[E_PurchaseOrder.Suppli");
            viewString.Append("erContactID], T1.[E_PurchaseOrder.SupplierAccountID], T1.[E_PurchaseOrder.Versio");
            viewString.Append("n], T1.[E_PurchaseOrder.VersionAntecedentID], T1.[E_PurchaseOrder.VersionCertain");
            viewString.Append("ty], T1.[E_PurchaseOrder.VersionWorkflowInstanceID], T1.[E_PurchaseOrder.Version");
            viewString.Append("UpdatedBy], T1.[E_PurchaseOrder.VersionDeletedBy], T1.[E_PurchaseOrder.VersionOw");
            viewString.Append("nerContactID], T1.[E_PurchaseOrder.VersionOwnerCompanyID], T1.[E_PurchaseOrder.V");
            viewString.Append("ersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.PurchaseOrderID AS [");
            viewString.Append("E_PurchaseOrder.PurchaseOrderID], \r\n            T.ParentPurchaseOrderID AS [E_Pu");
            viewString.Append("rchaseOrder.ParentPurchaseOrderID], \r\n            T.PurchaseName AS [E_PurchaseO");
            viewString.Append("rder.PurchaseName], \r\n            T.ReferenceCode AS [E_PurchaseOrder.ReferenceC");
            viewString.Append("ode], \r\n            T.ReferenceSystem AS [E_PurchaseOrder.ReferenceSystem], \r\n  ");
            viewString.Append("          T.Sequence AS [E_PurchaseOrder.Sequence], \r\n            T.OriginalSubt");
            viewString.Append("otal AS [E_PurchaseOrder.OriginalSubtotal], \r\n            T.CurrencyID AS [E_Pur");
            viewString.Append("chaseOrder.CurrencyID], \r\n            T.Subtotal AS [E_PurchaseOrder.Subtotal], ");
            viewString.Append("\r\n            T.Ordered AS [E_PurchaseOrder.Ordered], \r\n            T.OrderStatu");
            viewString.Append("sID AS [E_PurchaseOrder.OrderStatusID], \r\n            T.ProjectID AS [E_Purchase");
            viewString.Append("Order.ProjectID], \r\n            T.CustomerCompanyID AS [E_PurchaseOrder.Customer");
            viewString.Append("CompanyID], \r\n            T.CustomerContactID AS [E_PurchaseOrder.CustomerContac");
            viewString.Append("tID], \r\n            T.CustomerAccountID AS [E_PurchaseOrder.CustomerAccountID], ");
            viewString.Append("\r\n            T.SupplierCompanyID AS [E_PurchaseOrder.SupplierCompanyID], \r\n    ");
            viewString.Append("        T.SupplierContactID AS [E_PurchaseOrder.SupplierContactID], \r\n          ");
            viewString.Append("  T.SupplierAccountID AS [E_PurchaseOrder.SupplierAccountID], \r\n            T.Ve");
            viewString.Append("rsion AS [E_PurchaseOrder.Version], \r\n            T.VersionAntecedentID AS [E_Pu");
            viewString.Append("rchaseOrder.VersionAntecedentID], \r\n            T.VersionCertainty AS [E_Purchas");
            viewString.Append("eOrder.VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [E_Purcha");
            viewString.Append("seOrder.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [E_Purch");
            viewString.Append("aseOrder.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [E_PurchaseOrder");
            viewString.Append(".VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [E_PurchaseOrder.Ve");
            viewString.Append("rsionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [E_PurchaseOrder.");
            viewString.Append("VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [E_PurchaseOrder.Versi");
            viewString.Append("onUpdated], \r\n            True AS _from0\r\n        FROM NKDC.PurchaseOrders AS T\r");
            viewString.Append("\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_PurchaseOrder", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_Supply
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView16()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2834);
            viewString.Append("\r\n    SELECT VALUE -- Constructing E_Supply\r\n        [NKD.Module.BusinessObjects");
            viewString.Append(".Store.E_Supply](T1.[E_Supply.SupplyID], T1.[E_Supply.ParentSupplyID], T1.[E_Sup");
            viewString.Append("ply.ProjectID], T1.[E_Supply.Sequence], T1.[E_Supply.CustomerPurchaseOrderID], T");
            viewString.Append("1.[E_Supply.CustomerApprovedBy], T1.[E_Supply.SupplierPurchaseOrderID], T1.[E_Su");
            viewString.Append("pply.SupplierApprovedBy], T1.[E_Supply.IsDraft], T1.[E_Supply.IsUnapproved], T1.");
            viewString.Append("[E_Supply.IsDenied], T1.[E_Supply.IsSupplied], T1.[E_Supply.IsReorderSent], T1.[");
            viewString.Append("E_Supply.IsPaid], T1.[E_Supply.IsFinalised], T1.[E_Supply.CurrentProjectDelivera");
            viewString.Append("bleID], T1.[E_Supply.FinalProjectDeliverableID], T1.[E_Supply.DateOrdered], T1.[");
            viewString.Append("E_Supply.PurchasingNotes], T1.[E_Supply.Version], T1.[E_Supply.VersionAntecedent");
            viewString.Append("ID], T1.[E_Supply.VersionCertainty], T1.[E_Supply.VersionWorkflowInstanceID], T1");
            viewString.Append(".[E_Supply.VersionUpdatedBy], T1.[E_Supply.VersionDeletedBy], T1.[E_Supply.Versi");
            viewString.Append("onOwnerContactID], T1.[E_Supply.VersionOwnerCompanyID], T1.[E_Supply.VersionUpda");
            viewString.Append("ted])\r\n    FROM (\r\n        SELECT \r\n            T.SupplyID AS [E_Supply.SupplyID");
            viewString.Append("], \r\n            T.ParentSupplyID AS [E_Supply.ParentSupplyID], \r\n            T.");
            viewString.Append("ProjectID AS [E_Supply.ProjectID], \r\n            T.Sequence AS [E_Supply.Sequenc");
            viewString.Append("e], \r\n            T.CustomerPurchaseOrderID AS [E_Supply.CustomerPurchaseOrderID");
            viewString.Append("], \r\n            T.CustomerApprovedBy AS [E_Supply.CustomerApprovedBy], \r\n      ");
            viewString.Append("      T.SupplierPurchaseOrderID AS [E_Supply.SupplierPurchaseOrderID], \r\n       ");
            viewString.Append("     T.SupplierApprovedBy AS [E_Supply.SupplierApprovedBy], \r\n            T.IsDr");
            viewString.Append("aft AS [E_Supply.IsDraft], \r\n            T.IsUnapproved AS [E_Supply.IsUnapprove");
            viewString.Append("d], \r\n            T.IsDenied AS [E_Supply.IsDenied], \r\n            T.IsSupplied ");
            viewString.Append("AS [E_Supply.IsSupplied], \r\n            T.IsReorderSent AS [E_Supply.IsReorderSe");
            viewString.Append("nt], \r\n            T.IsPaid AS [E_Supply.IsPaid], \r\n            T.IsFinalised AS");
            viewString.Append(" [E_Supply.IsFinalised], \r\n            T.CurrentProjectDeliverableID AS [E_Suppl");
            viewString.Append("y.CurrentProjectDeliverableID], \r\n            T.FinalProjectDeliverableID AS [E_");
            viewString.Append("Supply.FinalProjectDeliverableID], \r\n            T.DateOrdered AS [E_Supply.Date");
            viewString.Append("Ordered], \r\n            T.PurchasingNotes AS [E_Supply.PurchasingNotes], \r\n     ");
            viewString.Append("       T.Version AS [E_Supply.Version], \r\n            T.VersionAntecedentID AS [");
            viewString.Append("E_Supply.VersionAntecedentID], \r\n            T.VersionCertainty AS [E_Supply.Ver");
            viewString.Append("sionCertainty], \r\n            T.VersionWorkflowInstanceID AS [E_Supply.VersionWo");
            viewString.Append("rkflowInstanceID], \r\n            T.VersionUpdatedBy AS [E_Supply.VersionUpdatedB");
            viewString.Append("y], \r\n            T.VersionDeletedBy AS [E_Supply.VersionDeletedBy], \r\n         ");
            viewString.Append("   T.VersionOwnerContactID AS [E_Supply.VersionOwnerContactID], \r\n            T.");
            viewString.Append("VersionOwnerCompanyID AS [E_Supply.VersionOwnerCompanyID], \r\n            T.Versi");
            viewString.Append("onUpdated AS [E_Supply.VersionUpdated], \r\n            True AS _from0\r\n        FR");
            viewString.Append("OM NKDC.Supplies AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_Supply", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_SupplyItem
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView17()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(5256);
            viewString.Append("\r\n    SELECT VALUE -- Constructing E_SupplyItem\r\n        [NKD.Module.BusinessObj");
            viewString.Append("ects.Store.E_SupplyItem](T1.[E_SupplyItem.SupplyItemID], T1.[E_SupplyItem.Supply");
            viewString.Append("ID], T1.[E_SupplyItem.ModelID], T1.[E_SupplyItem.PartID], T1.[E_SupplyItem.Suppl");
            viewString.Append("ierModelID], T1.[E_SupplyItem.SupplierPartID], T1.[E_SupplyItem.WarehouseID], T1");
            viewString.Append(".[E_SupplyItem.ProjectPlanTaskModelID], T1.[E_SupplyItem.ProjectPlanTaskPartID],");
            viewString.Append(" T1.[E_SupplyItem.ProjectPlanTaskResponseID], T1.[E_SupplyItem.ApplicationPaymen");
            viewString.Append("tProviderProductID], T1.[E_SupplyItem.ApplicationPaymentProviderProductModelID],");
            viewString.Append(" T1.[E_SupplyItem.ApplicationPaymentProviderProductPartID], T1.[E_SupplyItem.Cus");
            viewString.Append("tomerAccountID], T1.[E_SupplyItem.ModelUnitID], T1.[E_SupplyItem.LabourUnitID], ");
            viewString.Append("T1.[E_SupplyItem.PartUnitID], T1.[E_SupplyItem.CostPerUnitModel], T1.[E_SupplyIt");
            viewString.Append("em.CostPerUnitLabour], T1.[E_SupplyItem.CostPerUnitPart], T1.[E_SupplyItem.Quant");
            viewString.Append("ityModel], T1.[E_SupplyItem.QuantityLabour], T1.[E_SupplyItem.QuantityPart], T1.");
            viewString.Append("[E_SupplyItem.CostModel], T1.[E_SupplyItem.CostLabour], T1.[E_SupplyItem.CostPar");
            viewString.Append("t], T1.[E_SupplyItem.SubtotalModel], T1.[E_SupplyItem.SubtotalLabour], T1.[E_Sup");
            viewString.Append("plyItem.SubtotalPart], T1.[E_SupplyItem.DiscountModel], T1.[E_SupplyItem.Discoun");
            viewString.Append("tLabour], T1.[E_SupplyItem.DiscountPart], T1.[E_SupplyItem.DiscountAmount], T1.[");
            viewString.Append("E_SupplyItem.TaxModel], T1.[E_SupplyItem.TaxLabour], T1.[E_SupplyItem.TaxPart], ");
            viewString.Append("T1.[E_SupplyItem.Tax], T1.[E_SupplyItem.OriginalSubtotal], T1.[E_SupplyItem.Curr");
            viewString.Append("encyID], T1.[E_SupplyItem.Subtotal], T1.[E_SupplyItem.Notes], T1.[E_SupplyItem.V");
            viewString.Append("ersion], T1.[E_SupplyItem.VersionAntecedentID], T1.[E_SupplyItem.VersionCertaint");
            viewString.Append("y], T1.[E_SupplyItem.VersionWorkflowInstanceID], T1.[E_SupplyItem.VersionUpdated");
            viewString.Append("By], T1.[E_SupplyItem.VersionDeletedBy], T1.[E_SupplyItem.VersionOwnerContactID]");
            viewString.Append(", T1.[E_SupplyItem.VersionOwnerCompanyID], T1.[E_SupplyItem.VersionUpdated])\r\n  ");
            viewString.Append("  FROM (\r\n        SELECT \r\n            T.SupplyItemID AS [E_SupplyItem.SupplyIte");
            viewString.Append("mID], \r\n            T.SupplyID AS [E_SupplyItem.SupplyID], \r\n            T.Model");
            viewString.Append("ID AS [E_SupplyItem.ModelID], \r\n            T.PartID AS [E_SupplyItem.PartID], \r");
            viewString.Append("\n            T.SupplierModelID AS [E_SupplyItem.SupplierModelID], \r\n            ");
            viewString.Append("T.SupplierPartID AS [E_SupplyItem.SupplierPartID], \r\n            T.WarehouseID A");
            viewString.Append("S [E_SupplyItem.WarehouseID], \r\n            T.ProjectPlanTaskModelID AS [E_Suppl");
            viewString.Append("yItem.ProjectPlanTaskModelID], \r\n            T.ProjectPlanTaskPartID AS [E_Suppl");
            viewString.Append("yItem.ProjectPlanTaskPartID], \r\n            T.ProjectPlanTaskResponseID AS [E_Su");
            viewString.Append("pplyItem.ProjectPlanTaskResponseID], \r\n            T.ApplicationPaymentProviderP");
            viewString.Append("roductID AS [E_SupplyItem.ApplicationPaymentProviderProductID], \r\n            T.");
            viewString.Append("ApplicationPaymentProviderProductModelID AS [E_SupplyItem.ApplicationPaymentProv");
            viewString.Append("iderProductModelID], \r\n            T.ApplicationPaymentProviderProductPartID AS ");
            viewString.Append("[E_SupplyItem.ApplicationPaymentProviderProductPartID], \r\n            T.Customer");
            viewString.Append("AccountID AS [E_SupplyItem.CustomerAccountID], \r\n            T.ModelUnitID AS [E");
            viewString.Append("_SupplyItem.ModelUnitID], \r\n            T.LabourUnitID AS [E_SupplyItem.LabourUn");
            viewString.Append("itID], \r\n            T.PartUnitID AS [E_SupplyItem.PartUnitID], \r\n            T.");
            viewString.Append("CostPerUnitModel AS [E_SupplyItem.CostPerUnitModel], \r\n            T.CostPerUnit");
            viewString.Append("Labour AS [E_SupplyItem.CostPerUnitLabour], \r\n            T.CostPerUnitPart AS [");
            viewString.Append("E_SupplyItem.CostPerUnitPart], \r\n            T.QuantityModel AS [E_SupplyItem.Qu");
            viewString.Append("antityModel], \r\n            T.QuantityLabour AS [E_SupplyItem.QuantityLabour], \r");
            viewString.Append("\n            T.QuantityPart AS [E_SupplyItem.QuantityPart], \r\n            T.Cost");
            viewString.Append("Model AS [E_SupplyItem.CostModel], \r\n            T.CostLabour AS [E_SupplyItem.C");
            viewString.Append("ostLabour], \r\n            T.CostPart AS [E_SupplyItem.CostPart], \r\n            T");
            viewString.Append(".SubtotalModel AS [E_SupplyItem.SubtotalModel], \r\n            T.SubtotalLabour A");
            viewString.Append("S [E_SupplyItem.SubtotalLabour], \r\n            T.SubtotalPart AS [E_SupplyItem.S");
            viewString.Append("ubtotalPart], \r\n            T.DiscountModel AS [E_SupplyItem.DiscountModel], \r\n ");
            viewString.Append("           T.DiscountLabour AS [E_SupplyItem.DiscountLabour], \r\n            T.Di");
            viewString.Append("scountPart AS [E_SupplyItem.DiscountPart], \r\n            T.DiscountAmount AS [E_");
            viewString.Append("SupplyItem.DiscountAmount], \r\n            T.TaxModel AS [E_SupplyItem.TaxModel],");
            viewString.Append(" \r\n            T.TaxLabour AS [E_SupplyItem.TaxLabour], \r\n            T.TaxPart ");
            viewString.Append("AS [E_SupplyItem.TaxPart], \r\n            T.Tax AS [E_SupplyItem.Tax], \r\n        ");
            viewString.Append("    T.OriginalSubtotal AS [E_SupplyItem.OriginalSubtotal], \r\n            T.Curre");
            viewString.Append("ncyID AS [E_SupplyItem.CurrencyID], \r\n            T.Subtotal AS [E_SupplyItem.Su");
            viewString.Append("btotal], \r\n            T.Notes AS [E_SupplyItem.Notes], \r\n            T.Version ");
            viewString.Append("AS [E_SupplyItem.Version], \r\n            T.VersionAntecedentID AS [E_SupplyItem.");
            viewString.Append("VersionAntecedentID], \r\n            T.VersionCertainty AS [E_SupplyItem.VersionC");
            viewString.Append("ertainty], \r\n            T.VersionWorkflowInstanceID AS [E_SupplyItem.VersionWor");
            viewString.Append("kflowInstanceID], \r\n            T.VersionUpdatedBy AS [E_SupplyItem.VersionUpdat");
            viewString.Append("edBy], \r\n            T.VersionDeletedBy AS [E_SupplyItem.VersionDeletedBy], \r\n  ");
            viewString.Append("          T.VersionOwnerContactID AS [E_SupplyItem.VersionOwnerContactID], \r\n   ");
            viewString.Append("         T.VersionOwnerCompanyID AS [E_SupplyItem.VersionOwnerCompanyID], \r\n    ");
            viewString.Append("        T.VersionUpdated AS [E_SupplyItem.VersionUpdated], \r\n            True AS");
            viewString.Append(" _from0\r\n        FROM NKDC.SupplyItems AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_SupplyItem", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_SupplyItemTax
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView18()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_SupplyItemTax", "\r\n    SELECT VALUE -- Constructing E_SupplyItemTax\r\n        [NKD.Module.BusinessO" +
                    "bjects.Store.E_SupplyItemTax](T1.[E_SupplyItemTax.SupplyItemTaxID], T1.[E_Supply" +
                    "ItemTax.SupplyItemID], T1.[E_SupplyItemTax.TaxID], T1.[E_SupplyItemTax.Tax], T1." +
                    "[E_SupplyItemTax.Version], T1.[E_SupplyItemTax.VersionAntecedentID], T1.[E_Suppl" +
                    "yItemTax.VersionCertainty], T1.[E_SupplyItemTax.VersionWorkflowInstanceID], T1.[" +
                    "E_SupplyItemTax.VersionUpdatedBy], T1.[E_SupplyItemTax.VersionDeletedBy], T1.[E_" +
                    "SupplyItemTax.VersionOwnerContactID], T1.[E_SupplyItemTax.VersionOwnerCompanyID]" +
                    ", T1.[E_SupplyItemTax.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n           " +
                    " T.SupplyItemTaxID AS [E_SupplyItemTax.SupplyItemTaxID], \r\n            T.SupplyI" +
                    "temID AS [E_SupplyItemTax.SupplyItemID], \r\n            T.TaxID AS [E_SupplyItemT" +
                    "ax.TaxID], \r\n            T.Tax AS [E_SupplyItemTax.Tax], \r\n            T.Version" +
                    " AS [E_SupplyItemTax.Version], \r\n            T.VersionAntecedentID AS [E_SupplyI" +
                    "temTax.VersionAntecedentID], \r\n            T.VersionCertainty AS [E_SupplyItemTa" +
                    "x.VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [E_SupplyItemT" +
                    "ax.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [E_SupplyItem" +
                    "Tax.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [E_SupplyItemTax.Vers" +
                    "ionDeletedBy], \r\n            T.VersionOwnerContactID AS [E_SupplyItemTax.Version" +
                    "OwnerContactID], \r\n            T.VersionOwnerCompanyID AS [E_SupplyItemTax.Versi" +
                    "onOwnerCompanyID], \r\n            T.VersionUpdated AS [E_SupplyItemTax.VersionUpd" +
                    "ated], \r\n            True AS _from0\r\n        FROM NKDC.SupplyItemTaxes AS T\r\n   " +
                    " ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.Q_Account
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView19()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.Q_Account", "\r\n    SELECT VALUE -- Constructing Q_Account\r\n        [NKD.Module.BusinessObjects" +
                    ".Store.Q_Account](T1.[Q_Account.AccountID], T1.[Q_Account.ParentAccountID], T1.[" +
                    "Q_Account.AccountTypeID], T1.[Q_Account.AcountCode], T1.[Q_Account.AccountName]," +
                    " T1.[Q_Account.PrimaryCompanyID], T1.[Q_Account.DefaultLocationID], T1.[Q_Accoun" +
                    "t.Description], T1.[Q_Account.Version], T1.[Q_Account.VersionAntecedentID], T1.[" +
                    "Q_Account.VersionCertainty], T1.[Q_Account.VersionWorkflowInstanceID], T1.[Q_Acc" +
                    "ount.VersionUpdatedBy], T1.[Q_Account.VersionDeletedBy], T1.[Q_Account.VersionOw" +
                    "nerContactID], T1.[Q_Account.VersionOwnerCompanyID], T1.[Q_Account.VersionUpdate" +
                    "d])\r\n    FROM (\r\n        SELECT \r\n            T.AccountID AS [Q_Account.AccountI" +
                    "D], \r\n            T.ParentAccountID AS [Q_Account.ParentAccountID], \r\n          " +
                    "  T.AccountTypeID AS [Q_Account.AccountTypeID], \r\n            T.AcountCode AS [Q" +
                    "_Account.AcountCode], \r\n            T.AccountName AS [Q_Account.AccountName], \r\n" +
                    "            T.PrimaryCompanyID AS [Q_Account.PrimaryCompanyID], \r\n            T." +
                    "DefaultLocationID AS [Q_Account.DefaultLocationID], \r\n            T.Description " +
                    "AS [Q_Account.Description], \r\n            T.Version AS [Q_Account.Version], \r\n  " +
                    "          T.VersionAntecedentID AS [Q_Account.VersionAntecedentID], \r\n          " +
                    "  T.VersionCertainty AS [Q_Account.VersionCertainty], \r\n            T.VersionWor" +
                    "kflowInstanceID AS [Q_Account.VersionWorkflowInstanceID], \r\n            T.Versio" +
                    "nUpdatedBy AS [Q_Account.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS " +
                    "[Q_Account.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [Q_Accoun" +
                    "t.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [Q_Account.Ve" +
                    "rsionOwnerCompanyID], \r\n            T.VersionUpdated AS [Q_Account.VersionUpdate" +
                    "d], \r\n            True AS _from0\r\n        FROM NKDC.Accounts AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.Q_AccountDiscount
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView20()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2341);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Q_AccountDiscount\r\n        [NKD.Module.Busine");
            viewString.Append("ssObjects.Store.Q_AccountDiscount](T1.[Q_AccountDiscount.AccountDiscountID], T1.");
            viewString.Append("[Q_AccountDiscount.SourceAccountID], T1.[Q_AccountDiscount.ClientCompanyID], T1.");
            viewString.Append("[Q_AccountDiscount.ProviderExperienceID], T1.[Q_AccountDiscount.DeviceTypeID], T");
            viewString.Append("1.[Q_AccountDiscount.LevelUnitID], T1.[Q_AccountDiscount.LevelQuantity], T1.[Q_A");
            viewString.Append("ccountDiscount.Rate], T1.[Q_AccountDiscount.ValidFrom], T1.[Q_AccountDiscount.Va");
            viewString.Append("lidUntil], T1.[Q_AccountDiscount.Version], T1.[Q_AccountDiscount.VersionAntecede");
            viewString.Append("ntID], T1.[Q_AccountDiscount.VersionCertainty], T1.[Q_AccountDiscount.VersionWor");
            viewString.Append("kflowInstanceID], T1.[Q_AccountDiscount.VersionUpdatedBy], T1.[Q_AccountDiscount");
            viewString.Append(".VersionDeletedBy], T1.[Q_AccountDiscount.VersionOwnerContactID], T1.[Q_AccountD");
            viewString.Append("iscount.VersionOwnerCompanyID], T1.[Q_AccountDiscount.VersionUpdated])\r\n    FROM");
            viewString.Append(" (\r\n        SELECT \r\n            T.AccountDiscountID AS [Q_AccountDiscount.Accou");
            viewString.Append("ntDiscountID], \r\n            T.SourceAccountID AS [Q_AccountDiscount.SourceAccou");
            viewString.Append("ntID], \r\n            T.ClientCompanyID AS [Q_AccountDiscount.ClientCompanyID], \r");
            viewString.Append("\n            T.ProviderExperienceID AS [Q_AccountDiscount.ProviderExperienceID],");
            viewString.Append(" \r\n            T.DeviceTypeID AS [Q_AccountDiscount.DeviceTypeID], \r\n           ");
            viewString.Append(" T.LevelUnitID AS [Q_AccountDiscount.LevelUnitID], \r\n            T.LevelQuantity");
            viewString.Append(" AS [Q_AccountDiscount.LevelQuantity], \r\n            T.Rate AS [Q_AccountDiscoun");
            viewString.Append("t.Rate], \r\n            T.ValidFrom AS [Q_AccountDiscount.ValidFrom], \r\n         ");
            viewString.Append("   T.ValidUntil AS [Q_AccountDiscount.ValidUntil], \r\n            T.Version AS [Q");
            viewString.Append("_AccountDiscount.Version], \r\n            T.VersionAntecedentID AS [Q_AccountDisc");
            viewString.Append("ount.VersionAntecedentID], \r\n            T.VersionCertainty AS [Q_AccountDiscoun");
            viewString.Append("t.VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [Q_AccountDisc");
            viewString.Append("ount.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [Q_AccountD");
            viewString.Append("iscount.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [Q_AccountDiscoun");
            viewString.Append("t.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [Q_AccountDiscount");
            viewString.Append(".VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [Q_AccountDisc");
            viewString.Append("ount.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [Q_AccountDiscoun");
            viewString.Append("t.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.AccountDiscou");
            viewString.Append("nts AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.Q_AccountDiscount", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.Q_Asset
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView21()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2738);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Q_Asset\r\n        [NKD.Module.BusinessObjects.");
            viewString.Append("Store.Q_Asset](T1.[Q_Asset.AssetID], T1.[Q_Asset.ParentAssetID], T1.[Q_Asset.Ass");
            viewString.Append("etName], T1.[Q_Asset.InitialCost], T1.[Q_Asset.ProRataCost], T1.[Q_Asset.ProRata");
            viewString.Append("UnitID], T1.[Q_Asset.Purchased], T1.[Q_Asset.PurchaseOrderID], T1.[Q_Asset.Expen");
            viewString.Append("seNotToExceedLifeTimeCost], T1.[Q_Asset.OwnerAccountID], T1.[Q_Asset.BorrowerAcc");
            viewString.Append("ountID], T1.[Q_Asset.CurrentCompanyID], T1.[Q_Asset.CurrentContactID], T1.[Q_Ass");
            viewString.Append("et.MaintenanceAccountID], T1.[Q_Asset.ModelID], T1.[Q_Asset.LocationID], T1.[Q_A");
            viewString.Append("sset.AssetStatusID], T1.[Q_Asset.ExperienceID], T1.[Q_Asset.Description], T1.[Q_");
            viewString.Append("Asset.Version], T1.[Q_Asset.VersionAntecedentID], T1.[Q_Asset.VersionCertainty],");
            viewString.Append(" T1.[Q_Asset.VersionWorkflowInstanceID], T1.[Q_Asset.VersionUpdatedBy], T1.[Q_As");
            viewString.Append("set.VersionDeletedBy], T1.[Q_Asset.VersionOwnerContactID], T1.[Q_Asset.VersionOw");
            viewString.Append("nerCompanyID], T1.[Q_Asset.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n      ");
            viewString.Append("      T.AssetID AS [Q_Asset.AssetID], \r\n            T.ParentAssetID AS [Q_Asset.");
            viewString.Append("ParentAssetID], \r\n            T.AssetName AS [Q_Asset.AssetName], \r\n            ");
            viewString.Append("T.InitialCost AS [Q_Asset.InitialCost], \r\n            T.ProRataCost AS [Q_Asset.");
            viewString.Append("ProRataCost], \r\n            T.ProRataUnitID AS [Q_Asset.ProRataUnitID], \r\n      ");
            viewString.Append("      T.Purchased AS [Q_Asset.Purchased], \r\n            T.PurchaseOrderID AS [Q_");
            viewString.Append("Asset.PurchaseOrderID], \r\n            T.ExpenseNotToExceedLifeTimeCost AS [Q_Ass");
            viewString.Append("et.ExpenseNotToExceedLifeTimeCost], \r\n            T.OwnerAccountID AS [Q_Asset.O");
            viewString.Append("wnerAccountID], \r\n            T.BorrowerAccountID AS [Q_Asset.BorrowerAccountID]");
            viewString.Append(", \r\n            T.CurrentCompanyID AS [Q_Asset.CurrentCompanyID], \r\n            ");
            viewString.Append("T.CurrentContactID AS [Q_Asset.CurrentContactID], \r\n            T.MaintenanceAcc");
            viewString.Append("ountID AS [Q_Asset.MaintenanceAccountID], \r\n            T.ModelID AS [Q_Asset.Mo");
            viewString.Append("delID], \r\n            T.LocationID AS [Q_Asset.LocationID], \r\n            T.Asse");
            viewString.Append("tStatusID AS [Q_Asset.AssetStatusID], \r\n            T.ExperienceID AS [Q_Asset.E");
            viewString.Append("xperienceID], \r\n            T.Description AS [Q_Asset.Description], \r\n          ");
            viewString.Append("  T.Version AS [Q_Asset.Version], \r\n            T.VersionAntecedentID AS [Q_Asse");
            viewString.Append("t.VersionAntecedentID], \r\n            T.VersionCertainty AS [Q_Asset.VersionCert");
            viewString.Append("ainty], \r\n            T.VersionWorkflowInstanceID AS [Q_Asset.VersionWorkflowIns");
            viewString.Append("tanceID], \r\n            T.VersionUpdatedBy AS [Q_Asset.VersionUpdatedBy], \r\n    ");
            viewString.Append("        T.VersionDeletedBy AS [Q_Asset.VersionDeletedBy], \r\n            T.Versio");
            viewString.Append("nOwnerContactID AS [Q_Asset.VersionOwnerContactID], \r\n            T.VersionOwner");
            viewString.Append("CompanyID AS [Q_Asset.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS ");
            viewString.Append("[Q_Asset.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.Assets");
            viewString.Append(" AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.Q_Asset", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.Q_AssetAlias
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView22()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.Q_AssetAlias", "\r\n    SELECT VALUE -- Constructing Q_AssetAlias\r\n        [NKD.Module.BusinessObje" +
                    "cts.Store.Q_AssetAlias](T1.[Q_AssetAlias.AssetAliasID], T1.[Q_AssetAlias.AssetID" +
                    "], T1.[Q_AssetAlias.AssetAliasName], T1.[Q_AssetAlias.FullDescription], T1.[Q_As" +
                    "setAlias.Thumbnail], T1.[Q_AssetAlias.OriginalFileDataID], T1.[Q_AssetAlias.Vers" +
                    "ion], T1.[Q_AssetAlias.VersionAntecedentID], T1.[Q_AssetAlias.VersionCertainty]," +
                    " T1.[Q_AssetAlias.VersionWorkflowInstanceID], T1.[Q_AssetAlias.VersionUpdatedBy]" +
                    ", T1.[Q_AssetAlias.VersionDeletedBy], T1.[Q_AssetAlias.VersionOwnerContactID], T" +
                    "1.[Q_AssetAlias.VersionOwnerCompanyID], T1.[Q_AssetAlias.VersionUpdated])\r\n    F" +
                    "ROM (\r\n        SELECT \r\n            T.AssetAliasID AS [Q_AssetAlias.AssetAliasID" +
                    "], \r\n            T.AssetID AS [Q_AssetAlias.AssetID], \r\n            T.AssetAlias" +
                    "Name AS [Q_AssetAlias.AssetAliasName], \r\n            T.FullDescription AS [Q_Ass" +
                    "etAlias.FullDescription], \r\n            T.Thumbnail AS [Q_AssetAlias.Thumbnail]," +
                    " \r\n            T.OriginalFileDataID AS [Q_AssetAlias.OriginalFileDataID], \r\n    " +
                    "        T.Version AS [Q_AssetAlias.Version], \r\n            T.VersionAntecedentID" +
                    " AS [Q_AssetAlias.VersionAntecedentID], \r\n            T.VersionCertainty AS [Q_A" +
                    "ssetAlias.VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [Q_Ass" +
                    "etAlias.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [Q_Asset" +
                    "Alias.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [Q_AssetAlias.Versi" +
                    "onDeletedBy], \r\n            T.VersionOwnerContactID AS [Q_AssetAlias.VersionOwne" +
                    "rContactID], \r\n            T.VersionOwnerCompanyID AS [Q_AssetAlias.VersionOwner" +
                    "CompanyID], \r\n            T.VersionUpdated AS [Q_AssetAlias.VersionUpdated], \r\n " +
                    "           True AS _from0\r\n        FROM NKDC.AssetAlias AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.Q_AssetMaintenance
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView23()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.Q_AssetMaintenance", "\r\n    SELECT VALUE -- Constructing Q_AssetMaintenance\r\n        [NKD.Module.Busine" +
                    "ssObjects.Store.Q_AssetMaintenance](T1.[Q_AssetMaintenance.AssetMaintenanceID], " +
                    "T1.[Q_AssetMaintenance.AssetID], T1.[Q_AssetMaintenance.ModelProcedureID], T1.[Q" +
                    "_AssetMaintenance.NextDueDateService], T1.[Q_AssetMaintenance.NextDueDateBilling" +
                    "], T1.[Q_AssetMaintenance.Version], T1.[Q_AssetMaintenance.VersionAntecedentID]," +
                    " T1.[Q_AssetMaintenance.VersionCertainty], T1.[Q_AssetMaintenance.VersionWorkflo" +
                    "wInstanceID], T1.[Q_AssetMaintenance.VersionUpdatedBy], T1.[Q_AssetMaintenance.V" +
                    "ersionDeletedBy], T1.[Q_AssetMaintenance.VersionOwnerContactID], T1.[Q_AssetMain" +
                    "tenance.VersionOwnerCompanyID], T1.[Q_AssetMaintenance.VersionUpdated])\r\n    FRO" +
                    "M (\r\n        SELECT \r\n            T.AssetMaintenanceID AS [Q_AssetMaintenance.As" +
                    "setMaintenanceID], \r\n            T.AssetID AS [Q_AssetMaintenance.AssetID], \r\n  " +
                    "          T.ModelProcedureID AS [Q_AssetMaintenance.ModelProcedureID], \r\n       " +
                    "     T.NextDueDateService AS [Q_AssetMaintenance.NextDueDateService], \r\n        " +
                    "    T.NextDueDateBilling AS [Q_AssetMaintenance.NextDueDateBilling], \r\n         " +
                    "   T.Version AS [Q_AssetMaintenance.Version], \r\n            T.VersionAntecedentI" +
                    "D AS [Q_AssetMaintenance.VersionAntecedentID], \r\n            T.VersionCertainty " +
                    "AS [Q_AssetMaintenance.VersionCertainty], \r\n            T.VersionWorkflowInstanc" +
                    "eID AS [Q_AssetMaintenance.VersionWorkflowInstanceID], \r\n            T.VersionUp" +
                    "datedBy AS [Q_AssetMaintenance.VersionUpdatedBy], \r\n            T.VersionDeleted" +
                    "By AS [Q_AssetMaintenance.VersionDeletedBy], \r\n            T.VersionOwnerContact" +
                    "ID AS [Q_AssetMaintenance.VersionOwnerContactID], \r\n            T.VersionOwnerCo" +
                    "mpanyID AS [Q_AssetMaintenance.VersionOwnerCompanyID], \r\n            T.VersionUp" +
                    "dated AS [Q_AssetMaintenance.VersionUpdated], \r\n            True AS _from0\r\n    " +
                    "    FROM NKDC.AssetMaintenances AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.Q_AssetWarranty
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView24()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.Q_AssetWarranty", "\r\n    SELECT VALUE -- Constructing Q_AssetWarranty\r\n        [NKD.Module.BusinessO" +
                    "bjects.Store.Q_AssetWarranty](T1.[Q_AssetWarranty.AssetWarrantyID], T1.[Q_AssetW" +
                    "arranty.AssetID], T1.[Q_AssetWarranty.ModelWarrantyID], T1.[Q_AssetWarranty.Star" +
                    "tDate], T1.[Q_AssetWarranty.EndDate], T1.[Q_AssetWarranty.Frequency], T1.[Q_Asse" +
                    "tWarranty.FrequencyUnitID], T1.[Q_AssetWarranty.WarrantyTypeID], T1.[Q_AssetWarr" +
                    "anty.Version], T1.[Q_AssetWarranty.VersionAntecedentID], T1.[Q_AssetWarranty.Ver" +
                    "sionCertainty], T1.[Q_AssetWarranty.VersionWorkflowInstanceID], T1.[Q_AssetWarra" +
                    "nty.VersionUpdatedBy], T1.[Q_AssetWarranty.VersionDeletedBy], T1.[Q_AssetWarrant" +
                    "y.VersionOwnerContactID], T1.[Q_AssetWarranty.VersionOwnerCompanyID], T1.[Q_Asse" +
                    "tWarranty.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.AssetWarr" +
                    "antyID AS [Q_AssetWarranty.AssetWarrantyID], \r\n            T.AssetID AS [Q_Asset" +
                    "Warranty.AssetID], \r\n            T.ModelWarrantyID AS [Q_AssetWarranty.ModelWarr" +
                    "antyID], \r\n            T.StartDate AS [Q_AssetWarranty.StartDate], \r\n           " +
                    " T.EndDate AS [Q_AssetWarranty.EndDate], \r\n            T.Frequency AS [Q_AssetWa" +
                    "rranty.Frequency], \r\n            T.FrequencyUnitID AS [Q_AssetWarranty.Frequency" +
                    "UnitID], \r\n            T.WarrantyTypeID AS [Q_AssetWarranty.WarrantyTypeID], \r\n " +
                    "           T.Version AS [Q_AssetWarranty.Version], \r\n            T.VersionAntece" +
                    "dentID AS [Q_AssetWarranty.VersionAntecedentID], \r\n            T.VersionCertaint" +
                    "y AS [Q_AssetWarranty.VersionCertainty], \r\n            T.VersionWorkflowInstance" +
                    "ID AS [Q_AssetWarranty.VersionWorkflowInstanceID], \r\n            T.VersionUpdate" +
                    "dBy AS [Q_AssetWarranty.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [" +
                    "Q_AssetWarranty.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [Q_A" +
                    "ssetWarranty.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [Q" +
                    "_AssetWarranty.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [Q_Asse" +
                    "tWarranty.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.Asset" +
                    "Warranties AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.Q_CompanyAccount
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView25()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.Q_CompanyAccount", "\r\n    SELECT VALUE -- Constructing Q_CompanyAccount\r\n        [NKD.Module.Business" +
                    "Objects.Store.Q_CompanyAccount](T1.[Q_CompanyAccount.CompanyAccountID], T1.[Q_Co" +
                    "mpanyAccount.CompanyID], T1.[Q_CompanyAccount.AccountID], T1.[Q_CompanyAccount.V" +
                    "ersion], T1.[Q_CompanyAccount.VersionAntecedentID], T1.[Q_CompanyAccount.Version" +
                    "Certainty], T1.[Q_CompanyAccount.VersionWorkflowInstanceID], T1.[Q_CompanyAccoun" +
                    "t.VersionUpdatedBy], T1.[Q_CompanyAccount.VersionDeletedBy], T1.[Q_CompanyAccoun" +
                    "t.VersionOwnerContactID], T1.[Q_CompanyAccount.VersionOwnerCompanyID], T1.[Q_Com" +
                    "panyAccount.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.Company" +
                    "AccountID AS [Q_CompanyAccount.CompanyAccountID], \r\n            T.CompanyID AS [" +
                    "Q_CompanyAccount.CompanyID], \r\n            T.AccountID AS [Q_CompanyAccount.Acco" +
                    "untID], \r\n            T.Version AS [Q_CompanyAccount.Version], \r\n            T.V" +
                    "ersionAntecedentID AS [Q_CompanyAccount.VersionAntecedentID], \r\n            T.Ve" +
                    "rsionCertainty AS [Q_CompanyAccount.VersionCertainty], \r\n            T.VersionWo" +
                    "rkflowInstanceID AS [Q_CompanyAccount.VersionWorkflowInstanceID], \r\n            " +
                    "T.VersionUpdatedBy AS [Q_CompanyAccount.VersionUpdatedBy], \r\n            T.Versi" +
                    "onDeletedBy AS [Q_CompanyAccount.VersionDeletedBy], \r\n            T.VersionOwner" +
                    "ContactID AS [Q_CompanyAccount.VersionOwnerContactID], \r\n            T.VersionOw" +
                    "nerCompanyID AS [Q_CompanyAccount.VersionOwnerCompanyID], \r\n            T.Versio" +
                    "nUpdated AS [Q_CompanyAccount.VersionUpdated], \r\n            True AS _from0\r\n   " +
                    "     FROM NKDC.CompanyAccounts AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.Q_ContractAsset
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView26()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.Q_ContractAsset", "\r\n    SELECT VALUE -- Constructing Q_ContractAsset\r\n        [NKD.Module.BusinessO" +
                    "bjects.Store.Q_ContractAsset](T1.[Q_ContractAsset.ContractAssetID], T1.[Q_Contra" +
                    "ctAsset.ContractID], T1.[Q_ContractAsset.AssetID], T1.[Q_ContractAsset.OverrideC" +
                    "overageStart], T1.[Q_ContractAsset.OverrideCoverageEnd], T1.[Q_ContractAsset.Ver" +
                    "sion], T1.[Q_ContractAsset.VersionAntecedentID], T1.[Q_ContractAsset.VersionCert" +
                    "ainty], T1.[Q_ContractAsset.VersionWorkflowInstanceID], T1.[Q_ContractAsset.Vers" +
                    "ionUpdatedBy], T1.[Q_ContractAsset.VersionDeletedBy], T1.[Q_ContractAsset.Versio" +
                    "nOwnerContactID], T1.[Q_ContractAsset.VersionOwnerCompanyID], T1.[Q_ContractAsse" +
                    "t.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.ContractAssetID A" +
                    "S [Q_ContractAsset.ContractAssetID], \r\n            T.ContractID AS [Q_ContractAs" +
                    "set.ContractID], \r\n            T.AssetID AS [Q_ContractAsset.AssetID], \r\n       " +
                    "     T.OverrideCoverageStart AS [Q_ContractAsset.OverrideCoverageStart], \r\n     " +
                    "       T.OverrideCoverageEnd AS [Q_ContractAsset.OverrideCoverageEnd], \r\n       " +
                    "     T.Version AS [Q_ContractAsset.Version], \r\n            T.VersionAntecedentID" +
                    " AS [Q_ContractAsset.VersionAntecedentID], \r\n            T.VersionCertainty AS [" +
                    "Q_ContractAsset.VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS " +
                    "[Q_ContractAsset.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS" +
                    " [Q_ContractAsset.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [Q_Cont" +
                    "ractAsset.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [Q_Contrac" +
                    "tAsset.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [Q_Contr" +
                    "actAsset.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [Q_ContractAs" +
                    "set.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.ContractAss" +
                    "ets AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.Q_DeliveryAdvice
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView27()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3220);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Q_DeliveryAdvice\r\n        [NKD.Module.Busines");
            viewString.Append("sObjects.Store.Q_DeliveryAdvice](T1.[Q_DeliveryAdvice.DeliveryAdviceID], T1.[Q_D");
            viewString.Append("eliveryAdvice.DeliveryAdviceName], T1.[Q_DeliveryAdvice.Sequence], T1.[Q_Deliver");
            viewString.Append("yAdvice.ShippingCompanyID], T1.[Q_DeliveryAdvice.FreightCharge], T1.[Q_DeliveryA");
            viewString.Append("dvice.FreightTax], T1.[Q_DeliveryAdvice.ConsignmentNote], T1.[Q_DeliveryAdvice.A");
            viewString.Append("ccessoriesSent], T1.[Q_DeliveryAdvice.DeliveryAdviceNotes], T1.[Q_DeliveryAdvice");
            viewString.Append(".IsEditable], T1.[Q_DeliveryAdvice.SourceCompanyAddressID], T1.[Q_DeliveryAdvice");
            viewString.Append(".DestinationCompanyAddressID], T1.[Q_DeliveryAdvice.DeliveryAdviceReasonID], T1.");
            viewString.Append("[Q_DeliveryAdvice.DeliveryAdviceReasonNote], T1.[Q_DeliveryAdvice.BillingAccount");
            viewString.Append("ID], T1.[Q_DeliveryAdvice.ProjectDeliverableID], T1.[Q_DeliveryAdvice.ProjectID]");
            viewString.Append(", T1.[Q_DeliveryAdvice.Version], T1.[Q_DeliveryAdvice.VersionAntecedentID], T1.[");
            viewString.Append("Q_DeliveryAdvice.VersionCertainty], T1.[Q_DeliveryAdvice.VersionWorkflowInstance");
            viewString.Append("ID], T1.[Q_DeliveryAdvice.VersionUpdatedBy], T1.[Q_DeliveryAdvice.VersionDeleted");
            viewString.Append("By], T1.[Q_DeliveryAdvice.VersionOwnerContactID], T1.[Q_DeliveryAdvice.VersionOw");
            viewString.Append("nerCompanyID], T1.[Q_DeliveryAdvice.VersionUpdated])\r\n    FROM (\r\n        SELECT");
            viewString.Append(" \r\n            T.DeliveryAdviceID AS [Q_DeliveryAdvice.DeliveryAdviceID], \r\n    ");
            viewString.Append("        T.DeliveryAdviceName AS [Q_DeliveryAdvice.DeliveryAdviceName], \r\n       ");
            viewString.Append("     T.Sequence AS [Q_DeliveryAdvice.Sequence], \r\n            T.ShippingCompanyI");
            viewString.Append("D AS [Q_DeliveryAdvice.ShippingCompanyID], \r\n            T.FreightCharge AS [Q_D");
            viewString.Append("eliveryAdvice.FreightCharge], \r\n            T.FreightTax AS [Q_DeliveryAdvice.Fr");
            viewString.Append("eightTax], \r\n            T.ConsignmentNote AS [Q_DeliveryAdvice.ConsignmentNote]");
            viewString.Append(", \r\n            T.AccessoriesSent AS [Q_DeliveryAdvice.AccessoriesSent], \r\n     ");
            viewString.Append("       T.DeliveryAdviceNotes AS [Q_DeliveryAdvice.DeliveryAdviceNotes], \r\n      ");
            viewString.Append("      T.IsEditable AS [Q_DeliveryAdvice.IsEditable], \r\n            T.SourceCompa");
            viewString.Append("nyAddressID AS [Q_DeliveryAdvice.SourceCompanyAddressID], \r\n            T.Destin");
            viewString.Append("ationCompanyAddressID AS [Q_DeliveryAdvice.DestinationCompanyAddressID], \r\n     ");
            viewString.Append("       T.DeliveryAdviceReasonID AS [Q_DeliveryAdvice.DeliveryAdviceReasonID], \r\n");
            viewString.Append("            T.DeliveryAdviceReasonNote AS [Q_DeliveryAdvice.DeliveryAdviceReason");
            viewString.Append("Note], \r\n            T.BillingAccountID AS [Q_DeliveryAdvice.BillingAccountID], ");
            viewString.Append("\r\n            T.ProjectDeliverableID AS [Q_DeliveryAdvice.ProjectDeliverableID],");
            viewString.Append(" \r\n            T.ProjectID AS [Q_DeliveryAdvice.ProjectID], \r\n            T.Vers");
            viewString.Append("ion AS [Q_DeliveryAdvice.Version], \r\n            T.VersionAntecedentID AS [Q_Del");
            viewString.Append("iveryAdvice.VersionAntecedentID], \r\n            T.VersionCertainty AS [Q_Deliver");
            viewString.Append("yAdvice.VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [Q_Deliv");
            viewString.Append("eryAdvice.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [Q_Del");
            viewString.Append("iveryAdvice.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [Q_DeliveryAd");
            viewString.Append("vice.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [Q_DeliveryAdvi");
            viewString.Append("ce.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [Q_DeliveryA");
            viewString.Append("dvice.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [Q_DeliveryAdvic");
            viewString.Append("e.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.DeliveryAdvic");
            viewString.Append("es AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.Q_DeliveryAdvice", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.Q_DeliveryAdviceItem
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView28()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2539);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Q_DeliveryAdviceItem\r\n        [NKD.Module.Bus");
            viewString.Append("inessObjects.Store.Q_DeliveryAdviceItem](T1.[Q_DeliveryAdviceItem.DeliveryAdvice");
            viewString.Append("ItemID], T1.[Q_DeliveryAdviceItem.DeliveryAdviceID], T1.[Q_DeliveryAdviceItem.As");
            viewString.Append("setID], T1.[Q_DeliveryAdviceItem.ItemDescription], T1.[Q_DeliveryAdviceItem.Part");
            viewString.Append("ID], T1.[Q_DeliveryAdviceItem.QuantitySent], T1.[Q_DeliveryAdviceItem.QuantityRe");
            viewString.Append("ceived], T1.[Q_DeliveryAdviceItem.ReturnReferenceNumber], T1.[Q_DeliveryAdviceIt");
            viewString.Append("em.ItemInstruction], T1.[Q_DeliveryAdviceItem.DecontaminationStatusID], T1.[Q_De");
            viewString.Append("liveryAdviceItem.Version], T1.[Q_DeliveryAdviceItem.VersionAntecedentID], T1.[Q_");
            viewString.Append("DeliveryAdviceItem.VersionCertainty], T1.[Q_DeliveryAdviceItem.VersionWorkflowIn");
            viewString.Append("stanceID], T1.[Q_DeliveryAdviceItem.VersionUpdatedBy], T1.[Q_DeliveryAdviceItem.");
            viewString.Append("VersionDeletedBy], T1.[Q_DeliveryAdviceItem.VersionOwnerContactID], T1.[Q_Delive");
            viewString.Append("ryAdviceItem.VersionOwnerCompanyID], T1.[Q_DeliveryAdviceItem.VersionUpdated])\r\n");
            viewString.Append("    FROM (\r\n        SELECT \r\n            T.DeliveryAdviceItemID AS [Q_DeliveryAd");
            viewString.Append("viceItem.DeliveryAdviceItemID], \r\n            T.DeliveryAdviceID AS [Q_DeliveryA");
            viewString.Append("dviceItem.DeliveryAdviceID], \r\n            T.AssetID AS [Q_DeliveryAdviceItem.As");
            viewString.Append("setID], \r\n            T.ItemDescription AS [Q_DeliveryAdviceItem.ItemDescription");
            viewString.Append("], \r\n            T.PartID AS [Q_DeliveryAdviceItem.PartID], \r\n            T.Quan");
            viewString.Append("titySent AS [Q_DeliveryAdviceItem.QuantitySent], \r\n            T.QuantityReceive");
            viewString.Append("d AS [Q_DeliveryAdviceItem.QuantityReceived], \r\n            T.ReturnReferenceNum");
            viewString.Append("ber AS [Q_DeliveryAdviceItem.ReturnReferenceNumber], \r\n            T.ItemInstruc");
            viewString.Append("tion AS [Q_DeliveryAdviceItem.ItemInstruction], \r\n            T.DecontaminationS");
            viewString.Append("tatusID AS [Q_DeliveryAdviceItem.DecontaminationStatusID], \r\n            T.Versi");
            viewString.Append("on AS [Q_DeliveryAdviceItem.Version], \r\n            T.VersionAntecedentID AS [Q_");
            viewString.Append("DeliveryAdviceItem.VersionAntecedentID], \r\n            T.VersionCertainty AS [Q_");
            viewString.Append("DeliveryAdviceItem.VersionCertainty], \r\n            T.VersionWorkflowInstanceID ");
            viewString.Append("AS [Q_DeliveryAdviceItem.VersionWorkflowInstanceID], \r\n            T.VersionUpda");
            viewString.Append("tedBy AS [Q_DeliveryAdviceItem.VersionUpdatedBy], \r\n            T.VersionDeleted");
            viewString.Append("By AS [Q_DeliveryAdviceItem.VersionDeletedBy], \r\n            T.VersionOwnerConta");
            viewString.Append("ctID AS [Q_DeliveryAdviceItem.VersionOwnerContactID], \r\n            T.VersionOwn");
            viewString.Append("erCompanyID AS [Q_DeliveryAdviceItem.VersionOwnerCompanyID], \r\n            T.Ver");
            viewString.Append("sionUpdated AS [Q_DeliveryAdviceItem.VersionUpdated], \r\n            True AS _fro");
            viewString.Append("m0\r\n        FROM NKDC.DeliveryAdviceItems AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.Q_DeliveryAdviceItem", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.Q_DictionaryDecontaminationStatus
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView29()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2468);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Q_DictionaryDecontaminationStatus\r\n        [N");
            viewString.Append("KD.Module.BusinessObjects.Store.Q_DictionaryDecontaminationStatus](T1.[Q_Diction");
            viewString.Append("aryDecontaminationStatus.DecontaminationStatusID], T1.[Q_DictionaryDecontaminati");
            viewString.Append("onStatus.StandardDecontaminationStatusName], T1.[Q_DictionaryDecontaminationStat");
            viewString.Append("us.CustomDecontaminationStatusName], T1.[Q_DictionaryDecontaminationStatus.IsSaf");
            viewString.Append("eForHandling], T1.[Q_DictionaryDecontaminationStatus.Description], T1.[Q_Diction");
            viewString.Append("aryDecontaminationStatus.Version], T1.[Q_DictionaryDecontaminationStatus.Version");
            viewString.Append("AntecedentID], T1.[Q_DictionaryDecontaminationStatus.VersionCertainty], T1.[Q_Di");
            viewString.Append("ctionaryDecontaminationStatus.VersionWorkflowInstanceID], T1.[Q_DictionaryDecont");
            viewString.Append("aminationStatus.VersionUpdatedBy], T1.[Q_DictionaryDecontaminationStatus.Version");
            viewString.Append("DeletedBy], T1.[Q_DictionaryDecontaminationStatus.VersionOwnerContactID], T1.[Q_");
            viewString.Append("DictionaryDecontaminationStatus.VersionOwnerCompanyID], T1.[Q_DictionaryDecontam");
            viewString.Append("inationStatus.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.Decon");
            viewString.Append("taminationStatusID AS [Q_DictionaryDecontaminationStatus.DecontaminationStatusID");
            viewString.Append("], \r\n            T.StandardDecontaminationStatusName AS [Q_DictionaryDecontamina");
            viewString.Append("tionStatus.StandardDecontaminationStatusName], \r\n            T.CustomDecontamina");
            viewString.Append("tionStatusName AS [Q_DictionaryDecontaminationStatus.CustomDecontaminationStatus");
            viewString.Append("Name], \r\n            T.IsSafeForHandling AS [Q_DictionaryDecontaminationStatus.I");
            viewString.Append("sSafeForHandling], \r\n            T.Description AS [Q_DictionaryDecontaminationSt");
            viewString.Append("atus.Description], \r\n            T.Version AS [Q_DictionaryDecontaminationStatus");
            viewString.Append(".Version], \r\n            T.VersionAntecedentID AS [Q_DictionaryDecontaminationSt");
            viewString.Append("atus.VersionAntecedentID], \r\n            T.VersionCertainty AS [Q_DictionaryDeco");
            viewString.Append("ntaminationStatus.VersionCertainty], \r\n            T.VersionWorkflowInstanceID A");
            viewString.Append("S [Q_DictionaryDecontaminationStatus.VersionWorkflowInstanceID], \r\n            T");
            viewString.Append(".VersionUpdatedBy AS [Q_DictionaryDecontaminationStatus.VersionUpdatedBy], \r\n   ");
            viewString.Append("         T.VersionDeletedBy AS [Q_DictionaryDecontaminationStatus.VersionDeleted");
            viewString.Append("By], \r\n            T.VersionOwnerContactID AS [Q_DictionaryDecontaminationStatus");
            viewString.Append(".VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [Q_DictionaryD");
            viewString.Append("econtaminationStatus.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [");
            viewString.Append("Q_DictionaryDecontaminationStatus.VersionUpdated], \r\n            True AS _from0\r");
            viewString.Append("\n        FROM NKDC.DictionaryDecontaminationStatus AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.Q_DictionaryDecontaminationStatus", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.Q_DictionaryDeliveryAdviceReason
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView30()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2281);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Q_DictionaryDeliveryAdviceReason\r\n        [NK");
            viewString.Append("D.Module.BusinessObjects.Store.Q_DictionaryDeliveryAdviceReason](T1.[Q_Dictionar");
            viewString.Append("yDeliveryAdviceReason.DeliveryAdviceReasonID], T1.[Q_DictionaryDeliveryAdviceRea");
            viewString.Append("son.StandardDeliveryAdviceReasonName], T1.[Q_DictionaryDeliveryAdviceReason.Cust");
            viewString.Append("omDeliveryAdviceReasonName], T1.[Q_DictionaryDeliveryAdviceReason.Description], ");
            viewString.Append("T1.[Q_DictionaryDeliveryAdviceReason.Version], T1.[Q_DictionaryDeliveryAdviceRea");
            viewString.Append("son.VersionAntecedentID], T1.[Q_DictionaryDeliveryAdviceReason.VersionCertainty]");
            viewString.Append(", T1.[Q_DictionaryDeliveryAdviceReason.VersionWorkflowInstanceID], T1.[Q_Diction");
            viewString.Append("aryDeliveryAdviceReason.VersionUpdatedBy], T1.[Q_DictionaryDeliveryAdviceReason.");
            viewString.Append("VersionDeletedBy], T1.[Q_DictionaryDeliveryAdviceReason.VersionOwnerContactID], ");
            viewString.Append("T1.[Q_DictionaryDeliveryAdviceReason.VersionOwnerCompanyID], T1.[Q_DictionaryDel");
            viewString.Append("iveryAdviceReason.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.D");
            viewString.Append("eliveryAdviceReasonID AS [Q_DictionaryDeliveryAdviceReason.DeliveryAdviceReasonI");
            viewString.Append("D], \r\n            T.StandardDeliveryAdviceReasonName AS [Q_DictionaryDeliveryAdv");
            viewString.Append("iceReason.StandardDeliveryAdviceReasonName], \r\n            T.CustomDeliveryAdvic");
            viewString.Append("eReasonName AS [Q_DictionaryDeliveryAdviceReason.CustomDeliveryAdviceReasonName]");
            viewString.Append(", \r\n            T.Description AS [Q_DictionaryDeliveryAdviceReason.Description],");
            viewString.Append(" \r\n            T.Version AS [Q_DictionaryDeliveryAdviceReason.Version], \r\n      ");
            viewString.Append("      T.VersionAntecedentID AS [Q_DictionaryDeliveryAdviceReason.VersionAntecede");
            viewString.Append("ntID], \r\n            T.VersionCertainty AS [Q_DictionaryDeliveryAdviceReason.Ver");
            viewString.Append("sionCertainty], \r\n            T.VersionWorkflowInstanceID AS [Q_DictionaryDelive");
            viewString.Append("ryAdviceReason.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [");
            viewString.Append("Q_DictionaryDeliveryAdviceReason.VersionUpdatedBy], \r\n            T.VersionDelet");
            viewString.Append("edBy AS [Q_DictionaryDeliveryAdviceReason.VersionDeletedBy], \r\n            T.Ver");
            viewString.Append("sionOwnerContactID AS [Q_DictionaryDeliveryAdviceReason.VersionOwnerContactID], ");
            viewString.Append("\r\n            T.VersionOwnerCompanyID AS [Q_DictionaryDeliveryAdviceReason.Versi");
            viewString.Append("onOwnerCompanyID], \r\n            T.VersionUpdated AS [Q_DictionaryDeliveryAdvice");
            viewString.Append("Reason.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.Dictiona");
            viewString.Append("ryDeliveryAdviceReasons AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.Q_DictionaryDeliveryAdviceReason", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.Q_DictionaryDeviceType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView31()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2606);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Q_DictionaryDeviceType\r\n        [NKD.Module.B");
            viewString.Append("usinessObjects.Store.Q_DictionaryDeviceType](T1.[Q_DictionaryDeviceType.DeviceTy");
            viewString.Append("peID], T1.[Q_DictionaryDeviceType.ParentDeviceTypeID], T1.[Q_DictionaryDeviceTyp");
            viewString.Append("e.StandardDeviceTypeName], T1.[Q_DictionaryDeviceType.EcriDeviceTypeName], T1.[Q");
            viewString.Append("_DictionaryDeviceType.CustomDeviceTypeName], T1.[Q_DictionaryDeviceType.PrimaryW");
            viewString.Append("orkTypeID], T1.[Q_DictionaryDeviceType.IsAttributable], T1.[Q_DictionaryDeviceTy");
            viewString.Append("pe.IsDevice], T1.[Q_DictionaryDeviceType.IsPart], T1.[Q_DictionaryDeviceType.Des");
            viewString.Append("cription], T1.[Q_DictionaryDeviceType.Version], T1.[Q_DictionaryDeviceType.Versi");
            viewString.Append("onAntecedentID], T1.[Q_DictionaryDeviceType.VersionCertainty], T1.[Q_DictionaryD");
            viewString.Append("eviceType.VersionWorkflowInstanceID], T1.[Q_DictionaryDeviceType.VersionUpdatedB");
            viewString.Append("y], T1.[Q_DictionaryDeviceType.VersionDeletedBy], T1.[Q_DictionaryDeviceType.Ver");
            viewString.Append("sionOwnerContactID], T1.[Q_DictionaryDeviceType.VersionOwnerCompanyID], T1.[Q_Di");
            viewString.Append("ctionaryDeviceType.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.");
            viewString.Append("DeviceTypeID AS [Q_DictionaryDeviceType.DeviceTypeID], \r\n            T.ParentDev");
            viewString.Append("iceTypeID AS [Q_DictionaryDeviceType.ParentDeviceTypeID], \r\n            T.Standa");
            viewString.Append("rdDeviceTypeName AS [Q_DictionaryDeviceType.StandardDeviceTypeName], \r\n         ");
            viewString.Append("   T.EcriDeviceTypeName AS [Q_DictionaryDeviceType.EcriDeviceTypeName], \r\n      ");
            viewString.Append("      T.CustomDeviceTypeName AS [Q_DictionaryDeviceType.CustomDeviceTypeName], \r");
            viewString.Append("\n            T.PrimaryWorkTypeID AS [Q_DictionaryDeviceType.PrimaryWorkTypeID], ");
            viewString.Append("\r\n            T.IsAttributable AS [Q_DictionaryDeviceType.IsAttributable], \r\n   ");
            viewString.Append("         T.IsDevice AS [Q_DictionaryDeviceType.IsDevice], \r\n            T.IsPart");
            viewString.Append(" AS [Q_DictionaryDeviceType.IsPart], \r\n            T.Description AS [Q_Dictionar");
            viewString.Append("yDeviceType.Description], \r\n            T.Version AS [Q_DictionaryDeviceType.Ver");
            viewString.Append("sion], \r\n            T.VersionAntecedentID AS [Q_DictionaryDeviceType.VersionAnt");
            viewString.Append("ecedentID], \r\n            T.VersionCertainty AS [Q_DictionaryDeviceType.VersionC");
            viewString.Append("ertainty], \r\n            T.VersionWorkflowInstanceID AS [Q_DictionaryDeviceType.");
            viewString.Append("VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [Q_DictionaryDev");
            viewString.Append("iceType.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [Q_DictionaryDevi");
            viewString.Append("ceType.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [Q_Dictionary");
            viewString.Append("DeviceType.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [Q_D");
            viewString.Append("ictionaryDeviceType.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [Q");
            viewString.Append("_DictionaryDeviceType.VersionUpdated], \r\n            True AS _from0\r\n        FRO");
            viewString.Append("M NKDC.DictionaryDeviceTypes AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.Q_DictionaryDeviceType", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.Q_DictionaryEventType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView32()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.Q_DictionaryEventType", "\r\n    SELECT VALUE -- Constructing Q_DictionaryEventType\r\n        [NKD.Module.Bus" +
                    "inessObjects.Store.Q_DictionaryEventType](T1.[Q_DictionaryEventType.EventTypeID]" +
                    ", T1.[Q_DictionaryEventType.StandardEventTypeName], T1.[Q_DictionaryEventType.Cu" +
                    "stomEventTypeName], T1.[Q_DictionaryEventType.Description], T1.[Q_DictionaryEven" +
                    "tType.Version], T1.[Q_DictionaryEventType.VersionAntecedentID], T1.[Q_Dictionary" +
                    "EventType.VersionCertainty], T1.[Q_DictionaryEventType.VersionWorkflowInstanceID" +
                    "], T1.[Q_DictionaryEventType.VersionUpdatedBy], T1.[Q_DictionaryEventType.Versio" +
                    "nDeletedBy], T1.[Q_DictionaryEventType.VersionOwnerContactID], T1.[Q_DictionaryE" +
                    "ventType.VersionOwnerCompanyID], T1.[Q_DictionaryEventType.VersionUpdated])\r\n   " +
                    " FROM (\r\n        SELECT \r\n            T.EventTypeID AS [Q_DictionaryEventType.Ev" +
                    "entTypeID], \r\n            T.StandardEventTypeName AS [Q_DictionaryEventType.Stan" +
                    "dardEventTypeName], \r\n            T.CustomEventTypeName AS [Q_DictionaryEventTyp" +
                    "e.CustomEventTypeName], \r\n            T.Description AS [Q_DictionaryEventType.De" +
                    "scription], \r\n            T.Version AS [Q_DictionaryEventType.Version], \r\n      " +
                    "      T.VersionAntecedentID AS [Q_DictionaryEventType.VersionAntecedentID], \r\n  " +
                    "          T.VersionCertainty AS [Q_DictionaryEventType.VersionCertainty], \r\n    " +
                    "        T.VersionWorkflowInstanceID AS [Q_DictionaryEventType.VersionWorkflowIns" +
                    "tanceID], \r\n            T.VersionUpdatedBy AS [Q_DictionaryEventType.VersionUpda" +
                    "tedBy], \r\n            T.VersionDeletedBy AS [Q_DictionaryEventType.VersionDelete" +
                    "dBy], \r\n            T.VersionOwnerContactID AS [Q_DictionaryEventType.VersionOwn" +
                    "erContactID], \r\n            T.VersionOwnerCompanyID AS [Q_DictionaryEventType.Ve" +
                    "rsionOwnerCompanyID], \r\n            T.VersionUpdated AS [Q_DictionaryEventType.V" +
                    "ersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.DictionaryEventT" +
                    "ypes AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.Q_DictionaryPart
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView33()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3213);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Q_DictionaryPart\r\n        [NKD.Module.Busines");
            viewString.Append("sObjects.Store.Q_DictionaryPart](T1.[Q_DictionaryPart.PartID], T1.[Q_DictionaryP");
            viewString.Append("art.ParentPartID], T1.[Q_DictionaryPart.StandardPartName], T1.[Q_DictionaryPart.");
            viewString.Append("EcriPartName], T1.[Q_DictionaryPart.CustomPartName], T1.[Q_DictionaryPart.Compan");
            viewString.Append("yID], T1.[Q_DictionaryPart.OriginalManufacturerName], T1.[Q_DictionaryPart.PartS");
            viewString.Append("tatusID], T1.[Q_DictionaryPart.DeviceTypeID], T1.[Q_DictionaryPart.ManufacturedF");
            viewString.Append("rom], T1.[Q_DictionaryPart.ManufacturedUntil], T1.[Q_DictionaryPart.SupportedUnt");
            viewString.Append("il], T1.[Q_DictionaryPart.EstimatedLifetimeUnitID], T1.[Q_DictionaryPart.Estimat");
            viewString.Append("edLifetime], T1.[Q_DictionaryPart.Description], T1.[Q_DictionaryPart.FullDescrip");
            viewString.Append("tion], T1.[Q_DictionaryPart.Thumbnail], T1.[Q_DictionaryPart.OriginalFileDataID]");
            viewString.Append(", T1.[Q_DictionaryPart.Version], T1.[Q_DictionaryPart.VersionAntecedentID], T1.[");
            viewString.Append("Q_DictionaryPart.VersionCertainty], T1.[Q_DictionaryPart.VersionWorkflowInstance");
            viewString.Append("ID], T1.[Q_DictionaryPart.VersionUpdatedBy], T1.[Q_DictionaryPart.VersionDeleted");
            viewString.Append("By], T1.[Q_DictionaryPart.VersionOwnerContactID], T1.[Q_DictionaryPart.VersionOw");
            viewString.Append("nerCompanyID], T1.[Q_DictionaryPart.VersionUpdated])\r\n    FROM (\r\n        SELECT");
            viewString.Append(" \r\n            T.PartID AS [Q_DictionaryPart.PartID], \r\n            T.ParentPart");
            viewString.Append("ID AS [Q_DictionaryPart.ParentPartID], \r\n            T.StandardPartName AS [Q_Di");
            viewString.Append("ctionaryPart.StandardPartName], \r\n            T.EcriPartName AS [Q_DictionaryPar");
            viewString.Append("t.EcriPartName], \r\n            T.CustomPartName AS [Q_DictionaryPart.CustomPartN");
            viewString.Append("ame], \r\n            T.CompanyID AS [Q_DictionaryPart.CompanyID], \r\n            T");
            viewString.Append(".OriginalManufacturerName AS [Q_DictionaryPart.OriginalManufacturerName], \r\n    ");
            viewString.Append("        T.PartStatusID AS [Q_DictionaryPart.PartStatusID], \r\n            T.Devic");
            viewString.Append("eTypeID AS [Q_DictionaryPart.DeviceTypeID], \r\n            T.ManufacturedFrom AS ");
            viewString.Append("[Q_DictionaryPart.ManufacturedFrom], \r\n            T.ManufacturedUntil AS [Q_Dic");
            viewString.Append("tionaryPart.ManufacturedUntil], \r\n            T.SupportedUntil AS [Q_DictionaryP");
            viewString.Append("art.SupportedUntil], \r\n            T.EstimatedLifetimeUnitID AS [Q_DictionaryPar");
            viewString.Append("t.EstimatedLifetimeUnitID], \r\n            T.EstimatedLifetime AS [Q_DictionaryPa");
            viewString.Append("rt.EstimatedLifetime], \r\n            T.Description AS [Q_DictionaryPart.Descript");
            viewString.Append("ion], \r\n            T.FullDescription AS [Q_DictionaryPart.FullDescription], \r\n ");
            viewString.Append("           T.Thumbnail AS [Q_DictionaryPart.Thumbnail], \r\n            T.Original");
            viewString.Append("FileDataID AS [Q_DictionaryPart.OriginalFileDataID], \r\n            T.Version AS ");
            viewString.Append("[Q_DictionaryPart.Version], \r\n            T.VersionAntecedentID AS [Q_Dictionary");
            viewString.Append("Part.VersionAntecedentID], \r\n            T.VersionCertainty AS [Q_DictionaryPart");
            viewString.Append(".VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [Q_DictionaryPa");
            viewString.Append("rt.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [Q_Dictionary");
            viewString.Append("Part.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [Q_DictionaryPart.Ve");
            viewString.Append("rsionDeletedBy], \r\n            T.VersionOwnerContactID AS [Q_DictionaryPart.Vers");
            viewString.Append("ionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [Q_DictionaryPart.V");
            viewString.Append("ersionOwnerCompanyID], \r\n            T.VersionUpdated AS [Q_DictionaryPart.Versi");
            viewString.Append("onUpdated], \r\n            True AS _from0\r\n        FROM NKDC.DictionaryParts AS T");
            viewString.Append("\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.Q_DictionaryPart", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.Q_DictionaryPartCategory
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView34()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.Q_DictionaryPartCategory", "\r\n    SELECT VALUE -- Constructing Q_DictionaryPartCategory\r\n        [NKD.Module." +
                    "BusinessObjects.Store.Q_DictionaryPartCategory](T1.[Q_DictionaryPartCategory.Par" +
                    "tCategoryID], T1.[Q_DictionaryPartCategory.PartID], T1.[Q_DictionaryPartCategory" +
                    ".CategoryDeviceTypeID], T1.[Q_DictionaryPartCategory.Version], T1.[Q_DictionaryP" +
                    "artCategory.VersionAntecedentID], T1.[Q_DictionaryPartCategory.VersionCertainty]" +
                    ", T1.[Q_DictionaryPartCategory.VersionWorkflowInstanceID], T1.[Q_DictionaryPartC" +
                    "ategory.VersionUpdatedBy], T1.[Q_DictionaryPartCategory.VersionDeletedBy], T1.[Q" +
                    "_DictionaryPartCategory.VersionOwnerContactID], T1.[Q_DictionaryPartCategory.Ver" +
                    "sionOwnerCompanyID], T1.[Q_DictionaryPartCategory.VersionUpdated])\r\n    FROM (\r\n" +
                    "        SELECT \r\n            T.PartCategoryID AS [Q_DictionaryPartCategory.PartC" +
                    "ategoryID], \r\n            T.PartID AS [Q_DictionaryPartCategory.PartID], \r\n     " +
                    "       T.CategoryDeviceTypeID AS [Q_DictionaryPartCategory.CategoryDeviceTypeID]" +
                    ", \r\n            T.Version AS [Q_DictionaryPartCategory.Version], \r\n            T" +
                    ".VersionAntecedentID AS [Q_DictionaryPartCategory.VersionAntecedentID], \r\n      " +
                    "      T.VersionCertainty AS [Q_DictionaryPartCategory.VersionCertainty], \r\n     " +
                    "       T.VersionWorkflowInstanceID AS [Q_DictionaryPartCategory.VersionWorkflowI" +
                    "nstanceID], \r\n            T.VersionUpdatedBy AS [Q_DictionaryPartCategory.Versio" +
                    "nUpdatedBy], \r\n            T.VersionDeletedBy AS [Q_DictionaryPartCategory.Versi" +
                    "onDeletedBy], \r\n            T.VersionOwnerContactID AS [Q_DictionaryPartCategory" +
                    ".VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [Q_DictionaryP" +
                    "artCategory.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [Q_Diction" +
                    "aryPartCategory.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC" +
                    ".DictionaryPartCategories AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.Q_DictionaryPartKit
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView35()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.Q_DictionaryPartKit", "\r\n    SELECT VALUE -- Constructing Q_DictionaryPartKit\r\n        [NKD.Module.Busin" +
                    "essObjects.Store.Q_DictionaryPartKit](T1.[Q_DictionaryPartKit.PartKitID], T1.[Q_" +
                    "DictionaryPartKit.StandardPartKitName], T1.[Q_DictionaryPartKit.CustomPartKitNam" +
                    "e], T1.[Q_DictionaryPartKit.Description], T1.[Q_DictionaryPartKit.Version], T1.[" +
                    "Q_DictionaryPartKit.VersionAntecedentID], T1.[Q_DictionaryPartKit.VersionCertain" +
                    "ty], T1.[Q_DictionaryPartKit.VersionWorkflowInstanceID], T1.[Q_DictionaryPartKit" +
                    ".VersionUpdatedBy], T1.[Q_DictionaryPartKit.VersionDeletedBy], T1.[Q_DictionaryP" +
                    "artKit.VersionOwnerContactID], T1.[Q_DictionaryPartKit.VersionOwnerCompanyID], T" +
                    "1.[Q_DictionaryPartKit.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n          " +
                    "  T.PartKitID AS [Q_DictionaryPartKit.PartKitID], \r\n            T.StandardPartKi" +
                    "tName AS [Q_DictionaryPartKit.StandardPartKitName], \r\n            T.CustomPartKi" +
                    "tName AS [Q_DictionaryPartKit.CustomPartKitName], \r\n            T.Description AS" +
                    " [Q_DictionaryPartKit.Description], \r\n            T.Version AS [Q_DictionaryPart" +
                    "Kit.Version], \r\n            T.VersionAntecedentID AS [Q_DictionaryPartKit.Versio" +
                    "nAntecedentID], \r\n            T.VersionCertainty AS [Q_DictionaryPartKit.Version" +
                    "Certainty], \r\n            T.VersionWorkflowInstanceID AS [Q_DictionaryPartKit.Ve" +
                    "rsionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [Q_DictionaryPartK" +
                    "it.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [Q_DictionaryPartKit.V" +
                    "ersionDeletedBy], \r\n            T.VersionOwnerContactID AS [Q_DictionaryPartKit." +
                    "VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [Q_DictionaryPa" +
                    "rtKit.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [Q_DictionaryPar" +
                    "tKit.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.Dictionary" +
                    "PartKits AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.Q_DictionaryPartKitItem
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView36()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.Q_DictionaryPartKitItem", "\r\n    SELECT VALUE -- Constructing Q_DictionaryPartKitItem\r\n        [NKD.Module.B" +
                    "usinessObjects.Store.Q_DictionaryPartKitItem](T1.[Q_DictionaryPartKitItem.PartKi" +
                    "tItemID], T1.[Q_DictionaryPartKitItem.PartKitID], T1.[Q_DictionaryPartKitItem.Pa" +
                    "rtID], T1.[Q_DictionaryPartKitItem.UnitID], T1.[Q_DictionaryPartKitItem.Quantity" +
                    "], T1.[Q_DictionaryPartKitItem.Version], T1.[Q_DictionaryPartKitItem.VersionAnte" +
                    "cedentID], T1.[Q_DictionaryPartKitItem.VersionCertainty], T1.[Q_DictionaryPartKi" +
                    "tItem.VersionWorkflowInstanceID], T1.[Q_DictionaryPartKitItem.VersionUpdatedBy]," +
                    " T1.[Q_DictionaryPartKitItem.VersionDeletedBy], T1.[Q_DictionaryPartKitItem.Vers" +
                    "ionOwnerContactID], T1.[Q_DictionaryPartKitItem.VersionOwnerCompanyID], T1.[Q_Di" +
                    "ctionaryPartKitItem.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T" +
                    ".PartKitItemID AS [Q_DictionaryPartKitItem.PartKitItemID], \r\n            T.PartK" +
                    "itID AS [Q_DictionaryPartKitItem.PartKitID], \r\n            T.PartID AS [Q_Dictio" +
                    "naryPartKitItem.PartID], \r\n            T.UnitID AS [Q_DictionaryPartKitItem.Unit" +
                    "ID], \r\n            T.Quantity AS [Q_DictionaryPartKitItem.Quantity], \r\n         " +
                    "   T.Version AS [Q_DictionaryPartKitItem.Version], \r\n            T.VersionAntece" +
                    "dentID AS [Q_DictionaryPartKitItem.VersionAntecedentID], \r\n            T.Version" +
                    "Certainty AS [Q_DictionaryPartKitItem.VersionCertainty], \r\n            T.Version" +
                    "WorkflowInstanceID AS [Q_DictionaryPartKitItem.VersionWorkflowInstanceID], \r\n   " +
                    "         T.VersionUpdatedBy AS [Q_DictionaryPartKitItem.VersionUpdatedBy], \r\n   " +
                    "         T.VersionDeletedBy AS [Q_DictionaryPartKitItem.VersionDeletedBy], \r\n   " +
                    "         T.VersionOwnerContactID AS [Q_DictionaryPartKitItem.VersionOwnerContact" +
                    "ID], \r\n            T.VersionOwnerCompanyID AS [Q_DictionaryPartKitItem.VersionOw" +
                    "nerCompanyID], \r\n            T.VersionUpdated AS [Q_DictionaryPartKitItem.Versio" +
                    "nUpdated], \r\n            True AS _from0\r\n        FROM NKDC.DictionaryPartKitItem" +
                    "s AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.Q_DictionaryProcedure
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView37()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3075);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Q_DictionaryProcedure\r\n        [NKD.Module.Bu");
            viewString.Append("sinessObjects.Store.Q_DictionaryProcedure](T1.[Q_DictionaryProcedure.ProcedureID");
            viewString.Append("], T1.[Q_DictionaryProcedure.StandardProcedureName], T1.[Q_DictionaryProcedure.C");
            viewString.Append("ustomProcedureName], T1.[Q_DictionaryProcedure.Description], T1.[Q_DictionaryPro");
            viewString.Append("cedure.TaskID], T1.[Q_DictionaryProcedure.ModelID], T1.[Q_DictionaryProcedure.Pa");
            viewString.Append("rtID], T1.[Q_DictionaryProcedure.Sequence], T1.[Q_DictionaryProcedure.ValidFrom]");
            viewString.Append(", T1.[Q_DictionaryProcedure.ValidUntil], T1.[Q_DictionaryProcedure.FileDataID], ");
            viewString.Append("T1.[Q_DictionaryProcedure.CountryID], T1.[Q_DictionaryProcedure.CountryStateID],");
            viewString.Append(" T1.[Q_DictionaryProcedure.Place], T1.[Q_DictionaryProcedure.LocationID], T1.[Q_");
            viewString.Append("DictionaryProcedure.ProvinceID], T1.[Q_DictionaryProcedure.Version], T1.[Q_Dicti");
            viewString.Append("onaryProcedure.VersionAntecedentID], T1.[Q_DictionaryProcedure.VersionCertainty]");
            viewString.Append(", T1.[Q_DictionaryProcedure.VersionWorkflowInstanceID], T1.[Q_DictionaryProcedur");
            viewString.Append("e.VersionUpdatedBy], T1.[Q_DictionaryProcedure.VersionDeletedBy], T1.[Q_Dictiona");
            viewString.Append("ryProcedure.VersionOwnerContactID], T1.[Q_DictionaryProcedure.VersionOwnerCompan");
            viewString.Append("yID], T1.[Q_DictionaryProcedure.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n ");
            viewString.Append("           T.ProcedureID AS [Q_DictionaryProcedure.ProcedureID], \r\n            T");
            viewString.Append(".StandardProcedureName AS [Q_DictionaryProcedure.StandardProcedureName], \r\n     ");
            viewString.Append("       T.CustomProcedureName AS [Q_DictionaryProcedure.CustomProcedureName], \r\n ");
            viewString.Append("           T.Description AS [Q_DictionaryProcedure.Description], \r\n            T");
            viewString.Append(".TaskID AS [Q_DictionaryProcedure.TaskID], \r\n            T.ModelID AS [Q_Diction");
            viewString.Append("aryProcedure.ModelID], \r\n            T.PartID AS [Q_DictionaryProcedure.PartID],");
            viewString.Append(" \r\n            T.Sequence AS [Q_DictionaryProcedure.Sequence], \r\n            T.V");
            viewString.Append("alidFrom AS [Q_DictionaryProcedure.ValidFrom], \r\n            T.ValidUntil AS [Q_");
            viewString.Append("DictionaryProcedure.ValidUntil], \r\n            T.FileDataID AS [Q_DictionaryProc");
            viewString.Append("edure.FileDataID], \r\n            T.CountryID AS [Q_DictionaryProcedure.CountryID");
            viewString.Append("], \r\n            T.CountryStateID AS [Q_DictionaryProcedure.CountryStateID], \r\n ");
            viewString.Append("           T.Place AS [Q_DictionaryProcedure.Place], \r\n            T.LocationID ");
            viewString.Append("AS [Q_DictionaryProcedure.LocationID], \r\n            T.ProvinceID AS [Q_Dictiona");
            viewString.Append("ryProcedure.ProvinceID], \r\n            T.Version AS [Q_DictionaryProcedure.Versi");
            viewString.Append("on], \r\n            T.VersionAntecedentID AS [Q_DictionaryProcedure.VersionAntece");
            viewString.Append("dentID], \r\n            T.VersionCertainty AS [Q_DictionaryProcedure.VersionCerta");
            viewString.Append("inty], \r\n            T.VersionWorkflowInstanceID AS [Q_DictionaryProcedure.Versi");
            viewString.Append("onWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [Q_DictionaryProcedur");
            viewString.Append("e.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [Q_DictionaryProcedure.");
            viewString.Append("VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [Q_DictionaryProcedu");
            viewString.Append("re.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [Q_Dictionar");
            viewString.Append("yProcedure.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [Q_Dictiona");
            viewString.Append("ryProcedure.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.Dic");
            viewString.Append("tionaryProcedures AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.Q_DictionaryProcedure", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.Q_DictionaryWarrantyType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView38()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.Q_DictionaryWarrantyType", "\r\n    SELECT VALUE -- Constructing Q_DictionaryWarrantyType\r\n        [NKD.Module." +
                    "BusinessObjects.Store.Q_DictionaryWarrantyType](T1.[Q_DictionaryWarrantyType.War" +
                    "rantyTypeID], T1.[Q_DictionaryWarrantyType.StandardWarrantyTypeName], T1.[Q_Dict" +
                    "ionaryWarrantyType.CustomWarrantyTypeName], T1.[Q_DictionaryWarrantyType.Descrip" +
                    "tion], T1.[Q_DictionaryWarrantyType.Version], T1.[Q_DictionaryWarrantyType.Versi" +
                    "onAntecedentID], T1.[Q_DictionaryWarrantyType.VersionCertainty], T1.[Q_Dictionar" +
                    "yWarrantyType.VersionWorkflowInstanceID], T1.[Q_DictionaryWarrantyType.VersionUp" +
                    "datedBy], T1.[Q_DictionaryWarrantyType.VersionDeletedBy], T1.[Q_DictionaryWarran" +
                    "tyType.VersionOwnerContactID], T1.[Q_DictionaryWarrantyType.VersionOwnerCompanyI" +
                    "D], T1.[Q_DictionaryWarrantyType.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n" +
                    "            T.WarrantyTypeID AS [Q_DictionaryWarrantyType.WarrantyTypeID], \r\n   " +
                    "         T.StandardWarrantyTypeName AS [Q_DictionaryWarrantyType.StandardWarrant" +
                    "yTypeName], \r\n            T.CustomWarrantyTypeName AS [Q_DictionaryWarrantyType." +
                    "CustomWarrantyTypeName], \r\n            T.Description AS [Q_DictionaryWarrantyTyp" +
                    "e.Description], \r\n            T.Version AS [Q_DictionaryWarrantyType.Version], \r" +
                    "\n            T.VersionAntecedentID AS [Q_DictionaryWarrantyType.VersionAnteceden" +
                    "tID], \r\n            T.VersionCertainty AS [Q_DictionaryWarrantyType.VersionCerta" +
                    "inty], \r\n            T.VersionWorkflowInstanceID AS [Q_DictionaryWarrantyType.Ve" +
                    "rsionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [Q_DictionaryWarra" +
                    "ntyType.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [Q_DictionaryWarr" +
                    "antyType.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [Q_Dictiona" +
                    "ryWarrantyType.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS " +
                    "[Q_DictionaryWarrantyType.VersionOwnerCompanyID], \r\n            T.VersionUpdated" +
                    " AS [Q_DictionaryWarrantyType.VersionUpdated], \r\n            True AS _from0\r\n   " +
                    "     FROM NKDC.DictionaryWarrantyTypes AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.Q_ModelPart
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView39()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.Q_ModelPart", @"
    SELECT VALUE -- Constructing Q_ModelPart
        [NKD.Module.BusinessObjects.Store.Q_ModelPart](T1.[Q_ModelPart.ModelPartID], T1.[Q_ModelPart.ModelID], T1.[Q_ModelPart.PartID], T1.[Q_ModelPart.Version], T1.[Q_ModelPart.VersionAntecedentID], T1.[Q_ModelPart.VersionCertainty], T1.[Q_ModelPart.VersionWorkflowInstanceID], T1.[Q_ModelPart.VersionUpdatedBy], T1.[Q_ModelPart.VersionDeletedBy], T1.[Q_ModelPart.VersionOwnerContactID], T1.[Q_ModelPart.VersionOwnerCompanyID], T1.[Q_ModelPart.VersionUpdated])
    FROM (
        SELECT 
            T.ModelPartID AS [Q_ModelPart.ModelPartID], 
            T.ModelID AS [Q_ModelPart.ModelID], 
            T.PartID AS [Q_ModelPart.PartID], 
            T.Version AS [Q_ModelPart.Version], 
            T.VersionAntecedentID AS [Q_ModelPart.VersionAntecedentID], 
            T.VersionCertainty AS [Q_ModelPart.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [Q_ModelPart.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [Q_ModelPart.VersionUpdatedBy], 
            T.VersionDeletedBy AS [Q_ModelPart.VersionDeletedBy], 
            T.VersionOwnerContactID AS [Q_ModelPart.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [Q_ModelPart.VersionOwnerCompanyID], 
            T.VersionUpdated AS [Q_ModelPart.VersionUpdated], 
            True AS _from0
        FROM NKDC.ModelParts AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.Q_ModelPartKit
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView40()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.Q_ModelPartKit", "\r\n    SELECT VALUE -- Constructing Q_ModelPartKit\r\n        [NKD.Module.BusinessOb" +
                    "jects.Store.Q_ModelPartKit](T1.[Q_ModelPartKit.ModelPartKitID], T1.[Q_ModelPartK" +
                    "it.ModelPartID], T1.[Q_ModelPartKit.PartKitID], T1.[Q_ModelPartKit.Version], T1." +
                    "[Q_ModelPartKit.VersionAntecedentID], T1.[Q_ModelPartKit.VersionCertainty], T1.[" +
                    "Q_ModelPartKit.VersionWorkflowInstanceID], T1.[Q_ModelPartKit.VersionUpdatedBy]," +
                    " T1.[Q_ModelPartKit.VersionDeletedBy], T1.[Q_ModelPartKit.VersionOwnerContactID]" +
                    ", T1.[Q_ModelPartKit.VersionOwnerCompanyID], T1.[Q_ModelPartKit.VersionUpdated])" +
                    "\r\n    FROM (\r\n        SELECT \r\n            T.ModelPartKitID AS [Q_ModelPartKit.M" +
                    "odelPartKitID], \r\n            T.ModelPartID AS [Q_ModelPartKit.ModelPartID], \r\n " +
                    "           T.PartKitID AS [Q_ModelPartKit.PartKitID], \r\n            T.Version AS" +
                    " [Q_ModelPartKit.Version], \r\n            T.VersionAntecedentID AS [Q_ModelPartKi" +
                    "t.VersionAntecedentID], \r\n            T.VersionCertainty AS [Q_ModelPartKit.Vers" +
                    "ionCertainty], \r\n            T.VersionWorkflowInstanceID AS [Q_ModelPartKit.Vers" +
                    "ionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [Q_ModelPartKit.Vers" +
                    "ionUpdatedBy], \r\n            T.VersionDeletedBy AS [Q_ModelPartKit.VersionDelete" +
                    "dBy], \r\n            T.VersionOwnerContactID AS [Q_ModelPartKit.VersionOwnerConta" +
                    "ctID], \r\n            T.VersionOwnerCompanyID AS [Q_ModelPartKit.VersionOwnerComp" +
                    "anyID], \r\n            T.VersionUpdated AS [Q_ModelPartKit.VersionUpdated], \r\n   " +
                    "         True AS _from0\r\n        FROM NKDC.ModelPartKits AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.Q_ModelProcedure
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView41()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.Q_ModelProcedure", "\r\n    SELECT VALUE -- Constructing Q_ModelProcedure\r\n        [NKD.Module.Business" +
                    "Objects.Store.Q_ModelProcedure](T1.[Q_ModelProcedure.ModelProcedureID], T1.[Q_Mo" +
                    "delProcedure.ModelID], T1.[Q_ModelProcedure.ProcedureID], T1.[Q_ModelProcedure.S" +
                    "equence], T1.[Q_ModelProcedure.Frequency], T1.[Q_ModelProcedure.FrequencyUnitID]" +
                    ", T1.[Q_ModelProcedure.RiskFactor], T1.[Q_ModelProcedure.Version], T1.[Q_ModelPr" +
                    "ocedure.VersionAntecedentID], T1.[Q_ModelProcedure.VersionCertainty], T1.[Q_Mode" +
                    "lProcedure.VersionWorkflowInstanceID], T1.[Q_ModelProcedure.VersionUpdatedBy], T" +
                    "1.[Q_ModelProcedure.VersionDeletedBy], T1.[Q_ModelProcedure.VersionOwnerContactI" +
                    "D], T1.[Q_ModelProcedure.VersionOwnerCompanyID], T1.[Q_ModelProcedure.VersionUpd" +
                    "ated])\r\n    FROM (\r\n        SELECT \r\n            T.ModelProcedureID AS [Q_ModelP" +
                    "rocedure.ModelProcedureID], \r\n            T.ModelID AS [Q_ModelProcedure.ModelID" +
                    "], \r\n            T.ProcedureID AS [Q_ModelProcedure.ProcedureID], \r\n            " +
                    "T.Sequence AS [Q_ModelProcedure.Sequence], \r\n            T.Frequency AS [Q_Model" +
                    "Procedure.Frequency], \r\n            T.FrequencyUnitID AS [Q_ModelProcedure.Frequ" +
                    "encyUnitID], \r\n            T.RiskFactor AS [Q_ModelProcedure.RiskFactor], \r\n    " +
                    "        T.Version AS [Q_ModelProcedure.Version], \r\n            T.VersionAntecede" +
                    "ntID AS [Q_ModelProcedure.VersionAntecedentID], \r\n            T.VersionCertainty" +
                    " AS [Q_ModelProcedure.VersionCertainty], \r\n            T.VersionWorkflowInstance" +
                    "ID AS [Q_ModelProcedure.VersionWorkflowInstanceID], \r\n            T.VersionUpdat" +
                    "edBy AS [Q_ModelProcedure.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS" +
                    " [Q_ModelProcedure.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [" +
                    "Q_ModelProcedure.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID A" +
                    "S [Q_ModelProcedure.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [Q" +
                    "_ModelProcedure.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC" +
                    ".ModelProcedures AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.Q_ModelProcedureTask
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView42()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2448);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Q_ModelProcedureTask\r\n        [NKD.Module.Bus");
            viewString.Append("inessObjects.Store.Q_ModelProcedureTask](T1.[Q_ModelProcedureTask.ModelProcedure");
            viewString.Append("TaskID], T1.[Q_ModelProcedureTask.ModelProcedureID], T1.[Q_ModelProcedureTask.Ta");
            viewString.Append("skID], T1.[Q_ModelProcedureTask.Sequence], T1.[Q_ModelProcedureTask.FileDataID],");
            viewString.Append(" T1.[Q_ModelProcedureTask.StatedRevisionNumber], T1.[Q_ModelProcedureTask.Stated");
            viewString.Append("RevisionPublishDate], T1.[Q_ModelProcedureTask.EstimatedDuration], T1.[Q_ModelPr");
            viewString.Append("ocedureTask.EstimatedDurationUnitID], T1.[Q_ModelProcedureTask.Version], T1.[Q_M");
            viewString.Append("odelProcedureTask.VersionAntecedentID], T1.[Q_ModelProcedureTask.VersionCertaint");
            viewString.Append("y], T1.[Q_ModelProcedureTask.VersionWorkflowInstanceID], T1.[Q_ModelProcedureTas");
            viewString.Append("k.VersionUpdatedBy], T1.[Q_ModelProcedureTask.VersionDeletedBy], T1.[Q_ModelProc");
            viewString.Append("edureTask.VersionOwnerContactID], T1.[Q_ModelProcedureTask.VersionOwnerCompanyID");
            viewString.Append("], T1.[Q_ModelProcedureTask.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n     ");
            viewString.Append("       T.ModelProcedureTaskID AS [Q_ModelProcedureTask.ModelProcedureTaskID], \r\n");
            viewString.Append("            T.ModelProcedureID AS [Q_ModelProcedureTask.ModelProcedureID], \r\n   ");
            viewString.Append("         T.TaskID AS [Q_ModelProcedureTask.TaskID], \r\n            T.Sequence AS ");
            viewString.Append("[Q_ModelProcedureTask.Sequence], \r\n            T.FileDataID AS [Q_ModelProcedure");
            viewString.Append("Task.FileDataID], \r\n            T.StatedRevisionNumber AS [Q_ModelProcedureTask.");
            viewString.Append("StatedRevisionNumber], \r\n            T.StatedRevisionPublishDate AS [Q_ModelProc");
            viewString.Append("edureTask.StatedRevisionPublishDate], \r\n            T.EstimatedDuration AS [Q_Mo");
            viewString.Append("delProcedureTask.EstimatedDuration], \r\n            T.EstimatedDurationUnitID AS ");
            viewString.Append("[Q_ModelProcedureTask.EstimatedDurationUnitID], \r\n            T.Version AS [Q_Mo");
            viewString.Append("delProcedureTask.Version], \r\n            T.VersionAntecedentID AS [Q_ModelProced");
            viewString.Append("ureTask.VersionAntecedentID], \r\n            T.VersionCertainty AS [Q_ModelProced");
            viewString.Append("ureTask.VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [Q_Model");
            viewString.Append("ProcedureTask.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [Q");
            viewString.Append("_ModelProcedureTask.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [Q_Mo");
            viewString.Append("delProcedureTask.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [Q_");
            viewString.Append("ModelProcedureTask.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID");
            viewString.Append(" AS [Q_ModelProcedureTask.VersionOwnerCompanyID], \r\n            T.VersionUpdated");
            viewString.Append(" AS [Q_ModelProcedureTask.VersionUpdated], \r\n            True AS _from0\r\n       ");
            viewString.Append(" FROM NKDC.ModelProcedureTasks AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.Q_ModelProcedureTask", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.Q_ModelProcedureTaskPart
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView43()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.Q_ModelProcedureTaskPart", "\r\n    SELECT VALUE -- Constructing Q_ModelProcedureTaskPart\r\n        [NKD.Module." +
                    "BusinessObjects.Store.Q_ModelProcedureTaskPart](T1.[Q_ModelProcedureTaskPart.Mod" +
                    "elProcedureTaskPartID], T1.[Q_ModelProcedureTaskPart.ModelProcedureTaskID], T1.[" +
                    "Q_ModelProcedureTaskPart.PartID], T1.[Q_ModelProcedureTaskPart.PartQuantity], T1" +
                    ".[Q_ModelProcedureTaskPart.Version], T1.[Q_ModelProcedureTaskPart.VersionAnteced" +
                    "entID], T1.[Q_ModelProcedureTaskPart.VersionCertainty], T1.[Q_ModelProcedureTask" +
                    "Part.VersionWorkflowInstanceID], T1.[Q_ModelProcedureTaskPart.VersionUpdatedBy]," +
                    " T1.[Q_ModelProcedureTaskPart.VersionDeletedBy], T1.[Q_ModelProcedureTaskPart.Ve" +
                    "rsionOwnerContactID], T1.[Q_ModelProcedureTaskPart.VersionOwnerCompanyID], T1.[Q" +
                    "_ModelProcedureTaskPart.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n         " +
                    "   T.ModelProcedureTaskPartID AS [Q_ModelProcedureTaskPart.ModelProcedureTaskPar" +
                    "tID], \r\n            T.ModelProcedureTaskID AS [Q_ModelProcedureTaskPart.ModelPro" +
                    "cedureTaskID], \r\n            T.PartID AS [Q_ModelProcedureTaskPart.PartID], \r\n  " +
                    "          T.PartQuantity AS [Q_ModelProcedureTaskPart.PartQuantity], \r\n         " +
                    "   T.Version AS [Q_ModelProcedureTaskPart.Version], \r\n            T.VersionAntec" +
                    "edentID AS [Q_ModelProcedureTaskPart.VersionAntecedentID], \r\n            T.Versi" +
                    "onCertainty AS [Q_ModelProcedureTaskPart.VersionCertainty], \r\n            T.Vers" +
                    "ionWorkflowInstanceID AS [Q_ModelProcedureTaskPart.VersionWorkflowInstanceID], \r" +
                    "\n            T.VersionUpdatedBy AS [Q_ModelProcedureTaskPart.VersionUpdatedBy], " +
                    "\r\n            T.VersionDeletedBy AS [Q_ModelProcedureTaskPart.VersionDeletedBy]," +
                    " \r\n            T.VersionOwnerContactID AS [Q_ModelProcedureTaskPart.VersionOwner" +
                    "ContactID], \r\n            T.VersionOwnerCompanyID AS [Q_ModelProcedureTaskPart.V" +
                    "ersionOwnerCompanyID], \r\n            T.VersionUpdated AS [Q_ModelProcedureTaskPa" +
                    "rt.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.ModelProcedu" +
                    "reTaskParts AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.Q_ModelScheduleCycle
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView44()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2067);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Q_ModelScheduleCycle\r\n        [NKD.Module.Bus");
            viewString.Append("inessObjects.Store.Q_ModelScheduleCycle](T1.[Q_ModelScheduleCycle.ModelScheduleC");
            viewString.Append("ycleID], T1.[Q_ModelScheduleCycle.ModelID], T1.[Q_ModelScheduleCycle.ModelProced");
            viewString.Append("ureID], T1.[Q_ModelScheduleCycle.Sequence], T1.[Q_ModelScheduleCycle.ScheduleFre");
            viewString.Append("quencyUnitID], T1.[Q_ModelScheduleCycle.ScheduleFrequency], T1.[Q_ModelScheduleC");
            viewString.Append("ycle.Version], T1.[Q_ModelScheduleCycle.VersionAntecedentID], T1.[Q_ModelSchedul");
            viewString.Append("eCycle.VersionCertainty], T1.[Q_ModelScheduleCycle.VersionWorkflowInstanceID], T");
            viewString.Append("1.[Q_ModelScheduleCycle.VersionUpdatedBy], T1.[Q_ModelScheduleCycle.VersionDelet");
            viewString.Append("edBy], T1.[Q_ModelScheduleCycle.VersionOwnerContactID], T1.[Q_ModelScheduleCycle");
            viewString.Append(".VersionOwnerCompanyID], T1.[Q_ModelScheduleCycle.VersionUpdated])\r\n    FROM (\r\n");
            viewString.Append("        SELECT \r\n            T.ModelScheduleCycleID AS [Q_ModelScheduleCycle.Mod");
            viewString.Append("elScheduleCycleID], \r\n            T.ModelID AS [Q_ModelScheduleCycle.ModelID], \r");
            viewString.Append("\n            T.ModelProcedureID AS [Q_ModelScheduleCycle.ModelProcedureID], \r\n  ");
            viewString.Append("          T.Sequence AS [Q_ModelScheduleCycle.Sequence], \r\n            T.Schedul");
            viewString.Append("eFrequencyUnitID AS [Q_ModelScheduleCycle.ScheduleFrequencyUnitID], \r\n          ");
            viewString.Append("  T.ScheduleFrequency AS [Q_ModelScheduleCycle.ScheduleFrequency], \r\n           ");
            viewString.Append(" T.Version AS [Q_ModelScheduleCycle.Version], \r\n            T.VersionAntecedentI");
            viewString.Append("D AS [Q_ModelScheduleCycle.VersionAntecedentID], \r\n            T.VersionCertaint");
            viewString.Append("y AS [Q_ModelScheduleCycle.VersionCertainty], \r\n            T.VersionWorkflowIns");
            viewString.Append("tanceID AS [Q_ModelScheduleCycle.VersionWorkflowInstanceID], \r\n            T.Ver");
            viewString.Append("sionUpdatedBy AS [Q_ModelScheduleCycle.VersionUpdatedBy], \r\n            T.Versio");
            viewString.Append("nDeletedBy AS [Q_ModelScheduleCycle.VersionDeletedBy], \r\n            T.VersionOw");
            viewString.Append("nerContactID AS [Q_ModelScheduleCycle.VersionOwnerContactID], \r\n            T.Ve");
            viewString.Append("rsionOwnerCompanyID AS [Q_ModelScheduleCycle.VersionOwnerCompanyID], \r\n         ");
            viewString.Append("   T.VersionUpdated AS [Q_ModelScheduleCycle.VersionUpdated], \r\n            True");
            viewString.Append(" AS _from0\r\n        FROM NKDC.ModelScheduleCycles AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.Q_ModelScheduleCycle", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.Q_ModelWarranty
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView45()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2110);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Q_ModelWarranty\r\n        [NKD.Module.Business");
            viewString.Append("Objects.Store.Q_ModelWarranty](T1.[Q_ModelWarranty.ModelWarrantyID], T1.[Q_Model");
            viewString.Append("Warranty.ModelID], T1.[Q_ModelWarranty.WarrantyTypeID], T1.[Q_ModelWarranty.Warr");
            viewString.Append("antyPeriodUnitID], T1.[Q_ModelWarranty.WarrantyPeriod], T1.[Q_ModelWarranty.Warr");
            viewString.Append("antyExpires], T1.[Q_ModelWarranty.WarrantyRenewal], T1.[Q_ModelWarranty.Supplier");
            viewString.Append("ContractID], T1.[Q_ModelWarranty.Version], T1.[Q_ModelWarranty.VersionAntecedent");
            viewString.Append("ID], T1.[Q_ModelWarranty.VersionCertainty], T1.[Q_ModelWarranty.VersionWorkflowI");
            viewString.Append("nstanceID], T1.[Q_ModelWarranty.VersionUpdatedBy], T1.[Q_ModelWarranty.VersionDe");
            viewString.Append("letedBy], T1.[Q_ModelWarranty.VersionOwnerContactID], T1.[Q_ModelWarranty.Versio");
            viewString.Append("nOwnerCompanyID], T1.[Q_ModelWarranty.VersionUpdated])\r\n    FROM (\r\n        SELE");
            viewString.Append("CT \r\n            T.ModelWarrantyID AS [Q_ModelWarranty.ModelWarrantyID], \r\n     ");
            viewString.Append("       T.ModelID AS [Q_ModelWarranty.ModelID], \r\n            T.WarrantyTypeID AS");
            viewString.Append(" [Q_ModelWarranty.WarrantyTypeID], \r\n            T.WarrantyPeriodUnitID AS [Q_Mo");
            viewString.Append("delWarranty.WarrantyPeriodUnitID], \r\n            T.WarrantyPeriod AS [Q_ModelWar");
            viewString.Append("ranty.WarrantyPeriod], \r\n            T.WarrantyExpires AS [Q_ModelWarranty.Warra");
            viewString.Append("ntyExpires], \r\n            T.WarrantyRenewal AS [Q_ModelWarranty.WarrantyRenewal");
            viewString.Append("], \r\n            T.SupplierContractID AS [Q_ModelWarranty.SupplierContractID], \r");
            viewString.Append("\n            T.Version AS [Q_ModelWarranty.Version], \r\n            T.VersionAnte");
            viewString.Append("cedentID AS [Q_ModelWarranty.VersionAntecedentID], \r\n            T.VersionCertai");
            viewString.Append("nty AS [Q_ModelWarranty.VersionCertainty], \r\n            T.VersionWorkflowInstan");
            viewString.Append("ceID AS [Q_ModelWarranty.VersionWorkflowInstanceID], \r\n            T.VersionUpda");
            viewString.Append("tedBy AS [Q_ModelWarranty.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS");
            viewString.Append(" [Q_ModelWarranty.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [Q");
            viewString.Append("_ModelWarranty.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS ");
            viewString.Append("[Q_ModelWarranty.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [Q_Mo");
            viewString.Append("delWarranty.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.Mod");
            viewString.Append("elWarranties AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.Q_ModelWarranty", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.Q_ProjectPlanTaskModel
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView46()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2802);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Q_ProjectPlanTaskModel\r\n        [NKD.Module.B");
            viewString.Append("usinessObjects.Store.Q_ProjectPlanTaskModel](T1.[Q_ProjectPlanTaskModel.ProjectP");
            viewString.Append("lanTaskModelID], T1.[Q_ProjectPlanTaskModel.ProjectPlanTaskID], T1.[Q_ProjectPla");
            viewString.Append("nTaskModel.ModelID], T1.[Q_ProjectPlanTaskModel.WarehouseModelID], T1.[Q_Project");
            viewString.Append("PlanTaskModel.SupplierModelID], T1.[Q_ProjectPlanTaskModel.QuantityUnitID], T1.[");
            viewString.Append("Q_ProjectPlanTaskModel.QuantityOrdered], T1.[Q_ProjectPlanTaskModel.QuantityDesp");
            viewString.Append("atched], T1.[Q_ProjectPlanTaskModel.QuantityReceived], T1.[Q_ProjectPlanTaskMode");
            viewString.Append("l.QuantityUsed], T1.[Q_ProjectPlanTaskModel.Used], T1.[Q_ProjectPlanTaskModel.No");
            viewString.Append("te], T1.[Q_ProjectPlanTaskModel.Version], T1.[Q_ProjectPlanTaskModel.VersionAnte");
            viewString.Append("cedentID], T1.[Q_ProjectPlanTaskModel.VersionCertainty], T1.[Q_ProjectPlanTaskMo");
            viewString.Append("del.VersionWorkflowInstanceID], T1.[Q_ProjectPlanTaskModel.VersionUpdatedBy], T1");
            viewString.Append(".[Q_ProjectPlanTaskModel.VersionDeletedBy], T1.[Q_ProjectPlanTaskModel.VersionOw");
            viewString.Append("nerContactID], T1.[Q_ProjectPlanTaskModel.VersionOwnerCompanyID], T1.[Q_ProjectP");
            viewString.Append("lanTaskModel.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.Projec");
            viewString.Append("tPlanTaskModelID AS [Q_ProjectPlanTaskModel.ProjectPlanTaskModelID], \r\n         ");
            viewString.Append("   T.ProjectPlanTaskID AS [Q_ProjectPlanTaskModel.ProjectPlanTaskID], \r\n        ");
            viewString.Append("    T.ModelID AS [Q_ProjectPlanTaskModel.ModelID], \r\n            T.WarehouseMode");
            viewString.Append("lID AS [Q_ProjectPlanTaskModel.WarehouseModelID], \r\n            T.SupplierModelI");
            viewString.Append("D AS [Q_ProjectPlanTaskModel.SupplierModelID], \r\n            T.QuantityUnitID AS");
            viewString.Append(" [Q_ProjectPlanTaskModel.QuantityUnitID], \r\n            T.QuantityOrdered AS [Q_");
            viewString.Append("ProjectPlanTaskModel.QuantityOrdered], \r\n            T.QuantityDespatched AS [Q_");
            viewString.Append("ProjectPlanTaskModel.QuantityDespatched], \r\n            T.QuantityReceived AS [Q");
            viewString.Append("_ProjectPlanTaskModel.QuantityReceived], \r\n            T.QuantityUsed AS [Q_Proj");
            viewString.Append("ectPlanTaskModel.QuantityUsed], \r\n            T.Used AS [Q_ProjectPlanTaskModel.");
            viewString.Append("Used], \r\n            T.Note AS [Q_ProjectPlanTaskModel.Note], \r\n            T.Ve");
            viewString.Append("rsion AS [Q_ProjectPlanTaskModel.Version], \r\n            T.VersionAntecedentID A");
            viewString.Append("S [Q_ProjectPlanTaskModel.VersionAntecedentID], \r\n            T.VersionCertainty");
            viewString.Append(" AS [Q_ProjectPlanTaskModel.VersionCertainty], \r\n            T.VersionWorkflowIn");
            viewString.Append("stanceID AS [Q_ProjectPlanTaskModel.VersionWorkflowInstanceID], \r\n            T.");
            viewString.Append("VersionUpdatedBy AS [Q_ProjectPlanTaskModel.VersionUpdatedBy], \r\n            T.V");
            viewString.Append("ersionDeletedBy AS [Q_ProjectPlanTaskModel.VersionDeletedBy], \r\n            T.Ve");
            viewString.Append("rsionOwnerContactID AS [Q_ProjectPlanTaskModel.VersionOwnerContactID], \r\n       ");
            viewString.Append("     T.VersionOwnerCompanyID AS [Q_ProjectPlanTaskModel.VersionOwnerCompanyID], ");
            viewString.Append("\r\n            T.VersionUpdated AS [Q_ProjectPlanTaskModel.VersionUpdated], \r\n   ");
            viewString.Append("         True AS _from0\r\n        FROM NKDC.ProjectPlanTaskModels AS T\r\n    ) AS ");
            viewString.Append("T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.Q_ProjectPlanTaskModel", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.Q_ProjectPlanTaskPart
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView47()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2745);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Q_ProjectPlanTaskPart\r\n        [NKD.Module.Bu");
            viewString.Append("sinessObjects.Store.Q_ProjectPlanTaskPart](T1.[Q_ProjectPlanTaskPart.ProjectPlan");
            viewString.Append("TaskPartID], T1.[Q_ProjectPlanTaskPart.ProjectPlanTaskID], T1.[Q_ProjectPlanTask");
            viewString.Append("Part.PartID], T1.[Q_ProjectPlanTaskPart.WarehousePartID], T1.[Q_ProjectPlanTaskP");
            viewString.Append("art.SupplierPartID], T1.[Q_ProjectPlanTaskPart.QuantityUnitID], T1.[Q_ProjectPla");
            viewString.Append("nTaskPart.QuantityOrdered], T1.[Q_ProjectPlanTaskPart.QuantityDespatched], T1.[Q");
            viewString.Append("_ProjectPlanTaskPart.QuantityReceived], T1.[Q_ProjectPlanTaskPart.QuantityUsed],");
            viewString.Append(" T1.[Q_ProjectPlanTaskPart.Used], T1.[Q_ProjectPlanTaskPart.Note], T1.[Q_Project");
            viewString.Append("PlanTaskPart.Version], T1.[Q_ProjectPlanTaskPart.VersionAntecedentID], T1.[Q_Pro");
            viewString.Append("jectPlanTaskPart.VersionCertainty], T1.[Q_ProjectPlanTaskPart.VersionWorkflowIns");
            viewString.Append("tanceID], T1.[Q_ProjectPlanTaskPart.VersionUpdatedBy], T1.[Q_ProjectPlanTaskPart");
            viewString.Append(".VersionDeletedBy], T1.[Q_ProjectPlanTaskPart.VersionOwnerContactID], T1.[Q_Proj");
            viewString.Append("ectPlanTaskPart.VersionOwnerCompanyID], T1.[Q_ProjectPlanTaskPart.VersionUpdated");
            viewString.Append("])\r\n    FROM (\r\n        SELECT \r\n            T.ProjectPlanTaskPartID AS [Q_Proje");
            viewString.Append("ctPlanTaskPart.ProjectPlanTaskPartID], \r\n            T.ProjectPlanTaskID AS [Q_P");
            viewString.Append("rojectPlanTaskPart.ProjectPlanTaskID], \r\n            T.PartID AS [Q_ProjectPlanT");
            viewString.Append("askPart.PartID], \r\n            T.WarehousePartID AS [Q_ProjectPlanTaskPart.Wareh");
            viewString.Append("ousePartID], \r\n            T.SupplierPartID AS [Q_ProjectPlanTaskPart.SupplierPa");
            viewString.Append("rtID], \r\n            T.QuantityUnitID AS [Q_ProjectPlanTaskPart.QuantityUnitID],");
            viewString.Append(" \r\n            T.QuantityOrdered AS [Q_ProjectPlanTaskPart.QuantityOrdered], \r\n ");
            viewString.Append("           T.QuantityDespatched AS [Q_ProjectPlanTaskPart.QuantityDespatched], \r");
            viewString.Append("\n            T.QuantityReceived AS [Q_ProjectPlanTaskPart.QuantityReceived], \r\n ");
            viewString.Append("           T.QuantityUsed AS [Q_ProjectPlanTaskPart.QuantityUsed], \r\n           ");
            viewString.Append(" T.Used AS [Q_ProjectPlanTaskPart.Used], \r\n            T.Note AS [Q_ProjectPlanT");
            viewString.Append("askPart.Note], \r\n            T.Version AS [Q_ProjectPlanTaskPart.Version], \r\n   ");
            viewString.Append("         T.VersionAntecedentID AS [Q_ProjectPlanTaskPart.VersionAntecedentID], \r");
            viewString.Append("\n            T.VersionCertainty AS [Q_ProjectPlanTaskPart.VersionCertainty], \r\n ");
            viewString.Append("           T.VersionWorkflowInstanceID AS [Q_ProjectPlanTaskPart.VersionWorkflow");
            viewString.Append("InstanceID], \r\n            T.VersionUpdatedBy AS [Q_ProjectPlanTaskPart.VersionU");
            viewString.Append("pdatedBy], \r\n            T.VersionDeletedBy AS [Q_ProjectPlanTaskPart.VersionDel");
            viewString.Append("etedBy], \r\n            T.VersionOwnerContactID AS [Q_ProjectPlanTaskPart.Version");
            viewString.Append("OwnerContactID], \r\n            T.VersionOwnerCompanyID AS [Q_ProjectPlanTaskPart");
            viewString.Append(".VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [Q_ProjectPlanTaskPar");
            viewString.Append("t.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.ProjectPlanTa");
            viewString.Append("skParts AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.Q_ProjectPlanTaskPart", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.Q_Recall
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView48()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2088);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Q_Recall\r\n        [NKD.Module.BusinessObjects");
            viewString.Append(".Store.Q_Recall](T1.[Q_Recall.RecallID], T1.[Q_Recall.GlobalRecallCode], T1.[Q_R");
            viewString.Append("ecall.GlobalRecallOrigin], T1.[Q_Recall.ProjectID], T1.[Q_Recall.Issued], T1.[Q_");
            viewString.Append("Recall.IssuedBy], T1.[Q_Recall.Received], T1.[Q_Recall.ReceivedBy], T1.[Q_Recall");
            viewString.Append(".Actioned], T1.[Q_Recall.ActionedBy], T1.[Q_Recall.ResponsibleContactID], T1.[Q_");
            viewString.Append("Recall.Description], T1.[Q_Recall.Version], T1.[Q_Recall.VersionAntecedentID], T");
            viewString.Append("1.[Q_Recall.VersionCertainty], T1.[Q_Recall.VersionWorkflowInstanceID], T1.[Q_Re");
            viewString.Append("call.VersionUpdatedBy], T1.[Q_Recall.VersionDeletedBy], T1.[Q_Recall.VersionOwne");
            viewString.Append("rContactID], T1.[Q_Recall.VersionOwnerCompanyID], T1.[Q_Recall.VersionUpdated])\r");
            viewString.Append("\n    FROM (\r\n        SELECT \r\n            T.RecallID AS [Q_Recall.RecallID], \r\n ");
            viewString.Append("           T.GlobalRecallCode AS [Q_Recall.GlobalRecallCode], \r\n            T.Gl");
            viewString.Append("obalRecallOrigin AS [Q_Recall.GlobalRecallOrigin], \r\n            T.ProjectID AS ");
            viewString.Append("[Q_Recall.ProjectID], \r\n            T.Issued AS [Q_Recall.Issued], \r\n           ");
            viewString.Append(" T.IssuedBy AS [Q_Recall.IssuedBy], \r\n            T.Received AS [Q_Recall.Receiv");
            viewString.Append("ed], \r\n            T.ReceivedBy AS [Q_Recall.ReceivedBy], \r\n            T.Action");
            viewString.Append("ed AS [Q_Recall.Actioned], \r\n            T.ActionedBy AS [Q_Recall.ActionedBy], ");
            viewString.Append("\r\n            T.ResponsibleContactID AS [Q_Recall.ResponsibleContactID], \r\n     ");
            viewString.Append("       T.Description AS [Q_Recall.Description], \r\n            T.Version AS [Q_Re");
            viewString.Append("call.Version], \r\n            T.VersionAntecedentID AS [Q_Recall.VersionAnteceden");
            viewString.Append("tID], \r\n            T.VersionCertainty AS [Q_Recall.VersionCertainty], \r\n       ");
            viewString.Append("     T.VersionWorkflowInstanceID AS [Q_Recall.VersionWorkflowInstanceID], \r\n    ");
            viewString.Append("        T.VersionUpdatedBy AS [Q_Recall.VersionUpdatedBy], \r\n            T.Versi");
            viewString.Append("onDeletedBy AS [Q_Recall.VersionDeletedBy], \r\n            T.VersionOwnerContactI");
            viewString.Append("D AS [Q_Recall.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS ");
            viewString.Append("[Q_Recall.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [Q_Recall.Ve");
            viewString.Append("rsionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.Recalls AS T\r\n   ");
            viewString.Append(" ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.Q_Recall", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.Q_RecallModel
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView49()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.Q_RecallModel", "\r\n    SELECT VALUE -- Constructing Q_RecallModel\r\n        [NKD.Module.BusinessObj" +
                    "ects.Store.Q_RecallModel](T1.[Q_RecallModel.RecallModelID], T1.[Q_RecallModel.Re" +
                    "callID], T1.[Q_RecallModel.ModelID], T1.[Q_RecallModel.Description], T1.[Q_Recal" +
                    "lModel.Version], T1.[Q_RecallModel.VersionAntecedentID], T1.[Q_RecallModel.Versi" +
                    "onCertainty], T1.[Q_RecallModel.VersionWorkflowInstanceID], T1.[Q_RecallModel.Ve" +
                    "rsionUpdatedBy], T1.[Q_RecallModel.VersionDeletedBy], T1.[Q_RecallModel.VersionO" +
                    "wnerContactID], T1.[Q_RecallModel.VersionOwnerCompanyID], T1.[Q_RecallModel.Vers" +
                    "ionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.RecallModelID AS [Q_Rec" +
                    "allModel.RecallModelID], \r\n            T.RecallID AS [Q_RecallModel.RecallID], \r" +
                    "\n            T.ModelID AS [Q_RecallModel.ModelID], \r\n            T.Description A" +
                    "S [Q_RecallModel.Description], \r\n            T.Version AS [Q_RecallModel.Version" +
                    "], \r\n            T.VersionAntecedentID AS [Q_RecallModel.VersionAntecedentID], \r" +
                    "\n            T.VersionCertainty AS [Q_RecallModel.VersionCertainty], \r\n         " +
                    "   T.VersionWorkflowInstanceID AS [Q_RecallModel.VersionWorkflowInstanceID], \r\n " +
                    "           T.VersionUpdatedBy AS [Q_RecallModel.VersionUpdatedBy], \r\n           " +
                    " T.VersionDeletedBy AS [Q_RecallModel.VersionDeletedBy], \r\n            T.Version" +
                    "OwnerContactID AS [Q_RecallModel.VersionOwnerContactID], \r\n            T.Version" +
                    "OwnerCompanyID AS [Q_RecallModel.VersionOwnerCompanyID], \r\n            T.Version" +
                    "Updated AS [Q_RecallModel.VersionUpdated], \r\n            True AS _from0\r\n       " +
                    " FROM NKDC.RecallModels AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.Q_RecallModelAsset
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView50()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.Q_RecallModelAsset", "\r\n    SELECT VALUE -- Constructing Q_RecallModelAsset\r\n        [NKD.Module.Busine" +
                    "ssObjects.Store.Q_RecallModelAsset](T1.[Q_RecallModelAsset.RecallModelAssetID], " +
                    "T1.[Q_RecallModelAsset.RecallModelID], T1.[Q_RecallModelAsset.AssetID], T1.[Q_Re" +
                    "callModelAsset.ProjectPlanID], T1.[Q_RecallModelAsset.Version], T1.[Q_RecallMode" +
                    "lAsset.VersionAntecedentID], T1.[Q_RecallModelAsset.VersionCertainty], T1.[Q_Rec" +
                    "allModelAsset.VersionWorkflowInstanceID], T1.[Q_RecallModelAsset.VersionUpdatedB" +
                    "y], T1.[Q_RecallModelAsset.VersionDeletedBy], T1.[Q_RecallModelAsset.VersionOwne" +
                    "rContactID], T1.[Q_RecallModelAsset.VersionOwnerCompanyID], T1.[Q_RecallModelAss" +
                    "et.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.RecallModelAsset" +
                    "ID AS [Q_RecallModelAsset.RecallModelAssetID], \r\n            T.RecallModelID AS " +
                    "[Q_RecallModelAsset.RecallModelID], \r\n            T.AssetID AS [Q_RecallModelAss" +
                    "et.AssetID], \r\n            T.ProjectPlanID AS [Q_RecallModelAsset.ProjectPlanID]" +
                    ", \r\n            T.Version AS [Q_RecallModelAsset.Version], \r\n            T.Versi" +
                    "onAntecedentID AS [Q_RecallModelAsset.VersionAntecedentID], \r\n            T.Vers" +
                    "ionCertainty AS [Q_RecallModelAsset.VersionCertainty], \r\n            T.VersionWo" +
                    "rkflowInstanceID AS [Q_RecallModelAsset.VersionWorkflowInstanceID], \r\n          " +
                    "  T.VersionUpdatedBy AS [Q_RecallModelAsset.VersionUpdatedBy], \r\n            T.V" +
                    "ersionDeletedBy AS [Q_RecallModelAsset.VersionDeletedBy], \r\n            T.Versio" +
                    "nOwnerContactID AS [Q_RecallModelAsset.VersionOwnerContactID], \r\n            T.V" +
                    "ersionOwnerCompanyID AS [Q_RecallModelAsset.VersionOwnerCompanyID], \r\n          " +
                    "  T.VersionUpdated AS [Q_RecallModelAsset.VersionUpdated], \r\n            True AS" +
                    " _from0\r\n        FROM NKDC.RecallModelAssets AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.Q_SupplierModel
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView51()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2793);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Q_SupplierModel\r\n        [NKD.Module.Business");
            viewString.Append("Objects.Store.Q_SupplierModel](T1.[Q_SupplierModel.SupplierModelID], T1.[Q_Suppl");
            viewString.Append("ierModel.SupplierID], T1.[Q_SupplierModel.ModelID], T1.[Q_SupplierModel.Sequence");
            viewString.Append("], T1.[Q_SupplierModel.SupplierContractID], T1.[Q_SupplierModel.IsOEM], T1.[Q_Su");
            viewString.Append("pplierModel.OrderQuantityMinimum], T1.[Q_SupplierModel.CurrencyID], T1.[Q_Suppli");
            viewString.Append("erModel.PricePerUnit], T1.[Q_SupplierModel.PriceUnitID], T1.[Q_SupplierModel.Sup");
            viewString.Append("plierModelNumber], T1.[Q_SupplierModel.SupplierModelDescription], T1.[Q_Supplier");
            viewString.Append("Model.SupplierFileDataID], T1.[Q_SupplierModel.LeadTimeUnitID], T1.[Q_SupplierMo");
            viewString.Append("del.LeadTime], T1.[Q_SupplierModel.Version], T1.[Q_SupplierModel.VersionAntecede");
            viewString.Append("ntID], T1.[Q_SupplierModel.VersionCertainty], T1.[Q_SupplierModel.VersionWorkflo");
            viewString.Append("wInstanceID], T1.[Q_SupplierModel.VersionUpdatedBy], T1.[Q_SupplierModel.Version");
            viewString.Append("DeletedBy], T1.[Q_SupplierModel.VersionOwnerContactID], T1.[Q_SupplierModel.Vers");
            viewString.Append("ionOwnerCompanyID], T1.[Q_SupplierModel.VersionUpdated])\r\n    FROM (\r\n        SE");
            viewString.Append("LECT \r\n            T.SupplierModelID AS [Q_SupplierModel.SupplierModelID], \r\n   ");
            viewString.Append("         T.SupplierID AS [Q_SupplierModel.SupplierID], \r\n            T.ModelID A");
            viewString.Append("S [Q_SupplierModel.ModelID], \r\n            T.Sequence AS [Q_SupplierModel.Sequen");
            viewString.Append("ce], \r\n            T.SupplierContractID AS [Q_SupplierModel.SupplierContractID],");
            viewString.Append(" \r\n            T.IsOEM AS [Q_SupplierModel.IsOEM], \r\n            T.OrderQuantity");
            viewString.Append("Minimum AS [Q_SupplierModel.OrderQuantityMinimum], \r\n            T.CurrencyID AS");
            viewString.Append(" [Q_SupplierModel.CurrencyID], \r\n            T.PricePerUnit AS [Q_SupplierModel.");
            viewString.Append("PricePerUnit], \r\n            T.PriceUnitID AS [Q_SupplierModel.PriceUnitID], \r\n ");
            viewString.Append("           T.SupplierModelNumber AS [Q_SupplierModel.SupplierModelNumber], \r\n   ");
            viewString.Append("         T.SupplierModelDescription AS [Q_SupplierModel.SupplierModelDescription");
            viewString.Append("], \r\n            T.SupplierFileDataID AS [Q_SupplierModel.SupplierFileDataID], \r");
            viewString.Append("\n            T.LeadTimeUnitID AS [Q_SupplierModel.LeadTimeUnitID], \r\n           ");
            viewString.Append(" T.LeadTime AS [Q_SupplierModel.LeadTime], \r\n            T.Version AS [Q_Supplie");
            viewString.Append("rModel.Version], \r\n            T.VersionAntecedentID AS [Q_SupplierModel.Version");
            viewString.Append("AntecedentID], \r\n            T.VersionCertainty AS [Q_SupplierModel.VersionCerta");
            viewString.Append("inty], \r\n            T.VersionWorkflowInstanceID AS [Q_SupplierModel.VersionWork");
            viewString.Append("flowInstanceID], \r\n            T.VersionUpdatedBy AS [Q_SupplierModel.VersionUpd");
            viewString.Append("atedBy], \r\n            T.VersionDeletedBy AS [Q_SupplierModel.VersionDeletedBy],");
            viewString.Append(" \r\n            T.VersionOwnerContactID AS [Q_SupplierModel.VersionOwnerContactID");
            viewString.Append("], \r\n            T.VersionOwnerCompanyID AS [Q_SupplierModel.VersionOwnerCompany");
            viewString.Append("ID], \r\n            T.VersionUpdated AS [Q_SupplierModel.VersionUpdated], \r\n     ");
            viewString.Append("       True AS _from0\r\n        FROM NKDC.SupplierModels AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.Q_SupplierModel", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.Q_SupplierPart
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView52()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2730);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Q_SupplierPart\r\n        [NKD.Module.BusinessO");
            viewString.Append("bjects.Store.Q_SupplierPart](T1.[Q_SupplierPart.SupplierPartID], T1.[Q_SupplierP");
            viewString.Append("art.SupplierID], T1.[Q_SupplierPart.PartID], T1.[Q_SupplierPart.Sequence], T1.[Q");
            viewString.Append("_SupplierPart.SupplierContractID], T1.[Q_SupplierPart.IsOEM], T1.[Q_SupplierPart");
            viewString.Append(".OrderQuantityMinimum], T1.[Q_SupplierPart.CurrencyID], T1.[Q_SupplierPart.Price");
            viewString.Append("PerUnit], T1.[Q_SupplierPart.PriceUnitID], T1.[Q_SupplierPart.SupplierPartNumber");
            viewString.Append("], T1.[Q_SupplierPart.SupplierPartDescription], T1.[Q_SupplierPart.SupplierFileD");
            viewString.Append("ataID], T1.[Q_SupplierPart.LeadTimeUnitID], T1.[Q_SupplierPart.LeadTime], T1.[Q_");
            viewString.Append("SupplierPart.Version], T1.[Q_SupplierPart.VersionAntecedentID], T1.[Q_SupplierPa");
            viewString.Append("rt.VersionCertainty], T1.[Q_SupplierPart.VersionWorkflowInstanceID], T1.[Q_Suppl");
            viewString.Append("ierPart.VersionUpdatedBy], T1.[Q_SupplierPart.VersionDeletedBy], T1.[Q_SupplierP");
            viewString.Append("art.VersionOwnerContactID], T1.[Q_SupplierPart.VersionOwnerCompanyID], T1.[Q_Sup");
            viewString.Append("plierPart.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.SupplierP");
            viewString.Append("artID AS [Q_SupplierPart.SupplierPartID], \r\n            T.SupplierID AS [Q_Suppl");
            viewString.Append("ierPart.SupplierID], \r\n            T.PartID AS [Q_SupplierPart.PartID], \r\n      ");
            viewString.Append("      T.Sequence AS [Q_SupplierPart.Sequence], \r\n            T.SupplierContractI");
            viewString.Append("D AS [Q_SupplierPart.SupplierContractID], \r\n            T.IsOEM AS [Q_SupplierPa");
            viewString.Append("rt.IsOEM], \r\n            T.OrderQuantityMinimum AS [Q_SupplierPart.OrderQuantity");
            viewString.Append("Minimum], \r\n            T.CurrencyID AS [Q_SupplierPart.CurrencyID], \r\n         ");
            viewString.Append("   T.PricePerUnit AS [Q_SupplierPart.PricePerUnit], \r\n            T.PriceUnitID ");
            viewString.Append("AS [Q_SupplierPart.PriceUnitID], \r\n            T.SupplierPartNumber AS [Q_Suppli");
            viewString.Append("erPart.SupplierPartNumber], \r\n            T.SupplierPartDescription AS [Q_Suppli");
            viewString.Append("erPart.SupplierPartDescription], \r\n            T.SupplierFileDataID AS [Q_Suppli");
            viewString.Append("erPart.SupplierFileDataID], \r\n            T.LeadTimeUnitID AS [Q_SupplierPart.Le");
            viewString.Append("adTimeUnitID], \r\n            T.LeadTime AS [Q_SupplierPart.LeadTime], \r\n        ");
            viewString.Append("    T.Version AS [Q_SupplierPart.Version], \r\n            T.VersionAntecedentID A");
            viewString.Append("S [Q_SupplierPart.VersionAntecedentID], \r\n            T.VersionCertainty AS [Q_S");
            viewString.Append("upplierPart.VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [Q_S");
            viewString.Append("upplierPart.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [Q_S");
            viewString.Append("upplierPart.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [Q_SupplierPa");
            viewString.Append("rt.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [Q_SupplierPart.V");
            viewString.Append("ersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [Q_SupplierPart.");
            viewString.Append("VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [Q_SupplierPart.Versio");
            viewString.Append("nUpdated], \r\n            True AS _from0\r\n        FROM NKDC.SupplierParts AS T\r\n ");
            viewString.Append("   ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.Q_SupplierPart", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.Q_Warehouse
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView53()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.Q_Warehouse", "\r\n    SELECT VALUE -- Constructing Q_Warehouse\r\n        [NKD.Module.BusinessObjec" +
                    "ts.Store.Q_Warehouse](T1.[Q_Warehouse.WarehouseID], T1.[Q_Warehouse.WarehouseNam" +
                    "e], T1.[Q_Warehouse.CompanyID], T1.[Q_Warehouse.PrimaryLocationID], T1.[Q_Wareho" +
                    "use.Description], T1.[Q_Warehouse.Version], T1.[Q_Warehouse.VersionAntecedentID]" +
                    ", T1.[Q_Warehouse.VersionCertainty], T1.[Q_Warehouse.VersionWorkflowInstanceID]," +
                    " T1.[Q_Warehouse.VersionUpdatedBy], T1.[Q_Warehouse.VersionDeletedBy], T1.[Q_War" +
                    "ehouse.VersionOwnerContactID], T1.[Q_Warehouse.VersionOwnerCompanyID], T1.[Q_War" +
                    "ehouse.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.WarehouseID " +
                    "AS [Q_Warehouse.WarehouseID], \r\n            T.WarehouseName AS [Q_Warehouse.Ware" +
                    "houseName], \r\n            T.CompanyID AS [Q_Warehouse.CompanyID], \r\n            " +
                    "T.PrimaryLocationID AS [Q_Warehouse.PrimaryLocationID], \r\n            T.Descript" +
                    "ion AS [Q_Warehouse.Description], \r\n            T.Version AS [Q_Warehouse.Versio" +
                    "n], \r\n            T.VersionAntecedentID AS [Q_Warehouse.VersionAntecedentID], \r\n" +
                    "            T.VersionCertainty AS [Q_Warehouse.VersionCertainty], \r\n            " +
                    "T.VersionWorkflowInstanceID AS [Q_Warehouse.VersionWorkflowInstanceID], \r\n      " +
                    "      T.VersionUpdatedBy AS [Q_Warehouse.VersionUpdatedBy], \r\n            T.Vers" +
                    "ionDeletedBy AS [Q_Warehouse.VersionDeletedBy], \r\n            T.VersionOwnerCont" +
                    "actID AS [Q_Warehouse.VersionOwnerContactID], \r\n            T.VersionOwnerCompan" +
                    "yID AS [Q_Warehouse.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [Q" +
                    "_Warehouse.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.Ware" +
                    "houses AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.Q_WarehouseModel
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView54()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2113);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Q_WarehouseModel\r\n        [NKD.Module.Busines");
            viewString.Append("sObjects.Store.Q_WarehouseModel](T1.[Q_WarehouseModel.WarehouseModelID], T1.[Q_W");
            viewString.Append("arehouseModel.ModelID], T1.[Q_WarehouseModel.WarehouseID], T1.[Q_WarehouseModel.");
            viewString.Append("IssueCost], T1.[Q_WarehouseModel.QuantityOnOrder], T1.[Q_WarehouseModel.Quantity");
            viewString.Append("InStock], T1.[Q_WarehouseModel.QuantityOnHold], T1.[Q_WarehouseModel.QuantityReO");
            viewString.Append("rderLevel], T1.[Q_WarehouseModel.Version], T1.[Q_WarehouseModel.VersionAnteceden");
            viewString.Append("tID], T1.[Q_WarehouseModel.VersionCertainty], T1.[Q_WarehouseModel.VersionWorkfl");
            viewString.Append("owInstanceID], T1.[Q_WarehouseModel.VersionUpdatedBy], T1.[Q_WarehouseModel.Vers");
            viewString.Append("ionDeletedBy], T1.[Q_WarehouseModel.VersionOwnerContactID], T1.[Q_WarehouseModel");
            viewString.Append(".VersionOwnerCompanyID], T1.[Q_WarehouseModel.VersionUpdated])\r\n    FROM (\r\n    ");
            viewString.Append("    SELECT \r\n            T.WarehouseModelID AS [Q_WarehouseModel.WarehouseModelI");
            viewString.Append("D], \r\n            T.ModelID AS [Q_WarehouseModel.ModelID], \r\n            T.Wareh");
            viewString.Append("ouseID AS [Q_WarehouseModel.WarehouseID], \r\n            T.IssueCost AS [Q_Wareho");
            viewString.Append("useModel.IssueCost], \r\n            T.QuantityOnOrder AS [Q_WarehouseModel.Quanti");
            viewString.Append("tyOnOrder], \r\n            T.QuantityInStock AS [Q_WarehouseModel.QuantityInStock");
            viewString.Append("], \r\n            T.QuantityOnHold AS [Q_WarehouseModel.QuantityOnHold], \r\n      ");
            viewString.Append("      T.QuantityReOrderLevel AS [Q_WarehouseModel.QuantityReOrderLevel], \r\n     ");
            viewString.Append("       T.Version AS [Q_WarehouseModel.Version], \r\n            T.VersionAnteceden");
            viewString.Append("tID AS [Q_WarehouseModel.VersionAntecedentID], \r\n            T.VersionCertainty ");
            viewString.Append("AS [Q_WarehouseModel.VersionCertainty], \r\n            T.VersionWorkflowInstanceI");
            viewString.Append("D AS [Q_WarehouseModel.VersionWorkflowInstanceID], \r\n            T.VersionUpdate");
            viewString.Append("dBy AS [Q_WarehouseModel.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS ");
            viewString.Append("[Q_WarehouseModel.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [Q");
            viewString.Append("_WarehouseModel.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS");
            viewString.Append(" [Q_WarehouseModel.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [Q_");
            viewString.Append("WarehouseModel.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.");
            viewString.Append("WarehouseModels AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.Q_WarehouseModel", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.Q_WarehouseModelSupplier
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView55()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2304);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Q_WarehouseModelSupplier\r\n        [NKD.Module");
            viewString.Append(".BusinessObjects.Store.Q_WarehouseModelSupplier](T1.[Q_WarehouseModelSupplier.Wa");
            viewString.Append("rehouseModelSupplierID], T1.[Q_WarehouseModelSupplier.WarehouseModelID], T1.[Q_W");
            viewString.Append("arehouseModelSupplier.SupplierModelID], T1.[Q_WarehouseModelSupplier.QuantityUni");
            viewString.Append("tID], T1.[Q_WarehouseModelSupplier.QuantityOrdered], T1.[Q_WarehouseModelSupplie");
            viewString.Append("r.Ordered], T1.[Q_WarehouseModelSupplier.Received], T1.[Q_WarehouseModelSupplier");
            viewString.Append(".Version], T1.[Q_WarehouseModelSupplier.VersionAntecedentID], T1.[Q_WarehouseMod");
            viewString.Append("elSupplier.VersionCertainty], T1.[Q_WarehouseModelSupplier.VersionWorkflowInstan");
            viewString.Append("ceID], T1.[Q_WarehouseModelSupplier.VersionUpdatedBy], T1.[Q_WarehouseModelSuppl");
            viewString.Append("ier.VersionDeletedBy], T1.[Q_WarehouseModelSupplier.VersionOwnerContactID], T1.[");
            viewString.Append("Q_WarehouseModelSupplier.VersionOwnerCompanyID], T1.[Q_WarehouseModelSupplier.Ve");
            viewString.Append("rsionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.WarehouseModelSupplie");
            viewString.Append("rID AS [Q_WarehouseModelSupplier.WarehouseModelSupplierID], \r\n            T.Ware");
            viewString.Append("houseModelID AS [Q_WarehouseModelSupplier.WarehouseModelID], \r\n            T.Sup");
            viewString.Append("plierModelID AS [Q_WarehouseModelSupplier.SupplierModelID], \r\n            T.Quan");
            viewString.Append("tityUnitID AS [Q_WarehouseModelSupplier.QuantityUnitID], \r\n            T.Quantit");
            viewString.Append("yOrdered AS [Q_WarehouseModelSupplier.QuantityOrdered], \r\n            T.Ordered ");
            viewString.Append("AS [Q_WarehouseModelSupplier.Ordered], \r\n            T.Received AS [Q_WarehouseM");
            viewString.Append("odelSupplier.Received], \r\n            T.Version AS [Q_WarehouseModelSupplier.Ver");
            viewString.Append("sion], \r\n            T.VersionAntecedentID AS [Q_WarehouseModelSupplier.VersionA");
            viewString.Append("ntecedentID], \r\n            T.VersionCertainty AS [Q_WarehouseModelSupplier.Vers");
            viewString.Append("ionCertainty], \r\n            T.VersionWorkflowInstanceID AS [Q_WarehouseModelSup");
            viewString.Append("plier.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [Q_Warehou");
            viewString.Append("seModelSupplier.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [Q_Wareho");
            viewString.Append("useModelSupplier.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [Q_");
            viewString.Append("WarehouseModelSupplier.VersionOwnerContactID], \r\n            T.VersionOwnerCompa");
            viewString.Append("nyID AS [Q_WarehouseModelSupplier.VersionOwnerCompanyID], \r\n            T.Versio");
            viewString.Append("nUpdated AS [Q_WarehouseModelSupplier.VersionUpdated], \r\n            True AS _fr");
            viewString.Append("om0\r\n        FROM NKDC.WarehouseModelSuppliers AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.Q_WarehouseModelSupplier", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.Q_WarehousePart
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView56()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2070);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Q_WarehousePart\r\n        [NKD.Module.Business");
            viewString.Append("Objects.Store.Q_WarehousePart](T1.[Q_WarehousePart.WarehousePartID], T1.[Q_Wareh");
            viewString.Append("ousePart.PartID], T1.[Q_WarehousePart.WarehouseID], T1.[Q_WarehousePart.IssueCos");
            viewString.Append("t], T1.[Q_WarehousePart.QuantityOnOrder], T1.[Q_WarehousePart.QuantityInStock], ");
            viewString.Append("T1.[Q_WarehousePart.QuantityOnHold], T1.[Q_WarehousePart.QuantityReOrderLevel], ");
            viewString.Append("T1.[Q_WarehousePart.Version], T1.[Q_WarehousePart.VersionAntecedentID], T1.[Q_Wa");
            viewString.Append("rehousePart.VersionCertainty], T1.[Q_WarehousePart.VersionWorkflowInstanceID], T");
            viewString.Append("1.[Q_WarehousePart.VersionUpdatedBy], T1.[Q_WarehousePart.VersionDeletedBy], T1.");
            viewString.Append("[Q_WarehousePart.VersionOwnerContactID], T1.[Q_WarehousePart.VersionOwnerCompany");
            viewString.Append("ID], T1.[Q_WarehousePart.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n        ");
            viewString.Append("    T.WarehousePartID AS [Q_WarehousePart.WarehousePartID], \r\n            T.Part");
            viewString.Append("ID AS [Q_WarehousePart.PartID], \r\n            T.WarehouseID AS [Q_WarehousePart.");
            viewString.Append("WarehouseID], \r\n            T.IssueCost AS [Q_WarehousePart.IssueCost], \r\n      ");
            viewString.Append("      T.QuantityOnOrder AS [Q_WarehousePart.QuantityOnOrder], \r\n            T.Qu");
            viewString.Append("antityInStock AS [Q_WarehousePart.QuantityInStock], \r\n            T.QuantityOnHo");
            viewString.Append("ld AS [Q_WarehousePart.QuantityOnHold], \r\n            T.QuantityReOrderLevel AS ");
            viewString.Append("[Q_WarehousePart.QuantityReOrderLevel], \r\n            T.Version AS [Q_WarehouseP");
            viewString.Append("art.Version], \r\n            T.VersionAntecedentID AS [Q_WarehousePart.VersionAnt");
            viewString.Append("ecedentID], \r\n            T.VersionCertainty AS [Q_WarehousePart.VersionCertaint");
            viewString.Append("y], \r\n            T.VersionWorkflowInstanceID AS [Q_WarehousePart.VersionWorkflo");
            viewString.Append("wInstanceID], \r\n            T.VersionUpdatedBy AS [Q_WarehousePart.VersionUpdate");
            viewString.Append("dBy], \r\n            T.VersionDeletedBy AS [Q_WarehousePart.VersionDeletedBy], \r\n");
            viewString.Append("            T.VersionOwnerContactID AS [Q_WarehousePart.VersionOwnerContactID], ");
            viewString.Append("\r\n            T.VersionOwnerCompanyID AS [Q_WarehousePart.VersionOwnerCompanyID]");
            viewString.Append(", \r\n            T.VersionUpdated AS [Q_WarehousePart.VersionUpdated], \r\n        ");
            viewString.Append("    True AS _from0\r\n        FROM NKDC.WarehouseParts AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.Q_WarehousePart", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.Q_WarehousePartSupplier
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView57()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2260);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Q_WarehousePartSupplier\r\n        [NKD.Module.");
            viewString.Append("BusinessObjects.Store.Q_WarehousePartSupplier](T1.[Q_WarehousePartSupplier.Wareh");
            viewString.Append("ousePartSupplierID], T1.[Q_WarehousePartSupplier.WarehousePartID], T1.[Q_Warehou");
            viewString.Append("sePartSupplier.SupplierPartID], T1.[Q_WarehousePartSupplier.QuantityUnitID], T1.");
            viewString.Append("[Q_WarehousePartSupplier.QuantityOrdered], T1.[Q_WarehousePartSupplier.Ordered],");
            viewString.Append(" T1.[Q_WarehousePartSupplier.Received], T1.[Q_WarehousePartSupplier.Version], T1");
            viewString.Append(".[Q_WarehousePartSupplier.VersionAntecedentID], T1.[Q_WarehousePartSupplier.Vers");
            viewString.Append("ionCertainty], T1.[Q_WarehousePartSupplier.VersionWorkflowInstanceID], T1.[Q_War");
            viewString.Append("ehousePartSupplier.VersionUpdatedBy], T1.[Q_WarehousePartSupplier.VersionDeleted");
            viewString.Append("By], T1.[Q_WarehousePartSupplier.VersionOwnerContactID], T1.[Q_WarehousePartSupp");
            viewString.Append("lier.VersionOwnerCompanyID], T1.[Q_WarehousePartSupplier.VersionUpdated])\r\n    F");
            viewString.Append("ROM (\r\n        SELECT \r\n            T.WarehousePartSupplierID AS [Q_WarehousePar");
            viewString.Append("tSupplier.WarehousePartSupplierID], \r\n            T.WarehousePartID AS [Q_Wareho");
            viewString.Append("usePartSupplier.WarehousePartID], \r\n            T.SupplierPartID AS [Q_Warehouse");
            viewString.Append("PartSupplier.SupplierPartID], \r\n            T.QuantityUnitID AS [Q_WarehousePart");
            viewString.Append("Supplier.QuantityUnitID], \r\n            T.QuantityOrdered AS [Q_WarehousePartSup");
            viewString.Append("plier.QuantityOrdered], \r\n            T.Ordered AS [Q_WarehousePartSupplier.Orde");
            viewString.Append("red], \r\n            T.Received AS [Q_WarehousePartSupplier.Received], \r\n        ");
            viewString.Append("    T.Version AS [Q_WarehousePartSupplier.Version], \r\n            T.VersionAntec");
            viewString.Append("edentID AS [Q_WarehousePartSupplier.VersionAntecedentID], \r\n            T.Versio");
            viewString.Append("nCertainty AS [Q_WarehousePartSupplier.VersionCertainty], \r\n            T.Versio");
            viewString.Append("nWorkflowInstanceID AS [Q_WarehousePartSupplier.VersionWorkflowInstanceID], \r\n  ");
            viewString.Append("          T.VersionUpdatedBy AS [Q_WarehousePartSupplier.VersionUpdatedBy], \r\n  ");
            viewString.Append("          T.VersionDeletedBy AS [Q_WarehousePartSupplier.VersionDeletedBy], \r\n  ");
            viewString.Append("          T.VersionOwnerContactID AS [Q_WarehousePartSupplier.VersionOwnerContac");
            viewString.Append("tID], \r\n            T.VersionOwnerCompanyID AS [Q_WarehousePartSupplier.VersionO");
            viewString.Append("wnerCompanyID], \r\n            T.VersionUpdated AS [Q_WarehousePartSupplier.Versi");
            viewString.Append("onUpdated], \r\n            True AS _from0\r\n        FROM NKDC.WarehousePartSupplie");
            viewString.Append("rs AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.Q_WarehousePartSupplier", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.Q_WorkflowSchedule
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView58()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.Q_WorkflowSchedule", "\r\n    SELECT VALUE -- Constructing Q_WorkflowSchedule\r\n        [NKD.Module.Busine" +
                    "ssObjects.Store.Q_WorkflowSchedule](T1.[Q_WorkflowSchedule.WorkflowScheduleID], " +
                    "T1.[Q_WorkflowSchedule.EventTypeID], T1.[Q_WorkflowSchedule.TableType], T1.[Q_Wo" +
                    "rkflowSchedule.ReferenceID], T1.[Q_WorkflowSchedule.WorkerID], T1.[Q_WorkflowSch" +
                    "edule.WorkflowInstanceID], T1.[Q_WorkflowSchedule.Version], T1.[Q_WorkflowSchedu" +
                    "le.VersionAntecedentID], T1.[Q_WorkflowSchedule.VersionCertainty], T1.[Q_Workflo" +
                    "wSchedule.VersionWorkflowInstanceID], T1.[Q_WorkflowSchedule.VersionUpdatedBy], " +
                    "T1.[Q_WorkflowSchedule.VersionDeletedBy], T1.[Q_WorkflowSchedule.VersionOwnerCon" +
                    "tactID], T1.[Q_WorkflowSchedule.VersionOwnerCompanyID], T1.[Q_WorkflowSchedule.V" +
                    "ersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.WorkflowScheduleID A" +
                    "S [Q_WorkflowSchedule.WorkflowScheduleID], \r\n            T.EventTypeID AS [Q_Wor" +
                    "kflowSchedule.EventTypeID], \r\n            T.TableType AS [Q_WorkflowSchedule.Tab" +
                    "leType], \r\n            T.ReferenceID AS [Q_WorkflowSchedule.ReferenceID], \r\n    " +
                    "        T.WorkerID AS [Q_WorkflowSchedule.WorkerID], \r\n            T.WorkflowIns" +
                    "tanceID AS [Q_WorkflowSchedule.WorkflowInstanceID], \r\n            T.Version AS [" +
                    "Q_WorkflowSchedule.Version], \r\n            T.VersionAntecedentID AS [Q_WorkflowS" +
                    "chedule.VersionAntecedentID], \r\n            T.VersionCertainty AS [Q_WorkflowSch" +
                    "edule.VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [Q_Workflo" +
                    "wSchedule.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [Q_Wor" +
                    "kflowSchedule.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [Q_Workflow" +
                    "Schedule.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [Q_Workflow" +
                    "Schedule.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [Q_Wor" +
                    "kflowSchedule.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [Q_Workf" +
                    "lowSchedule.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.Wor" +
                    "kflowSchedules AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_Address
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView59()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2506);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_Address\r\n        [NKD.Module.BusinessObject");
            viewString.Append("s.Store.X_Address](T1.[X_Address.AddressID], T1.[X_Address.AddressTypeID], T1.[X");
            viewString.Append("_Address.AddressName], T1.[X_Address.Sequence], T1.[X_Address.Street], T1.[X_Add");
            viewString.Append("ress.Extended], T1.[X_Address.City], T1.[X_Address.State], T1.[X_Address.Country");
            viewString.Append("], T1.[X_Address.Postcode], T1.[X_Address.IsHQ], T1.[X_Address.IsPostBox], T1.[X");
            viewString.Append("_Address.IsBusiness], T1.[X_Address.IsHome], T1.[X_Address.Phone], T1.[X_Address");
            viewString.Append(".Fax], T1.[X_Address.Email], T1.[X_Address.Mobile], T1.[X_Address.LocationID], T");
            viewString.Append("1.[X_Address.Version], T1.[X_Address.VersionAntecedentID], T1.[X_Address.Version");
            viewString.Append("Certainty], T1.[X_Address.VersionWorkflowInstanceID], T1.[X_Address.VersionUpdat");
            viewString.Append("edBy], T1.[X_Address.VersionDeletedBy], T1.[X_Address.VersionOwnerContactID], T1");
            viewString.Append(".[X_Address.VersionOwnerCompanyID], T1.[X_Address.VersionUpdated])\r\n    FROM (\r\n");
            viewString.Append("        SELECT \r\n            T.AddressID AS [X_Address.AddressID], \r\n           ");
            viewString.Append(" T.AddressTypeID AS [X_Address.AddressTypeID], \r\n            T.AddressName AS [X");
            viewString.Append("_Address.AddressName], \r\n            T.Sequence AS [X_Address.Sequence], \r\n     ");
            viewString.Append("       T.Street AS [X_Address.Street], \r\n            T.Extended AS [X_Address.Ex");
            viewString.Append("tended], \r\n            T.City AS [X_Address.City], \r\n            T.State AS [X_A");
            viewString.Append("ddress.State], \r\n            T.Country AS [X_Address.Country], \r\n            T.P");
            viewString.Append("ostcode AS [X_Address.Postcode], \r\n            T.IsHQ AS [X_Address.IsHQ], \r\n   ");
            viewString.Append("         T.IsPostBox AS [X_Address.IsPostBox], \r\n            T.IsBusiness AS [X_");
            viewString.Append("Address.IsBusiness], \r\n            T.IsHome AS [X_Address.IsHome], \r\n           ");
            viewString.Append(" T.Phone AS [X_Address.Phone], \r\n            T.Fax AS [X_Address.Fax], \r\n       ");
            viewString.Append("     T.Email AS [X_Address.Email], \r\n            T.Mobile AS [X_Address.Mobile],");
            viewString.Append(" \r\n            T.LocationID AS [X_Address.LocationID], \r\n            T.Version A");
            viewString.Append("S [X_Address.Version], \r\n            T.VersionAntecedentID AS [X_Address.Version");
            viewString.Append("AntecedentID], \r\n            T.VersionCertainty AS [X_Address.VersionCertainty],");
            viewString.Append(" \r\n            T.VersionWorkflowInstanceID AS [X_Address.VersionWorkflowInstance");
            viewString.Append("ID], \r\n            T.VersionUpdatedBy AS [X_Address.VersionUpdatedBy], \r\n       ");
            viewString.Append("     T.VersionDeletedBy AS [X_Address.VersionDeletedBy], \r\n            T.Version");
            viewString.Append("OwnerContactID AS [X_Address.VersionOwnerContactID], \r\n            T.VersionOwne");
            viewString.Append("rCompanyID AS [X_Address.VersionOwnerCompanyID], \r\n            T.VersionUpdated ");
            viewString.Append("AS [X_Address.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.A");
            viewString.Append("ddresses AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_Address", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_AssayGroup
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView60()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2202);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_AssayGroup\r\n        [NKD.Module.BusinessObj");
            viewString.Append("ects.Store.X_AssayGroup](T1.[X_AssayGroup.AssayGroupID], T1.[X_AssayGroup.Projec");
            viewString.Append("tID], T1.[X_AssayGroup.AssayGroupName], T1.[X_AssayGroup.LabCompanyID], T1.[X_As");
            viewString.Append("sayGroup.Submitted], T1.[X_AssayGroup.SubmittedContactID], T1.[X_AssayGroup.Rece");
            viewString.Append("ived], T1.[X_AssayGroup.ReceivedContactID], T1.[X_AssayGroup.Entered], T1.[X_Ass");
            viewString.Append("ayGroup.EnteredContactID], T1.[X_AssayGroup.Comment], T1.[X_AssayGroup.Version],");
            viewString.Append(" T1.[X_AssayGroup.VersionAntecedentID], T1.[X_AssayGroup.VersionCertainty], T1.[");
            viewString.Append("X_AssayGroup.VersionWorkflowInstanceID], T1.[X_AssayGroup.VersionUpdatedBy], T1.");
            viewString.Append("[X_AssayGroup.VersionDeletedBy], T1.[X_AssayGroup.VersionOwnerContactID], T1.[X_");
            viewString.Append("AssayGroup.VersionOwnerCompanyID], T1.[X_AssayGroup.VersionUpdated])\r\n    FROM (");
            viewString.Append("\r\n        SELECT \r\n            T.AssayGroupID AS [X_AssayGroup.AssayGroupID], \r\n");
            viewString.Append("            T.ProjectID AS [X_AssayGroup.ProjectID], \r\n            T.AssayGroupN");
            viewString.Append("ame AS [X_AssayGroup.AssayGroupName], \r\n            T.LabCompanyID AS [X_AssayGr");
            viewString.Append("oup.LabCompanyID], \r\n            T.Submitted AS [X_AssayGroup.Submitted], \r\n    ");
            viewString.Append("        T.SubmittedContactID AS [X_AssayGroup.SubmittedContactID], \r\n           ");
            viewString.Append(" T.Received AS [X_AssayGroup.Received], \r\n            T.ReceivedContactID AS [X_");
            viewString.Append("AssayGroup.ReceivedContactID], \r\n            T.Entered AS [X_AssayGroup.Entered]");
            viewString.Append(", \r\n            T.EnteredContactID AS [X_AssayGroup.EnteredContactID], \r\n       ");
            viewString.Append("     T.Comment AS [X_AssayGroup.Comment], \r\n            T.Version AS [X_AssayGro");
            viewString.Append("up.Version], \r\n            T.VersionAntecedentID AS [X_AssayGroup.VersionAnteced");
            viewString.Append("entID], \r\n            T.VersionCertainty AS [X_AssayGroup.VersionCertainty], \r\n ");
            viewString.Append("           T.VersionWorkflowInstanceID AS [X_AssayGroup.VersionWorkflowInstanceI");
            viewString.Append("D], \r\n            T.VersionUpdatedBy AS [X_AssayGroup.VersionUpdatedBy], \r\n     ");
            viewString.Append("       T.VersionDeletedBy AS [X_AssayGroup.VersionDeletedBy], \r\n            T.Ve");
            viewString.Append("rsionOwnerContactID AS [X_AssayGroup.VersionOwnerContactID], \r\n            T.Ver");
            viewString.Append("sionOwnerCompanyID AS [X_AssayGroup.VersionOwnerCompanyID], \r\n            T.Vers");
            viewString.Append("ionUpdated AS [X_AssayGroup.VersionUpdated], \r\n            True AS _from0\r\n     ");
            viewString.Append("   FROM NKDC.AssayGroups AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_AssayGroup", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_AssayGroupStandardTestResult
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView61()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3744);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_AssayGroupStandardTestResult\r\n        [NKD.");
            viewString.Append("Module.BusinessObjects.Store.X_AssayGroupStandardTestResult](T1.[X_AssayGroupSta");
            viewString.Append("ndardTestResult.AssayGroupStandardTestResultID], T1.[X_AssayGroupStandardTestRes");
            viewString.Append("ult.AssayGroupTestSampleID], T1.[X_AssayGroupStandardTestResult.AssayGroupTestID");
            viewString.Append("], T1.[X_AssayGroupStandardTestResult.AssayStandardID], T1.[X_AssayGroupStandard");
            viewString.Append("TestResult.SampleCategoryID], T1.[X_AssayGroupStandardTestResult.SampleStateID],");
            viewString.Append(" T1.[X_AssayGroupStandardTestResult.SampleTypeID], T1.[X_AssayGroupStandardTestR");
            viewString.Append("esult.LabResultText], T1.[X_AssayGroupStandardTestResult.LabResult], T1.[X_Assay");
            viewString.Append("GroupStandardTestResult.LabResultMinimum], T1.[X_AssayGroupStandardTestResult.La");
            viewString.Append("bResultMaximum], T1.[X_AssayGroupStandardTestResult.LabSampleName], T1.[X_AssayG");
            viewString.Append("roupStandardTestResult.LabBatchNumber], T1.[X_AssayGroupStandardTestResult.Sampl");
            viewString.Append("ed], T1.[X_AssayGroupStandardTestResult.AddressID], T1.[X_AssayGroupStandardTest");
            viewString.Append("Result.SampledBy], T1.[X_AssayGroupStandardTestResult.Version], T1.[X_AssayGroup");
            viewString.Append("StandardTestResult.VersionAntecedentID], T1.[X_AssayGroupStandardTestResult.Vers");
            viewString.Append("ionCertainty], T1.[X_AssayGroupStandardTestResult.VersionWorkflowInstanceID], T1");
            viewString.Append(".[X_AssayGroupStandardTestResult.VersionUpdatedBy], T1.[X_AssayGroupStandardTest");
            viewString.Append("Result.VersionDeletedBy], T1.[X_AssayGroupStandardTestResult.VersionOwnerContact");
            viewString.Append("ID], T1.[X_AssayGroupStandardTestResult.VersionOwnerCompanyID], T1.[X_AssayGroup");
            viewString.Append("StandardTestResult.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.");
            viewString.Append("AssayGroupStandardTestResultID AS [X_AssayGroupStandardTestResult.AssayGroupStan");
            viewString.Append("dardTestResultID], \r\n            T.AssayGroupTestSampleID AS [X_AssayGroupStanda");
            viewString.Append("rdTestResult.AssayGroupTestSampleID], \r\n            T.AssayGroupTestID AS [X_Ass");
            viewString.Append("ayGroupStandardTestResult.AssayGroupTestID], \r\n            T.AssayStandardID AS ");
            viewString.Append("[X_AssayGroupStandardTestResult.AssayStandardID], \r\n            T.SampleCategory");
            viewString.Append("ID AS [X_AssayGroupStandardTestResult.SampleCategoryID], \r\n            T.SampleS");
            viewString.Append("tateID AS [X_AssayGroupStandardTestResult.SampleStateID], \r\n            T.Sample");
            viewString.Append("TypeID AS [X_AssayGroupStandardTestResult.SampleTypeID], \r\n            T.LabResu");
            viewString.Append("ltText AS [X_AssayGroupStandardTestResult.LabResultText], \r\n            T.LabRes");
            viewString.Append("ult AS [X_AssayGroupStandardTestResult.LabResult], \r\n            T.LabResultMini");
            viewString.Append("mum AS [X_AssayGroupStandardTestResult.LabResultMinimum], \r\n            T.LabRes");
            viewString.Append("ultMaximum AS [X_AssayGroupStandardTestResult.LabResultMaximum], \r\n            T");
            viewString.Append(".LabSampleName AS [X_AssayGroupStandardTestResult.LabSampleName], \r\n            ");
            viewString.Append("T.LabBatchNumber AS [X_AssayGroupStandardTestResult.LabBatchNumber], \r\n         ");
            viewString.Append("   T.Sampled AS [X_AssayGroupStandardTestResult.Sampled], \r\n            T.Addres");
            viewString.Append("sID AS [X_AssayGroupStandardTestResult.AddressID], \r\n            T.SampledBy AS ");
            viewString.Append("[X_AssayGroupStandardTestResult.SampledBy], \r\n            T.Version AS [X_AssayG");
            viewString.Append("roupStandardTestResult.Version], \r\n            T.VersionAntecedentID AS [X_Assay");
            viewString.Append("GroupStandardTestResult.VersionAntecedentID], \r\n            T.VersionCertainty A");
            viewString.Append("S [X_AssayGroupStandardTestResult.VersionCertainty], \r\n            T.VersionWork");
            viewString.Append("flowInstanceID AS [X_AssayGroupStandardTestResult.VersionWorkflowInstanceID], \r\n");
            viewString.Append("            T.VersionUpdatedBy AS [X_AssayGroupStandardTestResult.VersionUpdated");
            viewString.Append("By], \r\n            T.VersionDeletedBy AS [X_AssayGroupStandardTestResult.Version");
            viewString.Append("DeletedBy], \r\n            T.VersionOwnerContactID AS [X_AssayGroupStandardTestRe");
            viewString.Append("sult.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [X_AssayGr");
            viewString.Append("oupStandardTestResult.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS ");
            viewString.Append("[X_AssayGroupStandardTestResult.VersionUpdated], \r\n            True AS _from0\r\n ");
            viewString.Append("       FROM NKDC.AssayGroupStandardTestResults AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_AssayGroupStandardTestResult", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_AssayGroupTest
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView62()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2339);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_AssayGroupTest\r\n        [NKD.Module.Busines");
            viewString.Append("sObjects.Store.X_AssayGroupTest](T1.[X_AssayGroupTest.AssayGroupTestID], T1.[X_A");
            viewString.Append("ssayGroupTest.AssayGroupID], T1.[X_AssayGroupTest.AssayTypeName], T1.[X_AssayGro");
            viewString.Append("upTest.AssayTestName], T1.[X_AssayGroupTest.ParameterID], T1.[X_AssayGroupTest.A");
            viewString.Append("ssayTestPriority], T1.[X_AssayGroupTest.AssayTypeID], T1.[X_AssayGroupTest.Assay");
            viewString.Append("ComplianceID], T1.[X_AssayGroupTest.AssayMethodID], T1.[X_AssayGroupTest.AssayTe");
            viewString.Append("chniqueID], T1.[X_AssayGroupTest.Version], T1.[X_AssayGroupTest.VersionAnteceden");
            viewString.Append("tID], T1.[X_AssayGroupTest.VersionCertainty], T1.[X_AssayGroupTest.VersionWorkfl");
            viewString.Append("owInstanceID], T1.[X_AssayGroupTest.VersionUpdatedBy], T1.[X_AssayGroupTest.Vers");
            viewString.Append("ionDeletedBy], T1.[X_AssayGroupTest.VersionOwnerContactID], T1.[X_AssayGroupTest");
            viewString.Append(".VersionOwnerCompanyID], T1.[X_AssayGroupTest.VersionUpdated])\r\n    FROM (\r\n    ");
            viewString.Append("    SELECT \r\n            T.AssayGroupTestID AS [X_AssayGroupTest.AssayGroupTestI");
            viewString.Append("D], \r\n            T.AssayGroupID AS [X_AssayGroupTest.AssayGroupID], \r\n         ");
            viewString.Append("   T.AssayTypeName AS [X_AssayGroupTest.AssayTypeName], \r\n            T.AssayTes");
            viewString.Append("tName AS [X_AssayGroupTest.AssayTestName], \r\n            T.ParameterID AS [X_Ass");
            viewString.Append("ayGroupTest.ParameterID], \r\n            T.AssayTestPriority AS [X_AssayGroupTest");
            viewString.Append(".AssayTestPriority], \r\n            T.AssayTypeID AS [X_AssayGroupTest.AssayTypeI");
            viewString.Append("D], \r\n            T.AssayComplianceID AS [X_AssayGroupTest.AssayComplianceID], \r");
            viewString.Append("\n            T.AssayMethodID AS [X_AssayGroupTest.AssayMethodID], \r\n            ");
            viewString.Append("T.AssayTechniqueID AS [X_AssayGroupTest.AssayTechniqueID], \r\n            T.Versi");
            viewString.Append("on AS [X_AssayGroupTest.Version], \r\n            T.VersionAntecedentID AS [X_Assa");
            viewString.Append("yGroupTest.VersionAntecedentID], \r\n            T.VersionCertainty AS [X_AssayGro");
            viewString.Append("upTest.VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [X_AssayG");
            viewString.Append("roupTest.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_Assa");
            viewString.Append("yGroupTest.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_AssayGroupT");
            viewString.Append("est.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [X_AssayGroupTes");
            viewString.Append("t.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [X_AssayGroup");
            viewString.Append("Test.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [X_AssayGroupTest");
            viewString.Append(".VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.AssayGroupTest");
            viewString.Append("s AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_AssayGroupTest", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_AssayGroupTestResult
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView63()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2814);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_AssayGroupTestResult\r\n        [NKD.Module.B");
            viewString.Append("usinessObjects.Store.X_AssayGroupTestResult](T1.[X_AssayGroupTestResult.AssayGro");
            viewString.Append("upTestResultID], T1.[X_AssayGroupTestResult.SampleID], T1.[X_AssayGroupTestResul");
            viewString.Append("t.AssayGroupSubsampleID], T1.[X_AssayGroupTestResult.LabSampleName], T1.[X_Assay");
            viewString.Append("GroupTestResult.AssayGroupTestID], T1.[X_AssayGroupTestResult.LabResultText], T1");
            viewString.Append(".[X_AssayGroupTestResult.LabResult], T1.[X_AssayGroupTestResult.LabResultMinimum");
            viewString.Append("], T1.[X_AssayGroupTestResult.LabResultMaximum], T1.[X_AssayGroupTestResult.LabB");
            viewString.Append("atchNumber], T1.[X_AssayGroupTestResult.Sampled], T1.[X_AssayGroupTestResult.Sam");
            viewString.Append("pledBy], T1.[X_AssayGroupTestResult.Version], T1.[X_AssayGroupTestResult.Version");
            viewString.Append("AntecedentID], T1.[X_AssayGroupTestResult.VersionCertainty], T1.[X_AssayGroupTes");
            viewString.Append("tResult.VersionWorkflowInstanceID], T1.[X_AssayGroupTestResult.VersionUpdatedBy]");
            viewString.Append(", T1.[X_AssayGroupTestResult.VersionDeletedBy], T1.[X_AssayGroupTestResult.Versi");
            viewString.Append("onOwnerContactID], T1.[X_AssayGroupTestResult.VersionOwnerCompanyID], T1.[X_Assa");
            viewString.Append("yGroupTestResult.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.As");
            viewString.Append("sayGroupTestResultID AS [X_AssayGroupTestResult.AssayGroupTestResultID], \r\n     ");
            viewString.Append("       T.SampleID AS [X_AssayGroupTestResult.SampleID], \r\n            T.AssayGro");
            viewString.Append("upSubsampleID AS [X_AssayGroupTestResult.AssayGroupSubsampleID], \r\n            T");
            viewString.Append(".LabSampleName AS [X_AssayGroupTestResult.LabSampleName], \r\n            T.AssayG");
            viewString.Append("roupTestID AS [X_AssayGroupTestResult.AssayGroupTestID], \r\n            T.LabResu");
            viewString.Append("ltText AS [X_AssayGroupTestResult.LabResultText], \r\n            T.LabResult AS [");
            viewString.Append("X_AssayGroupTestResult.LabResult], \r\n            T.LabResultMinimum AS [X_AssayG");
            viewString.Append("roupTestResult.LabResultMinimum], \r\n            T.LabResultMaximum AS [X_AssayGr");
            viewString.Append("oupTestResult.LabResultMaximum], \r\n            T.LabBatchNumber AS [X_AssayGroup");
            viewString.Append("TestResult.LabBatchNumber], \r\n            T.Sampled AS [X_AssayGroupTestResult.S");
            viewString.Append("ampled], \r\n            T.SampledBy AS [X_AssayGroupTestResult.SampledBy], \r\n    ");
            viewString.Append("        T.Version AS [X_AssayGroupTestResult.Version], \r\n            T.VersionAn");
            viewString.Append("tecedentID AS [X_AssayGroupTestResult.VersionAntecedentID], \r\n            T.Vers");
            viewString.Append("ionCertainty AS [X_AssayGroupTestResult.VersionCertainty], \r\n            T.Versi");
            viewString.Append("onWorkflowInstanceID AS [X_AssayGroupTestResult.VersionWorkflowInstanceID], \r\n  ");
            viewString.Append("          T.VersionUpdatedBy AS [X_AssayGroupTestResult.VersionUpdatedBy], \r\n   ");
            viewString.Append("         T.VersionDeletedBy AS [X_AssayGroupTestResult.VersionDeletedBy], \r\n    ");
            viewString.Append("        T.VersionOwnerContactID AS [X_AssayGroupTestResult.VersionOwnerContactID");
            viewString.Append("], \r\n            T.VersionOwnerCompanyID AS [X_AssayGroupTestResult.VersionOwner");
            viewString.Append("CompanyID], \r\n            T.VersionUpdated AS [X_AssayGroupTestResult.VersionUpd");
            viewString.Append("ated], \r\n            True AS _from0\r\n        FROM NKDC.AssayGroupTestResults AS ");
            viewString.Append("T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_AssayGroupTestResult", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_AssayGroupTestResultComment
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView64()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_AssayGroupTestResultComment", "\r\n    SELECT VALUE -- Constructing X_AssayGroupTestResultComment\r\n        [NKD.Mo" +
                    "dule.BusinessObjects.Store.X_AssayGroupTestResultComment](T1.[X_AssayGroupTestRe" +
                    "sultComment.AssayGroupTestResultCommentID], T1.[X_AssayGroupTestResultComment.As" +
                    "sayGroupTestResultID], T1.[X_AssayGroupTestResultComment.Comment], T1.[X_AssayGr" +
                    "oupTestResultComment.Version], T1.[X_AssayGroupTestResultComment.VersionAntecede" +
                    "ntID], T1.[X_AssayGroupTestResultComment.VersionCertainty], T1.[X_AssayGroupTest" +
                    "ResultComment.VersionWorkflowInstanceID], T1.[X_AssayGroupTestResultComment.Vers" +
                    "ionUpdatedBy], T1.[X_AssayGroupTestResultComment.VersionDeletedBy], T1.[X_AssayG" +
                    "roupTestResultComment.VersionOwnerContactID], T1.[X_AssayGroupTestResultComment." +
                    "VersionOwnerCompanyID], T1.[X_AssayGroupTestResultComment.VersionUpdated])\r\n    " +
                    "FROM (\r\n        SELECT \r\n            T.AssayGroupTestResultCommentID AS [X_Assay" +
                    "GroupTestResultComment.AssayGroupTestResultCommentID], \r\n            T.AssayGrou" +
                    "pTestResultID AS [X_AssayGroupTestResultComment.AssayGroupTestResultID], \r\n     " +
                    "       T.Comment AS [X_AssayGroupTestResultComment.Comment], \r\n            T.Ver" +
                    "sion AS [X_AssayGroupTestResultComment.Version], \r\n            T.VersionAntecede" +
                    "ntID AS [X_AssayGroupTestResultComment.VersionAntecedentID], \r\n            T.Ver" +
                    "sionCertainty AS [X_AssayGroupTestResultComment.VersionCertainty], \r\n           " +
                    " T.VersionWorkflowInstanceID AS [X_AssayGroupTestResultComment.VersionWorkflowIn" +
                    "stanceID], \r\n            T.VersionUpdatedBy AS [X_AssayGroupTestResultComment.Ve" +
                    "rsionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_AssayGroupTestResultComm" +
                    "ent.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [X_AssayGroupTes" +
                    "tResultComment.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS " +
                    "[X_AssayGroupTestResultComment.VersionOwnerCompanyID], \r\n            T.VersionUp" +
                    "dated AS [X_AssayGroupTestResultComment.VersionUpdated], \r\n            True AS _" +
                    "from0\r\n        FROM NKDC.AssayGroupTestResultComments AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_AssayGroupTestResultDuplicate
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView65()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2987);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_AssayGroupTestResultDuplicate\r\n        [NKD");
            viewString.Append(".Module.BusinessObjects.Store.X_AssayGroupTestResultDuplicate](T1.[X_AssayGroupT");
            viewString.Append("estResultDuplicate.AssayGroupTestResultDuplicateID], T1.[X_AssayGroupTestResultD");
            viewString.Append("uplicate.AssayGroupTestResultID], T1.[X_AssayGroupTestResultDuplicate.LabResultT");
            viewString.Append("ext], T1.[X_AssayGroupTestResultDuplicate.LabResult], T1.[X_AssayGroupTestResult");
            viewString.Append("Duplicate.LabResultMinimum], T1.[X_AssayGroupTestResultDuplicate.LabResultMaximu");
            viewString.Append("m], T1.[X_AssayGroupTestResultDuplicate.LabSampleName], T1.[X_AssayGroupTestResu");
            viewString.Append("ltDuplicate.LabBatchNumber], T1.[X_AssayGroupTestResultDuplicate.Sampled], T1.[X");
            viewString.Append("_AssayGroupTestResultDuplicate.SampledBy], T1.[X_AssayGroupTestResultDuplicate.V");
            viewString.Append("ersion], T1.[X_AssayGroupTestResultDuplicate.VersionAntecedentID], T1.[X_AssayGr");
            viewString.Append("oupTestResultDuplicate.VersionCertainty], T1.[X_AssayGroupTestResultDuplicate.Ve");
            viewString.Append("rsionWorkflowInstanceID], T1.[X_AssayGroupTestResultDuplicate.VersionUpdatedBy],");
            viewString.Append(" T1.[X_AssayGroupTestResultDuplicate.VersionDeletedBy], T1.[X_AssayGroupTestResu");
            viewString.Append("ltDuplicate.VersionOwnerContactID], T1.[X_AssayGroupTestResultDuplicate.VersionO");
            viewString.Append("wnerCompanyID], T1.[X_AssayGroupTestResultDuplicate.VersionUpdated])\r\n    FROM (");
            viewString.Append("\r\n        SELECT \r\n            T.AssayGroupTestResultDuplicateID AS [X_AssayGrou");
            viewString.Append("pTestResultDuplicate.AssayGroupTestResultDuplicateID], \r\n            T.AssayGrou");
            viewString.Append("pTestResultID AS [X_AssayGroupTestResultDuplicate.AssayGroupTestResultID], \r\n   ");
            viewString.Append("         T.LabResultText AS [X_AssayGroupTestResultDuplicate.LabResultText], \r\n ");
            viewString.Append("           T.LabResult AS [X_AssayGroupTestResultDuplicate.LabResult], \r\n       ");
            viewString.Append("     T.LabResultMinimum AS [X_AssayGroupTestResultDuplicate.LabResultMinimum], \r");
            viewString.Append("\n            T.LabResultMaximum AS [X_AssayGroupTestResultDuplicate.LabResultMax");
            viewString.Append("imum], \r\n            T.LabSampleName AS [X_AssayGroupTestResultDuplicate.LabSamp");
            viewString.Append("leName], \r\n            T.LabBatchNumber AS [X_AssayGroupTestResultDuplicate.LabB");
            viewString.Append("atchNumber], \r\n            T.Sampled AS [X_AssayGroupTestResultDuplicate.Sampled");
            viewString.Append("], \r\n            T.SampledBy AS [X_AssayGroupTestResultDuplicate.SampledBy], \r\n ");
            viewString.Append("           T.Version AS [X_AssayGroupTestResultDuplicate.Version], \r\n           ");
            viewString.Append(" T.VersionAntecedentID AS [X_AssayGroupTestResultDuplicate.VersionAntecedentID],");
            viewString.Append(" \r\n            T.VersionCertainty AS [X_AssayGroupTestResultDuplicate.VersionCer");
            viewString.Append("tainty], \r\n            T.VersionWorkflowInstanceID AS [X_AssayGroupTestResultDup");
            viewString.Append("licate.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_AssayG");
            viewString.Append("roupTestResultDuplicate.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [");
            viewString.Append("X_AssayGroupTestResultDuplicate.VersionDeletedBy], \r\n            T.VersionOwnerC");
            viewString.Append("ontactID AS [X_AssayGroupTestResultDuplicate.VersionOwnerContactID], \r\n         ");
            viewString.Append("   T.VersionOwnerCompanyID AS [X_AssayGroupTestResultDuplicate.VersionOwnerCompa");
            viewString.Append("nyID], \r\n            T.VersionUpdated AS [X_AssayGroupTestResultDuplicate.Versio");
            viewString.Append("nUpdated], \r\n            True AS _from0\r\n        FROM NKDC.AssayGroupTestResultD");
            viewString.Append("uplicates AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_AssayGroupTestResultDuplicate", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_BlockModel
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView66()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(4428);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_BlockModel\r\n        [NKD.Module.BusinessObj");
            viewString.Append("ects.Store.X_BlockModel](T1.[X_BlockModel.BlockModelID], T1.[X_BlockModel.Projec");
            viewString.Append("tID], T1.[X_BlockModel.Alias], T1.[X_BlockModel.OriginX], T1.[X_BlockModel.Origi");
            viewString.Append("nY], T1.[X_BlockModel.OriginZ], T1.[X_BlockModel.IsIJKCalculated], T1.[X_BlockMo");
            viewString.Append("del.OriginI], T1.[X_BlockModel.OriginJ], T1.[X_BlockModel.OriginK], T1.[X_BlockM");
            viewString.Append("odel.MaximumI], T1.[X_BlockModel.MaximumJ], T1.[X_BlockModel.MaximumK], T1.[X_Bl");
            viewString.Append("ockModel.MinimumI], T1.[X_BlockModel.MinimumJ], T1.[X_BlockModel.MinimumK], T1.[");
            viewString.Append("X_BlockModel.DimensionEasting], T1.[X_BlockModel.DimensionNorthing], T1.[X_Block");
            viewString.Append("Model.DimensionElevation], T1.[X_BlockModel.IsOriginNorthPositive], T1.[X_BlockM");
            viewString.Append("odel.IsOriginEastPositive], T1.[X_BlockModel.IsOriginElevationUpwardsPositive], ");
            viewString.Append("T1.[X_BlockModel.CubeCentroid0OriginOffsetX], T1.[X_BlockModel.CubeCentroid0Orig");
            viewString.Append("inOffsetY], T1.[X_BlockModel.CubeCentroid0OriginOffsetZ], T1.[X_BlockModel.UnitI");
            viewString.Append("JK], T1.[X_BlockModel.DefaultISize], T1.[X_BlockModel.DefaultJSize], T1.[X_Block");
            viewString.Append("Model.DefaultKSize], T1.[X_BlockModel.AuthorContactID], T1.[X_BlockModel.Respons");
            viewString.Append("ibleContactID], T1.[X_BlockModel.ApproverContactID], T1.[X_BlockModel.ExternalRe");
            viewString.Append("viewerContactID], T1.[X_BlockModel.Version], T1.[X_BlockModel.VersionAntecedentI");
            viewString.Append("D], T1.[X_BlockModel.VersionCertainty], T1.[X_BlockModel.VersionWorkflowInstance");
            viewString.Append("ID], T1.[X_BlockModel.VersionUpdatedBy], T1.[X_BlockModel.VersionDeletedBy], T1.");
            viewString.Append("[X_BlockModel.VersionOwnerContactID], T1.[X_BlockModel.VersionOwnerCompanyID], T");
            viewString.Append("1.[X_BlockModel.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.Blo");
            viewString.Append("ckModelID AS [X_BlockModel.BlockModelID], \r\n            T.ProjectID AS [X_BlockM");
            viewString.Append("odel.ProjectID], \r\n            T.Alias AS [X_BlockModel.Alias], \r\n            T.");
            viewString.Append("OriginX AS [X_BlockModel.OriginX], \r\n            T.OriginY AS [X_BlockModel.Orig");
            viewString.Append("inY], \r\n            T.OriginZ AS [X_BlockModel.OriginZ], \r\n            T.IsIJKCa");
            viewString.Append("lculated AS [X_BlockModel.IsIJKCalculated], \r\n            T.OriginI AS [X_BlockM");
            viewString.Append("odel.OriginI], \r\n            T.OriginJ AS [X_BlockModel.OriginJ], \r\n            ");
            viewString.Append("T.OriginK AS [X_BlockModel.OriginK], \r\n            T.MaximumI AS [X_BlockModel.M");
            viewString.Append("aximumI], \r\n            T.MaximumJ AS [X_BlockModel.MaximumJ], \r\n            T.M");
            viewString.Append("aximumK AS [X_BlockModel.MaximumK], \r\n            T.MinimumI AS [X_BlockModel.Mi");
            viewString.Append("nimumI], \r\n            T.MinimumJ AS [X_BlockModel.MinimumJ], \r\n            T.Mi");
            viewString.Append("nimumK AS [X_BlockModel.MinimumK], \r\n            T.DimensionEasting AS [X_BlockM");
            viewString.Append("odel.DimensionEasting], \r\n            T.DimensionNorthing AS [X_BlockModel.Dimen");
            viewString.Append("sionNorthing], \r\n            T.DimensionElevation AS [X_BlockModel.DimensionElev");
            viewString.Append("ation], \r\n            T.IsOriginNorthPositive AS [X_BlockModel.IsOriginNorthPosi");
            viewString.Append("tive], \r\n            T.IsOriginEastPositive AS [X_BlockModel.IsOriginEastPositiv");
            viewString.Append("e], \r\n            T.IsOriginElevationUpwardsPositive AS [X_BlockModel.IsOriginEl");
            viewString.Append("evationUpwardsPositive], \r\n            T.CubeCentroid0OriginOffsetX AS [X_BlockM");
            viewString.Append("odel.CubeCentroid0OriginOffsetX], \r\n            T.CubeCentroid0OriginOffsetY AS ");
            viewString.Append("[X_BlockModel.CubeCentroid0OriginOffsetY], \r\n            T.CubeCentroid0OriginOf");
            viewString.Append("fsetZ AS [X_BlockModel.CubeCentroid0OriginOffsetZ], \r\n            T.UnitIJK AS [");
            viewString.Append("X_BlockModel.UnitIJK], \r\n            T.DefaultISize AS [X_BlockModel.DefaultISiz");
            viewString.Append("e], \r\n            T.DefaultJSize AS [X_BlockModel.DefaultJSize], \r\n            T");
            viewString.Append(".DefaultKSize AS [X_BlockModel.DefaultKSize], \r\n            T.AuthorContactID AS");
            viewString.Append(" [X_BlockModel.AuthorContactID], \r\n            T.ResponsibleContactID AS [X_Bloc");
            viewString.Append("kModel.ResponsibleContactID], \r\n            T.ApproverContactID AS [X_BlockModel");
            viewString.Append(".ApproverContactID], \r\n            T.ExternalReviewerContactID AS [X_BlockModel.");
            viewString.Append("ExternalReviewerContactID], \r\n            T.Version AS [X_BlockModel.Version], \r");
            viewString.Append("\n            T.VersionAntecedentID AS [X_BlockModel.VersionAntecedentID], \r\n    ");
            viewString.Append("        T.VersionCertainty AS [X_BlockModel.VersionCertainty], \r\n            T.V");
            viewString.Append("ersionWorkflowInstanceID AS [X_BlockModel.VersionWorkflowInstanceID], \r\n        ");
            viewString.Append("    T.VersionUpdatedBy AS [X_BlockModel.VersionUpdatedBy], \r\n            T.Versi");
            viewString.Append("onDeletedBy AS [X_BlockModel.VersionDeletedBy], \r\n            T.VersionOwnerCont");
            viewString.Append("actID AS [X_BlockModel.VersionOwnerContactID], \r\n            T.VersionOwnerCompa");
            viewString.Append("nyID AS [X_BlockModel.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS ");
            viewString.Append("[X_BlockModel.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.B");
            viewString.Append("lockModels AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_BlockModel", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_BlockModelBlock
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView67()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(7212);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_BlockModelBlock\r\n        [NKD.Module.Busine");
            viewString.Append("ssObjects.Store.X_BlockModelBlock](T1.[X_BlockModelBlock.BlockModelBlockID], T1.");
            viewString.Append("[X_BlockModelBlock.BlockModelID], T1.[X_BlockModelBlock.Domain], T1.[X_BlockMode");
            viewString.Append("lBlock.I], T1.[X_BlockModelBlock.J], T1.[X_BlockModelBlock.K], T1.[X_BlockModelB");
            viewString.Append("lock.CentroidX], T1.[X_BlockModelBlock.CentroidY], T1.[X_BlockModelBlock.Centroi");
            viewString.Append("dZ], T1.[X_BlockModelBlock.LengthX], T1.[X_BlockModelBlock.LengthY], T1.[X_Block");
            viewString.Append("ModelBlock.LengthZ], T1.[X_BlockModelBlock.MinimumSamples], T1.[X_BlockModelBloc");
            viewString.Append("k.MaximumSamples], T1.[X_BlockModelBlock.EstimationTechnique], T1.[X_BlockModelB");
            viewString.Append("lock.KrigingEfficiency], T1.[X_BlockModelBlock.KrigingError], T1.[X_BlockModelBl");
            viewString.Append("ock.KrigingVariance], T1.[X_BlockModelBlock.SlopeOfRegression], T1.[X_BlockModel");
            viewString.Append("Block.Density], T1.[X_BlockModelBlock.ResourceCategory], T1.[X_BlockModelBlock.N");
            viewString.Append("umeric1], T1.[X_BlockModelBlock.Numeric2], T1.[X_BlockModelBlock.Numeric3], T1.[");
            viewString.Append("X_BlockModelBlock.Numeric4], T1.[X_BlockModelBlock.Numeric5], T1.[X_BlockModelBl");
            viewString.Append("ock.Numeric6], T1.[X_BlockModelBlock.Numeric7], T1.[X_BlockModelBlock.Numeric8],");
            viewString.Append(" T1.[X_BlockModelBlock.Numeric9], T1.[X_BlockModelBlock.Numeric10], T1.[X_BlockM");
            viewString.Append("odelBlock.Numeric11], T1.[X_BlockModelBlock.Numeric12], T1.[X_BlockModelBlock.Nu");
            viewString.Append("meric13], T1.[X_BlockModelBlock.Numeric14], T1.[X_BlockModelBlock.Numeric15], T1");
            viewString.Append(".[X_BlockModelBlock.Numeric16], T1.[X_BlockModelBlock.Numeric17], T1.[X_BlockMod");
            viewString.Append("elBlock.Numeric18], T1.[X_BlockModelBlock.Numeric19], T1.[X_BlockModelBlock.Nume");
            viewString.Append("ric20], T1.[X_BlockModelBlock.Numeric21], T1.[X_BlockModelBlock.Numeric22], T1.[");
            viewString.Append("X_BlockModelBlock.Numeric23], T1.[X_BlockModelBlock.Numeric24], T1.[X_BlockModel");
            viewString.Append("Block.Numeric25], T1.[X_BlockModelBlock.Numeric26], T1.[X_BlockModelBlock.Numeri");
            viewString.Append("c27], T1.[X_BlockModelBlock.Numeric28], T1.[X_BlockModelBlock.Numeric29], T1.[X_");
            viewString.Append("BlockModelBlock.Numeric30], T1.[X_BlockModelBlock.Numeric31], T1.[X_BlockModelBl");
            viewString.Append("ock.String1], T1.[X_BlockModelBlock.String2], T1.[X_BlockModelBlock.String3], T1");
            viewString.Append(".[X_BlockModelBlock.String4], T1.[X_BlockModelBlock.String5], T1.[X_BlockModelBl");
            viewString.Append("ock.String6], T1.[X_BlockModelBlock.String7], T1.[X_BlockModelBlock.String8], T1");
            viewString.Append(".[X_BlockModelBlock.String9], T1.[X_BlockModelBlock.String10], T1.[X_BlockModelB");
            viewString.Append("lock.String11], T1.[X_BlockModelBlock.Version], T1.[X_BlockModelBlock.VersionAnt");
            viewString.Append("ecedentID], T1.[X_BlockModelBlock.VersionCertainty], T1.[X_BlockModelBlock.Versi");
            viewString.Append("onWorkflowInstanceID], T1.[X_BlockModelBlock.VersionUpdatedBy], T1.[X_BlockModel");
            viewString.Append("Block.VersionDeletedBy], T1.[X_BlockModelBlock.VersionOwnerContactID], T1.[X_Blo");
            viewString.Append("ckModelBlock.VersionOwnerCompanyID], T1.[X_BlockModelBlock.VersionUpdated])\r\n   ");
            viewString.Append(" FROM (\r\n        SELECT \r\n            T.BlockModelBlockID AS [X_BlockModelBlock.");
            viewString.Append("BlockModelBlockID], \r\n            T.BlockModelID AS [X_BlockModelBlock.BlockMode");
            viewString.Append("lID], \r\n            T.Domain AS [X_BlockModelBlock.Domain], \r\n            T.I AS");
            viewString.Append(" [X_BlockModelBlock.I], \r\n            T.J AS [X_BlockModelBlock.J], \r\n          ");
            viewString.Append("  T.K AS [X_BlockModelBlock.K], \r\n            T.CentroidX AS [X_BlockModelBlock.");
            viewString.Append("CentroidX], \r\n            T.CentroidY AS [X_BlockModelBlock.CentroidY], \r\n      ");
            viewString.Append("      T.CentroidZ AS [X_BlockModelBlock.CentroidZ], \r\n            T.LengthX AS [");
            viewString.Append("X_BlockModelBlock.LengthX], \r\n            T.LengthY AS [X_BlockModelBlock.Length");
            viewString.Append("Y], \r\n            T.LengthZ AS [X_BlockModelBlock.LengthZ], \r\n            T.Mini");
            viewString.Append("mumSamples AS [X_BlockModelBlock.MinimumSamples], \r\n            T.MaximumSamples");
            viewString.Append(" AS [X_BlockModelBlock.MaximumSamples], \r\n            T.EstimationTechnique AS [");
            viewString.Append("X_BlockModelBlock.EstimationTechnique], \r\n            T.KrigingEfficiency AS [X_");
            viewString.Append("BlockModelBlock.KrigingEfficiency], \r\n            T.KrigingError AS [X_BlockMode");
            viewString.Append("lBlock.KrigingError], \r\n            T.KrigingVariance AS [X_BlockModelBlock.Krig");
            viewString.Append("ingVariance], \r\n            T.SlopeOfRegression AS [X_BlockModelBlock.SlopeOfReg");
            viewString.Append("ression], \r\n            T.Density AS [X_BlockModelBlock.Density], \r\n            ");
            viewString.Append("T.ResourceCategory AS [X_BlockModelBlock.ResourceCategory], \r\n            T.Nume");
            viewString.Append("ric1 AS [X_BlockModelBlock.Numeric1], \r\n            T.Numeric2 AS [X_BlockModelB");
            viewString.Append("lock.Numeric2], \r\n            T.Numeric3 AS [X_BlockModelBlock.Numeric3], \r\n    ");
            viewString.Append("        T.Numeric4 AS [X_BlockModelBlock.Numeric4], \r\n            T.Numeric5 AS ");
            viewString.Append("[X_BlockModelBlock.Numeric5], \r\n            T.Numeric6 AS [X_BlockModelBlock.Num");
            viewString.Append("eric6], \r\n            T.Numeric7 AS [X_BlockModelBlock.Numeric7], \r\n            ");
            viewString.Append("T.Numeric8 AS [X_BlockModelBlock.Numeric8], \r\n            T.Numeric9 AS [X_Block");
            viewString.Append("ModelBlock.Numeric9], \r\n            T.Numeric10 AS [X_BlockModelBlock.Numeric10]");
            viewString.Append(", \r\n            T.Numeric11 AS [X_BlockModelBlock.Numeric11], \r\n            T.Nu");
            viewString.Append("meric12 AS [X_BlockModelBlock.Numeric12], \r\n            T.Numeric13 AS [X_BlockM");
            viewString.Append("odelBlock.Numeric13], \r\n            T.Numeric14 AS [X_BlockModelBlock.Numeric14]");
            viewString.Append(", \r\n            T.Numeric15 AS [X_BlockModelBlock.Numeric15], \r\n            T.Nu");
            viewString.Append("meric16 AS [X_BlockModelBlock.Numeric16], \r\n            T.Numeric17 AS [X_BlockM");
            viewString.Append("odelBlock.Numeric17], \r\n            T.Numeric18 AS [X_BlockModelBlock.Numeric18]");
            viewString.Append(", \r\n            T.Numeric19 AS [X_BlockModelBlock.Numeric19], \r\n            T.Nu");
            viewString.Append("meric20 AS [X_BlockModelBlock.Numeric20], \r\n            T.Numeric21 AS [X_BlockM");
            viewString.Append("odelBlock.Numeric21], \r\n            T.Numeric22 AS [X_BlockModelBlock.Numeric22]");
            viewString.Append(", \r\n            T.Numeric23 AS [X_BlockModelBlock.Numeric23], \r\n            T.Nu");
            viewString.Append("meric24 AS [X_BlockModelBlock.Numeric24], \r\n            T.Numeric25 AS [X_BlockM");
            viewString.Append("odelBlock.Numeric25], \r\n            T.Numeric26 AS [X_BlockModelBlock.Numeric26]");
            viewString.Append(", \r\n            T.Numeric27 AS [X_BlockModelBlock.Numeric27], \r\n            T.Nu");
            viewString.Append("meric28 AS [X_BlockModelBlock.Numeric28], \r\n            T.Numeric29 AS [X_BlockM");
            viewString.Append("odelBlock.Numeric29], \r\n            T.Numeric30 AS [X_BlockModelBlock.Numeric30]");
            viewString.Append(", \r\n            T.Numeric31 AS [X_BlockModelBlock.Numeric31], \r\n            T.St");
            viewString.Append("ring1 AS [X_BlockModelBlock.String1], \r\n            T.String2 AS [X_BlockModelBl");
            viewString.Append("ock.String2], \r\n            T.String3 AS [X_BlockModelBlock.String3], \r\n        ");
            viewString.Append("    T.String4 AS [X_BlockModelBlock.String4], \r\n            T.String5 AS [X_Bloc");
            viewString.Append("kModelBlock.String5], \r\n            T.String6 AS [X_BlockModelBlock.String6], \r\n");
            viewString.Append("            T.String7 AS [X_BlockModelBlock.String7], \r\n            T.String8 AS");
            viewString.Append(" [X_BlockModelBlock.String8], \r\n            T.String9 AS [X_BlockModelBlock.Stri");
            viewString.Append("ng9], \r\n            T.String10 AS [X_BlockModelBlock.String10], \r\n            T.");
            viewString.Append("String11 AS [X_BlockModelBlock.String11], \r\n            T.Version AS [X_BlockMod");
            viewString.Append("elBlock.Version], \r\n            T.VersionAntecedentID AS [X_BlockModelBlock.Vers");
            viewString.Append("ionAntecedentID], \r\n            T.VersionCertainty AS [X_BlockModelBlock.Version");
            viewString.Append("Certainty], \r\n            T.VersionWorkflowInstanceID AS [X_BlockModelBlock.Vers");
            viewString.Append("ionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_BlockModelBlock.V");
            viewString.Append("ersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_BlockModelBlock.Version");
            viewString.Append("DeletedBy], \r\n            T.VersionOwnerContactID AS [X_BlockModelBlock.VersionO");
            viewString.Append("wnerContactID], \r\n            T.VersionOwnerCompanyID AS [X_BlockModelBlock.Vers");
            viewString.Append("ionOwnerCompanyID], \r\n            T.VersionUpdated AS [X_BlockModelBlock.Version");
            viewString.Append("Updated], \r\n            True AS _from0\r\n        FROM NKDC.BlockModelBlocks AS T\r");
            viewString.Append("\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_BlockModelBlock", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_BlockModelBlockData
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView68()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2151);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_BlockModelBlockData\r\n        [NKD.Module.Bu");
            viewString.Append("sinessObjects.Store.X_BlockModelBlockData](T1.[X_BlockModelBlockData.BlockModelB");
            viewString.Append("lockDataID], T1.[X_BlockModelBlockData.BlockModelID], T1.[X_BlockModelBlockData.");
            viewString.Append("BlockModelBlockID], T1.[X_BlockModelBlockData.ParameterID], T1.[X_BlockModelBloc");
            viewString.Append("kData.BlockModelBlockDataText], T1.[X_BlockModelBlockData.BlockModelBlockDataVal");
            viewString.Append("ue], T1.[X_BlockModelBlockData.Version], T1.[X_BlockModelBlockData.VersionAntece");
            viewString.Append("dentID], T1.[X_BlockModelBlockData.VersionCertainty], T1.[X_BlockModelBlockData.");
            viewString.Append("VersionWorkflowInstanceID], T1.[X_BlockModelBlockData.VersionUpdatedBy], T1.[X_B");
            viewString.Append("lockModelBlockData.VersionDeletedBy], T1.[X_BlockModelBlockData.VersionOwnerCont");
            viewString.Append("actID], T1.[X_BlockModelBlockData.VersionOwnerCompanyID], T1.[X_BlockModelBlockD");
            viewString.Append("ata.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.BlockModelBlock");
            viewString.Append("DataID AS [X_BlockModelBlockData.BlockModelBlockDataID], \r\n            T.BlockMo");
            viewString.Append("delID AS [X_BlockModelBlockData.BlockModelID], \r\n            T.BlockModelBlockID");
            viewString.Append(" AS [X_BlockModelBlockData.BlockModelBlockID], \r\n            T.ParameterID AS [X");
            viewString.Append("_BlockModelBlockData.ParameterID], \r\n            T.BlockModelBlockDataText AS [X");
            viewString.Append("_BlockModelBlockData.BlockModelBlockDataText], \r\n            T.BlockModelBlockDa");
            viewString.Append("taValue AS [X_BlockModelBlockData.BlockModelBlockDataValue], \r\n            T.Ver");
            viewString.Append("sion AS [X_BlockModelBlockData.Version], \r\n            T.VersionAntecedentID AS ");
            viewString.Append("[X_BlockModelBlockData.VersionAntecedentID], \r\n            T.VersionCertainty AS");
            viewString.Append(" [X_BlockModelBlockData.VersionCertainty], \r\n            T.VersionWorkflowInstan");
            viewString.Append("ceID AS [X_BlockModelBlockData.VersionWorkflowInstanceID], \r\n            T.Versi");
            viewString.Append("onUpdatedBy AS [X_BlockModelBlockData.VersionUpdatedBy], \r\n            T.Version");
            viewString.Append("DeletedBy AS [X_BlockModelBlockData.VersionDeletedBy], \r\n            T.VersionOw");
            viewString.Append("nerContactID AS [X_BlockModelBlockData.VersionOwnerContactID], \r\n            T.V");
            viewString.Append("ersionOwnerCompanyID AS [X_BlockModelBlockData.VersionOwnerCompanyID], \r\n       ");
            viewString.Append("     T.VersionUpdated AS [X_BlockModelBlockData.VersionUpdated], \r\n            T");
            viewString.Append("rue AS _from0\r\n        FROM NKDC.BlockModelBlockDatas AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_BlockModelBlockData", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_BlockModelMetadata
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView69()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2094);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_BlockModelMetadata\r\n        [NKD.Module.Bus");
            viewString.Append("inessObjects.Store.X_BlockModelMetadata](T1.[X_BlockModelMetadata.BlockModelMeta");
            viewString.Append("dataID], T1.[X_BlockModelMetadata.BlockModelID], T1.[X_BlockModelMetadata.Parame");
            viewString.Append("terID], T1.[X_BlockModelMetadata.IsColumnData], T1.[X_BlockModelMetadata.BlockMo");
            viewString.Append("delMetadataText], T1.[X_BlockModelMetadata.BlockModelMetadataValue], T1.[X_Block");
            viewString.Append("ModelMetadata.Version], T1.[X_BlockModelMetadata.VersionAntecedentID], T1.[X_Blo");
            viewString.Append("ckModelMetadata.VersionCertainty], T1.[X_BlockModelMetadata.VersionWorkflowInsta");
            viewString.Append("nceID], T1.[X_BlockModelMetadata.VersionUpdatedBy], T1.[X_BlockModelMetadata.Ver");
            viewString.Append("sionDeletedBy], T1.[X_BlockModelMetadata.VersionOwnerContactID], T1.[X_BlockMode");
            viewString.Append("lMetadata.VersionOwnerCompanyID], T1.[X_BlockModelMetadata.VersionUpdated])\r\n   ");
            viewString.Append(" FROM (\r\n        SELECT \r\n            T.BlockModelMetadataID AS [X_BlockModelMet");
            viewString.Append("adata.BlockModelMetadataID], \r\n            T.BlockModelID AS [X_BlockModelMetada");
            viewString.Append("ta.BlockModelID], \r\n            T.ParameterID AS [X_BlockModelMetadata.Parameter");
            viewString.Append("ID], \r\n            T.IsColumnData AS [X_BlockModelMetadata.IsColumnData], \r\n    ");
            viewString.Append("        T.BlockModelMetadataText AS [X_BlockModelMetadata.BlockModelMetadataText");
            viewString.Append("], \r\n            T.BlockModelMetadataValue AS [X_BlockModelMetadata.BlockModelMe");
            viewString.Append("tadataValue], \r\n            T.Version AS [X_BlockModelMetadata.Version], \r\n     ");
            viewString.Append("       T.VersionAntecedentID AS [X_BlockModelMetadata.VersionAntecedentID], \r\n  ");
            viewString.Append("          T.VersionCertainty AS [X_BlockModelMetadata.VersionCertainty], \r\n     ");
            viewString.Append("       T.VersionWorkflowInstanceID AS [X_BlockModelMetadata.VersionWorkflowInsta");
            viewString.Append("nceID], \r\n            T.VersionUpdatedBy AS [X_BlockModelMetadata.VersionUpdated");
            viewString.Append("By], \r\n            T.VersionDeletedBy AS [X_BlockModelMetadata.VersionDeletedBy]");
            viewString.Append(", \r\n            T.VersionOwnerContactID AS [X_BlockModelMetadata.VersionOwnerCon");
            viewString.Append("tactID], \r\n            T.VersionOwnerCompanyID AS [X_BlockModelMetadata.VersionO");
            viewString.Append("wnerCompanyID], \r\n            T.VersionUpdated AS [X_BlockModelMetadata.VersionU");
            viewString.Append("pdated], \r\n            True AS _from0\r\n        FROM NKDC.BlockModelMetadatas AS ");
            viewString.Append("T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_BlockModelMetadata", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_Casing
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView70()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2233);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_Casing\r\n        [NKD.Module.BusinessObjects");
            viewString.Append(".Store.X_Casing](T1.[X_Casing.CasingID], T1.[X_Casing.HeaderID], T1.[X_Casing.Fr");
            viewString.Append("omDepth], T1.[X_Casing.ToDepth], T1.[X_Casing.CasingTypeID], T1.[X_Casing.Casing");
            viewString.Append("Size], T1.[X_Casing.CasingSizeUnit], T1.[X_Casing.CasingInsideData], T1.[X_Casin");
            viewString.Append("g.CasingInsideDataUnit], T1.[X_Casing.CasingOutsideData], T1.[X_Casing.CasingOut");
            viewString.Append("sideDataUnit], T1.[X_Casing.LengthRecovered], T1.[X_Casing.Comment], T1.[X_Casin");
            viewString.Append("g.Version], T1.[X_Casing.VersionAntecedentID], T1.[X_Casing.VersionCertainty], T");
            viewString.Append("1.[X_Casing.VersionWorkflowInstanceID], T1.[X_Casing.VersionUpdatedBy], T1.[X_Ca");
            viewString.Append("sing.VersionDeletedBy], T1.[X_Casing.VersionOwnerContactID], T1.[X_Casing.Versio");
            viewString.Append("nOwnerCompanyID], T1.[X_Casing.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n  ");
            viewString.Append("          T.CasingID AS [X_Casing.CasingID], \r\n            T.HeaderID AS [X_Casi");
            viewString.Append("ng.HeaderID], \r\n            T.FromDepth AS [X_Casing.FromDepth], \r\n            T");
            viewString.Append(".ToDepth AS [X_Casing.ToDepth], \r\n            T.CasingTypeID AS [X_Casing.Casing");
            viewString.Append("TypeID], \r\n            T.CasingSize AS [X_Casing.CasingSize], \r\n            T.Ca");
            viewString.Append("singSizeUnit AS [X_Casing.CasingSizeUnit], \r\n            T.CasingInsideData AS [");
            viewString.Append("X_Casing.CasingInsideData], \r\n            T.CasingInsideDataUnit AS [X_Casing.Ca");
            viewString.Append("singInsideDataUnit], \r\n            T.CasingOutsideData AS [X_Casing.CasingOutsid");
            viewString.Append("eData], \r\n            T.CasingOutsideDataUnit AS [X_Casing.CasingOutsideDataUnit");
            viewString.Append("], \r\n            T.LengthRecovered AS [X_Casing.LengthRecovered], \r\n            ");
            viewString.Append("T.Comment AS [X_Casing.Comment], \r\n            T.Version AS [X_Casing.Version], ");
            viewString.Append("\r\n            T.VersionAntecedentID AS [X_Casing.VersionAntecedentID], \r\n       ");
            viewString.Append("     T.VersionCertainty AS [X_Casing.VersionCertainty], \r\n            T.VersionW");
            viewString.Append("orkflowInstanceID AS [X_Casing.VersionWorkflowInstanceID], \r\n            T.Versi");
            viewString.Append("onUpdatedBy AS [X_Casing.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS ");
            viewString.Append("[X_Casing.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [X_Casing.");
            viewString.Append("VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [X_Casing.Versi");
            viewString.Append("onOwnerCompanyID], \r\n            T.VersionUpdated AS [X_Casing.VersionUpdated], ");
            viewString.Append("\r\n            True AS _from0\r\n        FROM NKDC.Casings AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_Casing", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_Cementing
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView71()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_Cementing", "\r\n    SELECT VALUE -- Constructing X_Cementing\r\n        [NKD.Module.BusinessObjec" +
                    "ts.Store.X_Cementing](T1.[X_Cementing.CementingID], T1.[X_Cementing.HeaderID], T" +
                    "1.[X_Cementing.FromDepth], T1.[X_Cementing.ToDepth], T1.[X_Cementing.CementingDa" +
                    "te], T1.[X_Cementing.Volume], T1.[X_Cementing.Comment], T1.[X_Cementing.Version]" +
                    ", T1.[X_Cementing.VersionAntecedentID], T1.[X_Cementing.VersionCertainty], T1.[X" +
                    "_Cementing.VersionWorkflowInstanceID], T1.[X_Cementing.VersionUpdatedBy], T1.[X_" +
                    "Cementing.VersionDeletedBy], T1.[X_Cementing.VersionOwnerContactID], T1.[X_Cemen" +
                    "ting.VersionOwnerCompanyID], T1.[X_Cementing.VersionUpdated])\r\n    FROM (\r\n     " +
                    "   SELECT \r\n            T.CementingID AS [X_Cementing.CementingID], \r\n          " +
                    "  T.HeaderID AS [X_Cementing.HeaderID], \r\n            T.FromDepth AS [X_Cementin" +
                    "g.FromDepth], \r\n            T.ToDepth AS [X_Cementing.ToDepth], \r\n            T." +
                    "CementingDate AS [X_Cementing.CementingDate], \r\n            T.Volume AS [X_Cemen" +
                    "ting.Volume], \r\n            T.Comment AS [X_Cementing.Comment], \r\n            T." +
                    "Version AS [X_Cementing.Version], \r\n            T.VersionAntecedentID AS [X_Ceme" +
                    "nting.VersionAntecedentID], \r\n            T.VersionCertainty AS [X_Cementing.Ver" +
                    "sionCertainty], \r\n            T.VersionWorkflowInstanceID AS [X_Cementing.Versio" +
                    "nWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_Cementing.VersionUp" +
                    "datedBy], \r\n            T.VersionDeletedBy AS [X_Cementing.VersionDeletedBy], \r\n" +
                    "            T.VersionOwnerContactID AS [X_Cementing.VersionOwnerContactID], \r\n  " +
                    "          T.VersionOwnerCompanyID AS [X_Cementing.VersionOwnerCompanyID], \r\n    " +
                    "        T.VersionUpdated AS [X_Cementing.VersionUpdated], \r\n            True AS " +
                    "_from0\r\n        FROM NKDC.Cementings AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_Company
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView72()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_Company", "\r\n    SELECT VALUE -- Constructing X_Company\r\n        [NKD.Module.BusinessObjects" +
                    ".Store.X_Company](T1.[X_Company.CompanyID], T1.[X_Company.CompanyName], T1.[X_Co" +
                    "mpany.CountryID], T1.[X_Company.PrimaryContactID], T1.[X_Company.Comment], T1.[X" +
                    "_Company.Thumbnail], T1.[X_Company.OriginalFileDataID], T1.[X_Company.Version], " +
                    "T1.[X_Company.VersionAntecedentID], T1.[X_Company.VersionCertainty], T1.[X_Compa" +
                    "ny.VersionWorkflowInstanceID], T1.[X_Company.VersionUpdatedBy], T1.[X_Company.Ve" +
                    "rsionDeletedBy], T1.[X_Company.VersionOwnerContactID], T1.[X_Company.VersionOwne" +
                    "rCompanyID], T1.[X_Company.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n      " +
                    "      T.CompanyID AS [X_Company.CompanyID], \r\n            T.CompanyName AS [X_Co" +
                    "mpany.CompanyName], \r\n            T.CountryID AS [X_Company.CountryID], \r\n      " +
                    "      T.PrimaryContactID AS [X_Company.PrimaryContactID], \r\n            T.Commen" +
                    "t AS [X_Company.Comment], \r\n            T.Thumbnail AS [X_Company.Thumbnail], \r\n" +
                    "            T.OriginalFileDataID AS [X_Company.OriginalFileDataID], \r\n          " +
                    "  T.Version AS [X_Company.Version], \r\n            T.VersionAntecedentID AS [X_Co" +
                    "mpany.VersionAntecedentID], \r\n            T.VersionCertainty AS [X_Company.Versi" +
                    "onCertainty], \r\n            T.VersionWorkflowInstanceID AS [X_Company.VersionWor" +
                    "kflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_Company.VersionUpdatedB" +
                    "y], \r\n            T.VersionDeletedBy AS [X_Company.VersionDeletedBy], \r\n        " +
                    "    T.VersionOwnerContactID AS [X_Company.VersionOwnerContactID], \r\n            " +
                    "T.VersionOwnerCompanyID AS [X_Company.VersionOwnerCompanyID], \r\n            T.Ve" +
                    "rsionUpdated AS [X_Company.VersionUpdated], \r\n            True AS _from0\r\n      " +
                    "  FROM NKDC.Companies AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_CompanyAddress
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView73()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_CompanyAddress", "\r\n    SELECT VALUE -- Constructing X_CompanyAddress\r\n        [NKD.Module.Business" +
                    "Objects.Store.X_CompanyAddress](T1.[X_CompanyAddress.CompanyAddressID], T1.[X_Co" +
                    "mpanyAddress.CompanyID], T1.[X_CompanyAddress.AddressID], T1.[X_CompanyAddress.V" +
                    "ersion], T1.[X_CompanyAddress.VersionAntecedentID], T1.[X_CompanyAddress.Version" +
                    "Certainty], T1.[X_CompanyAddress.VersionWorkflowInstanceID], T1.[X_CompanyAddres" +
                    "s.VersionUpdatedBy], T1.[X_CompanyAddress.VersionDeletedBy], T1.[X_CompanyAddres" +
                    "s.VersionOwnerContactID], T1.[X_CompanyAddress.VersionOwnerCompanyID], T1.[X_Com" +
                    "panyAddress.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.Company" +
                    "AddressID AS [X_CompanyAddress.CompanyAddressID], \r\n            T.CompanyID AS [" +
                    "X_CompanyAddress.CompanyID], \r\n            T.AddressID AS [X_CompanyAddress.Addr" +
                    "essID], \r\n            T.Version AS [X_CompanyAddress.Version], \r\n            T.V" +
                    "ersionAntecedentID AS [X_CompanyAddress.VersionAntecedentID], \r\n            T.Ve" +
                    "rsionCertainty AS [X_CompanyAddress.VersionCertainty], \r\n            T.VersionWo" +
                    "rkflowInstanceID AS [X_CompanyAddress.VersionWorkflowInstanceID], \r\n            " +
                    "T.VersionUpdatedBy AS [X_CompanyAddress.VersionUpdatedBy], \r\n            T.Versi" +
                    "onDeletedBy AS [X_CompanyAddress.VersionDeletedBy], \r\n            T.VersionOwner" +
                    "ContactID AS [X_CompanyAddress.VersionOwnerContactID], \r\n            T.VersionOw" +
                    "nerCompanyID AS [X_CompanyAddress.VersionOwnerCompanyID], \r\n            T.Versio" +
                    "nUpdated AS [X_CompanyAddress.VersionUpdated], \r\n            True AS _from0\r\n   " +
                    "     FROM NKDC.CompanyAddresses AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_CompanyRelation
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView74()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_CompanyRelation", "\r\n    SELECT VALUE -- Constructing X_CompanyRelation\r\n        [NKD.Module.Busines" +
                    "sObjects.Store.X_CompanyRelation](T1.[X_CompanyRelation.CompanyRelationID], T1.[" +
                    "X_CompanyRelation.CompanyID], T1.[X_CompanyRelation.ParentCompanyID], T1.[X_Comp" +
                    "anyRelation.IsChildVisible], T1.[X_CompanyRelation.IsParentVisible], T1.[X_Compa" +
                    "nyRelation.Version], T1.[X_CompanyRelation.VersionAntecedentID], T1.[X_CompanyRe" +
                    "lation.VersionCertainty], T1.[X_CompanyRelation.VersionWorkflowInstanceID], T1.[" +
                    "X_CompanyRelation.VersionUpdatedBy], T1.[X_CompanyRelation.VersionDeletedBy], T1" +
                    ".[X_CompanyRelation.VersionOwnerContactID], T1.[X_CompanyRelation.VersionOwnerCo" +
                    "mpanyID], T1.[X_CompanyRelation.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n " +
                    "           T.CompanyRelationID AS [X_CompanyRelation.CompanyRelationID], \r\n     " +
                    "       T.CompanyID AS [X_CompanyRelation.CompanyID], \r\n            T.ParentCompa" +
                    "nyID AS [X_CompanyRelation.ParentCompanyID], \r\n            T.IsChildVisible AS [" +
                    "X_CompanyRelation.IsChildVisible], \r\n            T.IsParentVisible AS [X_Company" +
                    "Relation.IsParentVisible], \r\n            T.Version AS [X_CompanyRelation.Version" +
                    "], \r\n            T.VersionAntecedentID AS [X_CompanyRelation.VersionAntecedentID" +
                    "], \r\n            T.VersionCertainty AS [X_CompanyRelation.VersionCertainty], \r\n " +
                    "           T.VersionWorkflowInstanceID AS [X_CompanyRelation.VersionWorkflowInst" +
                    "anceID], \r\n            T.VersionUpdatedBy AS [X_CompanyRelation.VersionUpdatedBy" +
                    "], \r\n            T.VersionDeletedBy AS [X_CompanyRelation.VersionDeletedBy], \r\n " +
                    "           T.VersionOwnerContactID AS [X_CompanyRelation.VersionOwnerContactID]," +
                    " \r\n            T.VersionOwnerCompanyID AS [X_CompanyRelation.VersionOwnerCompany" +
                    "ID], \r\n            T.VersionUpdated AS [X_CompanyRelation.VersionUpdated], \r\n   " +
                    "         True AS _from0\r\n        FROM NKDC.CompanyRelations AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_Compliance
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView75()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2211);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_Compliance\r\n        [NKD.Module.BusinessObj");
            viewString.Append("ects.Store.X_Compliance](T1.[X_Compliance.ComplianceID], T1.[X_Compliance.Compli");
            viewString.Append("anceName], T1.[X_Compliance.ComplianceVersion], T1.[X_Compliance.CountryID], T1.");
            viewString.Append("[X_Compliance.ProvinceID], T1.[X_Compliance.ValidFrom], T1.[X_Compliance.Expiry]");
            viewString.Append(", T1.[X_Compliance.AuthorityCompanyID], T1.[X_Compliance.MaintainedBy], T1.[X_Co");
            viewString.Append("mpliance.Description], T1.[X_Compliance.ComplianceForm], T1.[X_Compliance.Versio");
            viewString.Append("n], T1.[X_Compliance.VersionAntecedentID], T1.[X_Compliance.VersionCertainty], T");
            viewString.Append("1.[X_Compliance.VersionWorkflowInstanceID], T1.[X_Compliance.VersionUpdatedBy], ");
            viewString.Append("T1.[X_Compliance.VersionDeletedBy], T1.[X_Compliance.VersionOwnerContactID], T1.");
            viewString.Append("[X_Compliance.VersionOwnerCompanyID], T1.[X_Compliance.VersionUpdated])\r\n    FRO");
            viewString.Append("M (\r\n        SELECT \r\n            T.ComplianceID AS [X_Compliance.ComplianceID],");
            viewString.Append(" \r\n            T.ComplianceName AS [X_Compliance.ComplianceName], \r\n            ");
            viewString.Append("T.ComplianceVersion AS [X_Compliance.ComplianceVersion], \r\n            T.Country");
            viewString.Append("ID AS [X_Compliance.CountryID], \r\n            T.ProvinceID AS [X_Compliance.Prov");
            viewString.Append("inceID], \r\n            T.ValidFrom AS [X_Compliance.ValidFrom], \r\n            T.");
            viewString.Append("Expiry AS [X_Compliance.Expiry], \r\n            T.AuthorityCompanyID AS [X_Compli");
            viewString.Append("ance.AuthorityCompanyID], \r\n            T.MaintainedBy AS [X_Compliance.Maintain");
            viewString.Append("edBy], \r\n            T.Description AS [X_Compliance.Description], \r\n            ");
            viewString.Append("T.ComplianceForm AS [X_Compliance.ComplianceForm], \r\n            T.Version AS [X");
            viewString.Append("_Compliance.Version], \r\n            T.VersionAntecedentID AS [X_Compliance.Versi");
            viewString.Append("onAntecedentID], \r\n            T.VersionCertainty AS [X_Compliance.VersionCertai");
            viewString.Append("nty], \r\n            T.VersionWorkflowInstanceID AS [X_Compliance.VersionWorkflow");
            viewString.Append("InstanceID], \r\n            T.VersionUpdatedBy AS [X_Compliance.VersionUpdatedBy]");
            viewString.Append(", \r\n            T.VersionDeletedBy AS [X_Compliance.VersionDeletedBy], \r\n       ");
            viewString.Append("     T.VersionOwnerContactID AS [X_Compliance.VersionOwnerContactID], \r\n        ");
            viewString.Append("    T.VersionOwnerCompanyID AS [X_Compliance.VersionOwnerCompanyID], \r\n         ");
            viewString.Append("   T.VersionUpdated AS [X_Compliance.VersionUpdated], \r\n            True AS _fro");
            viewString.Append("m0\r\n        FROM NKDC.Compliances AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_Compliance", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_ComplianceTask
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView76()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_ComplianceTask", "\r\n    SELECT VALUE -- Constructing X_ComplianceTask\r\n        [NKD.Module.Business" +
                    "Objects.Store.X_ComplianceTask](T1.[X_ComplianceTask.ComplianceTaskID], T1.[X_Co" +
                    "mplianceTask.ComplianceID], T1.[X_ComplianceTask.TaskID], T1.[X_ComplianceTask.E" +
                    "xecutePrior], T1.[X_ComplianceTask.Sequence], T1.[X_ComplianceTask.Version], T1." +
                    "[X_ComplianceTask.VersionAntecedentID], T1.[X_ComplianceTask.VersionCertainty], " +
                    "T1.[X_ComplianceTask.VersionWorkflowInstanceID], T1.[X_ComplianceTask.VersionUpd" +
                    "atedBy], T1.[X_ComplianceTask.VersionDeletedBy], T1.[X_ComplianceTask.VersionOwn" +
                    "erContactID], T1.[X_ComplianceTask.VersionOwnerCompanyID], T1.[X_ComplianceTask." +
                    "VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.ComplianceTaskID AS" +
                    " [X_ComplianceTask.ComplianceTaskID], \r\n            T.ComplianceID AS [X_Complia" +
                    "nceTask.ComplianceID], \r\n            T.TaskID AS [X_ComplianceTask.TaskID], \r\n  " +
                    "          T.ExecutePrior AS [X_ComplianceTask.ExecutePrior], \r\n            T.Seq" +
                    "uence AS [X_ComplianceTask.Sequence], \r\n            T.Version AS [X_ComplianceTa" +
                    "sk.Version], \r\n            T.VersionAntecedentID AS [X_ComplianceTask.VersionAnt" +
                    "ecedentID], \r\n            T.VersionCertainty AS [X_ComplianceTask.VersionCertain" +
                    "ty], \r\n            T.VersionWorkflowInstanceID AS [X_ComplianceTask.VersionWorkf" +
                    "lowInstanceID], \r\n            T.VersionUpdatedBy AS [X_ComplianceTask.VersionUpd" +
                    "atedBy], \r\n            T.VersionDeletedBy AS [X_ComplianceTask.VersionDeletedBy]" +
                    ", \r\n            T.VersionOwnerContactID AS [X_ComplianceTask.VersionOwnerContact" +
                    "ID], \r\n            T.VersionOwnerCompanyID AS [X_ComplianceTask.VersionOwnerComp" +
                    "anyID], \r\n            T.VersionUpdated AS [X_ComplianceTask.VersionUpdated], \r\n " +
                    "           True AS _from0\r\n        FROM NKDC.ComplianceTasks AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_ComplianceWorkType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView77()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_ComplianceWorkType", "\r\n    SELECT VALUE -- Constructing X_ComplianceWorkType\r\n        [NKD.Module.Busi" +
                    "nessObjects.Store.X_ComplianceWorkType](T1.[X_ComplianceWorkType.ComplianceWorkT" +
                    "ypeID], T1.[X_ComplianceWorkType.ComplianceID], T1.[X_ComplianceWorkType.WorkTyp" +
                    "eID], T1.[X_ComplianceWorkType.Version], T1.[X_ComplianceWorkType.VersionAnteced" +
                    "entID], T1.[X_ComplianceWorkType.VersionCertainty], T1.[X_ComplianceWorkType.Ver" +
                    "sionWorkflowInstanceID], T1.[X_ComplianceWorkType.VersionUpdatedBy], T1.[X_Compl" +
                    "ianceWorkType.VersionDeletedBy], T1.[X_ComplianceWorkType.VersionOwnerContactID]" +
                    ", T1.[X_ComplianceWorkType.VersionOwnerCompanyID], T1.[X_ComplianceWorkType.Vers" +
                    "ionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.ComplianceWorkTypeID AS" +
                    " [X_ComplianceWorkType.ComplianceWorkTypeID], \r\n            T.ComplianceID AS [X" +
                    "_ComplianceWorkType.ComplianceID], \r\n            T.WorkTypeID AS [X_ComplianceWo" +
                    "rkType.WorkTypeID], \r\n            T.Version AS [X_ComplianceWorkType.Version], \r" +
                    "\n            T.VersionAntecedentID AS [X_ComplianceWorkType.VersionAntecedentID]" +
                    ", \r\n            T.VersionCertainty AS [X_ComplianceWorkType.VersionCertainty], \r" +
                    "\n            T.VersionWorkflowInstanceID AS [X_ComplianceWorkType.VersionWorkflo" +
                    "wInstanceID], \r\n            T.VersionUpdatedBy AS [X_ComplianceWorkType.VersionU" +
                    "pdatedBy], \r\n            T.VersionDeletedBy AS [X_ComplianceWorkType.VersionDele" +
                    "tedBy], \r\n            T.VersionOwnerContactID AS [X_ComplianceWorkType.VersionOw" +
                    "nerContactID], \r\n            T.VersionOwnerCompanyID AS [X_ComplianceWorkType.Ve" +
                    "rsionOwnerCompanyID], \r\n            T.VersionUpdated AS [X_ComplianceWorkType.Ve" +
                    "rsionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.ComplianceWorkTyp" +
                    "es AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_Contact
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView78()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2835);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_Contact\r\n        [NKD.Module.BusinessObject");
            viewString.Append("s.Store.X_Contact](T1.[X_Contact.ContactID], T1.[X_Contact.ContactName], T1.[X_C");
            viewString.Append("ontact.Title], T1.[X_Contact.Surname], T1.[X_Contact.Firstname], T1.[X_Contact.U");
            viewString.Append("sername], T1.[X_Contact.Hash], T1.[X_Contact.DefaultEmail], T1.[X_Contact.Defaul");
            viewString.Append("tEmailValidated], T1.[X_Contact.DefaultMobile], T1.[X_Contact.DefaultMobileValid");
            viewString.Append("ated], T1.[X_Contact.MiddleNames], T1.[X_Contact.Initials], T1.[X_Contact.DOB], ");
            viewString.Append("T1.[X_Contact.BirthCountryID], T1.[X_Contact.BirthCity], T1.[X_Contact.AspNetUse");
            viewString.Append("rID], T1.[X_Contact.XafUserID], T1.[X_Contact.OAuthID], T1.[X_Contact.Photo], T1");
            viewString.Append(".[X_Contact.ShortBiography], T1.[X_Contact.Version], T1.[X_Contact.VersionAntece");
            viewString.Append("dentID], T1.[X_Contact.VersionCertainty], T1.[X_Contact.VersionWorkflowInstanceI");
            viewString.Append("D], T1.[X_Contact.VersionUpdatedBy], T1.[X_Contact.VersionDeletedBy], T1.[X_Cont");
            viewString.Append("act.VersionOwnerContactID], T1.[X_Contact.VersionOwnerCompanyID], T1.[X_Contact.");
            viewString.Append("VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.ContactID AS [X_Con");
            viewString.Append("tact.ContactID], \r\n            T.ContactName AS [X_Contact.ContactName], \r\n     ");
            viewString.Append("       T.Title AS [X_Contact.Title], \r\n            T.Surname AS [X_Contact.Surna");
            viewString.Append("me], \r\n            T.Firstname AS [X_Contact.Firstname], \r\n            T.Usernam");
            viewString.Append("e AS [X_Contact.Username], \r\n            T.Hash AS [X_Contact.Hash], \r\n         ");
            viewString.Append("   T.DefaultEmail AS [X_Contact.DefaultEmail], \r\n            T.DefaultEmailValid");
            viewString.Append("ated AS [X_Contact.DefaultEmailValidated], \r\n            T.DefaultMobile AS [X_C");
            viewString.Append("ontact.DefaultMobile], \r\n            T.DefaultMobileValidated AS [X_Contact.Defa");
            viewString.Append("ultMobileValidated], \r\n            T.MiddleNames AS [X_Contact.MiddleNames], \r\n ");
            viewString.Append("           T.Initials AS [X_Contact.Initials], \r\n            T.DOB AS [X_Contact");
            viewString.Append(".DOB], \r\n            T.BirthCountryID AS [X_Contact.BirthCountryID], \r\n         ");
            viewString.Append("   T.BirthCity AS [X_Contact.BirthCity], \r\n            T.AspNetUserID AS [X_Cont");
            viewString.Append("act.AspNetUserID], \r\n            T.XafUserID AS [X_Contact.XafUserID], \r\n       ");
            viewString.Append("     T.OAuthID AS [X_Contact.OAuthID], \r\n            T.Photo AS [X_Contact.Photo");
            viewString.Append("], \r\n            T.ShortBiography AS [X_Contact.ShortBiography], \r\n            T");
            viewString.Append(".Version AS [X_Contact.Version], \r\n            T.VersionAntecedentID AS [X_Conta");
            viewString.Append("ct.VersionAntecedentID], \r\n            T.VersionCertainty AS [X_Contact.VersionC");
            viewString.Append("ertainty], \r\n            T.VersionWorkflowInstanceID AS [X_Contact.VersionWorkfl");
            viewString.Append("owInstanceID], \r\n            T.VersionUpdatedBy AS [X_Contact.VersionUpdatedBy],");
            viewString.Append(" \r\n            T.VersionDeletedBy AS [X_Contact.VersionDeletedBy], \r\n           ");
            viewString.Append(" T.VersionOwnerContactID AS [X_Contact.VersionOwnerContactID], \r\n            T.V");
            viewString.Append("ersionOwnerCompanyID AS [X_Contact.VersionOwnerCompanyID], \r\n            T.Versi");
            viewString.Append("onUpdated AS [X_Contact.VersionUpdated], \r\n            True AS _from0\r\n        F");
            viewString.Append("ROM NKDC.Contacts AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_Contact", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_ContactAddress
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView79()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_ContactAddress", "\r\n    SELECT VALUE -- Constructing X_ContactAddress\r\n        [NKD.Module.Business" +
                    "Objects.Store.X_ContactAddress](T1.[X_ContactAddress.ContactAddressID], T1.[X_Co" +
                    "ntactAddress.ContactID], T1.[X_ContactAddress.AddressID], T1.[X_ContactAddress.V" +
                    "ersion], T1.[X_ContactAddress.VersionAntecedentID], T1.[X_ContactAddress.Version" +
                    "Certainty], T1.[X_ContactAddress.VersionWorkflowInstanceID], T1.[X_ContactAddres" +
                    "s.VersionUpdatedBy], T1.[X_ContactAddress.VersionDeletedBy], T1.[X_ContactAddres" +
                    "s.VersionOwnerContactID], T1.[X_ContactAddress.VersionOwnerCompanyID], T1.[X_Con" +
                    "tactAddress.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.Contact" +
                    "AddressID AS [X_ContactAddress.ContactAddressID], \r\n            T.ContactID AS [" +
                    "X_ContactAddress.ContactID], \r\n            T.AddressID AS [X_ContactAddress.Addr" +
                    "essID], \r\n            T.Version AS [X_ContactAddress.Version], \r\n            T.V" +
                    "ersionAntecedentID AS [X_ContactAddress.VersionAntecedentID], \r\n            T.Ve" +
                    "rsionCertainty AS [X_ContactAddress.VersionCertainty], \r\n            T.VersionWo" +
                    "rkflowInstanceID AS [X_ContactAddress.VersionWorkflowInstanceID], \r\n            " +
                    "T.VersionUpdatedBy AS [X_ContactAddress.VersionUpdatedBy], \r\n            T.Versi" +
                    "onDeletedBy AS [X_ContactAddress.VersionDeletedBy], \r\n            T.VersionOwner" +
                    "ContactID AS [X_ContactAddress.VersionOwnerContactID], \r\n            T.VersionOw" +
                    "nerCompanyID AS [X_ContactAddress.VersionOwnerCompanyID], \r\n            T.Versio" +
                    "nUpdated AS [X_ContactAddress.VersionUpdated], \r\n            True AS _from0\r\n   " +
                    "     FROM NKDC.ContactAddresses AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_Contract
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView80()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3556);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_Contract\r\n        [NKD.Module.BusinessObjec");
            viewString.Append("ts.Store.X_Contract](T1.[X_Contract.ContractID], T1.[X_Contract.ParentContractID");
            viewString.Append("], T1.[X_Contract.ContractName], T1.[X_Contract.Description], T1.[X_Contract.Pro");
            viewString.Append("jectID], T1.[X_Contract.LastDeliverableID], T1.[X_Contract.ObligeeID], T1.[X_Con");
            viewString.Append("tract.ObligeeCompanyID], T1.[X_Contract.ObligorID], T1.[X_Contract.ObligorCompan");
            viewString.Append("yID], T1.[X_Contract.AssigneeID], T1.[X_Contract.AssigneeCompanyID], T1.[X_Contr");
            viewString.Append("act.SolicitorID], T1.[X_Contract.SolicitorCompanyID], T1.[X_Contract.Risk], T1.[");
            viewString.Append("X_Contract.RiskStarts], T1.[X_Contract.RiskEnds], T1.[X_Contract.RiskCriticality");
            viewString.Append("], T1.[X_Contract.RiskLikelihood], T1.[X_Contract.Value], T1.[X_Contract.Tax], T");
            viewString.Append("1.[X_Contract.Started], T1.[X_Contract.Ended], T1.[X_Contract.Completed], T1.[X_");
            viewString.Append("Contract.ContractText], T1.[X_Contract.Comment], T1.[X_Contract.FileDataID], T1.");
            viewString.Append("[X_Contract.RespondWithinHours], T1.[X_Contract.Version], T1.[X_Contract.Version");
            viewString.Append("AntecedentID], T1.[X_Contract.VersionCertainty], T1.[X_Contract.VersionWorkflowI");
            viewString.Append("nstanceID], T1.[X_Contract.VersionUpdatedBy], T1.[X_Contract.VersionDeletedBy], ");
            viewString.Append("T1.[X_Contract.VersionOwnerContactID], T1.[X_Contract.VersionOwnerCompanyID], T1");
            viewString.Append(".[X_Contract.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.Contra");
            viewString.Append("ctID AS [X_Contract.ContractID], \r\n            T.ParentContractID AS [X_Contract");
            viewString.Append(".ParentContractID], \r\n            T.ContractName AS [X_Contract.ContractName], \r");
            viewString.Append("\n            T.Description AS [X_Contract.Description], \r\n            T.ProjectI");
            viewString.Append("D AS [X_Contract.ProjectID], \r\n            T.LastDeliverableID AS [X_Contract.La");
            viewString.Append("stDeliverableID], \r\n            T.ObligeeID AS [X_Contract.ObligeeID], \r\n       ");
            viewString.Append("     T.ObligeeCompanyID AS [X_Contract.ObligeeCompanyID], \r\n            T.Obligo");
            viewString.Append("rID AS [X_Contract.ObligorID], \r\n            T.ObligorCompanyID AS [X_Contract.O");
            viewString.Append("bligorCompanyID], \r\n            T.AssigneeID AS [X_Contract.AssigneeID], \r\n     ");
            viewString.Append("       T.AssigneeCompanyID AS [X_Contract.AssigneeCompanyID], \r\n            T.So");
            viewString.Append("licitorID AS [X_Contract.SolicitorID], \r\n            T.SolicitorCompanyID AS [X_");
            viewString.Append("Contract.SolicitorCompanyID], \r\n            T.Risk AS [X_Contract.Risk], \r\n     ");
            viewString.Append("       T.RiskStarts AS [X_Contract.RiskStarts], \r\n            T.RiskEnds AS [X_C");
            viewString.Append("ontract.RiskEnds], \r\n            T.RiskCriticality AS [X_Contract.RiskCriticalit");
            viewString.Append("y], \r\n            T.RiskLikelihood AS [X_Contract.RiskLikelihood], \r\n           ");
            viewString.Append(" T.[Value] AS [X_Contract.Value], \r\n            T.Tax AS [X_Contract.Tax], \r\n   ");
            viewString.Append("         T.Started AS [X_Contract.Started], \r\n            T.Ended AS [X_Contract");
            viewString.Append(".Ended], \r\n            T.Completed AS [X_Contract.Completed], \r\n            T.Co");
            viewString.Append("ntractText AS [X_Contract.ContractText], \r\n            T.Comment AS [X_Contract.");
            viewString.Append("Comment], \r\n            T.FileDataID AS [X_Contract.FileDataID], \r\n            T");
            viewString.Append(".RespondWithinHours AS [X_Contract.RespondWithinHours], \r\n            T.Version ");
            viewString.Append("AS [X_Contract.Version], \r\n            T.VersionAntecedentID AS [X_Contract.Vers");
            viewString.Append("ionAntecedentID], \r\n            T.VersionCertainty AS [X_Contract.VersionCertain");
            viewString.Append("ty], \r\n            T.VersionWorkflowInstanceID AS [X_Contract.VersionWorkflowIns");
            viewString.Append("tanceID], \r\n            T.VersionUpdatedBy AS [X_Contract.VersionUpdatedBy], \r\n ");
            viewString.Append("           T.VersionDeletedBy AS [X_Contract.VersionDeletedBy], \r\n            T.");
            viewString.Append("VersionOwnerContactID AS [X_Contract.VersionOwnerContactID], \r\n            T.Ver");
            viewString.Append("sionOwnerCompanyID AS [X_Contract.VersionOwnerCompanyID], \r\n            T.Versio");
            viewString.Append("nUpdated AS [X_Contract.VersionUpdated], \r\n            True AS _from0\r\n        F");
            viewString.Append("ROM NKDC.Contracts AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_Contract", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_ContractCondition
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView81()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2822);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_ContractCondition\r\n        [NKD.Module.Busi");
            viewString.Append("nessObjects.Store.X_ContractCondition](T1.[X_ContractCondition.ContractCondition");
            viewString.Append("ID], T1.[X_ContractCondition.ContractID], T1.[X_ContractCondition.ContractCondit");
            viewString.Append("ionTypeID], T1.[X_ContractCondition.IsIncluded], T1.[X_ContractCondition.IsExlud");
            viewString.Append("ed], T1.[X_ContractCondition.UnitID], T1.[X_ContractCondition.Maximum], T1.[X_Co");
            viewString.Append("ntractCondition.Minimum], T1.[X_ContractCondition.EstimatedValueUpfront], T1.[X_");
            viewString.Append("ContractCondition.EstimatedValueOngoingUnitID], T1.[X_ContractCondition.Estimate");
            viewString.Append("dValueOngoing], T1.[X_ContractCondition.ContractConditionText], T1.[X_ContractCo");
            viewString.Append("ndition.Comment], T1.[X_ContractCondition.Version], T1.[X_ContractCondition.Vers");
            viewString.Append("ionAntecedentID], T1.[X_ContractCondition.VersionCertainty], T1.[X_ContractCondi");
            viewString.Append("tion.VersionWorkflowInstanceID], T1.[X_ContractCondition.VersionUpdatedBy], T1.[");
            viewString.Append("X_ContractCondition.VersionDeletedBy], T1.[X_ContractCondition.VersionOwnerConta");
            viewString.Append("ctID], T1.[X_ContractCondition.VersionOwnerCompanyID], T1.[X_ContractCondition.V");
            viewString.Append("ersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.ContractConditionID ");
            viewString.Append("AS [X_ContractCondition.ContractConditionID], \r\n            T.ContractID AS [X_C");
            viewString.Append("ontractCondition.ContractID], \r\n            T.ContractConditionTypeID AS [X_Cont");
            viewString.Append("ractCondition.ContractConditionTypeID], \r\n            T.IsIncluded AS [X_Contrac");
            viewString.Append("tCondition.IsIncluded], \r\n            T.IsExluded AS [X_ContractCondition.IsExlu");
            viewString.Append("ded], \r\n            T.UnitID AS [X_ContractCondition.UnitID], \r\n            T.Ma");
            viewString.Append("ximum AS [X_ContractCondition.Maximum], \r\n            T.Minimum AS [X_ContractCo");
            viewString.Append("ndition.Minimum], \r\n            T.EstimatedValueUpfront AS [X_ContractCondition.");
            viewString.Append("EstimatedValueUpfront], \r\n            T.EstimatedValueOngoingUnitID AS [X_Contra");
            viewString.Append("ctCondition.EstimatedValueOngoingUnitID], \r\n            T.EstimatedValueOngoing ");
            viewString.Append("AS [X_ContractCondition.EstimatedValueOngoing], \r\n            T.ContractConditio");
            viewString.Append("nText AS [X_ContractCondition.ContractConditionText], \r\n            T.Comment AS");
            viewString.Append(" [X_ContractCondition.Comment], \r\n            T.Version AS [X_ContractCondition.");
            viewString.Append("Version], \r\n            T.VersionAntecedentID AS [X_ContractCondition.VersionAnt");
            viewString.Append("ecedentID], \r\n            T.VersionCertainty AS [X_ContractCondition.VersionCert");
            viewString.Append("ainty], \r\n            T.VersionWorkflowInstanceID AS [X_ContractCondition.Versio");
            viewString.Append("nWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_ContractCondition.V");
            viewString.Append("ersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_ContractCondition.Versi");
            viewString.Append("onDeletedBy], \r\n            T.VersionOwnerContactID AS [X_ContractCondition.Vers");
            viewString.Append("ionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [X_ContractConditio");
            viewString.Append("n.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [X_ContractCondition");
            viewString.Append(".VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.ContractCondit");
            viewString.Append("ions AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_ContractCondition", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_ContractConditionModel
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView82()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_ContractConditionModel", "\r\n    SELECT VALUE -- Constructing X_ContractConditionModel\r\n        [NKD.Module." +
                    "BusinessObjects.Store.X_ContractConditionModel](T1.[X_ContractConditionModel.Con" +
                    "tractConditionModelID], T1.[X_ContractConditionModel.ContractConditionID], T1.[X" +
                    "_ContractConditionModel.ModelID], T1.[X_ContractConditionModel.Version], T1.[X_C" +
                    "ontractConditionModel.VersionAntecedentID], T1.[X_ContractConditionModel.Version" +
                    "Certainty], T1.[X_ContractConditionModel.VersionWorkflowInstanceID], T1.[X_Contr" +
                    "actConditionModel.VersionUpdatedBy], T1.[X_ContractConditionModel.VersionDeleted" +
                    "By], T1.[X_ContractConditionModel.VersionOwnerContactID], T1.[X_ContractConditio" +
                    "nModel.VersionOwnerCompanyID], T1.[X_ContractConditionModel.VersionUpdated])\r\n  " +
                    "  FROM (\r\n        SELECT \r\n            T.ContractConditionModelID AS [X_Contract" +
                    "ConditionModel.ContractConditionModelID], \r\n            T.ContractConditionID AS" +
                    " [X_ContractConditionModel.ContractConditionID], \r\n            T.ModelID AS [X_C" +
                    "ontractConditionModel.ModelID], \r\n            T.Version AS [X_ContractConditionM" +
                    "odel.Version], \r\n            T.VersionAntecedentID AS [X_ContractConditionModel." +
                    "VersionAntecedentID], \r\n            T.VersionCertainty AS [X_ContractConditionMo" +
                    "del.VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [X_ContractC" +
                    "onditionModel.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X" +
                    "_ContractConditionModel.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [" +
                    "X_ContractConditionModel.VersionDeletedBy], \r\n            T.VersionOwnerContactI" +
                    "D AS [X_ContractConditionModel.VersionOwnerContactID], \r\n            T.VersionOw" +
                    "nerCompanyID AS [X_ContractConditionModel.VersionOwnerCompanyID], \r\n            " +
                    "T.VersionUpdated AS [X_ContractConditionModel.VersionUpdated], \r\n            Tru" +
                    "e AS _from0\r\n        FROM NKDC.ContractConditionModels AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_ContractConditionPart
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView83()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_ContractConditionPart", "\r\n    SELECT VALUE -- Constructing X_ContractConditionPart\r\n        [NKD.Module.B" +
                    "usinessObjects.Store.X_ContractConditionPart](T1.[X_ContractConditionPart.Contra" +
                    "ctConditionPartID], T1.[X_ContractConditionPart.ContractConditionID], T1.[X_Cont" +
                    "ractConditionPart.PartID], T1.[X_ContractConditionPart.Version], T1.[X_ContractC" +
                    "onditionPart.VersionAntecedentID], T1.[X_ContractConditionPart.VersionCertainty]" +
                    ", T1.[X_ContractConditionPart.VersionWorkflowInstanceID], T1.[X_ContractConditio" +
                    "nPart.VersionUpdatedBy], T1.[X_ContractConditionPart.VersionDeletedBy], T1.[X_Co" +
                    "ntractConditionPart.VersionOwnerContactID], T1.[X_ContractConditionPart.VersionO" +
                    "wnerCompanyID], T1.[X_ContractConditionPart.VersionUpdated])\r\n    FROM (\r\n      " +
                    "  SELECT \r\n            T.ContractConditionPartID AS [X_ContractConditionPart.Con" +
                    "tractConditionPartID], \r\n            T.ContractConditionID AS [X_ContractConditi" +
                    "onPart.ContractConditionID], \r\n            T.PartID AS [X_ContractConditionPart." +
                    "PartID], \r\n            T.Version AS [X_ContractConditionPart.Version], \r\n       " +
                    "     T.VersionAntecedentID AS [X_ContractConditionPart.VersionAntecedentID], \r\n " +
                    "           T.VersionCertainty AS [X_ContractConditionPart.VersionCertainty], \r\n " +
                    "           T.VersionWorkflowInstanceID AS [X_ContractConditionPart.VersionWorkfl" +
                    "owInstanceID], \r\n            T.VersionUpdatedBy AS [X_ContractConditionPart.Vers" +
                    "ionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_ContractConditionPart.Vers" +
                    "ionDeletedBy], \r\n            T.VersionOwnerContactID AS [X_ContractConditionPart" +
                    ".VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [X_ContractCon" +
                    "ditionPart.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [X_Contract" +
                    "ConditionPart.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.C" +
                    "ontractConditionParts AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_CostEstimateModel
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView84()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2771);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_CostEstimateModel\r\n        [NKD.Module.Busi");
            viewString.Append("nessObjects.Store.X_CostEstimateModel](T1.[X_CostEstimateModel.CostEstimateModel");
            viewString.Append("ID], T1.[X_CostEstimateModel.ParentCostEstimateModelID], T1.[X_CostEstimateModel");
            viewString.Append(".ContractID], T1.[X_CostEstimateModel.ModelID], T1.[X_CostEstimateModel.CostType");
            viewString.Append("ID], T1.[X_CostEstimateModel.ProRataUnitID], T1.[X_CostEstimateModel.ProRataUnit");
            viewString.Append("s], T1.[X_CostEstimateModel.ProRataCost], T1.[X_CostEstimateModel.IsAccruableWit");
            viewString.Append("hParentCost], T1.[X_CostEstimateModel.AccruedQuantumSIUnitID], T1.[X_CostEstimat");
            viewString.Append("eModel.Accrued], T1.[X_CostEstimateModel.Source], T1.[X_CostEstimateModel.Note],");
            viewString.Append(" T1.[X_CostEstimateModel.Version], T1.[X_CostEstimateModel.VersionAntecedentID],");
            viewString.Append(" T1.[X_CostEstimateModel.VersionCertainty], T1.[X_CostEstimateModel.VersionWorkf");
            viewString.Append("lowInstanceID], T1.[X_CostEstimateModel.VersionUpdatedBy], T1.[X_CostEstimateMod");
            viewString.Append("el.VersionDeletedBy], T1.[X_CostEstimateModel.VersionOwnerContactID], T1.[X_Cost");
            viewString.Append("EstimateModel.VersionOwnerCompanyID], T1.[X_CostEstimateModel.VersionUpdated])\r\n");
            viewString.Append("    FROM (\r\n        SELECT \r\n            T.CostEstimateModelID AS [X_CostEstimat");
            viewString.Append("eModel.CostEstimateModelID], \r\n            T.ParentCostEstimateModelID AS [X_Cos");
            viewString.Append("tEstimateModel.ParentCostEstimateModelID], \r\n            T.ContractID AS [X_Cost");
            viewString.Append("EstimateModel.ContractID], \r\n            T.ModelID AS [X_CostEstimateModel.Model");
            viewString.Append("ID], \r\n            T.CostTypeID AS [X_CostEstimateModel.CostTypeID], \r\n         ");
            viewString.Append("   T.ProRataUnitID AS [X_CostEstimateModel.ProRataUnitID], \r\n            T.ProRa");
            viewString.Append("taUnits AS [X_CostEstimateModel.ProRataUnits], \r\n            T.ProRataCost AS [X");
            viewString.Append("_CostEstimateModel.ProRataCost], \r\n            T.IsAccruableWithParentCost AS [X");
            viewString.Append("_CostEstimateModel.IsAccruableWithParentCost], \r\n            T.AccruedQuantumSIU");
            viewString.Append("nitID AS [X_CostEstimateModel.AccruedQuantumSIUnitID], \r\n            T.Accrued A");
            viewString.Append("S [X_CostEstimateModel.Accrued], \r\n            T.Source AS [X_CostEstimateModel.");
            viewString.Append("Source], \r\n            T.Note AS [X_CostEstimateModel.Note], \r\n            T.Ver");
            viewString.Append("sion AS [X_CostEstimateModel.Version], \r\n            T.VersionAntecedentID AS [X");
            viewString.Append("_CostEstimateModel.VersionAntecedentID], \r\n            T.VersionCertainty AS [X_");
            viewString.Append("CostEstimateModel.VersionCertainty], \r\n            T.VersionWorkflowInstanceID A");
            viewString.Append("S [X_CostEstimateModel.VersionWorkflowInstanceID], \r\n            T.VersionUpdate");
            viewString.Append("dBy AS [X_CostEstimateModel.VersionUpdatedBy], \r\n            T.VersionDeletedBy ");
            viewString.Append("AS [X_CostEstimateModel.VersionDeletedBy], \r\n            T.VersionOwnerContactID");
            viewString.Append(" AS [X_CostEstimateModel.VersionOwnerContactID], \r\n            T.VersionOwnerCom");
            viewString.Append("panyID AS [X_CostEstimateModel.VersionOwnerCompanyID], \r\n            T.VersionUp");
            viewString.Append("dated AS [X_CostEstimateModel.VersionUpdated], \r\n            True AS _from0\r\n   ");
            viewString.Append("     FROM NKDC.CostEstimateModels AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_CostEstimateModel", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_Defect
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView85()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(5306);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_Defect\r\n        [NKD.Module.BusinessObjects");
            viewString.Append(".Store.X_Defect](T1.[X_Defect.DefectID], T1.[X_Defect.HeaderID], T1.[X_Defect.Fr");
            viewString.Append("omDepth], T1.[X_Defect.ToDepth], T1.[X_Defect.WeatheringID], T1.[X_Defect.RockMa");
            viewString.Append("ssUnitTypeID], T1.[X_Defect.GeotechLithologyTypeID], T1.[X_Defect.GeotechLitholo");
            viewString.Append("gyQualifierID], T1.[X_Defect.GeotechColourID], T1.[X_Defect.FriabilityTypeID], T");
            viewString.Append("1.[X_Defect.AlterationID], T1.[X_Defect.EstimatedStrengthID], T1.[X_Defect.BedSp");
            viewString.Append("acingID], T1.[X_Defect.BedDevelopmentID], T1.[X_Defect.BedDip], T1.[X_Defect.Moi");
            viewString.Append("stureSensitivityID], T1.[X_Defect.PlasticityID], T1.[X_Defect.DefectDepth], T1.[");
            viewString.Append("X_Defect.DefectLength], T1.[X_Defect.NumberOfDefects], T1.[X_Defect.NumberOfFrac");
            viewString.Append("tures], T1.[X_Defect.NumberOfStructureSets], T1.[X_Defect.StructureSetID], T1.[X");
            viewString.Append("_Defect.DefectsSpacing], T1.[X_Defect.DefectTypeID], T1.[X_Defect.DefectComplete");
            viewString.Append("nessID], T1.[X_Defect.DefectContinuityID], T1.[X_Defect.DefectDip], T1.[X_Defect");
            viewString.Append(".MinimumDipBrokenZone], T1.[X_Defect.MaximumDipBrokenZone], T1.[X_Defect.DipOrie");
            viewString.Append("ntation], T1.[X_Defect.DipOrientationMethodID], T1.[X_Defect.ShapeID], T1.[X_Def");
            viewString.Append("ect.RoughnessID], T1.[X_Defect.SurfaceWeatheringID], T1.[X_Defect.AlterationJoin");
            viewString.Append("tTypeID], T1.[X_Defect.JointRoughnessCoefficient], T1.[X_Defect.PerpendicularWid");
            viewString.Append("th], T1.[X_Defect.PrimaryInfillTypeID], T1.[X_Defect.SecondaryInfillTypeID], T1.");
            viewString.Append("[X_Defect.InfillModeID], T1.[X_Defect.InfillEstimatedStrengthID], T1.[X_Defect.I");
            viewString.Append("nfillPlasticityID], T1.[X_Defect.Comment], T1.[X_Defect.Version], T1.[X_Defect.V");
            viewString.Append("ersionAntecedentID], T1.[X_Defect.VersionCertainty], T1.[X_Defect.VersionWorkflo");
            viewString.Append("wInstanceID], T1.[X_Defect.VersionUpdatedBy], T1.[X_Defect.VersionDeletedBy], T1");
            viewString.Append(".[X_Defect.VersionOwnerContactID], T1.[X_Defect.VersionOwnerCompanyID], T1.[X_De");
            viewString.Append("fect.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.DefectID AS [X");
            viewString.Append("_Defect.DefectID], \r\n            T.HeaderID AS [X_Defect.HeaderID], \r\n          ");
            viewString.Append("  T.FromDepth AS [X_Defect.FromDepth], \r\n            T.ToDepth AS [X_Defect.ToDe");
            viewString.Append("pth], \r\n            T.WeatheringID AS [X_Defect.WeatheringID], \r\n            T.R");
            viewString.Append("ockMassUnitTypeID AS [X_Defect.RockMassUnitTypeID], \r\n            T.GeotechLitho");
            viewString.Append("logyTypeID AS [X_Defect.GeotechLithologyTypeID], \r\n            T.GeotechLitholog");
            viewString.Append("yQualifierID AS [X_Defect.GeotechLithologyQualifierID], \r\n            T.GeotechC");
            viewString.Append("olourID AS [X_Defect.GeotechColourID], \r\n            T.FriabilityTypeID AS [X_De");
            viewString.Append("fect.FriabilityTypeID], \r\n            T.AlterationID AS [X_Defect.AlterationID],");
            viewString.Append(" \r\n            T.EstimatedStrengthID AS [X_Defect.EstimatedStrengthID], \r\n      ");
            viewString.Append("      T.BedSpacingID AS [X_Defect.BedSpacingID], \r\n            T.BedDevelopmentI");
            viewString.Append("D AS [X_Defect.BedDevelopmentID], \r\n            T.BedDip AS [X_Defect.BedDip], \r");
            viewString.Append("\n            T.MoistureSensitivityID AS [X_Defect.MoistureSensitivityID], \r\n    ");
            viewString.Append("        T.PlasticityID AS [X_Defect.PlasticityID], \r\n            T.DefectDepth A");
            viewString.Append("S [X_Defect.DefectDepth], \r\n            T.DefectLength AS [X_Defect.DefectLength");
            viewString.Append("], \r\n            T.NumberOfDefects AS [X_Defect.NumberOfDefects], \r\n            ");
            viewString.Append("T.NumberOfFractures AS [X_Defect.NumberOfFractures], \r\n            T.NumberOfStr");
            viewString.Append("uctureSets AS [X_Defect.NumberOfStructureSets], \r\n            T.StructureSetID A");
            viewString.Append("S [X_Defect.StructureSetID], \r\n            T.DefectsSpacing AS [X_Defect.Defects");
            viewString.Append("Spacing], \r\n            T.DefectTypeID AS [X_Defect.DefectTypeID], \r\n           ");
            viewString.Append(" T.DefectCompletenessID AS [X_Defect.DefectCompletenessID], \r\n            T.Defe");
            viewString.Append("ctContinuityID AS [X_Defect.DefectContinuityID], \r\n            T.DefectDip AS [X");
            viewString.Append("_Defect.DefectDip], \r\n            T.MinimumDipBrokenZone AS [X_Defect.MinimumDip");
            viewString.Append("BrokenZone], \r\n            T.MaximumDipBrokenZone AS [X_Defect.MaximumDipBrokenZ");
            viewString.Append("one], \r\n            T.DipOrientation AS [X_Defect.DipOrientation], \r\n           ");
            viewString.Append(" T.DipOrientationMethodID AS [X_Defect.DipOrientationMethodID], \r\n            T.");
            viewString.Append("ShapeID AS [X_Defect.ShapeID], \r\n            T.RoughnessID AS [X_Defect.Roughnes");
            viewString.Append("sID], \r\n            T.SurfaceWeatheringID AS [X_Defect.SurfaceWeatheringID], \r\n ");
            viewString.Append("           T.AlterationJointTypeID AS [X_Defect.AlterationJointTypeID], \r\n      ");
            viewString.Append("      T.JointRoughnessCoefficient AS [X_Defect.JointRoughnessCoefficient], \r\n   ");
            viewString.Append("         T.PerpendicularWidth AS [X_Defect.PerpendicularWidth], \r\n            T.");
            viewString.Append("PrimaryInfillTypeID AS [X_Defect.PrimaryInfillTypeID], \r\n            T.Secondary");
            viewString.Append("InfillTypeID AS [X_Defect.SecondaryInfillTypeID], \r\n            T.InfillModeID A");
            viewString.Append("S [X_Defect.InfillModeID], \r\n            T.InfillEstimatedStrengthID AS [X_Defec");
            viewString.Append("t.InfillEstimatedStrengthID], \r\n            T.InfillPlasticityID AS [X_Defect.In");
            viewString.Append("fillPlasticityID], \r\n            T.Comment AS [X_Defect.Comment], \r\n            ");
            viewString.Append("T.Version AS [X_Defect.Version], \r\n            T.VersionAntecedentID AS [X_Defec");
            viewString.Append("t.VersionAntecedentID], \r\n            T.VersionCertainty AS [X_Defect.VersionCer");
            viewString.Append("tainty], \r\n            T.VersionWorkflowInstanceID AS [X_Defect.VersionWorkflowI");
            viewString.Append("nstanceID], \r\n            T.VersionUpdatedBy AS [X_Defect.VersionUpdatedBy], \r\n ");
            viewString.Append("           T.VersionDeletedBy AS [X_Defect.VersionDeletedBy], \r\n            T.Ve");
            viewString.Append("rsionOwnerContactID AS [X_Defect.VersionOwnerContactID], \r\n            T.Version");
            viewString.Append("OwnerCompanyID AS [X_Defect.VersionOwnerCompanyID], \r\n            T.VersionUpdat");
            viewString.Append("ed AS [X_Defect.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC");
            viewString.Append(".Defects AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_Defect", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_Desurvey
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView86()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_Desurvey", @"
    SELECT VALUE -- Constructing X_Desurvey
        [NKD.Module.BusinessObjects.Store.X_Desurvey](T1.[X_Desurvey.DesurveyID], T1.[X_Desurvey.SurveyID], T1.[X_Desurvey.DesurveyAlgorithmTypeID], T1.[X_Desurvey.Version], T1.[X_Desurvey.VersionAntecedentID], T1.[X_Desurvey.VersionCertainty], T1.[X_Desurvey.VersionWorkflowInstanceID], T1.[X_Desurvey.VersionUpdatedBy], T1.[X_Desurvey.VersionDeletedBy], T1.[X_Desurvey.VersionOwnerContactID], T1.[X_Desurvey.VersionOwnerCompanyID], T1.[X_Desurvey.VersionUpdated])
    FROM (
        SELECT 
            T.DesurveyID AS [X_Desurvey.DesurveyID], 
            T.SurveyID AS [X_Desurvey.SurveyID], 
            T.DesurveyAlgorithmTypeID AS [X_Desurvey.DesurveyAlgorithmTypeID], 
            T.Version AS [X_Desurvey.Version], 
            T.VersionAntecedentID AS [X_Desurvey.VersionAntecedentID], 
            T.VersionCertainty AS [X_Desurvey.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_Desurvey.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_Desurvey.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_Desurvey.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_Desurvey.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_Desurvey.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_Desurvey.VersionUpdated], 
            True AS _from0
        FROM NKDC.Desurveys AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryAdjective
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView87()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2466);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryAdjective\r\n        [NKD.Module.Bu");
            viewString.Append("sinessObjects.Store.X_DictionaryAdjective](T1.[X_DictionaryAdjective.AdjectiveID");
            viewString.Append("], T1.[X_DictionaryAdjective.StandardAdjectiveName], T1.[X_DictionaryAdjective.C");
            viewString.Append("oalAdjectiveName], T1.[X_DictionaryAdjective.GoldAdjectiveName], T1.[X_Dictionar");
            viewString.Append("yAdjective.CustomAdjectiveName], T1.[X_DictionaryAdjective.Description], T1.[X_D");
            viewString.Append("ictionaryAdjective.FullDescription], T1.[X_DictionaryAdjective.Thumbnail], T1.[X");
            viewString.Append("_DictionaryAdjective.OriginalFileDataID], T1.[X_DictionaryAdjective.Version], T1");
            viewString.Append(".[X_DictionaryAdjective.VersionAntecedentID], T1.[X_DictionaryAdjective.VersionC");
            viewString.Append("ertainty], T1.[X_DictionaryAdjective.VersionWorkflowInstanceID], T1.[X_Dictionar");
            viewString.Append("yAdjective.VersionUpdatedBy], T1.[X_DictionaryAdjective.VersionDeletedBy], T1.[X");
            viewString.Append("_DictionaryAdjective.VersionOwnerContactID], T1.[X_DictionaryAdjective.VersionOw");
            viewString.Append("nerCompanyID], T1.[X_DictionaryAdjective.VersionUpdated])\r\n    FROM (\r\n        S");
            viewString.Append("ELECT \r\n            T.AdjectiveID AS [X_DictionaryAdjective.AdjectiveID], \r\n    ");
            viewString.Append("        T.StandardAdjectiveName AS [X_DictionaryAdjective.StandardAdjectiveName]");
            viewString.Append(", \r\n            T.CoalAdjectiveName AS [X_DictionaryAdjective.CoalAdjectiveName]");
            viewString.Append(", \r\n            T.GoldAdjectiveName AS [X_DictionaryAdjective.GoldAdjectiveName]");
            viewString.Append(", \r\n            T.CustomAdjectiveName AS [X_DictionaryAdjective.CustomAdjectiveN");
            viewString.Append("ame], \r\n            T.Description AS [X_DictionaryAdjective.Description], \r\n    ");
            viewString.Append("        T.FullDescription AS [X_DictionaryAdjective.FullDescription], \r\n        ");
            viewString.Append("    T.Thumbnail AS [X_DictionaryAdjective.Thumbnail], \r\n            T.OriginalFi");
            viewString.Append("leDataID AS [X_DictionaryAdjective.OriginalFileDataID], \r\n            T.Version ");
            viewString.Append("AS [X_DictionaryAdjective.Version], \r\n            T.VersionAntecedentID AS [X_Di");
            viewString.Append("ctionaryAdjective.VersionAntecedentID], \r\n            T.VersionCertainty AS [X_D");
            viewString.Append("ictionaryAdjective.VersionCertainty], \r\n            T.VersionWorkflowInstanceID ");
            viewString.Append("AS [X_DictionaryAdjective.VersionWorkflowInstanceID], \r\n            T.VersionUpd");
            viewString.Append("atedBy AS [X_DictionaryAdjective.VersionUpdatedBy], \r\n            T.VersionDelet");
            viewString.Append("edBy AS [X_DictionaryAdjective.VersionDeletedBy], \r\n            T.VersionOwnerCo");
            viewString.Append("ntactID AS [X_DictionaryAdjective.VersionOwnerContactID], \r\n            T.Versio");
            viewString.Append("nOwnerCompanyID AS [X_DictionaryAdjective.VersionOwnerCompanyID], \r\n            ");
            viewString.Append("T.VersionUpdated AS [X_DictionaryAdjective.VersionUpdated], \r\n            True A");
            viewString.Append("S _from0\r\n        FROM NKDC.DictionaryAdjectives AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryAdjective", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryAlteration
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView88()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2520);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryAlteration\r\n        [NKD.Module.B");
            viewString.Append("usinessObjects.Store.X_DictionaryAlteration](T1.[X_DictionaryAlteration.Alterati");
            viewString.Append("onID], T1.[X_DictionaryAlteration.StandardAlterationName], T1.[X_DictionaryAlter");
            viewString.Append("ation.CoalAlterationName], T1.[X_DictionaryAlteration.GoldAlterationName], T1.[X");
            viewString.Append("_DictionaryAlteration.CustomAlterationName], T1.[X_DictionaryAlteration.Descript");
            viewString.Append("ion], T1.[X_DictionaryAlteration.FullDescription], T1.[X_DictionaryAlteration.Th");
            viewString.Append("umbnail], T1.[X_DictionaryAlteration.OriginalFileDataID], T1.[X_DictionaryAltera");
            viewString.Append("tion.Version], T1.[X_DictionaryAlteration.VersionAntecedentID], T1.[X_Dictionary");
            viewString.Append("Alteration.VersionCertainty], T1.[X_DictionaryAlteration.VersionWorkflowInstance");
            viewString.Append("ID], T1.[X_DictionaryAlteration.VersionUpdatedBy], T1.[X_DictionaryAlteration.Ve");
            viewString.Append("rsionDeletedBy], T1.[X_DictionaryAlteration.VersionOwnerContactID], T1.[X_Dictio");
            viewString.Append("naryAlteration.VersionOwnerCompanyID], T1.[X_DictionaryAlteration.VersionUpdated");
            viewString.Append("])\r\n    FROM (\r\n        SELECT \r\n            T.AlterationID AS [X_DictionaryAlte");
            viewString.Append("ration.AlterationID], \r\n            T.StandardAlterationName AS [X_DictionaryAlt");
            viewString.Append("eration.StandardAlterationName], \r\n            T.CoalAlterationName AS [X_Dictio");
            viewString.Append("naryAlteration.CoalAlterationName], \r\n            T.GoldAlterationName AS [X_Dic");
            viewString.Append("tionaryAlteration.GoldAlterationName], \r\n            T.CustomAlterationName AS [");
            viewString.Append("X_DictionaryAlteration.CustomAlterationName], \r\n            T.Description AS [X_");
            viewString.Append("DictionaryAlteration.Description], \r\n            T.FullDescription AS [X_Diction");
            viewString.Append("aryAlteration.FullDescription], \r\n            T.Thumbnail AS [X_DictionaryAltera");
            viewString.Append("tion.Thumbnail], \r\n            T.OriginalFileDataID AS [X_DictionaryAlteration.O");
            viewString.Append("riginalFileDataID], \r\n            T.Version AS [X_DictionaryAlteration.Version],");
            viewString.Append(" \r\n            T.VersionAntecedentID AS [X_DictionaryAlteration.VersionAnteceden");
            viewString.Append("tID], \r\n            T.VersionCertainty AS [X_DictionaryAlteration.VersionCertain");
            viewString.Append("ty], \r\n            T.VersionWorkflowInstanceID AS [X_DictionaryAlteration.Versio");
            viewString.Append("nWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_DictionaryAlteratio");
            viewString.Append("n.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_DictionaryAlteration");
            viewString.Append(".VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [X_DictionaryAltera");
            viewString.Append("tion.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [X_Diction");
            viewString.Append("aryAlteration.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [X_Dicti");
            viewString.Append("onaryAlteration.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC");
            viewString.Append(".DictionaryAlterations AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryAlteration", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryAssayMethod
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView89()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2574);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryAssayMethod\r\n        [NKD.Module.");
            viewString.Append("BusinessObjects.Store.X_DictionaryAssayMethod](T1.[X_DictionaryAssayMethod.Assay");
            viewString.Append("MethodID], T1.[X_DictionaryAssayMethod.StandardAssayMethodName], T1.[X_Dictionar");
            viewString.Append("yAssayMethod.CoalAssayMethodName], T1.[X_DictionaryAssayMethod.GoldAssayMethodNa");
            viewString.Append("me], T1.[X_DictionaryAssayMethod.CustomAssayMethodName], T1.[X_DictionaryAssayMe");
            viewString.Append("thod.Description], T1.[X_DictionaryAssayMethod.FullDescription], T1.[X_Dictionar");
            viewString.Append("yAssayMethod.Thumbnail], T1.[X_DictionaryAssayMethod.OriginalFileDataID], T1.[X_");
            viewString.Append("DictionaryAssayMethod.Version], T1.[X_DictionaryAssayMethod.VersionAntecedentID]");
            viewString.Append(", T1.[X_DictionaryAssayMethod.VersionCertainty], T1.[X_DictionaryAssayMethod.Ver");
            viewString.Append("sionWorkflowInstanceID], T1.[X_DictionaryAssayMethod.VersionUpdatedBy], T1.[X_Di");
            viewString.Append("ctionaryAssayMethod.VersionDeletedBy], T1.[X_DictionaryAssayMethod.VersionOwnerC");
            viewString.Append("ontactID], T1.[X_DictionaryAssayMethod.VersionOwnerCompanyID], T1.[X_DictionaryA");
            viewString.Append("ssayMethod.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.AssayMet");
            viewString.Append("hodID AS [X_DictionaryAssayMethod.AssayMethodID], \r\n            T.StandardAssayM");
            viewString.Append("ethodName AS [X_DictionaryAssayMethod.StandardAssayMethodName], \r\n            T.");
            viewString.Append("CoalAssayMethodName AS [X_DictionaryAssayMethod.CoalAssayMethodName], \r\n        ");
            viewString.Append("    T.GoldAssayMethodName AS [X_DictionaryAssayMethod.GoldAssayMethodName], \r\n  ");
            viewString.Append("          T.CustomAssayMethodName AS [X_DictionaryAssayMethod.CustomAssayMethodN");
            viewString.Append("ame], \r\n            T.Description AS [X_DictionaryAssayMethod.Description], \r\n  ");
            viewString.Append("          T.FullDescription AS [X_DictionaryAssayMethod.FullDescription], \r\n    ");
            viewString.Append("        T.Thumbnail AS [X_DictionaryAssayMethod.Thumbnail], \r\n            T.Orig");
            viewString.Append("inalFileDataID AS [X_DictionaryAssayMethod.OriginalFileDataID], \r\n            T.");
            viewString.Append("Version AS [X_DictionaryAssayMethod.Version], \r\n            T.VersionAntecedentI");
            viewString.Append("D AS [X_DictionaryAssayMethod.VersionAntecedentID], \r\n            T.VersionCerta");
            viewString.Append("inty AS [X_DictionaryAssayMethod.VersionCertainty], \r\n            T.VersionWorkf");
            viewString.Append("lowInstanceID AS [X_DictionaryAssayMethod.VersionWorkflowInstanceID], \r\n        ");
            viewString.Append("    T.VersionUpdatedBy AS [X_DictionaryAssayMethod.VersionUpdatedBy], \r\n        ");
            viewString.Append("    T.VersionDeletedBy AS [X_DictionaryAssayMethod.VersionDeletedBy], \r\n        ");
            viewString.Append("    T.VersionOwnerContactID AS [X_DictionaryAssayMethod.VersionOwnerContactID], ");
            viewString.Append("\r\n            T.VersionOwnerCompanyID AS [X_DictionaryAssayMethod.VersionOwnerCo");
            viewString.Append("mpanyID], \r\n            T.VersionUpdated AS [X_DictionaryAssayMethod.VersionUpda");
            viewString.Append("ted], \r\n            True AS _from0\r\n        FROM NKDC.DictionaryAssayMethods AS ");
            viewString.Append("T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryAssayMethod", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryAssayStandard
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView90()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2682);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryAssayStandard\r\n        [NKD.Modul");
            viewString.Append("e.BusinessObjects.Store.X_DictionaryAssayStandard](T1.[X_DictionaryAssayStandard");
            viewString.Append(".AssayStandardID], T1.[X_DictionaryAssayStandard.StandardAssayStandardName], T1.");
            viewString.Append("[X_DictionaryAssayStandard.CoalAssayStandardName], T1.[X_DictionaryAssayStandard");
            viewString.Append(".GoldAssayStandardName], T1.[X_DictionaryAssayStandard.CustomAssayStandardName],");
            viewString.Append(" T1.[X_DictionaryAssayStandard.Description], T1.[X_DictionaryAssayStandard.FullD");
            viewString.Append("escription], T1.[X_DictionaryAssayStandard.Thumbnail], T1.[X_DictionaryAssayStan");
            viewString.Append("dard.OriginalFileDataID], T1.[X_DictionaryAssayStandard.Version], T1.[X_Dictiona");
            viewString.Append("ryAssayStandard.VersionAntecedentID], T1.[X_DictionaryAssayStandard.VersionCerta");
            viewString.Append("inty], T1.[X_DictionaryAssayStandard.VersionWorkflowInstanceID], T1.[X_Dictionar");
            viewString.Append("yAssayStandard.VersionUpdatedBy], T1.[X_DictionaryAssayStandard.VersionDeletedBy");
            viewString.Append("], T1.[X_DictionaryAssayStandard.VersionOwnerContactID], T1.[X_DictionaryAssaySt");
            viewString.Append("andard.VersionOwnerCompanyID], T1.[X_DictionaryAssayStandard.VersionUpdated])\r\n ");
            viewString.Append("   FROM (\r\n        SELECT \r\n            T.AssayStandardID AS [X_DictionaryAssayS");
            viewString.Append("tandard.AssayStandardID], \r\n            T.StandardAssayStandardName AS [X_Dictio");
            viewString.Append("naryAssayStandard.StandardAssayStandardName], \r\n            T.CoalAssayStandardN");
            viewString.Append("ame AS [X_DictionaryAssayStandard.CoalAssayStandardName], \r\n            T.GoldAs");
            viewString.Append("sayStandardName AS [X_DictionaryAssayStandard.GoldAssayStandardName], \r\n        ");
            viewString.Append("    T.CustomAssayStandardName AS [X_DictionaryAssayStandard.CustomAssayStandardN");
            viewString.Append("ame], \r\n            T.Description AS [X_DictionaryAssayStandard.Description], \r\n");
            viewString.Append("            T.FullDescription AS [X_DictionaryAssayStandard.FullDescription], \r\n");
            viewString.Append("            T.Thumbnail AS [X_DictionaryAssayStandard.Thumbnail], \r\n            ");
            viewString.Append("T.OriginalFileDataID AS [X_DictionaryAssayStandard.OriginalFileDataID], \r\n      ");
            viewString.Append("      T.Version AS [X_DictionaryAssayStandard.Version], \r\n            T.VersionA");
            viewString.Append("ntecedentID AS [X_DictionaryAssayStandard.VersionAntecedentID], \r\n            T.");
            viewString.Append("VersionCertainty AS [X_DictionaryAssayStandard.VersionCertainty], \r\n            ");
            viewString.Append("T.VersionWorkflowInstanceID AS [X_DictionaryAssayStandard.VersionWorkflowInstanc");
            viewString.Append("eID], \r\n            T.VersionUpdatedBy AS [X_DictionaryAssayStandard.VersionUpda");
            viewString.Append("tedBy], \r\n            T.VersionDeletedBy AS [X_DictionaryAssayStandard.VersionDe");
            viewString.Append("letedBy], \r\n            T.VersionOwnerContactID AS [X_DictionaryAssayStandard.Ve");
            viewString.Append("rsionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [X_DictionaryAssa");
            viewString.Append("yStandard.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [X_Dictionar");
            viewString.Append("yAssayStandard.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.");
            viewString.Append("DictionaryAssayStandards AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryAssayStandard", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryAssayTest
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView91()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2466);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryAssayTest\r\n        [NKD.Module.Bu");
            viewString.Append("sinessObjects.Store.X_DictionaryAssayTest](T1.[X_DictionaryAssayTest.AssayTestID");
            viewString.Append("], T1.[X_DictionaryAssayTest.StandardAssayTestName], T1.[X_DictionaryAssayTest.C");
            viewString.Append("oalAssayTestName], T1.[X_DictionaryAssayTest.GoldAssayTestName], T1.[X_Dictionar");
            viewString.Append("yAssayTest.CustomAssayTestName], T1.[X_DictionaryAssayTest.Description], T1.[X_D");
            viewString.Append("ictionaryAssayTest.FullDescription], T1.[X_DictionaryAssayTest.Thumbnail], T1.[X");
            viewString.Append("_DictionaryAssayTest.OriginalFileDataID], T1.[X_DictionaryAssayTest.Version], T1");
            viewString.Append(".[X_DictionaryAssayTest.VersionAntecedentID], T1.[X_DictionaryAssayTest.VersionC");
            viewString.Append("ertainty], T1.[X_DictionaryAssayTest.VersionWorkflowInstanceID], T1.[X_Dictionar");
            viewString.Append("yAssayTest.VersionUpdatedBy], T1.[X_DictionaryAssayTest.VersionDeletedBy], T1.[X");
            viewString.Append("_DictionaryAssayTest.VersionOwnerContactID], T1.[X_DictionaryAssayTest.VersionOw");
            viewString.Append("nerCompanyID], T1.[X_DictionaryAssayTest.VersionUpdated])\r\n    FROM (\r\n        S");
            viewString.Append("ELECT \r\n            T.AssayTestID AS [X_DictionaryAssayTest.AssayTestID], \r\n    ");
            viewString.Append("        T.StandardAssayTestName AS [X_DictionaryAssayTest.StandardAssayTestName]");
            viewString.Append(", \r\n            T.CoalAssayTestName AS [X_DictionaryAssayTest.CoalAssayTestName]");
            viewString.Append(", \r\n            T.GoldAssayTestName AS [X_DictionaryAssayTest.GoldAssayTestName]");
            viewString.Append(", \r\n            T.CustomAssayTestName AS [X_DictionaryAssayTest.CustomAssayTestN");
            viewString.Append("ame], \r\n            T.Description AS [X_DictionaryAssayTest.Description], \r\n    ");
            viewString.Append("        T.FullDescription AS [X_DictionaryAssayTest.FullDescription], \r\n        ");
            viewString.Append("    T.Thumbnail AS [X_DictionaryAssayTest.Thumbnail], \r\n            T.OriginalFi");
            viewString.Append("leDataID AS [X_DictionaryAssayTest.OriginalFileDataID], \r\n            T.Version ");
            viewString.Append("AS [X_DictionaryAssayTest.Version], \r\n            T.VersionAntecedentID AS [X_Di");
            viewString.Append("ctionaryAssayTest.VersionAntecedentID], \r\n            T.VersionCertainty AS [X_D");
            viewString.Append("ictionaryAssayTest.VersionCertainty], \r\n            T.VersionWorkflowInstanceID ");
            viewString.Append("AS [X_DictionaryAssayTest.VersionWorkflowInstanceID], \r\n            T.VersionUpd");
            viewString.Append("atedBy AS [X_DictionaryAssayTest.VersionUpdatedBy], \r\n            T.VersionDelet");
            viewString.Append("edBy AS [X_DictionaryAssayTest.VersionDeletedBy], \r\n            T.VersionOwnerCo");
            viewString.Append("ntactID AS [X_DictionaryAssayTest.VersionOwnerContactID], \r\n            T.Versio");
            viewString.Append("nOwnerCompanyID AS [X_DictionaryAssayTest.VersionOwnerCompanyID], \r\n            ");
            viewString.Append("T.VersionUpdated AS [X_DictionaryAssayTest.VersionUpdated], \r\n            True A");
            viewString.Append("S _from0\r\n        FROM NKDC.DictionaryAssayTests AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryAssayTest", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryAssayType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView92()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2466);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryAssayType\r\n        [NKD.Module.Bu");
            viewString.Append("sinessObjects.Store.X_DictionaryAssayType](T1.[X_DictionaryAssayType.AssayTypeID");
            viewString.Append("], T1.[X_DictionaryAssayType.StandardAssayTypeName], T1.[X_DictionaryAssayType.C");
            viewString.Append("oalAssayTypeName], T1.[X_DictionaryAssayType.GoldAssayTypeName], T1.[X_Dictionar");
            viewString.Append("yAssayType.CustomAssayTypeName], T1.[X_DictionaryAssayType.Description], T1.[X_D");
            viewString.Append("ictionaryAssayType.FullDescription], T1.[X_DictionaryAssayType.Thumbnail], T1.[X");
            viewString.Append("_DictionaryAssayType.OriginalFileDataID], T1.[X_DictionaryAssayType.Version], T1");
            viewString.Append(".[X_DictionaryAssayType.VersionAntecedentID], T1.[X_DictionaryAssayType.VersionC");
            viewString.Append("ertainty], T1.[X_DictionaryAssayType.VersionWorkflowInstanceID], T1.[X_Dictionar");
            viewString.Append("yAssayType.VersionUpdatedBy], T1.[X_DictionaryAssayType.VersionDeletedBy], T1.[X");
            viewString.Append("_DictionaryAssayType.VersionOwnerContactID], T1.[X_DictionaryAssayType.VersionOw");
            viewString.Append("nerCompanyID], T1.[X_DictionaryAssayType.VersionUpdated])\r\n    FROM (\r\n        S");
            viewString.Append("ELECT \r\n            T.AssayTypeID AS [X_DictionaryAssayType.AssayTypeID], \r\n    ");
            viewString.Append("        T.StandardAssayTypeName AS [X_DictionaryAssayType.StandardAssayTypeName]");
            viewString.Append(", \r\n            T.CoalAssayTypeName AS [X_DictionaryAssayType.CoalAssayTypeName]");
            viewString.Append(", \r\n            T.GoldAssayTypeName AS [X_DictionaryAssayType.GoldAssayTypeName]");
            viewString.Append(", \r\n            T.CustomAssayTypeName AS [X_DictionaryAssayType.CustomAssayTypeN");
            viewString.Append("ame], \r\n            T.Description AS [X_DictionaryAssayType.Description], \r\n    ");
            viewString.Append("        T.FullDescription AS [X_DictionaryAssayType.FullDescription], \r\n        ");
            viewString.Append("    T.Thumbnail AS [X_DictionaryAssayType.Thumbnail], \r\n            T.OriginalFi");
            viewString.Append("leDataID AS [X_DictionaryAssayType.OriginalFileDataID], \r\n            T.Version ");
            viewString.Append("AS [X_DictionaryAssayType.Version], \r\n            T.VersionAntecedentID AS [X_Di");
            viewString.Append("ctionaryAssayType.VersionAntecedentID], \r\n            T.VersionCertainty AS [X_D");
            viewString.Append("ictionaryAssayType.VersionCertainty], \r\n            T.VersionWorkflowInstanceID ");
            viewString.Append("AS [X_DictionaryAssayType.VersionWorkflowInstanceID], \r\n            T.VersionUpd");
            viewString.Append("atedBy AS [X_DictionaryAssayType.VersionUpdatedBy], \r\n            T.VersionDelet");
            viewString.Append("edBy AS [X_DictionaryAssayType.VersionDeletedBy], \r\n            T.VersionOwnerCo");
            viewString.Append("ntactID AS [X_DictionaryAssayType.VersionOwnerContactID], \r\n            T.Versio");
            viewString.Append("nOwnerCompanyID AS [X_DictionaryAssayType.VersionOwnerCompanyID], \r\n            ");
            viewString.Append("T.VersionUpdated AS [X_DictionaryAssayType.VersionUpdated], \r\n            True A");
            viewString.Append("S _from0\r\n        FROM NKDC.DictionaryAssayTypes AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryAssayType", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryBasalContact
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView93()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2628);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryBasalContact\r\n        [NKD.Module");
            viewString.Append(".BusinessObjects.Store.X_DictionaryBasalContact](T1.[X_DictionaryBasalContact.Ba");
            viewString.Append("salContactID], T1.[X_DictionaryBasalContact.StandardBasalContactName], T1.[X_Dic");
            viewString.Append("tionaryBasalContact.CoalBasalContactName], T1.[X_DictionaryBasalContact.GoldBasa");
            viewString.Append("lContactName], T1.[X_DictionaryBasalContact.CustomBasalContactName], T1.[X_Dicti");
            viewString.Append("onaryBasalContact.Description], T1.[X_DictionaryBasalContact.FullDescription], T");
            viewString.Append("1.[X_DictionaryBasalContact.Thumbnail], T1.[X_DictionaryBasalContact.OriginalFil");
            viewString.Append("eDataID], T1.[X_DictionaryBasalContact.Version], T1.[X_DictionaryBasalContact.Ve");
            viewString.Append("rsionAntecedentID], T1.[X_DictionaryBasalContact.VersionCertainty], T1.[X_Dictio");
            viewString.Append("naryBasalContact.VersionWorkflowInstanceID], T1.[X_DictionaryBasalContact.Versio");
            viewString.Append("nUpdatedBy], T1.[X_DictionaryBasalContact.VersionDeletedBy], T1.[X_DictionaryBas");
            viewString.Append("alContact.VersionOwnerContactID], T1.[X_DictionaryBasalContact.VersionOwnerCompa");
            viewString.Append("nyID], T1.[X_DictionaryBasalContact.VersionUpdated])\r\n    FROM (\r\n        SELECT");
            viewString.Append(" \r\n            T.BasalContactID AS [X_DictionaryBasalContact.BasalContactID], \r\n");
            viewString.Append("            T.StandardBasalContactName AS [X_DictionaryBasalContact.StandardBasa");
            viewString.Append("lContactName], \r\n            T.CoalBasalContactName AS [X_DictionaryBasalContact");
            viewString.Append(".CoalBasalContactName], \r\n            T.GoldBasalContactName AS [X_DictionaryBas");
            viewString.Append("alContact.GoldBasalContactName], \r\n            T.CustomBasalContactName AS [X_Di");
            viewString.Append("ctionaryBasalContact.CustomBasalContactName], \r\n            T.Description AS [X_");
            viewString.Append("DictionaryBasalContact.Description], \r\n            T.FullDescription AS [X_Dicti");
            viewString.Append("onaryBasalContact.FullDescription], \r\n            T.Thumbnail AS [X_DictionaryBa");
            viewString.Append("salContact.Thumbnail], \r\n            T.OriginalFileDataID AS [X_DictionaryBasalC");
            viewString.Append("ontact.OriginalFileDataID], \r\n            T.Version AS [X_DictionaryBasalContact");
            viewString.Append(".Version], \r\n            T.VersionAntecedentID AS [X_DictionaryBasalContact.Vers");
            viewString.Append("ionAntecedentID], \r\n            T.VersionCertainty AS [X_DictionaryBasalContact.");
            viewString.Append("VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [X_DictionaryBas");
            viewString.Append("alContact.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_Dic");
            viewString.Append("tionaryBasalContact.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_Di");
            viewString.Append("ctionaryBasalContact.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS");
            viewString.Append(" [X_DictionaryBasalContact.VersionOwnerContactID], \r\n            T.VersionOwnerC");
            viewString.Append("ompanyID AS [X_DictionaryBasalContact.VersionOwnerCompanyID], \r\n            T.Ve");
            viewString.Append("rsionUpdated AS [X_DictionaryBasalContact.VersionUpdated], \r\n            True AS");
            viewString.Append(" _from0\r\n        FROM NKDC.DictionaryBasalContacts AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryBasalContact", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryBedSpacing
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView94()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2520);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryBedSpacing\r\n        [NKD.Module.B");
            viewString.Append("usinessObjects.Store.X_DictionaryBedSpacing](T1.[X_DictionaryBedSpacing.BedSpaci");
            viewString.Append("ngID], T1.[X_DictionaryBedSpacing.StandardBedSpacingName], T1.[X_DictionaryBedSp");
            viewString.Append("acing.CoalBedSpacingName], T1.[X_DictionaryBedSpacing.GoldBedSpacingName], T1.[X");
            viewString.Append("_DictionaryBedSpacing.CustomBedSpacingName], T1.[X_DictionaryBedSpacing.Descript");
            viewString.Append("ion], T1.[X_DictionaryBedSpacing.FullDescription], T1.[X_DictionaryBedSpacing.Th");
            viewString.Append("umbnail], T1.[X_DictionaryBedSpacing.OriginalFileDataID], T1.[X_DictionaryBedSpa");
            viewString.Append("cing.Version], T1.[X_DictionaryBedSpacing.VersionAntecedentID], T1.[X_Dictionary");
            viewString.Append("BedSpacing.VersionCertainty], T1.[X_DictionaryBedSpacing.VersionWorkflowInstance");
            viewString.Append("ID], T1.[X_DictionaryBedSpacing.VersionUpdatedBy], T1.[X_DictionaryBedSpacing.Ve");
            viewString.Append("rsionDeletedBy], T1.[X_DictionaryBedSpacing.VersionOwnerContactID], T1.[X_Dictio");
            viewString.Append("naryBedSpacing.VersionOwnerCompanyID], T1.[X_DictionaryBedSpacing.VersionUpdated");
            viewString.Append("])\r\n    FROM (\r\n        SELECT \r\n            T.BedSpacingID AS [X_DictionaryBedS");
            viewString.Append("pacing.BedSpacingID], \r\n            T.StandardBedSpacingName AS [X_DictionaryBed");
            viewString.Append("Spacing.StandardBedSpacingName], \r\n            T.CoalBedSpacingName AS [X_Dictio");
            viewString.Append("naryBedSpacing.CoalBedSpacingName], \r\n            T.GoldBedSpacingName AS [X_Dic");
            viewString.Append("tionaryBedSpacing.GoldBedSpacingName], \r\n            T.CustomBedSpacingName AS [");
            viewString.Append("X_DictionaryBedSpacing.CustomBedSpacingName], \r\n            T.Description AS [X_");
            viewString.Append("DictionaryBedSpacing.Description], \r\n            T.FullDescription AS [X_Diction");
            viewString.Append("aryBedSpacing.FullDescription], \r\n            T.Thumbnail AS [X_DictionaryBedSpa");
            viewString.Append("cing.Thumbnail], \r\n            T.OriginalFileDataID AS [X_DictionaryBedSpacing.O");
            viewString.Append("riginalFileDataID], \r\n            T.Version AS [X_DictionaryBedSpacing.Version],");
            viewString.Append(" \r\n            T.VersionAntecedentID AS [X_DictionaryBedSpacing.VersionAnteceden");
            viewString.Append("tID], \r\n            T.VersionCertainty AS [X_DictionaryBedSpacing.VersionCertain");
            viewString.Append("ty], \r\n            T.VersionWorkflowInstanceID AS [X_DictionaryBedSpacing.Versio");
            viewString.Append("nWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_DictionaryBedSpacin");
            viewString.Append("g.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_DictionaryBedSpacing");
            viewString.Append(".VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [X_DictionaryBedSpa");
            viewString.Append("cing.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [X_Diction");
            viewString.Append("aryBedSpacing.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [X_Dicti");
            viewString.Append("onaryBedSpacing.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC");
            viewString.Append(".DictionaryBedSpacings AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryBedSpacing", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryCharacteristic
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView95()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2682);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryCharacteristic\r\n        [NKD.Modu");
            viewString.Append("le.BusinessObjects.Store.X_DictionaryCharacteristic](T1.[X_DictionaryCharacteris");
            viewString.Append("tic.CharacteristicID], T1.[X_DictionaryCharacteristic.StandardCharacteristicName");
            viewString.Append("], T1.[X_DictionaryCharacteristic.CustomCharacteristicName], T1.[X_DictionaryCha");
            viewString.Append("racteristic.UnitID], T1.[X_DictionaryCharacteristic.CharacteristicTypeID], T1.[X");
            viewString.Append("_DictionaryCharacteristic.Description], T1.[X_DictionaryCharacteristic.FullDescr");
            viewString.Append("iption], T1.[X_DictionaryCharacteristic.Thumbnail], T1.[X_DictionaryCharacterist");
            viewString.Append("ic.OriginalFileDataID], T1.[X_DictionaryCharacteristic.Version], T1.[X_Dictionar");
            viewString.Append("yCharacteristic.VersionAntecedentID], T1.[X_DictionaryCharacteristic.VersionCert");
            viewString.Append("ainty], T1.[X_DictionaryCharacteristic.VersionWorkflowInstanceID], T1.[X_Diction");
            viewString.Append("aryCharacteristic.VersionUpdatedBy], T1.[X_DictionaryCharacteristic.VersionDelet");
            viewString.Append("edBy], T1.[X_DictionaryCharacteristic.VersionOwnerContactID], T1.[X_DictionaryCh");
            viewString.Append("aracteristic.VersionOwnerCompanyID], T1.[X_DictionaryCharacteristic.VersionUpdat");
            viewString.Append("ed])\r\n    FROM (\r\n        SELECT \r\n            T.CharacteristicID AS [X_Dictiona");
            viewString.Append("ryCharacteristic.CharacteristicID], \r\n            T.StandardCharacteristicName A");
            viewString.Append("S [X_DictionaryCharacteristic.StandardCharacteristicName], \r\n            T.Custo");
            viewString.Append("mCharacteristicName AS [X_DictionaryCharacteristic.CustomCharacteristicName], \r\n");
            viewString.Append("            T.UnitID AS [X_DictionaryCharacteristic.UnitID], \r\n            T.Cha");
            viewString.Append("racteristicTypeID AS [X_DictionaryCharacteristic.CharacteristicTypeID], \r\n      ");
            viewString.Append("      T.Description AS [X_DictionaryCharacteristic.Description], \r\n            T");
            viewString.Append(".FullDescription AS [X_DictionaryCharacteristic.FullDescription], \r\n            ");
            viewString.Append("T.Thumbnail AS [X_DictionaryCharacteristic.Thumbnail], \r\n            T.OriginalF");
            viewString.Append("ileDataID AS [X_DictionaryCharacteristic.OriginalFileDataID], \r\n            T.Ve");
            viewString.Append("rsion AS [X_DictionaryCharacteristic.Version], \r\n            T.VersionAntecedent");
            viewString.Append("ID AS [X_DictionaryCharacteristic.VersionAntecedentID], \r\n            T.VersionC");
            viewString.Append("ertainty AS [X_DictionaryCharacteristic.VersionCertainty], \r\n            T.Versi");
            viewString.Append("onWorkflowInstanceID AS [X_DictionaryCharacteristic.VersionWorkflowInstanceID], ");
            viewString.Append("\r\n            T.VersionUpdatedBy AS [X_DictionaryCharacteristic.VersionUpdatedBy");
            viewString.Append("], \r\n            T.VersionDeletedBy AS [X_DictionaryCharacteristic.VersionDelete");
            viewString.Append("dBy], \r\n            T.VersionOwnerContactID AS [X_DictionaryCharacteristic.Versi");
            viewString.Append("onOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [X_DictionaryCharact");
            viewString.Append("eristic.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [X_DictionaryC");
            viewString.Append("haracteristic.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.D");
            viewString.Append("ictionaryCharacteristics AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryCharacteristic", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryCharacteristicType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView96()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2610);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryCharacteristicType\r\n        [NKD.");
            viewString.Append("Module.BusinessObjects.Store.X_DictionaryCharacteristicType](T1.[X_DictionaryCha");
            viewString.Append("racteristicType.CharacteristicTypeID], T1.[X_DictionaryCharacteristicType.Standa");
            viewString.Append("rdCharacteristicTypeName], T1.[X_DictionaryCharacteristicType.CustomCharacterist");
            viewString.Append("icTypeName], T1.[X_DictionaryCharacteristicType.Description], T1.[X_DictionaryCh");
            viewString.Append("aracteristicType.FullDescription], T1.[X_DictionaryCharacteristicType.Thumbnail]");
            viewString.Append(", T1.[X_DictionaryCharacteristicType.OriginalFileDataID], T1.[X_DictionaryCharac");
            viewString.Append("teristicType.Version], T1.[X_DictionaryCharacteristicType.VersionAntecedentID], ");
            viewString.Append("T1.[X_DictionaryCharacteristicType.VersionCertainty], T1.[X_DictionaryCharacteri");
            viewString.Append("sticType.VersionWorkflowInstanceID], T1.[X_DictionaryCharacteristicType.VersionU");
            viewString.Append("pdatedBy], T1.[X_DictionaryCharacteristicType.VersionDeletedBy], T1.[X_Dictionar");
            viewString.Append("yCharacteristicType.VersionOwnerContactID], T1.[X_DictionaryCharacteristicType.V");
            viewString.Append("ersionOwnerCompanyID], T1.[X_DictionaryCharacteristicType.VersionUpdated])\r\n    ");
            viewString.Append("FROM (\r\n        SELECT \r\n            T.CharacteristicTypeID AS [X_DictionaryChar");
            viewString.Append("acteristicType.CharacteristicTypeID], \r\n            T.StandardCharacteristicType");
            viewString.Append("Name AS [X_DictionaryCharacteristicType.StandardCharacteristicTypeName], \r\n     ");
            viewString.Append("       T.CustomCharacteristicTypeName AS [X_DictionaryCharacteristicType.CustomC");
            viewString.Append("haracteristicTypeName], \r\n            T.Description AS [X_DictionaryCharacterist");
            viewString.Append("icType.Description], \r\n            T.FullDescription AS [X_DictionaryCharacteris");
            viewString.Append("ticType.FullDescription], \r\n            T.Thumbnail AS [X_DictionaryCharacterist");
            viewString.Append("icType.Thumbnail], \r\n            T.OriginalFileDataID AS [X_DictionaryCharacteri");
            viewString.Append("sticType.OriginalFileDataID], \r\n            T.Version AS [X_DictionaryCharacteri");
            viewString.Append("sticType.Version], \r\n            T.VersionAntecedentID AS [X_DictionaryCharacter");
            viewString.Append("isticType.VersionAntecedentID], \r\n            T.VersionCertainty AS [X_Dictionar");
            viewString.Append("yCharacteristicType.VersionCertainty], \r\n            T.VersionWorkflowInstanceID");
            viewString.Append(" AS [X_DictionaryCharacteristicType.VersionWorkflowInstanceID], \r\n            T.");
            viewString.Append("VersionUpdatedBy AS [X_DictionaryCharacteristicType.VersionUpdatedBy], \r\n       ");
            viewString.Append("     T.VersionDeletedBy AS [X_DictionaryCharacteristicType.VersionDeletedBy], \r\n");
            viewString.Append("            T.VersionOwnerContactID AS [X_DictionaryCharacteristicType.VersionOw");
            viewString.Append("nerContactID], \r\n            T.VersionOwnerCompanyID AS [X_DictionaryCharacteris");
            viewString.Append("ticType.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [X_DictionaryC");
            viewString.Append("haracteristicType.VersionUpdated], \r\n            True AS _from0\r\n        FROM NK");
            viewString.Append("DC.DictionaryCharacteristicTypes AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryCharacteristicType", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryColour
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView97()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2304);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryColour\r\n        [NKD.Module.Busin");
            viewString.Append("essObjects.Store.X_DictionaryColour](T1.[X_DictionaryColour.ColourID], T1.[X_Dic");
            viewString.Append("tionaryColour.StandardColourName], T1.[X_DictionaryColour.CoalColourName], T1.[X");
            viewString.Append("_DictionaryColour.GoldColourName], T1.[X_DictionaryColour.CustomColourName], T1.");
            viewString.Append("[X_DictionaryColour.Description], T1.[X_DictionaryColour.FullDescription], T1.[X");
            viewString.Append("_DictionaryColour.Thumbnail], T1.[X_DictionaryColour.OriginalFileDataID], T1.[X_");
            viewString.Append("DictionaryColour.Version], T1.[X_DictionaryColour.VersionAntecedentID], T1.[X_Di");
            viewString.Append("ctionaryColour.VersionCertainty], T1.[X_DictionaryColour.VersionWorkflowInstance");
            viewString.Append("ID], T1.[X_DictionaryColour.VersionUpdatedBy], T1.[X_DictionaryColour.VersionDel");
            viewString.Append("etedBy], T1.[X_DictionaryColour.VersionOwnerContactID], T1.[X_DictionaryColour.V");
            viewString.Append("ersionOwnerCompanyID], T1.[X_DictionaryColour.VersionUpdated])\r\n    FROM (\r\n    ");
            viewString.Append("    SELECT \r\n            T.ColourID AS [X_DictionaryColour.ColourID], \r\n        ");
            viewString.Append("    T.StandardColourName AS [X_DictionaryColour.StandardColourName], \r\n         ");
            viewString.Append("   T.CoalColourName AS [X_DictionaryColour.CoalColourName], \r\n            T.Gold");
            viewString.Append("ColourName AS [X_DictionaryColour.GoldColourName], \r\n            T.CustomColourN");
            viewString.Append("ame AS [X_DictionaryColour.CustomColourName], \r\n            T.Description AS [X_");
            viewString.Append("DictionaryColour.Description], \r\n            T.FullDescription AS [X_DictionaryC");
            viewString.Append("olour.FullDescription], \r\n            T.Thumbnail AS [X_DictionaryColour.Thumbna");
            viewString.Append("il], \r\n            T.OriginalFileDataID AS [X_DictionaryColour.OriginalFileDataI");
            viewString.Append("D], \r\n            T.Version AS [X_DictionaryColour.Version], \r\n            T.Ver");
            viewString.Append("sionAntecedentID AS [X_DictionaryColour.VersionAntecedentID], \r\n            T.Ve");
            viewString.Append("rsionCertainty AS [X_DictionaryColour.VersionCertainty], \r\n            T.Version");
            viewString.Append("WorkflowInstanceID AS [X_DictionaryColour.VersionWorkflowInstanceID], \r\n        ");
            viewString.Append("    T.VersionUpdatedBy AS [X_DictionaryColour.VersionUpdatedBy], \r\n            T");
            viewString.Append(".VersionDeletedBy AS [X_DictionaryColour.VersionDeletedBy], \r\n            T.Vers");
            viewString.Append("ionOwnerContactID AS [X_DictionaryColour.VersionOwnerContactID], \r\n            T");
            viewString.Append(".VersionOwnerCompanyID AS [X_DictionaryColour.VersionOwnerCompanyID], \r\n        ");
            viewString.Append("    T.VersionUpdated AS [X_DictionaryColour.VersionUpdated], \r\n            True ");
            viewString.Append("AS _from0\r\n        FROM NKDC.DictionaryColours AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryColour", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryCommodity
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView98()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2467);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryCommodity\r\n        [NKD.Module.Bu");
            viewString.Append("sinessObjects.Store.X_DictionaryCommodity](T1.[X_DictionaryCommodity.CommodityID");
            viewString.Append("], T1.[X_DictionaryCommodity.StandardCommodityName], T1.[X_DictionaryCommodity.C");
            viewString.Append("oalCommodityName], T1.[X_DictionaryCommodity.GoldCommodityName], T1.[X_Dictionar");
            viewString.Append("yCommodity.CustomCommodityName], T1.[X_DictionaryCommodity.Description], T1.[X_D");
            viewString.Append("ictionaryCommodity.FullDescription], T1.[X_DictionaryCommodity.Thumbnail], T1.[X");
            viewString.Append("_DictionaryCommodity.OriginalFileDataID], T1.[X_DictionaryCommodity.Version], T1");
            viewString.Append(".[X_DictionaryCommodity.VersionAntecedentID], T1.[X_DictionaryCommodity.VersionC");
            viewString.Append("ertainty], T1.[X_DictionaryCommodity.VersionWorkflowInstanceID], T1.[X_Dictionar");
            viewString.Append("yCommodity.VersionUpdatedBy], T1.[X_DictionaryCommodity.VersionDeletedBy], T1.[X");
            viewString.Append("_DictionaryCommodity.VersionOwnerContactID], T1.[X_DictionaryCommodity.VersionOw");
            viewString.Append("nerCompanyID], T1.[X_DictionaryCommodity.VersionUpdated])\r\n    FROM (\r\n        S");
            viewString.Append("ELECT \r\n            T.CommodityID AS [X_DictionaryCommodity.CommodityID], \r\n    ");
            viewString.Append("        T.StandardCommodityName AS [X_DictionaryCommodity.StandardCommodityName]");
            viewString.Append(", \r\n            T.CoalCommodityName AS [X_DictionaryCommodity.CoalCommodityName]");
            viewString.Append(", \r\n            T.GoldCommodityName AS [X_DictionaryCommodity.GoldCommodityName]");
            viewString.Append(", \r\n            T.CustomCommodityName AS [X_DictionaryCommodity.CustomCommodityN");
            viewString.Append("ame], \r\n            T.Description AS [X_DictionaryCommodity.Description], \r\n    ");
            viewString.Append("        T.FullDescription AS [X_DictionaryCommodity.FullDescription], \r\n        ");
            viewString.Append("    T.Thumbnail AS [X_DictionaryCommodity.Thumbnail], \r\n            T.OriginalFi");
            viewString.Append("leDataID AS [X_DictionaryCommodity.OriginalFileDataID], \r\n            T.Version ");
            viewString.Append("AS [X_DictionaryCommodity.Version], \r\n            T.VersionAntecedentID AS [X_Di");
            viewString.Append("ctionaryCommodity.VersionAntecedentID], \r\n            T.VersionCertainty AS [X_D");
            viewString.Append("ictionaryCommodity.VersionCertainty], \r\n            T.VersionWorkflowInstanceID ");
            viewString.Append("AS [X_DictionaryCommodity.VersionWorkflowInstanceID], \r\n            T.VersionUpd");
            viewString.Append("atedBy AS [X_DictionaryCommodity.VersionUpdatedBy], \r\n            T.VersionDelet");
            viewString.Append("edBy AS [X_DictionaryCommodity.VersionDeletedBy], \r\n            T.VersionOwnerCo");
            viewString.Append("ntactID AS [X_DictionaryCommodity.VersionOwnerContactID], \r\n            T.Versio");
            viewString.Append("nOwnerCompanyID AS [X_DictionaryCommodity.VersionOwnerCompanyID], \r\n            ");
            viewString.Append("T.VersionUpdated AS [X_DictionaryCommodity.VersionUpdated], \r\n            True A");
            viewString.Append("S _from0\r\n        FROM NKDC.DictionaryCommodities AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryCommodity", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryContractConditionType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView99()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2742);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryContractConditionType\r\n        [N");
            viewString.Append("KD.Module.BusinessObjects.Store.X_DictionaryContractConditionType](T1.[X_Diction");
            viewString.Append("aryContractConditionType.ContractConditionTypeID], T1.[X_DictionaryContractCondi");
            viewString.Append("tionType.StandardContractConditionTypeName], T1.[X_DictionaryContractConditionTy");
            viewString.Append("pe.CustomContractConditionTypeName], T1.[X_DictionaryContractConditionType.Descr");
            viewString.Append("iption], T1.[X_DictionaryContractConditionType.FullDescription], T1.[X_Dictionar");
            viewString.Append("yContractConditionType.Thumbnail], T1.[X_DictionaryContractConditionType.Origina");
            viewString.Append("lFileDataID], T1.[X_DictionaryContractConditionType.Version], T1.[X_DictionaryCo");
            viewString.Append("ntractConditionType.VersionAntecedentID], T1.[X_DictionaryContractConditionType.");
            viewString.Append("VersionCertainty], T1.[X_DictionaryContractConditionType.VersionWorkflowInstance");
            viewString.Append("ID], T1.[X_DictionaryContractConditionType.VersionUpdatedBy], T1.[X_DictionaryCo");
            viewString.Append("ntractConditionType.VersionDeletedBy], T1.[X_DictionaryContractConditionType.Ver");
            viewString.Append("sionOwnerContactID], T1.[X_DictionaryContractConditionType.VersionOwnerCompanyID");
            viewString.Append("], T1.[X_DictionaryContractConditionType.VersionUpdated])\r\n    FROM (\r\n        S");
            viewString.Append("ELECT \r\n            T.ContractConditionTypeID AS [X_DictionaryContractConditionT");
            viewString.Append("ype.ContractConditionTypeID], \r\n            T.StandardContractConditionTypeName ");
            viewString.Append("AS [X_DictionaryContractConditionType.StandardContractConditionTypeName], \r\n    ");
            viewString.Append("        T.CustomContractConditionTypeName AS [X_DictionaryContractConditionType.");
            viewString.Append("CustomContractConditionTypeName], \r\n            T.Description AS [X_DictionaryCo");
            viewString.Append("ntractConditionType.Description], \r\n            T.FullDescription AS [X_Dictiona");
            viewString.Append("ryContractConditionType.FullDescription], \r\n            T.Thumbnail AS [X_Dictio");
            viewString.Append("naryContractConditionType.Thumbnail], \r\n            T.OriginalFileDataID AS [X_D");
            viewString.Append("ictionaryContractConditionType.OriginalFileDataID], \r\n            T.Version AS [");
            viewString.Append("X_DictionaryContractConditionType.Version], \r\n            T.VersionAntecedentID ");
            viewString.Append("AS [X_DictionaryContractConditionType.VersionAntecedentID], \r\n            T.Vers");
            viewString.Append("ionCertainty AS [X_DictionaryContractConditionType.VersionCertainty], \r\n        ");
            viewString.Append("    T.VersionWorkflowInstanceID AS [X_DictionaryContractConditionType.VersionWor");
            viewString.Append("kflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_DictionaryContractCondi");
            viewString.Append("tionType.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_DictionaryCon");
            viewString.Append("tractConditionType.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [");
            viewString.Append("X_DictionaryContractConditionType.VersionOwnerContactID], \r\n            T.Versio");
            viewString.Append("nOwnerCompanyID AS [X_DictionaryContractConditionType.VersionOwnerCompanyID], \r\n");
            viewString.Append("            T.VersionUpdated AS [X_DictionaryContractConditionType.VersionUpdate");
            viewString.Append("d], \r\n            True AS _from0\r\n        FROM NKDC.DictionaryContractConditionT");
            viewString.Append("ypes AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryContractConditionType", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryCoreState
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView100()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2466);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryCoreState\r\n        [NKD.Module.Bu");
            viewString.Append("sinessObjects.Store.X_DictionaryCoreState](T1.[X_DictionaryCoreState.CoreStateID");
            viewString.Append("], T1.[X_DictionaryCoreState.StandardCoreStateName], T1.[X_DictionaryCoreState.C");
            viewString.Append("oalCoreStateName], T1.[X_DictionaryCoreState.GoldCoreStateName], T1.[X_Dictionar");
            viewString.Append("yCoreState.CustomCoreStateName], T1.[X_DictionaryCoreState.Description], T1.[X_D");
            viewString.Append("ictionaryCoreState.FullDescription], T1.[X_DictionaryCoreState.Thumbnail], T1.[X");
            viewString.Append("_DictionaryCoreState.OriginalFileDataID], T1.[X_DictionaryCoreState.Version], T1");
            viewString.Append(".[X_DictionaryCoreState.VersionAntecedentID], T1.[X_DictionaryCoreState.VersionC");
            viewString.Append("ertainty], T1.[X_DictionaryCoreState.VersionWorkflowInstanceID], T1.[X_Dictionar");
            viewString.Append("yCoreState.VersionUpdatedBy], T1.[X_DictionaryCoreState.VersionDeletedBy], T1.[X");
            viewString.Append("_DictionaryCoreState.VersionOwnerContactID], T1.[X_DictionaryCoreState.VersionOw");
            viewString.Append("nerCompanyID], T1.[X_DictionaryCoreState.VersionUpdated])\r\n    FROM (\r\n        S");
            viewString.Append("ELECT \r\n            T.CoreStateID AS [X_DictionaryCoreState.CoreStateID], \r\n    ");
            viewString.Append("        T.StandardCoreStateName AS [X_DictionaryCoreState.StandardCoreStateName]");
            viewString.Append(", \r\n            T.CoalCoreStateName AS [X_DictionaryCoreState.CoalCoreStateName]");
            viewString.Append(", \r\n            T.GoldCoreStateName AS [X_DictionaryCoreState.GoldCoreStateName]");
            viewString.Append(", \r\n            T.CustomCoreStateName AS [X_DictionaryCoreState.CustomCoreStateN");
            viewString.Append("ame], \r\n            T.Description AS [X_DictionaryCoreState.Description], \r\n    ");
            viewString.Append("        T.FullDescription AS [X_DictionaryCoreState.FullDescription], \r\n        ");
            viewString.Append("    T.Thumbnail AS [X_DictionaryCoreState.Thumbnail], \r\n            T.OriginalFi");
            viewString.Append("leDataID AS [X_DictionaryCoreState.OriginalFileDataID], \r\n            T.Version ");
            viewString.Append("AS [X_DictionaryCoreState.Version], \r\n            T.VersionAntecedentID AS [X_Di");
            viewString.Append("ctionaryCoreState.VersionAntecedentID], \r\n            T.VersionCertainty AS [X_D");
            viewString.Append("ictionaryCoreState.VersionCertainty], \r\n            T.VersionWorkflowInstanceID ");
            viewString.Append("AS [X_DictionaryCoreState.VersionWorkflowInstanceID], \r\n            T.VersionUpd");
            viewString.Append("atedBy AS [X_DictionaryCoreState.VersionUpdatedBy], \r\n            T.VersionDelet");
            viewString.Append("edBy AS [X_DictionaryCoreState.VersionDeletedBy], \r\n            T.VersionOwnerCo");
            viewString.Append("ntactID AS [X_DictionaryCoreState.VersionOwnerContactID], \r\n            T.Versio");
            viewString.Append("nOwnerCompanyID AS [X_DictionaryCoreState.VersionOwnerCompanyID], \r\n            ");
            viewString.Append("T.VersionUpdated AS [X_DictionaryCoreState.VersionUpdated], \r\n            True A");
            viewString.Append("S _from0\r\n        FROM NKDC.DictionaryCoreStates AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryCoreState", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryCostType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView101()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2170);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryCostType\r\n        [NKD.Module.Bus");
            viewString.Append("inessObjects.Store.X_DictionaryCostType](T1.[X_DictionaryCostType.CostTypeID], T");
            viewString.Append("1.[X_DictionaryCostType.StandardCostTypeName], T1.[X_DictionaryCostType.CustomCo");
            viewString.Append("stTypeName], T1.[X_DictionaryCostType.Description], T1.[X_DictionaryCostType.Ful");
            viewString.Append("lDescription], T1.[X_DictionaryCostType.Thumbnail], T1.[X_DictionaryCostType.Ori");
            viewString.Append("ginalFileDataID], T1.[X_DictionaryCostType.Version], T1.[X_DictionaryCostType.Ve");
            viewString.Append("rsionAntecedentID], T1.[X_DictionaryCostType.VersionCertainty], T1.[X_Dictionary");
            viewString.Append("CostType.VersionWorkflowInstanceID], T1.[X_DictionaryCostType.VersionUpdatedBy],");
            viewString.Append(" T1.[X_DictionaryCostType.VersionDeletedBy], T1.[X_DictionaryCostType.VersionOwn");
            viewString.Append("erContactID], T1.[X_DictionaryCostType.VersionOwnerCompanyID], T1.[X_DictionaryC");
            viewString.Append("ostType.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.CostTypeID ");
            viewString.Append("AS [X_DictionaryCostType.CostTypeID], \r\n            T.StandardCostTypeName AS [X");
            viewString.Append("_DictionaryCostType.StandardCostTypeName], \r\n            T.CustomCostTypeName AS");
            viewString.Append(" [X_DictionaryCostType.CustomCostTypeName], \r\n            T.Description AS [X_Di");
            viewString.Append("ctionaryCostType.Description], \r\n            T.FullDescription AS [X_DictionaryC");
            viewString.Append("ostType.FullDescription], \r\n            T.Thumbnail AS [X_DictionaryCostType.Thu");
            viewString.Append("mbnail], \r\n            T.OriginalFileDataID AS [X_DictionaryCostType.OriginalFil");
            viewString.Append("eDataID], \r\n            T.Version AS [X_DictionaryCostType.Version], \r\n         ");
            viewString.Append("   T.VersionAntecedentID AS [X_DictionaryCostType.VersionAntecedentID], \r\n      ");
            viewString.Append("      T.VersionCertainty AS [X_DictionaryCostType.VersionCertainty], \r\n         ");
            viewString.Append("   T.VersionWorkflowInstanceID AS [X_DictionaryCostType.VersionWorkflowInstanceI");
            viewString.Append("D], \r\n            T.VersionUpdatedBy AS [X_DictionaryCostType.VersionUpdatedBy],");
            viewString.Append(" \r\n            T.VersionDeletedBy AS [X_DictionaryCostType.VersionDeletedBy], \r\n");
            viewString.Append("            T.VersionOwnerContactID AS [X_DictionaryCostType.VersionOwnerContact");
            viewString.Append("ID], \r\n            T.VersionOwnerCompanyID AS [X_DictionaryCostType.VersionOwner");
            viewString.Append("CompanyID], \r\n            T.VersionUpdated AS [X_DictionaryCostType.VersionUpdat");
            viewString.Append("ed], \r\n            True AS _from0\r\n        FROM NKDC.DictionaryCostTypes AS T\r\n ");
            viewString.Append("   ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryCostType", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryCountry
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView102()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2683);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryCountry\r\n        [NKD.Module.Busi");
            viewString.Append("nessObjects.Store.X_DictionaryCountry](T1.[X_DictionaryCountry.CountryID], T1.[X");
            viewString.Append("_DictionaryCountry.CountryGUID], T1.[X_DictionaryCountry.StandardCountryName], T");
            viewString.Append("1.[X_DictionaryCountry.CoalCountryName], T1.[X_DictionaryCountry.GoldCountryName");
            viewString.Append("], T1.[X_DictionaryCountry.CustomCountryName], T1.[X_DictionaryCountry.CurrencyC");
            viewString.Append("ode], T1.[X_DictionaryCountry.CurrencyFormat], T1.[X_DictionaryCountry.Descripti");
            viewString.Append("on], T1.[X_DictionaryCountry.FullDescription], T1.[X_DictionaryCountry.Thumbnail");
            viewString.Append("], T1.[X_DictionaryCountry.OriginalFileDataID], T1.[X_DictionaryCountry.Version]");
            viewString.Append(", T1.[X_DictionaryCountry.VersionAntecedentID], T1.[X_DictionaryCountry.VersionC");
            viewString.Append("ertainty], T1.[X_DictionaryCountry.VersionWorkflowInstanceID], T1.[X_DictionaryC");
            viewString.Append("ountry.VersionUpdatedBy], T1.[X_DictionaryCountry.VersionDeletedBy], T1.[X_Dicti");
            viewString.Append("onaryCountry.VersionOwnerContactID], T1.[X_DictionaryCountry.VersionOwnerCompany");
            viewString.Append("ID], T1.[X_DictionaryCountry.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n    ");
            viewString.Append("        T.CountryID AS [X_DictionaryCountry.CountryID], \r\n            T.CountryG");
            viewString.Append("UID AS [X_DictionaryCountry.CountryGUID], \r\n            T.StandardCountryName AS");
            viewString.Append(" [X_DictionaryCountry.StandardCountryName], \r\n            T.CoalCountryName AS [");
            viewString.Append("X_DictionaryCountry.CoalCountryName], \r\n            T.GoldCountryName AS [X_Dict");
            viewString.Append("ionaryCountry.GoldCountryName], \r\n            T.CustomCountryName AS [X_Dictiona");
            viewString.Append("ryCountry.CustomCountryName], \r\n            T.CurrencyCode AS [X_DictionaryCount");
            viewString.Append("ry.CurrencyCode], \r\n            T.CurrencyFormat AS [X_DictionaryCountry.Currenc");
            viewString.Append("yFormat], \r\n            T.Description AS [X_DictionaryCountry.Description], \r\n  ");
            viewString.Append("          T.FullDescription AS [X_DictionaryCountry.FullDescription], \r\n        ");
            viewString.Append("    T.Thumbnail AS [X_DictionaryCountry.Thumbnail], \r\n            T.OriginalFile");
            viewString.Append("DataID AS [X_DictionaryCountry.OriginalFileDataID], \r\n            T.Version AS [");
            viewString.Append("X_DictionaryCountry.Version], \r\n            T.VersionAntecedentID AS [X_Dictiona");
            viewString.Append("ryCountry.VersionAntecedentID], \r\n            T.VersionCertainty AS [X_Dictionar");
            viewString.Append("yCountry.VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [X_Dict");
            viewString.Append("ionaryCountry.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X");
            viewString.Append("_DictionaryCountry.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_Dic");
            viewString.Append("tionaryCountry.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [X_Di");
            viewString.Append("ctionaryCountry.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS");
            viewString.Append(" [X_DictionaryCountry.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS ");
            viewString.Append("[X_DictionaryCountry.VersionUpdated], \r\n            True AS _from0\r\n        FROM");
            viewString.Append(" NKDC.DictionaryCountries AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryCountry", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryCountryState
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView103()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2736);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryCountryState\r\n        [NKD.Module");
            viewString.Append(".BusinessObjects.Store.X_DictionaryCountryState](T1.[X_DictionaryCountryState.Co");
            viewString.Append("untryStateID], T1.[X_DictionaryCountryState.CountryID], T1.[X_DictionaryCountryS");
            viewString.Append("tate.StandardCountryStateName], T1.[X_DictionaryCountryState.CoalCountryStateNam");
            viewString.Append("e], T1.[X_DictionaryCountryState.GoldCountryStateName], T1.[X_DictionaryCountryS");
            viewString.Append("tate.CustomCountryStateName], T1.[X_DictionaryCountryState.Description], T1.[X_D");
            viewString.Append("ictionaryCountryState.FullDescription], T1.[X_DictionaryCountryState.Thumbnail],");
            viewString.Append(" T1.[X_DictionaryCountryState.OriginalFileDataID], T1.[X_DictionaryCountryState.");
            viewString.Append("Version], T1.[X_DictionaryCountryState.VersionAntecedentID], T1.[X_DictionaryCou");
            viewString.Append("ntryState.VersionCertainty], T1.[X_DictionaryCountryState.VersionWorkflowInstanc");
            viewString.Append("eID], T1.[X_DictionaryCountryState.VersionUpdatedBy], T1.[X_DictionaryCountrySta");
            viewString.Append("te.VersionDeletedBy], T1.[X_DictionaryCountryState.VersionOwnerContactID], T1.[X");
            viewString.Append("_DictionaryCountryState.VersionOwnerCompanyID], T1.[X_DictionaryCountryState.Ver");
            viewString.Append("sionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.CountryStateID AS [X_D");
            viewString.Append("ictionaryCountryState.CountryStateID], \r\n            T.CountryID AS [X_Dictionar");
            viewString.Append("yCountryState.CountryID], \r\n            T.StandardCountryStateName AS [X_Diction");
            viewString.Append("aryCountryState.StandardCountryStateName], \r\n            T.CoalCountryStateName ");
            viewString.Append("AS [X_DictionaryCountryState.CoalCountryStateName], \r\n            T.GoldCountryS");
            viewString.Append("tateName AS [X_DictionaryCountryState.GoldCountryStateName], \r\n            T.Cus");
            viewString.Append("tomCountryStateName AS [X_DictionaryCountryState.CustomCountryStateName], \r\n    ");
            viewString.Append("        T.Description AS [X_DictionaryCountryState.Description], \r\n            T");
            viewString.Append(".FullDescription AS [X_DictionaryCountryState.FullDescription], \r\n            T.");
            viewString.Append("Thumbnail AS [X_DictionaryCountryState.Thumbnail], \r\n            T.OriginalFileD");
            viewString.Append("ataID AS [X_DictionaryCountryState.OriginalFileDataID], \r\n            T.Version ");
            viewString.Append("AS [X_DictionaryCountryState.Version], \r\n            T.VersionAntecedentID AS [X");
            viewString.Append("_DictionaryCountryState.VersionAntecedentID], \r\n            T.VersionCertainty A");
            viewString.Append("S [X_DictionaryCountryState.VersionCertainty], \r\n            T.VersionWorkflowIn");
            viewString.Append("stanceID AS [X_DictionaryCountryState.VersionWorkflowInstanceID], \r\n            ");
            viewString.Append("T.VersionUpdatedBy AS [X_DictionaryCountryState.VersionUpdatedBy], \r\n           ");
            viewString.Append(" T.VersionDeletedBy AS [X_DictionaryCountryState.VersionDeletedBy], \r\n          ");
            viewString.Append("  T.VersionOwnerContactID AS [X_DictionaryCountryState.VersionOwnerContactID], \r");
            viewString.Append("\n            T.VersionOwnerCompanyID AS [X_DictionaryCountryState.VersionOwnerCo");
            viewString.Append("mpanyID], \r\n            T.VersionUpdated AS [X_DictionaryCountryState.VersionUpd");
            viewString.Append("ated], \r\n            True AS _from0\r\n        FROM NKDC.DictionaryCountryStates A");
            viewString.Append("S T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryCountryState", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryDataStatus
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView104()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2519);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryDataStatus\r\n        [NKD.Module.B");
            viewString.Append("usinessObjects.Store.X_DictionaryDataStatus](T1.[X_DictionaryDataStatus.DataStat");
            viewString.Append("usID], T1.[X_DictionaryDataStatus.StandardDataStatusName], T1.[X_DictionaryDataS");
            viewString.Append("tatus.CoalDataStatusName], T1.[X_DictionaryDataStatus.GoldDataStatusName], T1.[X");
            viewString.Append("_DictionaryDataStatus.CustomDataStatusName], T1.[X_DictionaryDataStatus.Descript");
            viewString.Append("ion], T1.[X_DictionaryDataStatus.FullDescription], T1.[X_DictionaryDataStatus.Th");
            viewString.Append("umbnail], T1.[X_DictionaryDataStatus.OriginalFileDataID], T1.[X_DictionaryDataSt");
            viewString.Append("atus.Version], T1.[X_DictionaryDataStatus.VersionAntecedentID], T1.[X_Dictionary");
            viewString.Append("DataStatus.VersionCertainty], T1.[X_DictionaryDataStatus.VersionWorkflowInstance");
            viewString.Append("ID], T1.[X_DictionaryDataStatus.VersionUpdatedBy], T1.[X_DictionaryDataStatus.Ve");
            viewString.Append("rsionDeletedBy], T1.[X_DictionaryDataStatus.VersionOwnerContactID], T1.[X_Dictio");
            viewString.Append("naryDataStatus.VersionOwnerCompanyID], T1.[X_DictionaryDataStatus.VersionUpdated");
            viewString.Append("])\r\n    FROM (\r\n        SELECT \r\n            T.DataStatusID AS [X_DictionaryData");
            viewString.Append("Status.DataStatusID], \r\n            T.StandardDataStatusName AS [X_DictionaryDat");
            viewString.Append("aStatus.StandardDataStatusName], \r\n            T.CoalDataStatusName AS [X_Dictio");
            viewString.Append("naryDataStatus.CoalDataStatusName], \r\n            T.GoldDataStatusName AS [X_Dic");
            viewString.Append("tionaryDataStatus.GoldDataStatusName], \r\n            T.CustomDataStatusName AS [");
            viewString.Append("X_DictionaryDataStatus.CustomDataStatusName], \r\n            T.Description AS [X_");
            viewString.Append("DictionaryDataStatus.Description], \r\n            T.FullDescription AS [X_Diction");
            viewString.Append("aryDataStatus.FullDescription], \r\n            T.Thumbnail AS [X_DictionaryDataSt");
            viewString.Append("atus.Thumbnail], \r\n            T.OriginalFileDataID AS [X_DictionaryDataStatus.O");
            viewString.Append("riginalFileDataID], \r\n            T.Version AS [X_DictionaryDataStatus.Version],");
            viewString.Append(" \r\n            T.VersionAntecedentID AS [X_DictionaryDataStatus.VersionAnteceden");
            viewString.Append("tID], \r\n            T.VersionCertainty AS [X_DictionaryDataStatus.VersionCertain");
            viewString.Append("ty], \r\n            T.VersionWorkflowInstanceID AS [X_DictionaryDataStatus.Versio");
            viewString.Append("nWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_DictionaryDataStatu");
            viewString.Append("s.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_DictionaryDataStatus");
            viewString.Append(".VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [X_DictionaryDataSt");
            viewString.Append("atus.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [X_Diction");
            viewString.Append("aryDataStatus.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [X_Dicti");
            viewString.Append("onaryDataStatus.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC");
            viewString.Append(".DictionaryDataStatus AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryDataStatus", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryDefectCompleteness
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView105()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2953);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryDefectCompleteness\r\n        [NKD.");
            viewString.Append("Module.BusinessObjects.Store.X_DictionaryDefectCompleteness](T1.[X_DictionaryDef");
            viewString.Append("ectCompleteness.DefectCompletenessID], T1.[X_DictionaryDefectCompleteness.Standa");
            viewString.Append("rdDefectCompletenessName], T1.[X_DictionaryDefectCompleteness.CoalDefectComplete");
            viewString.Append("nessName], T1.[X_DictionaryDefectCompleteness.GoldDefectCompletenessName], T1.[X");
            viewString.Append("_DictionaryDefectCompleteness.CustomDefectCompletenessName], T1.[X_DictionaryDef");
            viewString.Append("ectCompleteness.Description], T1.[X_DictionaryDefectCompleteness.FullDescription");
            viewString.Append("], T1.[X_DictionaryDefectCompleteness.Thumbnail], T1.[X_DictionaryDefectComplete");
            viewString.Append("ness.OriginalFileDataID], T1.[X_DictionaryDefectCompleteness.Version], T1.[X_Dic");
            viewString.Append("tionaryDefectCompleteness.VersionAntecedentID], T1.[X_DictionaryDefectCompletene");
            viewString.Append("ss.VersionCertainty], T1.[X_DictionaryDefectCompleteness.VersionWorkflowInstance");
            viewString.Append("ID], T1.[X_DictionaryDefectCompleteness.VersionUpdatedBy], T1.[X_DictionaryDefec");
            viewString.Append("tCompleteness.VersionDeletedBy], T1.[X_DictionaryDefectCompleteness.VersionOwner");
            viewString.Append("ContactID], T1.[X_DictionaryDefectCompleteness.VersionOwnerCompanyID], T1.[X_Dic");
            viewString.Append("tionaryDefectCompleteness.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n       ");
            viewString.Append("     T.DefectCompletenessID AS [X_DictionaryDefectCompleteness.DefectCompletenes");
            viewString.Append("sID], \r\n            T.StandardDefectCompletenessName AS [X_DictionaryDefectCompl");
            viewString.Append("eteness.StandardDefectCompletenessName], \r\n            T.CoalDefectCompletenessN");
            viewString.Append("ame AS [X_DictionaryDefectCompleteness.CoalDefectCompletenessName], \r\n          ");
            viewString.Append("  T.GoldDefectCompletenessName AS [X_DictionaryDefectCompleteness.GoldDefectComp");
            viewString.Append("letenessName], \r\n            T.CustomDefectCompletenessName AS [X_DictionaryDefe");
            viewString.Append("ctCompleteness.CustomDefectCompletenessName], \r\n            T.Description AS [X_");
            viewString.Append("DictionaryDefectCompleteness.Description], \r\n            T.FullDescription AS [X");
            viewString.Append("_DictionaryDefectCompleteness.FullDescription], \r\n            T.Thumbnail AS [X_");
            viewString.Append("DictionaryDefectCompleteness.Thumbnail], \r\n            T.OriginalFileDataID AS [");
            viewString.Append("X_DictionaryDefectCompleteness.OriginalFileDataID], \r\n            T.Version AS [");
            viewString.Append("X_DictionaryDefectCompleteness.Version], \r\n            T.VersionAntecedentID AS ");
            viewString.Append("[X_DictionaryDefectCompleteness.VersionAntecedentID], \r\n            T.VersionCer");
            viewString.Append("tainty AS [X_DictionaryDefectCompleteness.VersionCertainty], \r\n            T.Ver");
            viewString.Append("sionWorkflowInstanceID AS [X_DictionaryDefectCompleteness.VersionWorkflowInstanc");
            viewString.Append("eID], \r\n            T.VersionUpdatedBy AS [X_DictionaryDefectCompleteness.Versio");
            viewString.Append("nUpdatedBy], \r\n            T.VersionDeletedBy AS [X_DictionaryDefectCompleteness");
            viewString.Append(".VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [X_DictionaryDefect");
            viewString.Append("Completeness.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [X");
            viewString.Append("_DictionaryDefectCompleteness.VersionOwnerCompanyID], \r\n            T.VersionUpd");
            viewString.Append("ated AS [X_DictionaryDefectCompleteness.VersionUpdated], \r\n            True AS _");
            viewString.Append("from0\r\n        FROM NKDC.DictionaryDefectCompletenesses AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryDefectCompleteness", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryDefectContinuity
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView106()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2845);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryDefectContinuity\r\n        [NKD.Mo");
            viewString.Append("dule.BusinessObjects.Store.X_DictionaryDefectContinuity](T1.[X_DictionaryDefectC");
            viewString.Append("ontinuity.DefectContinuityID], T1.[X_DictionaryDefectContinuity.StandardDefectCo");
            viewString.Append("ntinuityName], T1.[X_DictionaryDefectContinuity.CoalDefectContinuityName], T1.[X");
            viewString.Append("_DictionaryDefectContinuity.GoldDefectContinuityName], T1.[X_DictionaryDefectCon");
            viewString.Append("tinuity.CustomDefectContinuityName], T1.[X_DictionaryDefectContinuity.Descriptio");
            viewString.Append("n], T1.[X_DictionaryDefectContinuity.FullDescription], T1.[X_DictionaryDefectCon");
            viewString.Append("tinuity.Thumbnail], T1.[X_DictionaryDefectContinuity.OriginalFileDataID], T1.[X_");
            viewString.Append("DictionaryDefectContinuity.Version], T1.[X_DictionaryDefectContinuity.VersionAnt");
            viewString.Append("ecedentID], T1.[X_DictionaryDefectContinuity.VersionCertainty], T1.[X_Dictionary");
            viewString.Append("DefectContinuity.VersionWorkflowInstanceID], T1.[X_DictionaryDefectContinuity.Ve");
            viewString.Append("rsionUpdatedBy], T1.[X_DictionaryDefectContinuity.VersionDeletedBy], T1.[X_Dicti");
            viewString.Append("onaryDefectContinuity.VersionOwnerContactID], T1.[X_DictionaryDefectContinuity.V");
            viewString.Append("ersionOwnerCompanyID], T1.[X_DictionaryDefectContinuity.VersionUpdated])\r\n    FR");
            viewString.Append("OM (\r\n        SELECT \r\n            T.DefectContinuityID AS [X_DictionaryDefectCo");
            viewString.Append("ntinuity.DefectContinuityID], \r\n            T.StandardDefectContinuityName AS [X");
            viewString.Append("_DictionaryDefectContinuity.StandardDefectContinuityName], \r\n            T.CoalD");
            viewString.Append("efectContinuityName AS [X_DictionaryDefectContinuity.CoalDefectContinuityName], ");
            viewString.Append("\r\n            T.GoldDefectContinuityName AS [X_DictionaryDefectContinuity.GoldDe");
            viewString.Append("fectContinuityName], \r\n            T.CustomDefectContinuityName AS [X_Dictionary");
            viewString.Append("DefectContinuity.CustomDefectContinuityName], \r\n            T.Description AS [X_");
            viewString.Append("DictionaryDefectContinuity.Description], \r\n            T.FullDescription AS [X_D");
            viewString.Append("ictionaryDefectContinuity.FullDescription], \r\n            T.Thumbnail AS [X_Dict");
            viewString.Append("ionaryDefectContinuity.Thumbnail], \r\n            T.OriginalFileDataID AS [X_Dict");
            viewString.Append("ionaryDefectContinuity.OriginalFileDataID], \r\n            T.Version AS [X_Dictio");
            viewString.Append("naryDefectContinuity.Version], \r\n            T.VersionAntecedentID AS [X_Diction");
            viewString.Append("aryDefectContinuity.VersionAntecedentID], \r\n            T.VersionCertainty AS [X");
            viewString.Append("_DictionaryDefectContinuity.VersionCertainty], \r\n            T.VersionWorkflowIn");
            viewString.Append("stanceID AS [X_DictionaryDefectContinuity.VersionWorkflowInstanceID], \r\n        ");
            viewString.Append("    T.VersionUpdatedBy AS [X_DictionaryDefectContinuity.VersionUpdatedBy], \r\n   ");
            viewString.Append("         T.VersionDeletedBy AS [X_DictionaryDefectContinuity.VersionDeletedBy], ");
            viewString.Append("\r\n            T.VersionOwnerContactID AS [X_DictionaryDefectContinuity.VersionOw");
            viewString.Append("nerContactID], \r\n            T.VersionOwnerCompanyID AS [X_DictionaryDefectConti");
            viewString.Append("nuity.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [X_DictionaryDef");
            viewString.Append("ectContinuity.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.D");
            viewString.Append("ictionaryDefectContinuities AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryDefectContinuity", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryDefectSpacing
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView107()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2682);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryDefectSpacing\r\n        [NKD.Modul");
            viewString.Append("e.BusinessObjects.Store.X_DictionaryDefectSpacing](T1.[X_DictionaryDefectSpacing");
            viewString.Append(".DefectSpacingID], T1.[X_DictionaryDefectSpacing.StandardDefectSpacingName], T1.");
            viewString.Append("[X_DictionaryDefectSpacing.CoalDefectSpacingName], T1.[X_DictionaryDefectSpacing");
            viewString.Append(".GoldDefectSpacingName], T1.[X_DictionaryDefectSpacing.CustomDefectSpacingName],");
            viewString.Append(" T1.[X_DictionaryDefectSpacing.Description], T1.[X_DictionaryDefectSpacing.FullD");
            viewString.Append("escription], T1.[X_DictionaryDefectSpacing.Thumbnail], T1.[X_DictionaryDefectSpa");
            viewString.Append("cing.OriginalFileDataID], T1.[X_DictionaryDefectSpacing.Version], T1.[X_Dictiona");
            viewString.Append("ryDefectSpacing.VersionAntecedentID], T1.[X_DictionaryDefectSpacing.VersionCerta");
            viewString.Append("inty], T1.[X_DictionaryDefectSpacing.VersionWorkflowInstanceID], T1.[X_Dictionar");
            viewString.Append("yDefectSpacing.VersionUpdatedBy], T1.[X_DictionaryDefectSpacing.VersionDeletedBy");
            viewString.Append("], T1.[X_DictionaryDefectSpacing.VersionOwnerContactID], T1.[X_DictionaryDefectS");
            viewString.Append("pacing.VersionOwnerCompanyID], T1.[X_DictionaryDefectSpacing.VersionUpdated])\r\n ");
            viewString.Append("   FROM (\r\n        SELECT \r\n            T.DefectSpacingID AS [X_DictionaryDefect");
            viewString.Append("Spacing.DefectSpacingID], \r\n            T.StandardDefectSpacingName AS [X_Dictio");
            viewString.Append("naryDefectSpacing.StandardDefectSpacingName], \r\n            T.CoalDefectSpacingN");
            viewString.Append("ame AS [X_DictionaryDefectSpacing.CoalDefectSpacingName], \r\n            T.GoldDe");
            viewString.Append("fectSpacingName AS [X_DictionaryDefectSpacing.GoldDefectSpacingName], \r\n        ");
            viewString.Append("    T.CustomDefectSpacingName AS [X_DictionaryDefectSpacing.CustomDefectSpacingN");
            viewString.Append("ame], \r\n            T.Description AS [X_DictionaryDefectSpacing.Description], \r\n");
            viewString.Append("            T.FullDescription AS [X_DictionaryDefectSpacing.FullDescription], \r\n");
            viewString.Append("            T.Thumbnail AS [X_DictionaryDefectSpacing.Thumbnail], \r\n            ");
            viewString.Append("T.OriginalFileDataID AS [X_DictionaryDefectSpacing.OriginalFileDataID], \r\n      ");
            viewString.Append("      T.Version AS [X_DictionaryDefectSpacing.Version], \r\n            T.VersionA");
            viewString.Append("ntecedentID AS [X_DictionaryDefectSpacing.VersionAntecedentID], \r\n            T.");
            viewString.Append("VersionCertainty AS [X_DictionaryDefectSpacing.VersionCertainty], \r\n            ");
            viewString.Append("T.VersionWorkflowInstanceID AS [X_DictionaryDefectSpacing.VersionWorkflowInstanc");
            viewString.Append("eID], \r\n            T.VersionUpdatedBy AS [X_DictionaryDefectSpacing.VersionUpda");
            viewString.Append("tedBy], \r\n            T.VersionDeletedBy AS [X_DictionaryDefectSpacing.VersionDe");
            viewString.Append("letedBy], \r\n            T.VersionOwnerContactID AS [X_DictionaryDefectSpacing.Ve");
            viewString.Append("rsionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [X_DictionaryDefe");
            viewString.Append("ctSpacing.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [X_Dictionar");
            viewString.Append("yDefectSpacing.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.");
            viewString.Append("DictionaryDefectSpacings AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryDefectSpacing", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryDefectType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView108()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2520);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryDefectType\r\n        [NKD.Module.B");
            viewString.Append("usinessObjects.Store.X_DictionaryDefectType](T1.[X_DictionaryDefectType.DefectTy");
            viewString.Append("peID], T1.[X_DictionaryDefectType.StandardDefectTypeName], T1.[X_DictionaryDefec");
            viewString.Append("tType.CoalDefectTypeName], T1.[X_DictionaryDefectType.GoldDefectTypeName], T1.[X");
            viewString.Append("_DictionaryDefectType.CustomDefectTypeName], T1.[X_DictionaryDefectType.Descript");
            viewString.Append("ion], T1.[X_DictionaryDefectType.FullDescription], T1.[X_DictionaryDefectType.Th");
            viewString.Append("umbnail], T1.[X_DictionaryDefectType.OriginalFileDataID], T1.[X_DictionaryDefect");
            viewString.Append("Type.Version], T1.[X_DictionaryDefectType.VersionAntecedentID], T1.[X_Dictionary");
            viewString.Append("DefectType.VersionCertainty], T1.[X_DictionaryDefectType.VersionWorkflowInstance");
            viewString.Append("ID], T1.[X_DictionaryDefectType.VersionUpdatedBy], T1.[X_DictionaryDefectType.Ve");
            viewString.Append("rsionDeletedBy], T1.[X_DictionaryDefectType.VersionOwnerContactID], T1.[X_Dictio");
            viewString.Append("naryDefectType.VersionOwnerCompanyID], T1.[X_DictionaryDefectType.VersionUpdated");
            viewString.Append("])\r\n    FROM (\r\n        SELECT \r\n            T.DefectTypeID AS [X_DictionaryDefe");
            viewString.Append("ctType.DefectTypeID], \r\n            T.StandardDefectTypeName AS [X_DictionaryDef");
            viewString.Append("ectType.StandardDefectTypeName], \r\n            T.CoalDefectTypeName AS [X_Dictio");
            viewString.Append("naryDefectType.CoalDefectTypeName], \r\n            T.GoldDefectTypeName AS [X_Dic");
            viewString.Append("tionaryDefectType.GoldDefectTypeName], \r\n            T.CustomDefectTypeName AS [");
            viewString.Append("X_DictionaryDefectType.CustomDefectTypeName], \r\n            T.Description AS [X_");
            viewString.Append("DictionaryDefectType.Description], \r\n            T.FullDescription AS [X_Diction");
            viewString.Append("aryDefectType.FullDescription], \r\n            T.Thumbnail AS [X_DictionaryDefect");
            viewString.Append("Type.Thumbnail], \r\n            T.OriginalFileDataID AS [X_DictionaryDefectType.O");
            viewString.Append("riginalFileDataID], \r\n            T.Version AS [X_DictionaryDefectType.Version],");
            viewString.Append(" \r\n            T.VersionAntecedentID AS [X_DictionaryDefectType.VersionAnteceden");
            viewString.Append("tID], \r\n            T.VersionCertainty AS [X_DictionaryDefectType.VersionCertain");
            viewString.Append("ty], \r\n            T.VersionWorkflowInstanceID AS [X_DictionaryDefectType.Versio");
            viewString.Append("nWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_DictionaryDefectTyp");
            viewString.Append("e.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_DictionaryDefectType");
            viewString.Append(".VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [X_DictionaryDefect");
            viewString.Append("Type.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [X_Diction");
            viewString.Append("aryDefectType.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [X_Dicti");
            viewString.Append("onaryDefectType.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC");
            viewString.Append(".DictionaryDefectTypes AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryDefectType", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryDesurveyAlgorithmType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView109()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3114);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryDesurveyAlgorithmType\r\n        [N");
            viewString.Append("KD.Module.BusinessObjects.Store.X_DictionaryDesurveyAlgorithmType](T1.[X_Diction");
            viewString.Append("aryDesurveyAlgorithmType.DesurveyAlgorithmTypeID], T1.[X_DictionaryDesurveyAlgor");
            viewString.Append("ithmType.StandardDesurveyAlgorithmTypeName], T1.[X_DictionaryDesurveyAlgorithmTy");
            viewString.Append("pe.CoalDesurveyAlgorithmTypeName], T1.[X_DictionaryDesurveyAlgorithmType.GoldDes");
            viewString.Append("urveyAlgorithmTypeName], T1.[X_DictionaryDesurveyAlgorithmType.CustomDesurveyAlg");
            viewString.Append("orithmTypeName], T1.[X_DictionaryDesurveyAlgorithmType.Description], T1.[X_Dicti");
            viewString.Append("onaryDesurveyAlgorithmType.FullDescription], T1.[X_DictionaryDesurveyAlgorithmTy");
            viewString.Append("pe.Thumbnail], T1.[X_DictionaryDesurveyAlgorithmType.OriginalFileDataID], T1.[X_");
            viewString.Append("DictionaryDesurveyAlgorithmType.Version], T1.[X_DictionaryDesurveyAlgorithmType.");
            viewString.Append("VersionAntecedentID], T1.[X_DictionaryDesurveyAlgorithmType.VersionCertainty], T");
            viewString.Append("1.[X_DictionaryDesurveyAlgorithmType.VersionWorkflowInstanceID], T1.[X_Dictionar");
            viewString.Append("yDesurveyAlgorithmType.VersionUpdatedBy], T1.[X_DictionaryDesurveyAlgorithmType.");
            viewString.Append("VersionDeletedBy], T1.[X_DictionaryDesurveyAlgorithmType.VersionOwnerContactID],");
            viewString.Append(" T1.[X_DictionaryDesurveyAlgorithmType.VersionOwnerCompanyID], T1.[X_DictionaryD");
            viewString.Append("esurveyAlgorithmType.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            ");
            viewString.Append("T.DesurveyAlgorithmTypeID AS [X_DictionaryDesurveyAlgorithmType.DesurveyAlgorith");
            viewString.Append("mTypeID], \r\n            T.StandardDesurveyAlgorithmTypeName AS [X_DictionaryDesu");
            viewString.Append("rveyAlgorithmType.StandardDesurveyAlgorithmTypeName], \r\n            T.CoalDesurv");
            viewString.Append("eyAlgorithmTypeName AS [X_DictionaryDesurveyAlgorithmType.CoalDesurveyAlgorithmT");
            viewString.Append("ypeName], \r\n            T.GoldDesurveyAlgorithmTypeName AS [X_DictionaryDesurvey");
            viewString.Append("AlgorithmType.GoldDesurveyAlgorithmTypeName], \r\n            T.CustomDesurveyAlgo");
            viewString.Append("rithmTypeName AS [X_DictionaryDesurveyAlgorithmType.CustomDesurveyAlgorithmTypeN");
            viewString.Append("ame], \r\n            T.Description AS [X_DictionaryDesurveyAlgorithmType.Descript");
            viewString.Append("ion], \r\n            T.FullDescription AS [X_DictionaryDesurveyAlgorithmType.Full");
            viewString.Append("Description], \r\n            T.Thumbnail AS [X_DictionaryDesurveyAlgorithmType.Th");
            viewString.Append("umbnail], \r\n            T.OriginalFileDataID AS [X_DictionaryDesurveyAlgorithmTy");
            viewString.Append("pe.OriginalFileDataID], \r\n            T.Version AS [X_DictionaryDesurveyAlgorith");
            viewString.Append("mType.Version], \r\n            T.VersionAntecedentID AS [X_DictionaryDesurveyAlgo");
            viewString.Append("rithmType.VersionAntecedentID], \r\n            T.VersionCertainty AS [X_Dictionar");
            viewString.Append("yDesurveyAlgorithmType.VersionCertainty], \r\n            T.VersionWorkflowInstanc");
            viewString.Append("eID AS [X_DictionaryDesurveyAlgorithmType.VersionWorkflowInstanceID], \r\n        ");
            viewString.Append("    T.VersionUpdatedBy AS [X_DictionaryDesurveyAlgorithmType.VersionUpdatedBy], ");
            viewString.Append("\r\n            T.VersionDeletedBy AS [X_DictionaryDesurveyAlgorithmType.VersionDe");
            viewString.Append("letedBy], \r\n            T.VersionOwnerContactID AS [X_DictionaryDesurveyAlgorith");
            viewString.Append("mType.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [X_Dictio");
            viewString.Append("naryDesurveyAlgorithmType.VersionOwnerCompanyID], \r\n            T.VersionUpdated");
            viewString.Append(" AS [X_DictionaryDesurveyAlgorithmType.VersionUpdated], \r\n            True AS _f");
            viewString.Append("rom0\r\n        FROM NKDC.DictionaryDesurveyAlgorithmTypes AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryDesurveyAlgorithmType", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryDimension
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView110()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2580);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryDimension\r\n        [NKD.Module.Bu");
            viewString.Append("sinessObjects.Store.X_DictionaryDimension](T1.[X_DictionaryDimension.DimensionID");
            viewString.Append("], T1.[X_DictionaryDimension.DimensionGUID], T1.[X_DictionaryDimension.StandardD");
            viewString.Append("imensionName], T1.[X_DictionaryDimension.CoalDimensionName], T1.[X_DictionaryDim");
            viewString.Append("ension.GoldDimensionName], T1.[X_DictionaryDimension.CustomDimensionName], T1.[X");
            viewString.Append("_DictionaryDimension.Description], T1.[X_DictionaryDimension.FullDescription], T");
            viewString.Append("1.[X_DictionaryDimension.Thumbnail], T1.[X_DictionaryDimension.OriginalFileDataI");
            viewString.Append("D], T1.[X_DictionaryDimension.Version], T1.[X_DictionaryDimension.VersionAnteced");
            viewString.Append("entID], T1.[X_DictionaryDimension.VersionCertainty], T1.[X_DictionaryDimension.V");
            viewString.Append("ersionWorkflowInstanceID], T1.[X_DictionaryDimension.VersionUpdatedBy], T1.[X_Di");
            viewString.Append("ctionaryDimension.VersionDeletedBy], T1.[X_DictionaryDimension.VersionOwnerConta");
            viewString.Append("ctID], T1.[X_DictionaryDimension.VersionOwnerCompanyID], T1.[X_DictionaryDimensi");
            viewString.Append("on.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.DimensionID AS [");
            viewString.Append("X_DictionaryDimension.DimensionID], \r\n            T.DimensionGUID AS [X_Dictiona");
            viewString.Append("ryDimension.DimensionGUID], \r\n            T.StandardDimensionName AS [X_Dictiona");
            viewString.Append("ryDimension.StandardDimensionName], \r\n            T.CoalDimensionName AS [X_Dict");
            viewString.Append("ionaryDimension.CoalDimensionName], \r\n            T.GoldDimensionName AS [X_Dict");
            viewString.Append("ionaryDimension.GoldDimensionName], \r\n            T.CustomDimensionName AS [X_Di");
            viewString.Append("ctionaryDimension.CustomDimensionName], \r\n            T.Description AS [X_Dictio");
            viewString.Append("naryDimension.Description], \r\n            T.FullDescription AS [X_DictionaryDime");
            viewString.Append("nsion.FullDescription], \r\n            T.Thumbnail AS [X_DictionaryDimension.Thum");
            viewString.Append("bnail], \r\n            T.OriginalFileDataID AS [X_DictionaryDimension.OriginalFil");
            viewString.Append("eDataID], \r\n            T.Version AS [X_DictionaryDimension.Version], \r\n        ");
            viewString.Append("    T.VersionAntecedentID AS [X_DictionaryDimension.VersionAntecedentID], \r\n    ");
            viewString.Append("        T.VersionCertainty AS [X_DictionaryDimension.VersionCertainty], \r\n      ");
            viewString.Append("      T.VersionWorkflowInstanceID AS [X_DictionaryDimension.VersionWorkflowInsta");
            viewString.Append("nceID], \r\n            T.VersionUpdatedBy AS [X_DictionaryDimension.VersionUpdate");
            viewString.Append("dBy], \r\n            T.VersionDeletedBy AS [X_DictionaryDimension.VersionDeletedB");
            viewString.Append("y], \r\n            T.VersionOwnerContactID AS [X_DictionaryDimension.VersionOwner");
            viewString.Append("ContactID], \r\n            T.VersionOwnerCompanyID AS [X_DictionaryDimension.Vers");
            viewString.Append("ionOwnerCompanyID], \r\n            T.VersionUpdated AS [X_DictionaryDimension.Ver");
            viewString.Append("sionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.DictionaryDimensio");
            viewString.Append("ns AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryDimension", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryDipOrientationMethod
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView111()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3060);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryDipOrientationMethod\r\n        [NK");
            viewString.Append("D.Module.BusinessObjects.Store.X_DictionaryDipOrientationMethod](T1.[X_Dictionar");
            viewString.Append("yDipOrientationMethod.DipOrientationMethodID], T1.[X_DictionaryDipOrientationMet");
            viewString.Append("hod.StandardDipOrientationMethodName], T1.[X_DictionaryDipOrientationMethod.Coal");
            viewString.Append("DipOrientationMethodName], T1.[X_DictionaryDipOrientationMethod.GoldDipOrientati");
            viewString.Append("onMethodName], T1.[X_DictionaryDipOrientationMethod.CustomDipOrientationMethodNa");
            viewString.Append("me], T1.[X_DictionaryDipOrientationMethod.Description], T1.[X_DictionaryDipOrien");
            viewString.Append("tationMethod.FullDescription], T1.[X_DictionaryDipOrientationMethod.Thumbnail], ");
            viewString.Append("T1.[X_DictionaryDipOrientationMethod.OriginalFileDataID], T1.[X_DictionaryDipOri");
            viewString.Append("entationMethod.Version], T1.[X_DictionaryDipOrientationMethod.VersionAntecedentI");
            viewString.Append("D], T1.[X_DictionaryDipOrientationMethod.VersionCertainty], T1.[X_DictionaryDipO");
            viewString.Append("rientationMethod.VersionWorkflowInstanceID], T1.[X_DictionaryDipOrientationMetho");
            viewString.Append("d.VersionUpdatedBy], T1.[X_DictionaryDipOrientationMethod.VersionDeletedBy], T1.");
            viewString.Append("[X_DictionaryDipOrientationMethod.VersionOwnerContactID], T1.[X_DictionaryDipOri");
            viewString.Append("entationMethod.VersionOwnerCompanyID], T1.[X_DictionaryDipOrientationMethod.Vers");
            viewString.Append("ionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.DipOrientationMethodID ");
            viewString.Append("AS [X_DictionaryDipOrientationMethod.DipOrientationMethodID], \r\n            T.St");
            viewString.Append("andardDipOrientationMethodName AS [X_DictionaryDipOrientationMethod.StandardDipO");
            viewString.Append("rientationMethodName], \r\n            T.CoalDipOrientationMethodName AS [X_Dictio");
            viewString.Append("naryDipOrientationMethod.CoalDipOrientationMethodName], \r\n            T.GoldDipO");
            viewString.Append("rientationMethodName AS [X_DictionaryDipOrientationMethod.GoldDipOrientationMeth");
            viewString.Append("odName], \r\n            T.CustomDipOrientationMethodName AS [X_DictionaryDipOrien");
            viewString.Append("tationMethod.CustomDipOrientationMethodName], \r\n            T.Description AS [X_");
            viewString.Append("DictionaryDipOrientationMethod.Description], \r\n            T.FullDescription AS ");
            viewString.Append("[X_DictionaryDipOrientationMethod.FullDescription], \r\n            T.Thumbnail AS");
            viewString.Append(" [X_DictionaryDipOrientationMethod.Thumbnail], \r\n            T.OriginalFileDataI");
            viewString.Append("D AS [X_DictionaryDipOrientationMethod.OriginalFileDataID], \r\n            T.Vers");
            viewString.Append("ion AS [X_DictionaryDipOrientationMethod.Version], \r\n            T.VersionAntece");
            viewString.Append("dentID AS [X_DictionaryDipOrientationMethod.VersionAntecedentID], \r\n            ");
            viewString.Append("T.VersionCertainty AS [X_DictionaryDipOrientationMethod.VersionCertainty], \r\n   ");
            viewString.Append("         T.VersionWorkflowInstanceID AS [X_DictionaryDipOrientationMethod.Versio");
            viewString.Append("nWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_DictionaryDipOrient");
            viewString.Append("ationMethod.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_Dictionary");
            viewString.Append("DipOrientationMethod.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS");
            viewString.Append(" [X_DictionaryDipOrientationMethod.VersionOwnerContactID], \r\n            T.Versi");
            viewString.Append("onOwnerCompanyID AS [X_DictionaryDipOrientationMethod.VersionOwnerCompanyID], \r\n");
            viewString.Append("            T.VersionUpdated AS [X_DictionaryDipOrientationMethod.VersionUpdated");
            viewString.Append("], \r\n            True AS _from0\r\n        FROM NKDC.DictionaryDipOrientationMetho");
            viewString.Append("ds AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryDipOrientationMethod", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryDomain
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView112()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryDomain", "\r\n    SELECT VALUE -- Constructing X_DictionaryDomain\r\n        [NKD.Module.Busine" +
                    "ssObjects.Store.X_DictionaryDomain](T1.[X_DictionaryDomain.DomainID], T1.[X_Dict" +
                    "ionaryDomain.StandardDomainName], T1.[X_DictionaryDomain.Description], T1.[X_Dic" +
                    "tionaryDomain.FullDescription], T1.[X_DictionaryDomain.Thumbnail], T1.[X_Diction" +
                    "aryDomain.OriginalFileDataID], T1.[X_DictionaryDomain.Version], T1.[X_Dictionary" +
                    "Domain.VersionAntecedentID], T1.[X_DictionaryDomain.VersionCertainty], T1.[X_Dic" +
                    "tionaryDomain.VersionWorkflowInstanceID], T1.[X_DictionaryDomain.VersionUpdatedB" +
                    "y], T1.[X_DictionaryDomain.VersionDeletedBy], T1.[X_DictionaryDomain.VersionOwne" +
                    "rContactID], T1.[X_DictionaryDomain.VersionOwnerCompanyID], T1.[X_DictionaryDoma" +
                    "in.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.DomainID AS [X_D" +
                    "ictionaryDomain.DomainID], \r\n            T.StandardDomainName AS [X_DictionaryDo" +
                    "main.StandardDomainName], \r\n            T.Description AS [X_DictionaryDomain.Des" +
                    "cription], \r\n            T.FullDescription AS [X_DictionaryDomain.FullDescriptio" +
                    "n], \r\n            T.Thumbnail AS [X_DictionaryDomain.Thumbnail], \r\n            T" +
                    ".OriginalFileDataID AS [X_DictionaryDomain.OriginalFileDataID], \r\n            T." +
                    "Version AS [X_DictionaryDomain.Version], \r\n            T.VersionAntecedentID AS " +
                    "[X_DictionaryDomain.VersionAntecedentID], \r\n            T.VersionCertainty AS [X" +
                    "_DictionaryDomain.VersionCertainty], \r\n            T.VersionWorkflowInstanceID A" +
                    "S [X_DictionaryDomain.VersionWorkflowInstanceID], \r\n            T.VersionUpdated" +
                    "By AS [X_DictionaryDomain.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS" +
                    " [X_DictionaryDomain.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS" +
                    " [X_DictionaryDomain.VersionOwnerContactID], \r\n            T.VersionOwnerCompany" +
                    "ID AS [X_DictionaryDomain.VersionOwnerCompanyID], \r\n            T.VersionUpdated" +
                    " AS [X_DictionaryDomain.VersionUpdated], \r\n            True AS _from0\r\n        F" +
                    "ROM NKDC.DictionaryDomains AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryDomainAlias
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView113()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2129);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryDomainAlias\r\n        [NKD.Module.");
            viewString.Append("BusinessObjects.Store.X_DictionaryDomainAlias](T1.[X_DictionaryDomainAlias.Domai");
            viewString.Append("nAliasID], T1.[X_DictionaryDomainAlias.DomainID], T1.[X_DictionaryDomainAlias.Cu");
            viewString.Append("stomDomainName], T1.[X_DictionaryDomainAlias.FullDescription], T1.[X_DictionaryD");
            viewString.Append("omainAlias.Thumbnail], T1.[X_DictionaryDomainAlias.OriginalFileDataID], T1.[X_Di");
            viewString.Append("ctionaryDomainAlias.Version], T1.[X_DictionaryDomainAlias.VersionAntecedentID], ");
            viewString.Append("T1.[X_DictionaryDomainAlias.VersionCertainty], T1.[X_DictionaryDomainAlias.Versi");
            viewString.Append("onWorkflowInstanceID], T1.[X_DictionaryDomainAlias.VersionUpdatedBy], T1.[X_Dict");
            viewString.Append("ionaryDomainAlias.VersionDeletedBy], T1.[X_DictionaryDomainAlias.VersionOwnerCon");
            viewString.Append("tactID], T1.[X_DictionaryDomainAlias.VersionOwnerCompanyID], T1.[X_DictionaryDom");
            viewString.Append("ainAlias.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.DomainAlia");
            viewString.Append("sID AS [X_DictionaryDomainAlias.DomainAliasID], \r\n            T.DomainID AS [X_D");
            viewString.Append("ictionaryDomainAlias.DomainID], \r\n            T.CustomDomainName AS [X_Dictionar");
            viewString.Append("yDomainAlias.CustomDomainName], \r\n            T.FullDescription AS [X_Dictionary");
            viewString.Append("DomainAlias.FullDescription], \r\n            T.Thumbnail AS [X_DictionaryDomainAl");
            viewString.Append("ias.Thumbnail], \r\n            T.OriginalFileDataID AS [X_DictionaryDomainAlias.O");
            viewString.Append("riginalFileDataID], \r\n            T.Version AS [X_DictionaryDomainAlias.Version]");
            viewString.Append(", \r\n            T.VersionAntecedentID AS [X_DictionaryDomainAlias.VersionAnteced");
            viewString.Append("entID], \r\n            T.VersionCertainty AS [X_DictionaryDomainAlias.VersionCert");
            viewString.Append("ainty], \r\n            T.VersionWorkflowInstanceID AS [X_DictionaryDomainAlias.Ve");
            viewString.Append("rsionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_DictionaryDomai");
            viewString.Append("nAlias.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_DictionaryDomai");
            viewString.Append("nAlias.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [X_Dictionary");
            viewString.Append("DomainAlias.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [X_");
            viewString.Append("DictionaryDomainAlias.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS ");
            viewString.Append("[X_DictionaryDomainAlias.VersionUpdated], \r\n            True AS _from0\r\n        ");
            viewString.Append("FROM NKDC.DictionaryDomainAlias AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryDomainAlias", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryDrillBitType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView114()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2628);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryDrillBitType\r\n        [NKD.Module");
            viewString.Append(".BusinessObjects.Store.X_DictionaryDrillBitType](T1.[X_DictionaryDrillBitType.Dr");
            viewString.Append("illBitTypeID], T1.[X_DictionaryDrillBitType.StandardDrillBitTypeName], T1.[X_Dic");
            viewString.Append("tionaryDrillBitType.CoalDrillBitTypeName], T1.[X_DictionaryDrillBitType.GoldDril");
            viewString.Append("lBitTypeName], T1.[X_DictionaryDrillBitType.CustomDrillBitTypeName], T1.[X_Dicti");
            viewString.Append("onaryDrillBitType.Description], T1.[X_DictionaryDrillBitType.FullDescription], T");
            viewString.Append("1.[X_DictionaryDrillBitType.Thumbnail], T1.[X_DictionaryDrillBitType.OriginalFil");
            viewString.Append("eDataID], T1.[X_DictionaryDrillBitType.Version], T1.[X_DictionaryDrillBitType.Ve");
            viewString.Append("rsionAntecedentID], T1.[X_DictionaryDrillBitType.VersionCertainty], T1.[X_Dictio");
            viewString.Append("naryDrillBitType.VersionWorkflowInstanceID], T1.[X_DictionaryDrillBitType.Versio");
            viewString.Append("nUpdatedBy], T1.[X_DictionaryDrillBitType.VersionDeletedBy], T1.[X_DictionaryDri");
            viewString.Append("llBitType.VersionOwnerContactID], T1.[X_DictionaryDrillBitType.VersionOwnerCompa");
            viewString.Append("nyID], T1.[X_DictionaryDrillBitType.VersionUpdated])\r\n    FROM (\r\n        SELECT");
            viewString.Append(" \r\n            T.DrillBitTypeID AS [X_DictionaryDrillBitType.DrillBitTypeID], \r\n");
            viewString.Append("            T.StandardDrillBitTypeName AS [X_DictionaryDrillBitType.StandardDril");
            viewString.Append("lBitTypeName], \r\n            T.CoalDrillBitTypeName AS [X_DictionaryDrillBitType");
            viewString.Append(".CoalDrillBitTypeName], \r\n            T.GoldDrillBitTypeName AS [X_DictionaryDri");
            viewString.Append("llBitType.GoldDrillBitTypeName], \r\n            T.CustomDrillBitTypeName AS [X_Di");
            viewString.Append("ctionaryDrillBitType.CustomDrillBitTypeName], \r\n            T.Description AS [X_");
            viewString.Append("DictionaryDrillBitType.Description], \r\n            T.FullDescription AS [X_Dicti");
            viewString.Append("onaryDrillBitType.FullDescription], \r\n            T.Thumbnail AS [X_DictionaryDr");
            viewString.Append("illBitType.Thumbnail], \r\n            T.OriginalFileDataID AS [X_DictionaryDrillB");
            viewString.Append("itType.OriginalFileDataID], \r\n            T.Version AS [X_DictionaryDrillBitType");
            viewString.Append(".Version], \r\n            T.VersionAntecedentID AS [X_DictionaryDrillBitType.Vers");
            viewString.Append("ionAntecedentID], \r\n            T.VersionCertainty AS [X_DictionaryDrillBitType.");
            viewString.Append("VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [X_DictionaryDri");
            viewString.Append("llBitType.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_Dic");
            viewString.Append("tionaryDrillBitType.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_Di");
            viewString.Append("ctionaryDrillBitType.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS");
            viewString.Append(" [X_DictionaryDrillBitType.VersionOwnerContactID], \r\n            T.VersionOwnerC");
            viewString.Append("ompanyID AS [X_DictionaryDrillBitType.VersionOwnerCompanyID], \r\n            T.Ve");
            viewString.Append("rsionUpdated AS [X_DictionaryDrillBitType.VersionUpdated], \r\n            True AS");
            viewString.Append(" _from0\r\n        FROM NKDC.DictionaryDrillBitTypes AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryDrillBitType", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryDrillCasingType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView115()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2790);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryDrillCasingType\r\n        [NKD.Mod");
            viewString.Append("ule.BusinessObjects.Store.X_DictionaryDrillCasingType](T1.[X_DictionaryDrillCasi");
            viewString.Append("ngType.DrillCasingTypeID], T1.[X_DictionaryDrillCasingType.StandardDrillCasingTy");
            viewString.Append("peName], T1.[X_DictionaryDrillCasingType.CoalDrillCasingTypeName], T1.[X_Diction");
            viewString.Append("aryDrillCasingType.GoldDrillCasingTypeName], T1.[X_DictionaryDrillCasingType.Cus");
            viewString.Append("tomDrillCasingTypeName], T1.[X_DictionaryDrillCasingType.Description], T1.[X_Dic");
            viewString.Append("tionaryDrillCasingType.FullDescription], T1.[X_DictionaryDrillCasingType.Thumbna");
            viewString.Append("il], T1.[X_DictionaryDrillCasingType.OriginalFileDataID], T1.[X_DictionaryDrillC");
            viewString.Append("asingType.Version], T1.[X_DictionaryDrillCasingType.VersionAntecedentID], T1.[X_");
            viewString.Append("DictionaryDrillCasingType.VersionCertainty], T1.[X_DictionaryDrillCasingType.Ver");
            viewString.Append("sionWorkflowInstanceID], T1.[X_DictionaryDrillCasingType.VersionUpdatedBy], T1.[");
            viewString.Append("X_DictionaryDrillCasingType.VersionDeletedBy], T1.[X_DictionaryDrillCasingType.V");
            viewString.Append("ersionOwnerContactID], T1.[X_DictionaryDrillCasingType.VersionOwnerCompanyID], T");
            viewString.Append("1.[X_DictionaryDrillCasingType.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n  ");
            viewString.Append("          T.DrillCasingTypeID AS [X_DictionaryDrillCasingType.DrillCasingTypeID]");
            viewString.Append(", \r\n            T.StandardDrillCasingTypeName AS [X_DictionaryDrillCasingType.St");
            viewString.Append("andardDrillCasingTypeName], \r\n            T.CoalDrillCasingTypeName AS [X_Dictio");
            viewString.Append("naryDrillCasingType.CoalDrillCasingTypeName], \r\n            T.GoldDrillCasingTyp");
            viewString.Append("eName AS [X_DictionaryDrillCasingType.GoldDrillCasingTypeName], \r\n            T.");
            viewString.Append("CustomDrillCasingTypeName AS [X_DictionaryDrillCasingType.CustomDrillCasingTypeN");
            viewString.Append("ame], \r\n            T.Description AS [X_DictionaryDrillCasingType.Description], ");
            viewString.Append("\r\n            T.FullDescription AS [X_DictionaryDrillCasingType.FullDescription]");
            viewString.Append(", \r\n            T.Thumbnail AS [X_DictionaryDrillCasingType.Thumbnail], \r\n      ");
            viewString.Append("      T.OriginalFileDataID AS [X_DictionaryDrillCasingType.OriginalFileDataID], ");
            viewString.Append("\r\n            T.Version AS [X_DictionaryDrillCasingType.Version], \r\n            ");
            viewString.Append("T.VersionAntecedentID AS [X_DictionaryDrillCasingType.VersionAntecedentID], \r\n  ");
            viewString.Append("          T.VersionCertainty AS [X_DictionaryDrillCasingType.VersionCertainty], ");
            viewString.Append("\r\n            T.VersionWorkflowInstanceID AS [X_DictionaryDrillCasingType.Versio");
            viewString.Append("nWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_DictionaryDrillCasi");
            viewString.Append("ngType.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_DictionaryDrill");
            viewString.Append("CasingType.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [X_Dictio");
            viewString.Append("naryDrillCasingType.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyI");
            viewString.Append("D AS [X_DictionaryDrillCasingType.VersionOwnerCompanyID], \r\n            T.Versio");
            viewString.Append("nUpdated AS [X_DictionaryDrillCasingType.VersionUpdated], \r\n            True AS ");
            viewString.Append("_from0\r\n        FROM NKDC.DictionaryDrillCasingTypes AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryDrillCasingType", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryDrillFluid
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView116()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2520);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryDrillFluid\r\n        [NKD.Module.B");
            viewString.Append("usinessObjects.Store.X_DictionaryDrillFluid](T1.[X_DictionaryDrillFluid.DrillFlu");
            viewString.Append("idID], T1.[X_DictionaryDrillFluid.StandardDrillFluidName], T1.[X_DictionaryDrill");
            viewString.Append("Fluid.CoalDrillFluidName], T1.[X_DictionaryDrillFluid.GoldDrillFluidName], T1.[X");
            viewString.Append("_DictionaryDrillFluid.CustomDrillFluidName], T1.[X_DictionaryDrillFluid.Descript");
            viewString.Append("ion], T1.[X_DictionaryDrillFluid.FullDescription], T1.[X_DictionaryDrillFluid.Th");
            viewString.Append("umbnail], T1.[X_DictionaryDrillFluid.OriginalFileDataID], T1.[X_DictionaryDrillF");
            viewString.Append("luid.Version], T1.[X_DictionaryDrillFluid.VersionAntecedentID], T1.[X_Dictionary");
            viewString.Append("DrillFluid.VersionCertainty], T1.[X_DictionaryDrillFluid.VersionWorkflowInstance");
            viewString.Append("ID], T1.[X_DictionaryDrillFluid.VersionUpdatedBy], T1.[X_DictionaryDrillFluid.Ve");
            viewString.Append("rsionDeletedBy], T1.[X_DictionaryDrillFluid.VersionOwnerContactID], T1.[X_Dictio");
            viewString.Append("naryDrillFluid.VersionOwnerCompanyID], T1.[X_DictionaryDrillFluid.VersionUpdated");
            viewString.Append("])\r\n    FROM (\r\n        SELECT \r\n            T.DrillFluidID AS [X_DictionaryDril");
            viewString.Append("lFluid.DrillFluidID], \r\n            T.StandardDrillFluidName AS [X_DictionaryDri");
            viewString.Append("llFluid.StandardDrillFluidName], \r\n            T.CoalDrillFluidName AS [X_Dictio");
            viewString.Append("naryDrillFluid.CoalDrillFluidName], \r\n            T.GoldDrillFluidName AS [X_Dic");
            viewString.Append("tionaryDrillFluid.GoldDrillFluidName], \r\n            T.CustomDrillFluidName AS [");
            viewString.Append("X_DictionaryDrillFluid.CustomDrillFluidName], \r\n            T.Description AS [X_");
            viewString.Append("DictionaryDrillFluid.Description], \r\n            T.FullDescription AS [X_Diction");
            viewString.Append("aryDrillFluid.FullDescription], \r\n            T.Thumbnail AS [X_DictionaryDrillF");
            viewString.Append("luid.Thumbnail], \r\n            T.OriginalFileDataID AS [X_DictionaryDrillFluid.O");
            viewString.Append("riginalFileDataID], \r\n            T.Version AS [X_DictionaryDrillFluid.Version],");
            viewString.Append(" \r\n            T.VersionAntecedentID AS [X_DictionaryDrillFluid.VersionAnteceden");
            viewString.Append("tID], \r\n            T.VersionCertainty AS [X_DictionaryDrillFluid.VersionCertain");
            viewString.Append("ty], \r\n            T.VersionWorkflowInstanceID AS [X_DictionaryDrillFluid.Versio");
            viewString.Append("nWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_DictionaryDrillFlui");
            viewString.Append("d.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_DictionaryDrillFluid");
            viewString.Append(".VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [X_DictionaryDrillF");
            viewString.Append("luid.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [X_Diction");
            viewString.Append("aryDrillFluid.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [X_Dicti");
            viewString.Append("onaryDrillFluid.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC");
            viewString.Append(".DictionaryDrillFluids AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryDrillFluid", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryDrillRigType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView117()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2628);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryDrillRigType\r\n        [NKD.Module");
            viewString.Append(".BusinessObjects.Store.X_DictionaryDrillRigType](T1.[X_DictionaryDrillRigType.Dr");
            viewString.Append("illRigTypeID], T1.[X_DictionaryDrillRigType.StandardDrillRigTypeName], T1.[X_Dic");
            viewString.Append("tionaryDrillRigType.CoalDrillRigTypeName], T1.[X_DictionaryDrillRigType.GoldDril");
            viewString.Append("lRigTypeName], T1.[X_DictionaryDrillRigType.CustomDrillRigTypeName], T1.[X_Dicti");
            viewString.Append("onaryDrillRigType.Description], T1.[X_DictionaryDrillRigType.FullDescription], T");
            viewString.Append("1.[X_DictionaryDrillRigType.Thumbnail], T1.[X_DictionaryDrillRigType.OriginalFil");
            viewString.Append("eDataID], T1.[X_DictionaryDrillRigType.Version], T1.[X_DictionaryDrillRigType.Ve");
            viewString.Append("rsionAntecedentID], T1.[X_DictionaryDrillRigType.VersionCertainty], T1.[X_Dictio");
            viewString.Append("naryDrillRigType.VersionWorkflowInstanceID], T1.[X_DictionaryDrillRigType.Versio");
            viewString.Append("nUpdatedBy], T1.[X_DictionaryDrillRigType.VersionDeletedBy], T1.[X_DictionaryDri");
            viewString.Append("llRigType.VersionOwnerContactID], T1.[X_DictionaryDrillRigType.VersionOwnerCompa");
            viewString.Append("nyID], T1.[X_DictionaryDrillRigType.VersionUpdated])\r\n    FROM (\r\n        SELECT");
            viewString.Append(" \r\n            T.DrillRigTypeID AS [X_DictionaryDrillRigType.DrillRigTypeID], \r\n");
            viewString.Append("            T.StandardDrillRigTypeName AS [X_DictionaryDrillRigType.StandardDril");
            viewString.Append("lRigTypeName], \r\n            T.CoalDrillRigTypeName AS [X_DictionaryDrillRigType");
            viewString.Append(".CoalDrillRigTypeName], \r\n            T.GoldDrillRigTypeName AS [X_DictionaryDri");
            viewString.Append("llRigType.GoldDrillRigTypeName], \r\n            T.CustomDrillRigTypeName AS [X_Di");
            viewString.Append("ctionaryDrillRigType.CustomDrillRigTypeName], \r\n            T.Description AS [X_");
            viewString.Append("DictionaryDrillRigType.Description], \r\n            T.FullDescription AS [X_Dicti");
            viewString.Append("onaryDrillRigType.FullDescription], \r\n            T.Thumbnail AS [X_DictionaryDr");
            viewString.Append("illRigType.Thumbnail], \r\n            T.OriginalFileDataID AS [X_DictionaryDrillR");
            viewString.Append("igType.OriginalFileDataID], \r\n            T.Version AS [X_DictionaryDrillRigType");
            viewString.Append(".Version], \r\n            T.VersionAntecedentID AS [X_DictionaryDrillRigType.Vers");
            viewString.Append("ionAntecedentID], \r\n            T.VersionCertainty AS [X_DictionaryDrillRigType.");
            viewString.Append("VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [X_DictionaryDri");
            viewString.Append("llRigType.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_Dic");
            viewString.Append("tionaryDrillRigType.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_Di");
            viewString.Append("ctionaryDrillRigType.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS");
            viewString.Append(" [X_DictionaryDrillRigType.VersionOwnerContactID], \r\n            T.VersionOwnerC");
            viewString.Append("ompanyID AS [X_DictionaryDrillRigType.VersionOwnerCompanyID], \r\n            T.Ve");
            viewString.Append("rsionUpdated AS [X_DictionaryDrillRigType.VersionUpdated], \r\n            True AS");
            viewString.Append(" _from0\r\n        FROM NKDC.DictionaryDrillRigTypes AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryDrillRigType", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryDrillSize
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView118()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2466);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryDrillSize\r\n        [NKD.Module.Bu");
            viewString.Append("sinessObjects.Store.X_DictionaryDrillSize](T1.[X_DictionaryDrillSize.DrillSizeID");
            viewString.Append("], T1.[X_DictionaryDrillSize.StandardDrillSizeName], T1.[X_DictionaryDrillSize.C");
            viewString.Append("oalDrillSizeName], T1.[X_DictionaryDrillSize.GoldDrillSizeName], T1.[X_Dictionar");
            viewString.Append("yDrillSize.CustomDrillSizeName], T1.[X_DictionaryDrillSize.Description], T1.[X_D");
            viewString.Append("ictionaryDrillSize.FullDescription], T1.[X_DictionaryDrillSize.Thumbnail], T1.[X");
            viewString.Append("_DictionaryDrillSize.OriginalFileDataID], T1.[X_DictionaryDrillSize.Version], T1");
            viewString.Append(".[X_DictionaryDrillSize.VersionAntecedentID], T1.[X_DictionaryDrillSize.VersionC");
            viewString.Append("ertainty], T1.[X_DictionaryDrillSize.VersionWorkflowInstanceID], T1.[X_Dictionar");
            viewString.Append("yDrillSize.VersionUpdatedBy], T1.[X_DictionaryDrillSize.VersionDeletedBy], T1.[X");
            viewString.Append("_DictionaryDrillSize.VersionOwnerContactID], T1.[X_DictionaryDrillSize.VersionOw");
            viewString.Append("nerCompanyID], T1.[X_DictionaryDrillSize.VersionUpdated])\r\n    FROM (\r\n        S");
            viewString.Append("ELECT \r\n            T.DrillSizeID AS [X_DictionaryDrillSize.DrillSizeID], \r\n    ");
            viewString.Append("        T.StandardDrillSizeName AS [X_DictionaryDrillSize.StandardDrillSizeName]");
            viewString.Append(", \r\n            T.CoalDrillSizeName AS [X_DictionaryDrillSize.CoalDrillSizeName]");
            viewString.Append(", \r\n            T.GoldDrillSizeName AS [X_DictionaryDrillSize.GoldDrillSizeName]");
            viewString.Append(", \r\n            T.CustomDrillSizeName AS [X_DictionaryDrillSize.CustomDrillSizeN");
            viewString.Append("ame], \r\n            T.Description AS [X_DictionaryDrillSize.Description], \r\n    ");
            viewString.Append("        T.FullDescription AS [X_DictionaryDrillSize.FullDescription], \r\n        ");
            viewString.Append("    T.Thumbnail AS [X_DictionaryDrillSize.Thumbnail], \r\n            T.OriginalFi");
            viewString.Append("leDataID AS [X_DictionaryDrillSize.OriginalFileDataID], \r\n            T.Version ");
            viewString.Append("AS [X_DictionaryDrillSize.Version], \r\n            T.VersionAntecedentID AS [X_Di");
            viewString.Append("ctionaryDrillSize.VersionAntecedentID], \r\n            T.VersionCertainty AS [X_D");
            viewString.Append("ictionaryDrillSize.VersionCertainty], \r\n            T.VersionWorkflowInstanceID ");
            viewString.Append("AS [X_DictionaryDrillSize.VersionWorkflowInstanceID], \r\n            T.VersionUpd");
            viewString.Append("atedBy AS [X_DictionaryDrillSize.VersionUpdatedBy], \r\n            T.VersionDelet");
            viewString.Append("edBy AS [X_DictionaryDrillSize.VersionDeletedBy], \r\n            T.VersionOwnerCo");
            viewString.Append("ntactID AS [X_DictionaryDrillSize.VersionOwnerContactID], \r\n            T.Versio");
            viewString.Append("nOwnerCompanyID AS [X_DictionaryDrillSize.VersionOwnerCompanyID], \r\n            ");
            viewString.Append("T.VersionUpdated AS [X_DictionaryDrillSize.VersionUpdated], \r\n            True A");
            viewString.Append("S _from0\r\n        FROM NKDC.DictionaryDrillSizes AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryDrillSize", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryEstimatedStrength
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView119()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2898);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryEstimatedStrength\r\n        [NKD.M");
            viewString.Append("odule.BusinessObjects.Store.X_DictionaryEstimatedStrength](T1.[X_DictionaryEstim");
            viewString.Append("atedStrength.EstimatedStrengthID], T1.[X_DictionaryEstimatedStrength.StandardEst");
            viewString.Append("imatedStrengthName], T1.[X_DictionaryEstimatedStrength.CoalEstimatedStrengthName");
            viewString.Append("], T1.[X_DictionaryEstimatedStrength.GoldEstimatedStrengthName], T1.[X_Dictionar");
            viewString.Append("yEstimatedStrength.CustomEstimatedStrengthName], T1.[X_DictionaryEstimatedStreng");
            viewString.Append("th.Description], T1.[X_DictionaryEstimatedStrength.FullDescription], T1.[X_Dicti");
            viewString.Append("onaryEstimatedStrength.Thumbnail], T1.[X_DictionaryEstimatedStrength.OriginalFil");
            viewString.Append("eDataID], T1.[X_DictionaryEstimatedStrength.Version], T1.[X_DictionaryEstimatedS");
            viewString.Append("trength.VersionAntecedentID], T1.[X_DictionaryEstimatedStrength.VersionCertainty");
            viewString.Append("], T1.[X_DictionaryEstimatedStrength.VersionWorkflowInstanceID], T1.[X_Dictionar");
            viewString.Append("yEstimatedStrength.VersionUpdatedBy], T1.[X_DictionaryEstimatedStrength.VersionD");
            viewString.Append("eletedBy], T1.[X_DictionaryEstimatedStrength.VersionOwnerContactID], T1.[X_Dicti");
            viewString.Append("onaryEstimatedStrength.VersionOwnerCompanyID], T1.[X_DictionaryEstimatedStrength");
            viewString.Append(".VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.EstimatedStrengthI");
            viewString.Append("D AS [X_DictionaryEstimatedStrength.EstimatedStrengthID], \r\n            T.Standa");
            viewString.Append("rdEstimatedStrengthName AS [X_DictionaryEstimatedStrength.StandardEstimatedStren");
            viewString.Append("gthName], \r\n            T.CoalEstimatedStrengthName AS [X_DictionaryEstimatedStr");
            viewString.Append("ength.CoalEstimatedStrengthName], \r\n            T.GoldEstimatedStrengthName AS [");
            viewString.Append("X_DictionaryEstimatedStrength.GoldEstimatedStrengthName], \r\n            T.Custom");
            viewString.Append("EstimatedStrengthName AS [X_DictionaryEstimatedStrength.CustomEstimatedStrengthN");
            viewString.Append("ame], \r\n            T.Description AS [X_DictionaryEstimatedStrength.Description]");
            viewString.Append(", \r\n            T.FullDescription AS [X_DictionaryEstimatedStrength.FullDescript");
            viewString.Append("ion], \r\n            T.Thumbnail AS [X_DictionaryEstimatedStrength.Thumbnail], \r\n");
            viewString.Append("            T.OriginalFileDataID AS [X_DictionaryEstimatedStrength.OriginalFileD");
            viewString.Append("ataID], \r\n            T.Version AS [X_DictionaryEstimatedStrength.Version], \r\n  ");
            viewString.Append("          T.VersionAntecedentID AS [X_DictionaryEstimatedStrength.VersionAnteced");
            viewString.Append("entID], \r\n            T.VersionCertainty AS [X_DictionaryEstimatedStrength.Versi");
            viewString.Append("onCertainty], \r\n            T.VersionWorkflowInstanceID AS [X_DictionaryEstimate");
            viewString.Append("dStrength.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_Dic");
            viewString.Append("tionaryEstimatedStrength.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS ");
            viewString.Append("[X_DictionaryEstimatedStrength.VersionDeletedBy], \r\n            T.VersionOwnerCo");
            viewString.Append("ntactID AS [X_DictionaryEstimatedStrength.VersionOwnerContactID], \r\n            ");
            viewString.Append("T.VersionOwnerCompanyID AS [X_DictionaryEstimatedStrength.VersionOwnerCompanyID]");
            viewString.Append(", \r\n            T.VersionUpdated AS [X_DictionaryEstimatedStrength.VersionUpdate");
            viewString.Append("d], \r\n            True AS _from0\r\n        FROM NKDC.DictionaryEstimatedStrengths");
            viewString.Append(" AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryEstimatedStrength", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryFailureMode
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView120()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2574);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryFailureMode\r\n        [NKD.Module.");
            viewString.Append("BusinessObjects.Store.X_DictionaryFailureMode](T1.[X_DictionaryFailureMode.Failu");
            viewString.Append("reModeID], T1.[X_DictionaryFailureMode.StandardFailureModeName], T1.[X_Dictionar");
            viewString.Append("yFailureMode.CoalFailureModeName], T1.[X_DictionaryFailureMode.GoldFailureModeNa");
            viewString.Append("me], T1.[X_DictionaryFailureMode.CustomFailureModeName], T1.[X_DictionaryFailure");
            viewString.Append("Mode.Description], T1.[X_DictionaryFailureMode.FullDescription], T1.[X_Dictionar");
            viewString.Append("yFailureMode.Thumbnail], T1.[X_DictionaryFailureMode.OriginalFileDataID], T1.[X_");
            viewString.Append("DictionaryFailureMode.Version], T1.[X_DictionaryFailureMode.VersionAntecedentID]");
            viewString.Append(", T1.[X_DictionaryFailureMode.VersionCertainty], T1.[X_DictionaryFailureMode.Ver");
            viewString.Append("sionWorkflowInstanceID], T1.[X_DictionaryFailureMode.VersionUpdatedBy], T1.[X_Di");
            viewString.Append("ctionaryFailureMode.VersionDeletedBy], T1.[X_DictionaryFailureMode.VersionOwnerC");
            viewString.Append("ontactID], T1.[X_DictionaryFailureMode.VersionOwnerCompanyID], T1.[X_DictionaryF");
            viewString.Append("ailureMode.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.FailureM");
            viewString.Append("odeID AS [X_DictionaryFailureMode.FailureModeID], \r\n            T.StandardFailur");
            viewString.Append("eModeName AS [X_DictionaryFailureMode.StandardFailureModeName], \r\n            T.");
            viewString.Append("CoalFailureModeName AS [X_DictionaryFailureMode.CoalFailureModeName], \r\n        ");
            viewString.Append("    T.GoldFailureModeName AS [X_DictionaryFailureMode.GoldFailureModeName], \r\n  ");
            viewString.Append("          T.CustomFailureModeName AS [X_DictionaryFailureMode.CustomFailureModeN");
            viewString.Append("ame], \r\n            T.Description AS [X_DictionaryFailureMode.Description], \r\n  ");
            viewString.Append("          T.FullDescription AS [X_DictionaryFailureMode.FullDescription], \r\n    ");
            viewString.Append("        T.Thumbnail AS [X_DictionaryFailureMode.Thumbnail], \r\n            T.Orig");
            viewString.Append("inalFileDataID AS [X_DictionaryFailureMode.OriginalFileDataID], \r\n            T.");
            viewString.Append("Version AS [X_DictionaryFailureMode.Version], \r\n            T.VersionAntecedentI");
            viewString.Append("D AS [X_DictionaryFailureMode.VersionAntecedentID], \r\n            T.VersionCerta");
            viewString.Append("inty AS [X_DictionaryFailureMode.VersionCertainty], \r\n            T.VersionWorkf");
            viewString.Append("lowInstanceID AS [X_DictionaryFailureMode.VersionWorkflowInstanceID], \r\n        ");
            viewString.Append("    T.VersionUpdatedBy AS [X_DictionaryFailureMode.VersionUpdatedBy], \r\n        ");
            viewString.Append("    T.VersionDeletedBy AS [X_DictionaryFailureMode.VersionDeletedBy], \r\n        ");
            viewString.Append("    T.VersionOwnerContactID AS [X_DictionaryFailureMode.VersionOwnerContactID], ");
            viewString.Append("\r\n            T.VersionOwnerCompanyID AS [X_DictionaryFailureMode.VersionOwnerCo");
            viewString.Append("mpanyID], \r\n            T.VersionUpdated AS [X_DictionaryFailureMode.VersionUpda");
            viewString.Append("ted], \r\n            True AS _from0\r\n        FROM NKDC.DictionaryFailureModes AS ");
            viewString.Append("T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryFailureMode", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryFileType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView121()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2391);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryFileType\r\n        [NKD.Module.Bus");
            viewString.Append("inessObjects.Store.X_DictionaryFileType](T1.[X_DictionaryFileType.FileTypeID], T");
            viewString.Append("1.[X_DictionaryFileType.ParentFileTypeID], T1.[X_DictionaryFileType.CompanyID], ");
            viewString.Append("T1.[X_DictionaryFileType.StandardFileTypeName], T1.[X_DictionaryFileType.CustomF");
            viewString.Append("ileTypeName], T1.[X_DictionaryFileType.Description], T1.[X_DictionaryFileType.Fu");
            viewString.Append("llDescription], T1.[X_DictionaryFileType.Thumbnail], T1.[X_DictionaryFileType.Or");
            viewString.Append("iginalFileDataID], T1.[X_DictionaryFileType.Version], T1.[X_DictionaryFileType.V");
            viewString.Append("ersionAntecedentID], T1.[X_DictionaryFileType.VersionCertainty], T1.[X_Dictionar");
            viewString.Append("yFileType.VersionWorkflowInstanceID], T1.[X_DictionaryFileType.VersionUpdatedBy]");
            viewString.Append(", T1.[X_DictionaryFileType.VersionDeletedBy], T1.[X_DictionaryFileType.VersionOw");
            viewString.Append("nerContactID], T1.[X_DictionaryFileType.VersionOwnerCompanyID], T1.[X_Dictionary");
            viewString.Append("FileType.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.FileTypeID");
            viewString.Append(" AS [X_DictionaryFileType.FileTypeID], \r\n            T.ParentFileTypeID AS [X_Di");
            viewString.Append("ctionaryFileType.ParentFileTypeID], \r\n            T.CompanyID AS [X_DictionaryFi");
            viewString.Append("leType.CompanyID], \r\n            T.StandardFileTypeName AS [X_DictionaryFileType");
            viewString.Append(".StandardFileTypeName], \r\n            T.CustomFileTypeName AS [X_DictionaryFileT");
            viewString.Append("ype.CustomFileTypeName], \r\n            T.Description AS [X_DictionaryFileType.De");
            viewString.Append("scription], \r\n            T.FullDescription AS [X_DictionaryFileType.FullDescrip");
            viewString.Append("tion], \r\n            T.Thumbnail AS [X_DictionaryFileType.Thumbnail], \r\n        ");
            viewString.Append("    T.OriginalFileDataID AS [X_DictionaryFileType.OriginalFileDataID], \r\n       ");
            viewString.Append("     T.Version AS [X_DictionaryFileType.Version], \r\n            T.VersionAnteced");
            viewString.Append("entID AS [X_DictionaryFileType.VersionAntecedentID], \r\n            T.VersionCert");
            viewString.Append("ainty AS [X_DictionaryFileType.VersionCertainty], \r\n            T.VersionWorkflo");
            viewString.Append("wInstanceID AS [X_DictionaryFileType.VersionWorkflowInstanceID], \r\n            T");
            viewString.Append(".VersionUpdatedBy AS [X_DictionaryFileType.VersionUpdatedBy], \r\n            T.Ve");
            viewString.Append("rsionDeletedBy AS [X_DictionaryFileType.VersionDeletedBy], \r\n            T.Versi");
            viewString.Append("onOwnerContactID AS [X_DictionaryFileType.VersionOwnerContactID], \r\n            ");
            viewString.Append("T.VersionOwnerCompanyID AS [X_DictionaryFileType.VersionOwnerCompanyID], \r\n     ");
            viewString.Append("       T.VersionUpdated AS [X_DictionaryFileType.VersionUpdated], \r\n            ");
            viewString.Append("True AS _from0\r\n        FROM NKDC.DictionaryFileTypes AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryFileType", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryFlowTestType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView122()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2628);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryFlowTestType\r\n        [NKD.Module");
            viewString.Append(".BusinessObjects.Store.X_DictionaryFlowTestType](T1.[X_DictionaryFlowTestType.Fl");
            viewString.Append("owTestTypeID], T1.[X_DictionaryFlowTestType.StandardFlowTestTypeName], T1.[X_Dic");
            viewString.Append("tionaryFlowTestType.CoalFlowTestTypeName], T1.[X_DictionaryFlowTestType.GoldFlow");
            viewString.Append("TestTypeName], T1.[X_DictionaryFlowTestType.CustomFlowTestTypeName], T1.[X_Dicti");
            viewString.Append("onaryFlowTestType.Description], T1.[X_DictionaryFlowTestType.FullDescription], T");
            viewString.Append("1.[X_DictionaryFlowTestType.Thumbnail], T1.[X_DictionaryFlowTestType.OriginalFil");
            viewString.Append("eDataID], T1.[X_DictionaryFlowTestType.Version], T1.[X_DictionaryFlowTestType.Ve");
            viewString.Append("rsionAntecedentID], T1.[X_DictionaryFlowTestType.VersionCertainty], T1.[X_Dictio");
            viewString.Append("naryFlowTestType.VersionWorkflowInstanceID], T1.[X_DictionaryFlowTestType.Versio");
            viewString.Append("nUpdatedBy], T1.[X_DictionaryFlowTestType.VersionDeletedBy], T1.[X_DictionaryFlo");
            viewString.Append("wTestType.VersionOwnerContactID], T1.[X_DictionaryFlowTestType.VersionOwnerCompa");
            viewString.Append("nyID], T1.[X_DictionaryFlowTestType.VersionUpdated])\r\n    FROM (\r\n        SELECT");
            viewString.Append(" \r\n            T.FlowTestTypeID AS [X_DictionaryFlowTestType.FlowTestTypeID], \r\n");
            viewString.Append("            T.StandardFlowTestTypeName AS [X_DictionaryFlowTestType.StandardFlow");
            viewString.Append("TestTypeName], \r\n            T.CoalFlowTestTypeName AS [X_DictionaryFlowTestType");
            viewString.Append(".CoalFlowTestTypeName], \r\n            T.GoldFlowTestTypeName AS [X_DictionaryFlo");
            viewString.Append("wTestType.GoldFlowTestTypeName], \r\n            T.CustomFlowTestTypeName AS [X_Di");
            viewString.Append("ctionaryFlowTestType.CustomFlowTestTypeName], \r\n            T.Description AS [X_");
            viewString.Append("DictionaryFlowTestType.Description], \r\n            T.FullDescription AS [X_Dicti");
            viewString.Append("onaryFlowTestType.FullDescription], \r\n            T.Thumbnail AS [X_DictionaryFl");
            viewString.Append("owTestType.Thumbnail], \r\n            T.OriginalFileDataID AS [X_DictionaryFlowTe");
            viewString.Append("stType.OriginalFileDataID], \r\n            T.Version AS [X_DictionaryFlowTestType");
            viewString.Append(".Version], \r\n            T.VersionAntecedentID AS [X_DictionaryFlowTestType.Vers");
            viewString.Append("ionAntecedentID], \r\n            T.VersionCertainty AS [X_DictionaryFlowTestType.");
            viewString.Append("VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [X_DictionaryFlo");
            viewString.Append("wTestType.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_Dic");
            viewString.Append("tionaryFlowTestType.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_Di");
            viewString.Append("ctionaryFlowTestType.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS");
            viewString.Append(" [X_DictionaryFlowTestType.VersionOwnerContactID], \r\n            T.VersionOwnerC");
            viewString.Append("ompanyID AS [X_DictionaryFlowTestType.VersionOwnerCompanyID], \r\n            T.Ve");
            viewString.Append("rsionUpdated AS [X_DictionaryFlowTestType.VersionUpdated], \r\n            True AS");
            viewString.Append(" _from0\r\n        FROM NKDC.DictionaryFlowTestTypes AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryFlowTestType", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryGasDetected
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView123()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2574);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryGasDetected\r\n        [NKD.Module.");
            viewString.Append("BusinessObjects.Store.X_DictionaryGasDetected](T1.[X_DictionaryGasDetected.GasDe");
            viewString.Append("tectedID], T1.[X_DictionaryGasDetected.StandardGasDetectedName], T1.[X_Dictionar");
            viewString.Append("yGasDetected.CoalGasDetectedName], T1.[X_DictionaryGasDetected.GoldGasDetectedNa");
            viewString.Append("me], T1.[X_DictionaryGasDetected.CustomGasDetectedName], T1.[X_DictionaryGasDete");
            viewString.Append("cted.Description], T1.[X_DictionaryGasDetected.FullDescription], T1.[X_Dictionar");
            viewString.Append("yGasDetected.Thumbnail], T1.[X_DictionaryGasDetected.OriginalFileDataID], T1.[X_");
            viewString.Append("DictionaryGasDetected.Version], T1.[X_DictionaryGasDetected.VersionAntecedentID]");
            viewString.Append(", T1.[X_DictionaryGasDetected.VersionCertainty], T1.[X_DictionaryGasDetected.Ver");
            viewString.Append("sionWorkflowInstanceID], T1.[X_DictionaryGasDetected.VersionUpdatedBy], T1.[X_Di");
            viewString.Append("ctionaryGasDetected.VersionDeletedBy], T1.[X_DictionaryGasDetected.VersionOwnerC");
            viewString.Append("ontactID], T1.[X_DictionaryGasDetected.VersionOwnerCompanyID], T1.[X_DictionaryG");
            viewString.Append("asDetected.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.GasDetec");
            viewString.Append("tedID AS [X_DictionaryGasDetected.GasDetectedID], \r\n            T.StandardGasDet");
            viewString.Append("ectedName AS [X_DictionaryGasDetected.StandardGasDetectedName], \r\n            T.");
            viewString.Append("CoalGasDetectedName AS [X_DictionaryGasDetected.CoalGasDetectedName], \r\n        ");
            viewString.Append("    T.GoldGasDetectedName AS [X_DictionaryGasDetected.GoldGasDetectedName], \r\n  ");
            viewString.Append("          T.CustomGasDetectedName AS [X_DictionaryGasDetected.CustomGasDetectedN");
            viewString.Append("ame], \r\n            T.Description AS [X_DictionaryGasDetected.Description], \r\n  ");
            viewString.Append("          T.FullDescription AS [X_DictionaryGasDetected.FullDescription], \r\n    ");
            viewString.Append("        T.Thumbnail AS [X_DictionaryGasDetected.Thumbnail], \r\n            T.Orig");
            viewString.Append("inalFileDataID AS [X_DictionaryGasDetected.OriginalFileDataID], \r\n            T.");
            viewString.Append("Version AS [X_DictionaryGasDetected.Version], \r\n            T.VersionAntecedentI");
            viewString.Append("D AS [X_DictionaryGasDetected.VersionAntecedentID], \r\n            T.VersionCerta");
            viewString.Append("inty AS [X_DictionaryGasDetected.VersionCertainty], \r\n            T.VersionWorkf");
            viewString.Append("lowInstanceID AS [X_DictionaryGasDetected.VersionWorkflowInstanceID], \r\n        ");
            viewString.Append("    T.VersionUpdatedBy AS [X_DictionaryGasDetected.VersionUpdatedBy], \r\n        ");
            viewString.Append("    T.VersionDeletedBy AS [X_DictionaryGasDetected.VersionDeletedBy], \r\n        ");
            viewString.Append("    T.VersionOwnerContactID AS [X_DictionaryGasDetected.VersionOwnerContactID], ");
            viewString.Append("\r\n            T.VersionOwnerCompanyID AS [X_DictionaryGasDetected.VersionOwnerCo");
            viewString.Append("mpanyID], \r\n            T.VersionUpdated AS [X_DictionaryGasDetected.VersionUpda");
            viewString.Append("ted], \r\n            True AS _from0\r\n        FROM NKDC.DictionaryGasDetecteds AS ");
            viewString.Append("T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryGasDetected", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryGeodeticDatum
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView124()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2682);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryGeodeticDatum\r\n        [NKD.Modul");
            viewString.Append("e.BusinessObjects.Store.X_DictionaryGeodeticDatum](T1.[X_DictionaryGeodeticDatum");
            viewString.Append(".GeodeticDatumID], T1.[X_DictionaryGeodeticDatum.StandardGeodeticDatumName], T1.");
            viewString.Append("[X_DictionaryGeodeticDatum.CoalGeodeticDatumName], T1.[X_DictionaryGeodeticDatum");
            viewString.Append(".GoldGeodeticDatumName], T1.[X_DictionaryGeodeticDatum.CustomGeodeticDatumName],");
            viewString.Append(" T1.[X_DictionaryGeodeticDatum.Description], T1.[X_DictionaryGeodeticDatum.FullD");
            viewString.Append("escription], T1.[X_DictionaryGeodeticDatum.Thumbnail], T1.[X_DictionaryGeodeticD");
            viewString.Append("atum.OriginalFileDataID], T1.[X_DictionaryGeodeticDatum.Version], T1.[X_Dictiona");
            viewString.Append("ryGeodeticDatum.VersionAntecedentID], T1.[X_DictionaryGeodeticDatum.VersionCerta");
            viewString.Append("inty], T1.[X_DictionaryGeodeticDatum.VersionWorkflowInstanceID], T1.[X_Dictionar");
            viewString.Append("yGeodeticDatum.VersionUpdatedBy], T1.[X_DictionaryGeodeticDatum.VersionDeletedBy");
            viewString.Append("], T1.[X_DictionaryGeodeticDatum.VersionOwnerContactID], T1.[X_DictionaryGeodeti");
            viewString.Append("cDatum.VersionOwnerCompanyID], T1.[X_DictionaryGeodeticDatum.VersionUpdated])\r\n ");
            viewString.Append("   FROM (\r\n        SELECT \r\n            T.GeodeticDatumID AS [X_DictionaryGeodet");
            viewString.Append("icDatum.GeodeticDatumID], \r\n            T.StandardGeodeticDatumName AS [X_Dictio");
            viewString.Append("naryGeodeticDatum.StandardGeodeticDatumName], \r\n            T.CoalGeodeticDatumN");
            viewString.Append("ame AS [X_DictionaryGeodeticDatum.CoalGeodeticDatumName], \r\n            T.GoldGe");
            viewString.Append("odeticDatumName AS [X_DictionaryGeodeticDatum.GoldGeodeticDatumName], \r\n        ");
            viewString.Append("    T.CustomGeodeticDatumName AS [X_DictionaryGeodeticDatum.CustomGeodeticDatumN");
            viewString.Append("ame], \r\n            T.Description AS [X_DictionaryGeodeticDatum.Description], \r\n");
            viewString.Append("            T.FullDescription AS [X_DictionaryGeodeticDatum.FullDescription], \r\n");
            viewString.Append("            T.Thumbnail AS [X_DictionaryGeodeticDatum.Thumbnail], \r\n            ");
            viewString.Append("T.OriginalFileDataID AS [X_DictionaryGeodeticDatum.OriginalFileDataID], \r\n      ");
            viewString.Append("      T.Version AS [X_DictionaryGeodeticDatum.Version], \r\n            T.VersionA");
            viewString.Append("ntecedentID AS [X_DictionaryGeodeticDatum.VersionAntecedentID], \r\n            T.");
            viewString.Append("VersionCertainty AS [X_DictionaryGeodeticDatum.VersionCertainty], \r\n            ");
            viewString.Append("T.VersionWorkflowInstanceID AS [X_DictionaryGeodeticDatum.VersionWorkflowInstanc");
            viewString.Append("eID], \r\n            T.VersionUpdatedBy AS [X_DictionaryGeodeticDatum.VersionUpda");
            viewString.Append("tedBy], \r\n            T.VersionDeletedBy AS [X_DictionaryGeodeticDatum.VersionDe");
            viewString.Append("letedBy], \r\n            T.VersionOwnerContactID AS [X_DictionaryGeodeticDatum.Ve");
            viewString.Append("rsionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [X_DictionaryGeod");
            viewString.Append("eticDatum.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [X_Dictionar");
            viewString.Append("yGeodeticDatum.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.");
            viewString.Append("DictionaryGeodeticDatums AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryGeodeticDatum", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryGeophysicalLogType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView125()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2952);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryGeophysicalLogType\r\n        [NKD.");
            viewString.Append("Module.BusinessObjects.Store.X_DictionaryGeophysicalLogType](T1.[X_DictionaryGeo");
            viewString.Append("physicalLogType.GeophysicalLogTypeID], T1.[X_DictionaryGeophysicalLogType.Standa");
            viewString.Append("rdGeophysicalLogTypeName], T1.[X_DictionaryGeophysicalLogType.CoalGeophysicalLog");
            viewString.Append("TypeName], T1.[X_DictionaryGeophysicalLogType.GoldGeophysicalLogTypeName], T1.[X");
            viewString.Append("_DictionaryGeophysicalLogType.CustomGeophysicalLogTypeName], T1.[X_DictionaryGeo");
            viewString.Append("physicalLogType.Description], T1.[X_DictionaryGeophysicalLogType.FullDescription");
            viewString.Append("], T1.[X_DictionaryGeophysicalLogType.Thumbnail], T1.[X_DictionaryGeophysicalLog");
            viewString.Append("Type.OriginalFileDataID], T1.[X_DictionaryGeophysicalLogType.Version], T1.[X_Dic");
            viewString.Append("tionaryGeophysicalLogType.VersionAntecedentID], T1.[X_DictionaryGeophysicalLogTy");
            viewString.Append("pe.VersionCertainty], T1.[X_DictionaryGeophysicalLogType.VersionWorkflowInstance");
            viewString.Append("ID], T1.[X_DictionaryGeophysicalLogType.VersionUpdatedBy], T1.[X_DictionaryGeoph");
            viewString.Append("ysicalLogType.VersionDeletedBy], T1.[X_DictionaryGeophysicalLogType.VersionOwner");
            viewString.Append("ContactID], T1.[X_DictionaryGeophysicalLogType.VersionOwnerCompanyID], T1.[X_Dic");
            viewString.Append("tionaryGeophysicalLogType.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n       ");
            viewString.Append("     T.GeophysicalLogTypeID AS [X_DictionaryGeophysicalLogType.GeophysicalLogTyp");
            viewString.Append("eID], \r\n            T.StandardGeophysicalLogTypeName AS [X_DictionaryGeophysical");
            viewString.Append("LogType.StandardGeophysicalLogTypeName], \r\n            T.CoalGeophysicalLogTypeN");
            viewString.Append("ame AS [X_DictionaryGeophysicalLogType.CoalGeophysicalLogTypeName], \r\n          ");
            viewString.Append("  T.GoldGeophysicalLogTypeName AS [X_DictionaryGeophysicalLogType.GoldGeophysica");
            viewString.Append("lLogTypeName], \r\n            T.CustomGeophysicalLogTypeName AS [X_DictionaryGeop");
            viewString.Append("hysicalLogType.CustomGeophysicalLogTypeName], \r\n            T.Description AS [X_");
            viewString.Append("DictionaryGeophysicalLogType.Description], \r\n            T.FullDescription AS [X");
            viewString.Append("_DictionaryGeophysicalLogType.FullDescription], \r\n            T.Thumbnail AS [X_");
            viewString.Append("DictionaryGeophysicalLogType.Thumbnail], \r\n            T.OriginalFileDataID AS [");
            viewString.Append("X_DictionaryGeophysicalLogType.OriginalFileDataID], \r\n            T.Version AS [");
            viewString.Append("X_DictionaryGeophysicalLogType.Version], \r\n            T.VersionAntecedentID AS ");
            viewString.Append("[X_DictionaryGeophysicalLogType.VersionAntecedentID], \r\n            T.VersionCer");
            viewString.Append("tainty AS [X_DictionaryGeophysicalLogType.VersionCertainty], \r\n            T.Ver");
            viewString.Append("sionWorkflowInstanceID AS [X_DictionaryGeophysicalLogType.VersionWorkflowInstanc");
            viewString.Append("eID], \r\n            T.VersionUpdatedBy AS [X_DictionaryGeophysicalLogType.Versio");
            viewString.Append("nUpdatedBy], \r\n            T.VersionDeletedBy AS [X_DictionaryGeophysicalLogType");
            viewString.Append(".VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [X_DictionaryGeophy");
            viewString.Append("sicalLogType.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [X");
            viewString.Append("_DictionaryGeophysicalLogType.VersionOwnerCompanyID], \r\n            T.VersionUpd");
            viewString.Append("ated AS [X_DictionaryGeophysicalLogType.VersionUpdated], \r\n            True AS _");
            viewString.Append("from0\r\n        FROM NKDC.DictionaryGeophysicalLogTypes AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryGeophysicalLogType", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryGroup
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView126()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2250);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryGroup\r\n        [NKD.Module.Busine");
            viewString.Append("ssObjects.Store.X_DictionaryGroup](T1.[X_DictionaryGroup.GroupID], T1.[X_Diction");
            viewString.Append("aryGroup.StandardGroupName], T1.[X_DictionaryGroup.CoalGroupName], T1.[X_Diction");
            viewString.Append("aryGroup.GoldGroupName], T1.[X_DictionaryGroup.CustomGroupName], T1.[X_Dictionar");
            viewString.Append("yGroup.Description], T1.[X_DictionaryGroup.FullDescription], T1.[X_DictionaryGro");
            viewString.Append("up.Thumbnail], T1.[X_DictionaryGroup.OriginalFileDataID], T1.[X_DictionaryGroup.");
            viewString.Append("Version], T1.[X_DictionaryGroup.VersionAntecedentID], T1.[X_DictionaryGroup.Vers");
            viewString.Append("ionCertainty], T1.[X_DictionaryGroup.VersionWorkflowInstanceID], T1.[X_Dictionar");
            viewString.Append("yGroup.VersionUpdatedBy], T1.[X_DictionaryGroup.VersionDeletedBy], T1.[X_Diction");
            viewString.Append("aryGroup.VersionOwnerContactID], T1.[X_DictionaryGroup.VersionOwnerCompanyID], T");
            viewString.Append("1.[X_DictionaryGroup.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            ");
            viewString.Append("T.GroupID AS [X_DictionaryGroup.GroupID], \r\n            T.StandardGroupName AS [");
            viewString.Append("X_DictionaryGroup.StandardGroupName], \r\n            T.CoalGroupName AS [X_Dictio");
            viewString.Append("naryGroup.CoalGroupName], \r\n            T.GoldGroupName AS [X_DictionaryGroup.Go");
            viewString.Append("ldGroupName], \r\n            T.CustomGroupName AS [X_DictionaryGroup.CustomGroupN");
            viewString.Append("ame], \r\n            T.Description AS [X_DictionaryGroup.Description], \r\n        ");
            viewString.Append("    T.FullDescription AS [X_DictionaryGroup.FullDescription], \r\n            T.Th");
            viewString.Append("umbnail AS [X_DictionaryGroup.Thumbnail], \r\n            T.OriginalFileDataID AS ");
            viewString.Append("[X_DictionaryGroup.OriginalFileDataID], \r\n            T.Version AS [X_Dictionary");
            viewString.Append("Group.Version], \r\n            T.VersionAntecedentID AS [X_DictionaryGroup.Versio");
            viewString.Append("nAntecedentID], \r\n            T.VersionCertainty AS [X_DictionaryGroup.VersionCe");
            viewString.Append("rtainty], \r\n            T.VersionWorkflowInstanceID AS [X_DictionaryGroup.Versio");
            viewString.Append("nWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_DictionaryGroup.Ver");
            viewString.Append("sionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_DictionaryGroup.VersionDe");
            viewString.Append("letedBy], \r\n            T.VersionOwnerContactID AS [X_DictionaryGroup.VersionOwn");
            viewString.Append("erContactID], \r\n            T.VersionOwnerCompanyID AS [X_DictionaryGroup.Versio");
            viewString.Append("nOwnerCompanyID], \r\n            T.VersionUpdated AS [X_DictionaryGroup.VersionUp");
            viewString.Append("dated], \r\n            True AS _from0\r\n        FROM NKDC.DictionaryGroups AS T\r\n ");
            viewString.Append("   ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryGroup", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryGroupMembership
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView127()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2277);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryGroupMembership\r\n        [NKD.Mod");
            viewString.Append("ule.BusinessObjects.Store.X_DictionaryGroupMembership](T1.[X_DictionaryGroupMemb");
            viewString.Append("ership.GroupMembershipID], T1.[X_DictionaryGroupMembership.ParentGroupID], T1.[X");
            viewString.Append("_DictionaryGroupMembership.ChildGroupID], T1.[X_DictionaryGroupMembership.FullDe");
            viewString.Append("scription], T1.[X_DictionaryGroupMembership.Thumbnail], T1.[X_DictionaryGroupMem");
            viewString.Append("bership.OriginalFileDataID], T1.[X_DictionaryGroupMembership.Version], T1.[X_Dic");
            viewString.Append("tionaryGroupMembership.VersionAntecedentID], T1.[X_DictionaryGroupMembership.Ver");
            viewString.Append("sionCertainty], T1.[X_DictionaryGroupMembership.VersionWorkflowInstanceID], T1.[");
            viewString.Append("X_DictionaryGroupMembership.VersionUpdatedBy], T1.[X_DictionaryGroupMembership.V");
            viewString.Append("ersionDeletedBy], T1.[X_DictionaryGroupMembership.VersionOwnerContactID], T1.[X_");
            viewString.Append("DictionaryGroupMembership.VersionOwnerCompanyID], T1.[X_DictionaryGroupMembershi");
            viewString.Append("p.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.GroupMembershipID");
            viewString.Append(" AS [X_DictionaryGroupMembership.GroupMembershipID], \r\n            T.ParentGroup");
            viewString.Append("ID AS [X_DictionaryGroupMembership.ParentGroupID], \r\n            T.ChildGroupID ");
            viewString.Append("AS [X_DictionaryGroupMembership.ChildGroupID], \r\n            T.FullDescription A");
            viewString.Append("S [X_DictionaryGroupMembership.FullDescription], \r\n            T.Thumbnail AS [X");
            viewString.Append("_DictionaryGroupMembership.Thumbnail], \r\n            T.OriginalFileDataID AS [X_");
            viewString.Append("DictionaryGroupMembership.OriginalFileDataID], \r\n            T.Version AS [X_Dic");
            viewString.Append("tionaryGroupMembership.Version], \r\n            T.VersionAntecedentID AS [X_Dicti");
            viewString.Append("onaryGroupMembership.VersionAntecedentID], \r\n            T.VersionCertainty AS [");
            viewString.Append("X_DictionaryGroupMembership.VersionCertainty], \r\n            T.VersionWorkflowIn");
            viewString.Append("stanceID AS [X_DictionaryGroupMembership.VersionWorkflowInstanceID], \r\n         ");
            viewString.Append("   T.VersionUpdatedBy AS [X_DictionaryGroupMembership.VersionUpdatedBy], \r\n     ");
            viewString.Append("       T.VersionDeletedBy AS [X_DictionaryGroupMembership.VersionDeletedBy], \r\n ");
            viewString.Append("           T.VersionOwnerContactID AS [X_DictionaryGroupMembership.VersionOwnerC");
            viewString.Append("ontactID], \r\n            T.VersionOwnerCompanyID AS [X_DictionaryGroupMembership");
            viewString.Append(".VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [X_DictionaryGroupMem");
            viewString.Append("bership.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.Diction");
            viewString.Append("aryGroupMemberships AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryGroupMembership", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryHeightDatum
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView128()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2574);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryHeightDatum\r\n        [NKD.Module.");
            viewString.Append("BusinessObjects.Store.X_DictionaryHeightDatum](T1.[X_DictionaryHeightDatum.Heigh");
            viewString.Append("tDatumID], T1.[X_DictionaryHeightDatum.StandardHeightDatumName], T1.[X_Dictionar");
            viewString.Append("yHeightDatum.CoalHeightDatumName], T1.[X_DictionaryHeightDatum.GoldHeightDatumNa");
            viewString.Append("me], T1.[X_DictionaryHeightDatum.CustomHeightDatumName], T1.[X_DictionaryHeightD");
            viewString.Append("atum.Description], T1.[X_DictionaryHeightDatum.FullDescription], T1.[X_Dictionar");
            viewString.Append("yHeightDatum.Thumbnail], T1.[X_DictionaryHeightDatum.OriginalFileDataID], T1.[X_");
            viewString.Append("DictionaryHeightDatum.Version], T1.[X_DictionaryHeightDatum.VersionAntecedentID]");
            viewString.Append(", T1.[X_DictionaryHeightDatum.VersionCertainty], T1.[X_DictionaryHeightDatum.Ver");
            viewString.Append("sionWorkflowInstanceID], T1.[X_DictionaryHeightDatum.VersionUpdatedBy], T1.[X_Di");
            viewString.Append("ctionaryHeightDatum.VersionDeletedBy], T1.[X_DictionaryHeightDatum.VersionOwnerC");
            viewString.Append("ontactID], T1.[X_DictionaryHeightDatum.VersionOwnerCompanyID], T1.[X_DictionaryH");
            viewString.Append("eightDatum.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.HeightDa");
            viewString.Append("tumID AS [X_DictionaryHeightDatum.HeightDatumID], \r\n            T.StandardHeight");
            viewString.Append("DatumName AS [X_DictionaryHeightDatum.StandardHeightDatumName], \r\n            T.");
            viewString.Append("CoalHeightDatumName AS [X_DictionaryHeightDatum.CoalHeightDatumName], \r\n        ");
            viewString.Append("    T.GoldHeightDatumName AS [X_DictionaryHeightDatum.GoldHeightDatumName], \r\n  ");
            viewString.Append("          T.CustomHeightDatumName AS [X_DictionaryHeightDatum.CustomHeightDatumN");
            viewString.Append("ame], \r\n            T.Description AS [X_DictionaryHeightDatum.Description], \r\n  ");
            viewString.Append("          T.FullDescription AS [X_DictionaryHeightDatum.FullDescription], \r\n    ");
            viewString.Append("        T.Thumbnail AS [X_DictionaryHeightDatum.Thumbnail], \r\n            T.Orig");
            viewString.Append("inalFileDataID AS [X_DictionaryHeightDatum.OriginalFileDataID], \r\n            T.");
            viewString.Append("Version AS [X_DictionaryHeightDatum.Version], \r\n            T.VersionAntecedentI");
            viewString.Append("D AS [X_DictionaryHeightDatum.VersionAntecedentID], \r\n            T.VersionCerta");
            viewString.Append("inty AS [X_DictionaryHeightDatum.VersionCertainty], \r\n            T.VersionWorkf");
            viewString.Append("lowInstanceID AS [X_DictionaryHeightDatum.VersionWorkflowInstanceID], \r\n        ");
            viewString.Append("    T.VersionUpdatedBy AS [X_DictionaryHeightDatum.VersionUpdatedBy], \r\n        ");
            viewString.Append("    T.VersionDeletedBy AS [X_DictionaryHeightDatum.VersionDeletedBy], \r\n        ");
            viewString.Append("    T.VersionOwnerContactID AS [X_DictionaryHeightDatum.VersionOwnerContactID], ");
            viewString.Append("\r\n            T.VersionOwnerCompanyID AS [X_DictionaryHeightDatum.VersionOwnerCo");
            viewString.Append("mpanyID], \r\n            T.VersionUpdated AS [X_DictionaryHeightDatum.VersionUpda");
            viewString.Append("ted], \r\n            True AS _from0\r\n        FROM NKDC.DictionaryHeightDatums AS ");
            viewString.Append("T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryHeightDatum", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryHolePurpose
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView129()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2574);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryHolePurpose\r\n        [NKD.Module.");
            viewString.Append("BusinessObjects.Store.X_DictionaryHolePurpose](T1.[X_DictionaryHolePurpose.HoleP");
            viewString.Append("urposeID], T1.[X_DictionaryHolePurpose.StandardHolePurposeName], T1.[X_Dictionar");
            viewString.Append("yHolePurpose.CoalHolePurposeName], T1.[X_DictionaryHolePurpose.GoldHolePurposeNa");
            viewString.Append("me], T1.[X_DictionaryHolePurpose.CustomHolePurposeName], T1.[X_DictionaryHolePur");
            viewString.Append("pose.Description], T1.[X_DictionaryHolePurpose.FullDescription], T1.[X_Dictionar");
            viewString.Append("yHolePurpose.Thumbnail], T1.[X_DictionaryHolePurpose.OriginalFileDataID], T1.[X_");
            viewString.Append("DictionaryHolePurpose.Version], T1.[X_DictionaryHolePurpose.VersionAntecedentID]");
            viewString.Append(", T1.[X_DictionaryHolePurpose.VersionCertainty], T1.[X_DictionaryHolePurpose.Ver");
            viewString.Append("sionWorkflowInstanceID], T1.[X_DictionaryHolePurpose.VersionUpdatedBy], T1.[X_Di");
            viewString.Append("ctionaryHolePurpose.VersionDeletedBy], T1.[X_DictionaryHolePurpose.VersionOwnerC");
            viewString.Append("ontactID], T1.[X_DictionaryHolePurpose.VersionOwnerCompanyID], T1.[X_DictionaryH");
            viewString.Append("olePurpose.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.HolePurp");
            viewString.Append("oseID AS [X_DictionaryHolePurpose.HolePurposeID], \r\n            T.StandardHolePu");
            viewString.Append("rposeName AS [X_DictionaryHolePurpose.StandardHolePurposeName], \r\n            T.");
            viewString.Append("CoalHolePurposeName AS [X_DictionaryHolePurpose.CoalHolePurposeName], \r\n        ");
            viewString.Append("    T.GoldHolePurposeName AS [X_DictionaryHolePurpose.GoldHolePurposeName], \r\n  ");
            viewString.Append("          T.CustomHolePurposeName AS [X_DictionaryHolePurpose.CustomHolePurposeN");
            viewString.Append("ame], \r\n            T.Description AS [X_DictionaryHolePurpose.Description], \r\n  ");
            viewString.Append("          T.FullDescription AS [X_DictionaryHolePurpose.FullDescription], \r\n    ");
            viewString.Append("        T.Thumbnail AS [X_DictionaryHolePurpose.Thumbnail], \r\n            T.Orig");
            viewString.Append("inalFileDataID AS [X_DictionaryHolePurpose.OriginalFileDataID], \r\n            T.");
            viewString.Append("Version AS [X_DictionaryHolePurpose.Version], \r\n            T.VersionAntecedentI");
            viewString.Append("D AS [X_DictionaryHolePurpose.VersionAntecedentID], \r\n            T.VersionCerta");
            viewString.Append("inty AS [X_DictionaryHolePurpose.VersionCertainty], \r\n            T.VersionWorkf");
            viewString.Append("lowInstanceID AS [X_DictionaryHolePurpose.VersionWorkflowInstanceID], \r\n        ");
            viewString.Append("    T.VersionUpdatedBy AS [X_DictionaryHolePurpose.VersionUpdatedBy], \r\n        ");
            viewString.Append("    T.VersionDeletedBy AS [X_DictionaryHolePurpose.VersionDeletedBy], \r\n        ");
            viewString.Append("    T.VersionOwnerContactID AS [X_DictionaryHolePurpose.VersionOwnerContactID], ");
            viewString.Append("\r\n            T.VersionOwnerCompanyID AS [X_DictionaryHolePurpose.VersionOwnerCo");
            viewString.Append("mpanyID], \r\n            T.VersionUpdated AS [X_DictionaryHolePurpose.VersionUpda");
            viewString.Append("ted], \r\n            True AS _from0\r\n        FROM NKDC.DictionaryHolePurposes AS ");
            viewString.Append("T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryHolePurpose", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryHoleStatus
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView130()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2519);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryHoleStatus\r\n        [NKD.Module.B");
            viewString.Append("usinessObjects.Store.X_DictionaryHoleStatus](T1.[X_DictionaryHoleStatus.HoleStat");
            viewString.Append("usID], T1.[X_DictionaryHoleStatus.StandardHoleStatusName], T1.[X_DictionaryHoleS");
            viewString.Append("tatus.CoalHoleStatusName], T1.[X_DictionaryHoleStatus.GoldHoleStatusName], T1.[X");
            viewString.Append("_DictionaryHoleStatus.CustomHoleStatusName], T1.[X_DictionaryHoleStatus.Descript");
            viewString.Append("ion], T1.[X_DictionaryHoleStatus.FullDescription], T1.[X_DictionaryHoleStatus.Th");
            viewString.Append("umbnail], T1.[X_DictionaryHoleStatus.OriginalFileDataID], T1.[X_DictionaryHoleSt");
            viewString.Append("atus.Version], T1.[X_DictionaryHoleStatus.VersionAntecedentID], T1.[X_Dictionary");
            viewString.Append("HoleStatus.VersionCertainty], T1.[X_DictionaryHoleStatus.VersionWorkflowInstance");
            viewString.Append("ID], T1.[X_DictionaryHoleStatus.VersionUpdatedBy], T1.[X_DictionaryHoleStatus.Ve");
            viewString.Append("rsionDeletedBy], T1.[X_DictionaryHoleStatus.VersionOwnerContactID], T1.[X_Dictio");
            viewString.Append("naryHoleStatus.VersionOwnerCompanyID], T1.[X_DictionaryHoleStatus.VersionUpdated");
            viewString.Append("])\r\n    FROM (\r\n        SELECT \r\n            T.HoleStatusID AS [X_DictionaryHole");
            viewString.Append("Status.HoleStatusID], \r\n            T.StandardHoleStatusName AS [X_DictionaryHol");
            viewString.Append("eStatus.StandardHoleStatusName], \r\n            T.CoalHoleStatusName AS [X_Dictio");
            viewString.Append("naryHoleStatus.CoalHoleStatusName], \r\n            T.GoldHoleStatusName AS [X_Dic");
            viewString.Append("tionaryHoleStatus.GoldHoleStatusName], \r\n            T.CustomHoleStatusName AS [");
            viewString.Append("X_DictionaryHoleStatus.CustomHoleStatusName], \r\n            T.Description AS [X_");
            viewString.Append("DictionaryHoleStatus.Description], \r\n            T.FullDescription AS [X_Diction");
            viewString.Append("aryHoleStatus.FullDescription], \r\n            T.Thumbnail AS [X_DictionaryHoleSt");
            viewString.Append("atus.Thumbnail], \r\n            T.OriginalFileDataID AS [X_DictionaryHoleStatus.O");
            viewString.Append("riginalFileDataID], \r\n            T.Version AS [X_DictionaryHoleStatus.Version],");
            viewString.Append(" \r\n            T.VersionAntecedentID AS [X_DictionaryHoleStatus.VersionAnteceden");
            viewString.Append("tID], \r\n            T.VersionCertainty AS [X_DictionaryHoleStatus.VersionCertain");
            viewString.Append("ty], \r\n            T.VersionWorkflowInstanceID AS [X_DictionaryHoleStatus.Versio");
            viewString.Append("nWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_DictionaryHoleStatu");
            viewString.Append("s.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_DictionaryHoleStatus");
            viewString.Append(".VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [X_DictionaryHoleSt");
            viewString.Append("atus.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [X_Diction");
            viewString.Append("aryHoleStatus.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [X_Dicti");
            viewString.Append("onaryHoleStatus.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC");
            viewString.Append(".DictionaryHoleStatus AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryHoleStatus", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryHoleType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView131()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2412);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryHoleType\r\n        [NKD.Module.Bus");
            viewString.Append("inessObjects.Store.X_DictionaryHoleType](T1.[X_DictionaryHoleType.HoleTypeID], T");
            viewString.Append("1.[X_DictionaryHoleType.StandardHoleTypeName], T1.[X_DictionaryHoleType.CoalHole");
            viewString.Append("TypeName], T1.[X_DictionaryHoleType.GoldHoleTypeName], T1.[X_DictionaryHoleType.");
            viewString.Append("CustomHoleTypeName], T1.[X_DictionaryHoleType.Description], T1.[X_DictionaryHole");
            viewString.Append("Type.FullDescription], T1.[X_DictionaryHoleType.Thumbnail], T1.[X_DictionaryHole");
            viewString.Append("Type.OriginalFileDataID], T1.[X_DictionaryHoleType.Version], T1.[X_DictionaryHol");
            viewString.Append("eType.VersionAntecedentID], T1.[X_DictionaryHoleType.VersionCertainty], T1.[X_Di");
            viewString.Append("ctionaryHoleType.VersionWorkflowInstanceID], T1.[X_DictionaryHoleType.VersionUpd");
            viewString.Append("atedBy], T1.[X_DictionaryHoleType.VersionDeletedBy], T1.[X_DictionaryHoleType.Ve");
            viewString.Append("rsionOwnerContactID], T1.[X_DictionaryHoleType.VersionOwnerCompanyID], T1.[X_Dic");
            viewString.Append("tionaryHoleType.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.Hol");
            viewString.Append("eTypeID AS [X_DictionaryHoleType.HoleTypeID], \r\n            T.StandardHoleTypeNa");
            viewString.Append("me AS [X_DictionaryHoleType.StandardHoleTypeName], \r\n            T.CoalHoleTypeN");
            viewString.Append("ame AS [X_DictionaryHoleType.CoalHoleTypeName], \r\n            T.GoldHoleTypeName");
            viewString.Append(" AS [X_DictionaryHoleType.GoldHoleTypeName], \r\n            T.CustomHoleTypeName ");
            viewString.Append("AS [X_DictionaryHoleType.CustomHoleTypeName], \r\n            T.Description AS [X_");
            viewString.Append("DictionaryHoleType.Description], \r\n            T.FullDescription AS [X_Dictionar");
            viewString.Append("yHoleType.FullDescription], \r\n            T.Thumbnail AS [X_DictionaryHoleType.T");
            viewString.Append("humbnail], \r\n            T.OriginalFileDataID AS [X_DictionaryHoleType.OriginalF");
            viewString.Append("ileDataID], \r\n            T.Version AS [X_DictionaryHoleType.Version], \r\n       ");
            viewString.Append("     T.VersionAntecedentID AS [X_DictionaryHoleType.VersionAntecedentID], \r\n    ");
            viewString.Append("        T.VersionCertainty AS [X_DictionaryHoleType.VersionCertainty], \r\n       ");
            viewString.Append("     T.VersionWorkflowInstanceID AS [X_DictionaryHoleType.VersionWorkflowInstanc");
            viewString.Append("eID], \r\n            T.VersionUpdatedBy AS [X_DictionaryHoleType.VersionUpdatedBy");
            viewString.Append("], \r\n            T.VersionDeletedBy AS [X_DictionaryHoleType.VersionDeletedBy], ");
            viewString.Append("\r\n            T.VersionOwnerContactID AS [X_DictionaryHoleType.VersionOwnerConta");
            viewString.Append("ctID], \r\n            T.VersionOwnerCompanyID AS [X_DictionaryHoleType.VersionOwn");
            viewString.Append("erCompanyID], \r\n            T.VersionUpdated AS [X_DictionaryHoleType.VersionUpd");
            viewString.Append("ated], \r\n            True AS _from0\r\n        FROM NKDC.DictionaryHoleTypes AS T\r");
            viewString.Append("\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryHoleType", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryHorizon
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView132()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2358);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryHorizon\r\n        [NKD.Module.Busi");
            viewString.Append("nessObjects.Store.X_DictionaryHorizon](T1.[X_DictionaryHorizon.HorizonID], T1.[X");
            viewString.Append("_DictionaryHorizon.StandardHorizonName], T1.[X_DictionaryHorizon.CoalHorizonName");
            viewString.Append("], T1.[X_DictionaryHorizon.GoldHorizonName], T1.[X_DictionaryHorizon.CustomHoriz");
            viewString.Append("onName], T1.[X_DictionaryHorizon.Description], T1.[X_DictionaryHorizon.FullDescr");
            viewString.Append("iption], T1.[X_DictionaryHorizon.Thumbnail], T1.[X_DictionaryHorizon.OriginalFil");
            viewString.Append("eDataID], T1.[X_DictionaryHorizon.Version], T1.[X_DictionaryHorizon.VersionAntec");
            viewString.Append("edentID], T1.[X_DictionaryHorizon.VersionCertainty], T1.[X_DictionaryHorizon.Ver");
            viewString.Append("sionWorkflowInstanceID], T1.[X_DictionaryHorizon.VersionUpdatedBy], T1.[X_Dictio");
            viewString.Append("naryHorizon.VersionDeletedBy], T1.[X_DictionaryHorizon.VersionOwnerContactID], T");
            viewString.Append("1.[X_DictionaryHorizon.VersionOwnerCompanyID], T1.[X_DictionaryHorizon.VersionUp");
            viewString.Append("dated])\r\n    FROM (\r\n        SELECT \r\n            T.HorizonID AS [X_DictionaryHo");
            viewString.Append("rizon.HorizonID], \r\n            T.StandardHorizonName AS [X_DictionaryHorizon.St");
            viewString.Append("andardHorizonName], \r\n            T.CoalHorizonName AS [X_DictionaryHorizon.Coal");
            viewString.Append("HorizonName], \r\n            T.GoldHorizonName AS [X_DictionaryHorizon.GoldHorizo");
            viewString.Append("nName], \r\n            T.CustomHorizonName AS [X_DictionaryHorizon.CustomHorizonN");
            viewString.Append("ame], \r\n            T.Description AS [X_DictionaryHorizon.Description], \r\n      ");
            viewString.Append("      T.FullDescription AS [X_DictionaryHorizon.FullDescription], \r\n            ");
            viewString.Append("T.Thumbnail AS [X_DictionaryHorizon.Thumbnail], \r\n            T.OriginalFileData");
            viewString.Append("ID AS [X_DictionaryHorizon.OriginalFileDataID], \r\n            T.Version AS [X_Di");
            viewString.Append("ctionaryHorizon.Version], \r\n            T.VersionAntecedentID AS [X_DictionaryHo");
            viewString.Append("rizon.VersionAntecedentID], \r\n            T.VersionCertainty AS [X_DictionaryHor");
            viewString.Append("izon.VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [X_Dictiona");
            viewString.Append("ryHorizon.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_Dic");
            viewString.Append("tionaryHorizon.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_Diction");
            viewString.Append("aryHorizon.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [X_Dictio");
            viewString.Append("naryHorizon.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [X_");
            viewString.Append("DictionaryHorizon.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [X_D");
            viewString.Append("ictionaryHorizon.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKD");
            viewString.Append("C.DictionaryHorizons AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryHorizon", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryHue
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView133()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2142);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryHue\r\n        [NKD.Module.Business");
            viewString.Append("Objects.Store.X_DictionaryHue](T1.[X_DictionaryHue.HueID], T1.[X_DictionaryHue.S");
            viewString.Append("tandardHueName], T1.[X_DictionaryHue.CoalHueName], T1.[X_DictionaryHue.GoldHueNa");
            viewString.Append("me], T1.[X_DictionaryHue.CustomHueName], T1.[X_DictionaryHue.Description], T1.[X");
            viewString.Append("_DictionaryHue.FullDescription], T1.[X_DictionaryHue.Thumbnail], T1.[X_Dictionar");
            viewString.Append("yHue.OriginalFileDataID], T1.[X_DictionaryHue.Version], T1.[X_DictionaryHue.Vers");
            viewString.Append("ionAntecedentID], T1.[X_DictionaryHue.VersionCertainty], T1.[X_DictionaryHue.Ver");
            viewString.Append("sionWorkflowInstanceID], T1.[X_DictionaryHue.VersionUpdatedBy], T1.[X_Dictionary");
            viewString.Append("Hue.VersionDeletedBy], T1.[X_DictionaryHue.VersionOwnerContactID], T1.[X_Diction");
            viewString.Append("aryHue.VersionOwnerCompanyID], T1.[X_DictionaryHue.VersionUpdated])\r\n    FROM (\r");
            viewString.Append("\n        SELECT \r\n            T.HueID AS [X_DictionaryHue.HueID], \r\n            ");
            viewString.Append("T.StandardHueName AS [X_DictionaryHue.StandardHueName], \r\n            T.CoalHueN");
            viewString.Append("ame AS [X_DictionaryHue.CoalHueName], \r\n            T.GoldHueName AS [X_Dictiona");
            viewString.Append("ryHue.GoldHueName], \r\n            T.CustomHueName AS [X_DictionaryHue.CustomHueN");
            viewString.Append("ame], \r\n            T.Description AS [X_DictionaryHue.Description], \r\n          ");
            viewString.Append("  T.FullDescription AS [X_DictionaryHue.FullDescription], \r\n            T.Thumbn");
            viewString.Append("ail AS [X_DictionaryHue.Thumbnail], \r\n            T.OriginalFileDataID AS [X_Dic");
            viewString.Append("tionaryHue.OriginalFileDataID], \r\n            T.Version AS [X_DictionaryHue.Vers");
            viewString.Append("ion], \r\n            T.VersionAntecedentID AS [X_DictionaryHue.VersionAntecedentI");
            viewString.Append("D], \r\n            T.VersionCertainty AS [X_DictionaryHue.VersionCertainty], \r\n  ");
            viewString.Append("          T.VersionWorkflowInstanceID AS [X_DictionaryHue.VersionWorkflowInstanc");
            viewString.Append("eID], \r\n            T.VersionUpdatedBy AS [X_DictionaryHue.VersionUpdatedBy], \r\n");
            viewString.Append("            T.VersionDeletedBy AS [X_DictionaryHue.VersionDeletedBy], \r\n        ");
            viewString.Append("    T.VersionOwnerContactID AS [X_DictionaryHue.VersionOwnerContactID], \r\n      ");
            viewString.Append("      T.VersionOwnerCompanyID AS [X_DictionaryHue.VersionOwnerCompanyID], \r\n    ");
            viewString.Append("        T.VersionUpdated AS [X_DictionaryHue.VersionUpdated], \r\n            True");
            viewString.Append(" AS _from0\r\n        FROM NKDC.DictionaryHues AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryHue", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryInfillMode
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView134()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2520);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryInfillMode\r\n        [NKD.Module.B");
            viewString.Append("usinessObjects.Store.X_DictionaryInfillMode](T1.[X_DictionaryInfillMode.InfillMo");
            viewString.Append("deID], T1.[X_DictionaryInfillMode.StandardInfillModeName], T1.[X_DictionaryInfil");
            viewString.Append("lMode.CoalInfillModeName], T1.[X_DictionaryInfillMode.GoldInfillModeName], T1.[X");
            viewString.Append("_DictionaryInfillMode.CustomInfillModeName], T1.[X_DictionaryInfillMode.Descript");
            viewString.Append("ion], T1.[X_DictionaryInfillMode.FullDescription], T1.[X_DictionaryInfillMode.Th");
            viewString.Append("umbnail], T1.[X_DictionaryInfillMode.OriginalFileDataID], T1.[X_DictionaryInfill");
            viewString.Append("Mode.Version], T1.[X_DictionaryInfillMode.VersionAntecedentID], T1.[X_Dictionary");
            viewString.Append("InfillMode.VersionCertainty], T1.[X_DictionaryInfillMode.VersionWorkflowInstance");
            viewString.Append("ID], T1.[X_DictionaryInfillMode.VersionUpdatedBy], T1.[X_DictionaryInfillMode.Ve");
            viewString.Append("rsionDeletedBy], T1.[X_DictionaryInfillMode.VersionOwnerContactID], T1.[X_Dictio");
            viewString.Append("naryInfillMode.VersionOwnerCompanyID], T1.[X_DictionaryInfillMode.VersionUpdated");
            viewString.Append("])\r\n    FROM (\r\n        SELECT \r\n            T.InfillModeID AS [X_DictionaryInfi");
            viewString.Append("llMode.InfillModeID], \r\n            T.StandardInfillModeName AS [X_DictionaryInf");
            viewString.Append("illMode.StandardInfillModeName], \r\n            T.CoalInfillModeName AS [X_Dictio");
            viewString.Append("naryInfillMode.CoalInfillModeName], \r\n            T.GoldInfillModeName AS [X_Dic");
            viewString.Append("tionaryInfillMode.GoldInfillModeName], \r\n            T.CustomInfillModeName AS [");
            viewString.Append("X_DictionaryInfillMode.CustomInfillModeName], \r\n            T.Description AS [X_");
            viewString.Append("DictionaryInfillMode.Description], \r\n            T.FullDescription AS [X_Diction");
            viewString.Append("aryInfillMode.FullDescription], \r\n            T.Thumbnail AS [X_DictionaryInfill");
            viewString.Append("Mode.Thumbnail], \r\n            T.OriginalFileDataID AS [X_DictionaryInfillMode.O");
            viewString.Append("riginalFileDataID], \r\n            T.Version AS [X_DictionaryInfillMode.Version],");
            viewString.Append(" \r\n            T.VersionAntecedentID AS [X_DictionaryInfillMode.VersionAnteceden");
            viewString.Append("tID], \r\n            T.VersionCertainty AS [X_DictionaryInfillMode.VersionCertain");
            viewString.Append("ty], \r\n            T.VersionWorkflowInstanceID AS [X_DictionaryInfillMode.Versio");
            viewString.Append("nWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_DictionaryInfillMod");
            viewString.Append("e.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_DictionaryInfillMode");
            viewString.Append(".VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [X_DictionaryInfill");
            viewString.Append("Mode.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [X_Diction");
            viewString.Append("aryInfillMode.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [X_Dicti");
            viewString.Append("onaryInfillMode.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC");
            viewString.Append(".DictionaryInfillModes AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryInfillMode", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryInfillType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView135()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2520);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryInfillType\r\n        [NKD.Module.B");
            viewString.Append("usinessObjects.Store.X_DictionaryInfillType](T1.[X_DictionaryInfillType.InfillTy");
            viewString.Append("peID], T1.[X_DictionaryInfillType.StandardInfillTypeName], T1.[X_DictionaryInfil");
            viewString.Append("lType.CoalInfillTypeName], T1.[X_DictionaryInfillType.GoldInfillTypeName], T1.[X");
            viewString.Append("_DictionaryInfillType.CustomInfillTypeName], T1.[X_DictionaryInfillType.Descript");
            viewString.Append("ion], T1.[X_DictionaryInfillType.FullDescription], T1.[X_DictionaryInfillType.Th");
            viewString.Append("umbnail], T1.[X_DictionaryInfillType.OriginalFileDataID], T1.[X_DictionaryInfill");
            viewString.Append("Type.Version], T1.[X_DictionaryInfillType.VersionAntecedentID], T1.[X_Dictionary");
            viewString.Append("InfillType.VersionCertainty], T1.[X_DictionaryInfillType.VersionWorkflowInstance");
            viewString.Append("ID], T1.[X_DictionaryInfillType.VersionUpdatedBy], T1.[X_DictionaryInfillType.Ve");
            viewString.Append("rsionDeletedBy], T1.[X_DictionaryInfillType.VersionOwnerContactID], T1.[X_Dictio");
            viewString.Append("naryInfillType.VersionOwnerCompanyID], T1.[X_DictionaryInfillType.VersionUpdated");
            viewString.Append("])\r\n    FROM (\r\n        SELECT \r\n            T.InfillTypeID AS [X_DictionaryInfi");
            viewString.Append("llType.InfillTypeID], \r\n            T.StandardInfillTypeName AS [X_DictionaryInf");
            viewString.Append("illType.StandardInfillTypeName], \r\n            T.CoalInfillTypeName AS [X_Dictio");
            viewString.Append("naryInfillType.CoalInfillTypeName], \r\n            T.GoldInfillTypeName AS [X_Dic");
            viewString.Append("tionaryInfillType.GoldInfillTypeName], \r\n            T.CustomInfillTypeName AS [");
            viewString.Append("X_DictionaryInfillType.CustomInfillTypeName], \r\n            T.Description AS [X_");
            viewString.Append("DictionaryInfillType.Description], \r\n            T.FullDescription AS [X_Diction");
            viewString.Append("aryInfillType.FullDescription], \r\n            T.Thumbnail AS [X_DictionaryInfill");
            viewString.Append("Type.Thumbnail], \r\n            T.OriginalFileDataID AS [X_DictionaryInfillType.O");
            viewString.Append("riginalFileDataID], \r\n            T.Version AS [X_DictionaryInfillType.Version],");
            viewString.Append(" \r\n            T.VersionAntecedentID AS [X_DictionaryInfillType.VersionAnteceden");
            viewString.Append("tID], \r\n            T.VersionCertainty AS [X_DictionaryInfillType.VersionCertain");
            viewString.Append("ty], \r\n            T.VersionWorkflowInstanceID AS [X_DictionaryInfillType.Versio");
            viewString.Append("nWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_DictionaryInfillTyp");
            viewString.Append("e.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_DictionaryInfillType");
            viewString.Append(".VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [X_DictionaryInfill");
            viewString.Append("Type.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [X_Diction");
            viewString.Append("aryInfillType.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [X_Dicti");
            viewString.Append("onaryInfillType.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC");
            viewString.Append(".DictionaryInfillTypes AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryInfillType", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryIntervalStatus
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView136()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2735);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryIntervalStatus\r\n        [NKD.Modu");
            viewString.Append("le.BusinessObjects.Store.X_DictionaryIntervalStatus](T1.[X_DictionaryIntervalSta");
            viewString.Append("tus.IntervalStatusID], T1.[X_DictionaryIntervalStatus.StandardIntervalStatusName");
            viewString.Append("], T1.[X_DictionaryIntervalStatus.CoalIntervalStatusName], T1.[X_DictionaryInter");
            viewString.Append("valStatus.GoldIntervalStatusName], T1.[X_DictionaryIntervalStatus.CustomInterval");
            viewString.Append("StatusName], T1.[X_DictionaryIntervalStatus.Description], T1.[X_DictionaryInterv");
            viewString.Append("alStatus.FullDescription], T1.[X_DictionaryIntervalStatus.Thumbnail], T1.[X_Dict");
            viewString.Append("ionaryIntervalStatus.OriginalFileDataID], T1.[X_DictionaryIntervalStatus.Version");
            viewString.Append("], T1.[X_DictionaryIntervalStatus.VersionAntecedentID], T1.[X_DictionaryInterval");
            viewString.Append("Status.VersionCertainty], T1.[X_DictionaryIntervalStatus.VersionWorkflowInstance");
            viewString.Append("ID], T1.[X_DictionaryIntervalStatus.VersionUpdatedBy], T1.[X_DictionaryIntervalS");
            viewString.Append("tatus.VersionDeletedBy], T1.[X_DictionaryIntervalStatus.VersionOwnerContactID], ");
            viewString.Append("T1.[X_DictionaryIntervalStatus.VersionOwnerCompanyID], T1.[X_DictionaryIntervalS");
            viewString.Append("tatus.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.IntervalStatu");
            viewString.Append("sID AS [X_DictionaryIntervalStatus.IntervalStatusID], \r\n            T.StandardIn");
            viewString.Append("tervalStatusName AS [X_DictionaryIntervalStatus.StandardIntervalStatusName], \r\n ");
            viewString.Append("           T.CoalIntervalStatusName AS [X_DictionaryIntervalStatus.CoalIntervalS");
            viewString.Append("tatusName], \r\n            T.GoldIntervalStatusName AS [X_DictionaryIntervalStatu");
            viewString.Append("s.GoldIntervalStatusName], \r\n            T.CustomIntervalStatusName AS [X_Dictio");
            viewString.Append("naryIntervalStatus.CustomIntervalStatusName], \r\n            T.Description AS [X_");
            viewString.Append("DictionaryIntervalStatus.Description], \r\n            T.FullDescription AS [X_Dic");
            viewString.Append("tionaryIntervalStatus.FullDescription], \r\n            T.Thumbnail AS [X_Dictiona");
            viewString.Append("ryIntervalStatus.Thumbnail], \r\n            T.OriginalFileDataID AS [X_Dictionary");
            viewString.Append("IntervalStatus.OriginalFileDataID], \r\n            T.Version AS [X_DictionaryInte");
            viewString.Append("rvalStatus.Version], \r\n            T.VersionAntecedentID AS [X_DictionaryInterva");
            viewString.Append("lStatus.VersionAntecedentID], \r\n            T.VersionCertainty AS [X_DictionaryI");
            viewString.Append("ntervalStatus.VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [X");
            viewString.Append("_DictionaryIntervalStatus.VersionWorkflowInstanceID], \r\n            T.VersionUpd");
            viewString.Append("atedBy AS [X_DictionaryIntervalStatus.VersionUpdatedBy], \r\n            T.Version");
            viewString.Append("DeletedBy AS [X_DictionaryIntervalStatus.VersionDeletedBy], \r\n            T.Vers");
            viewString.Append("ionOwnerContactID AS [X_DictionaryIntervalStatus.VersionOwnerContactID], \r\n     ");
            viewString.Append("       T.VersionOwnerCompanyID AS [X_DictionaryIntervalStatus.VersionOwnerCompan");
            viewString.Append("yID], \r\n            T.VersionUpdated AS [X_DictionaryIntervalStatus.VersionUpdat");
            viewString.Append("ed], \r\n            True AS _from0\r\n        FROM NKDC.DictionaryIntervalStatus AS");
            viewString.Append(" T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryIntervalStatus", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryLeaseApplicationType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView137()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3060);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryLeaseApplicationType\r\n        [NK");
            viewString.Append("D.Module.BusinessObjects.Store.X_DictionaryLeaseApplicationType](T1.[X_Dictionar");
            viewString.Append("yLeaseApplicationType.LeaseApplicationTypeID], T1.[X_DictionaryLeaseApplicationT");
            viewString.Append("ype.StandardLeaseApplicationTypeName], T1.[X_DictionaryLeaseApplicationType.Coal");
            viewString.Append("LeaseApplicationTypeName], T1.[X_DictionaryLeaseApplicationType.GoldLeaseApplica");
            viewString.Append("tionTypeName], T1.[X_DictionaryLeaseApplicationType.CustomLeaseApplicationTypeNa");
            viewString.Append("me], T1.[X_DictionaryLeaseApplicationType.Description], T1.[X_DictionaryLeaseApp");
            viewString.Append("licationType.FullDescription], T1.[X_DictionaryLeaseApplicationType.Thumbnail], ");
            viewString.Append("T1.[X_DictionaryLeaseApplicationType.OriginalFileDataID], T1.[X_DictionaryLeaseA");
            viewString.Append("pplicationType.Version], T1.[X_DictionaryLeaseApplicationType.VersionAntecedentI");
            viewString.Append("D], T1.[X_DictionaryLeaseApplicationType.VersionCertainty], T1.[X_DictionaryLeas");
            viewString.Append("eApplicationType.VersionWorkflowInstanceID], T1.[X_DictionaryLeaseApplicationTyp");
            viewString.Append("e.VersionUpdatedBy], T1.[X_DictionaryLeaseApplicationType.VersionDeletedBy], T1.");
            viewString.Append("[X_DictionaryLeaseApplicationType.VersionOwnerContactID], T1.[X_DictionaryLeaseA");
            viewString.Append("pplicationType.VersionOwnerCompanyID], T1.[X_DictionaryLeaseApplicationType.Vers");
            viewString.Append("ionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.LeaseApplicationTypeID ");
            viewString.Append("AS [X_DictionaryLeaseApplicationType.LeaseApplicationTypeID], \r\n            T.St");
            viewString.Append("andardLeaseApplicationTypeName AS [X_DictionaryLeaseApplicationType.StandardLeas");
            viewString.Append("eApplicationTypeName], \r\n            T.CoalLeaseApplicationTypeName AS [X_Dictio");
            viewString.Append("naryLeaseApplicationType.CoalLeaseApplicationTypeName], \r\n            T.GoldLeas");
            viewString.Append("eApplicationTypeName AS [X_DictionaryLeaseApplicationType.GoldLeaseApplicationTy");
            viewString.Append("peName], \r\n            T.CustomLeaseApplicationTypeName AS [X_DictionaryLeaseApp");
            viewString.Append("licationType.CustomLeaseApplicationTypeName], \r\n            T.Description AS [X_");
            viewString.Append("DictionaryLeaseApplicationType.Description], \r\n            T.FullDescription AS ");
            viewString.Append("[X_DictionaryLeaseApplicationType.FullDescription], \r\n            T.Thumbnail AS");
            viewString.Append(" [X_DictionaryLeaseApplicationType.Thumbnail], \r\n            T.OriginalFileDataI");
            viewString.Append("D AS [X_DictionaryLeaseApplicationType.OriginalFileDataID], \r\n            T.Vers");
            viewString.Append("ion AS [X_DictionaryLeaseApplicationType.Version], \r\n            T.VersionAntece");
            viewString.Append("dentID AS [X_DictionaryLeaseApplicationType.VersionAntecedentID], \r\n            ");
            viewString.Append("T.VersionCertainty AS [X_DictionaryLeaseApplicationType.VersionCertainty], \r\n   ");
            viewString.Append("         T.VersionWorkflowInstanceID AS [X_DictionaryLeaseApplicationType.Versio");
            viewString.Append("nWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_DictionaryLeaseAppl");
            viewString.Append("icationType.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_Dictionary");
            viewString.Append("LeaseApplicationType.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS");
            viewString.Append(" [X_DictionaryLeaseApplicationType.VersionOwnerContactID], \r\n            T.Versi");
            viewString.Append("onOwnerCompanyID AS [X_DictionaryLeaseApplicationType.VersionOwnerCompanyID], \r\n");
            viewString.Append("            T.VersionUpdated AS [X_DictionaryLeaseApplicationType.VersionUpdated");
            viewString.Append("], \r\n            True AS _from0\r\n        FROM NKDC.DictionaryLeaseApplicationTyp");
            viewString.Append("es AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryLeaseApplicationType", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryLicenseType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView138()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2302);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryLicenseType\r\n        [NKD.Module.");
            viewString.Append("BusinessObjects.Store.X_DictionaryLicenseType](T1.[X_DictionaryLicenseType.Licen");
            viewString.Append("seTypeID], T1.[X_DictionaryLicenseType.StandardLicenseTypeName], T1.[X_Dictionar");
            viewString.Append("yLicenseType.CustomLicenseTypeName], T1.[X_DictionaryLicenseType.Description], T");
            viewString.Append("1.[X_DictionaryLicenseType.FullDescription], T1.[X_DictionaryLicenseType.Thumbna");
            viewString.Append("il], T1.[X_DictionaryLicenseType.OriginalFileDataID], T1.[X_DictionaryLicenseTyp");
            viewString.Append("e.Version], T1.[X_DictionaryLicenseType.VersionAntecedentID], T1.[X_DictionaryLi");
            viewString.Append("censeType.VersionCertainty], T1.[X_DictionaryLicenseType.VersionWorkflowInstance");
            viewString.Append("ID], T1.[X_DictionaryLicenseType.VersionUpdatedBy], T1.[X_DictionaryLicenseType.");
            viewString.Append("VersionDeletedBy], T1.[X_DictionaryLicenseType.VersionOwnerContactID], T1.[X_Dic");
            viewString.Append("tionaryLicenseType.VersionOwnerCompanyID], T1.[X_DictionaryLicenseType.VersionUp");
            viewString.Append("dated])\r\n    FROM (\r\n        SELECT \r\n            T.LicenseTypeID AS [X_Dictiona");
            viewString.Append("ryLicenseType.LicenseTypeID], \r\n            T.StandardLicenseTypeName AS [X_Dict");
            viewString.Append("ionaryLicenseType.StandardLicenseTypeName], \r\n            T.CustomLicenseTypeNam");
            viewString.Append("e AS [X_DictionaryLicenseType.CustomLicenseTypeName], \r\n            T.Descriptio");
            viewString.Append("n AS [X_DictionaryLicenseType.Description], \r\n            T.FullDescription AS [");
            viewString.Append("X_DictionaryLicenseType.FullDescription], \r\n            T.Thumbnail AS [X_Dictio");
            viewString.Append("naryLicenseType.Thumbnail], \r\n            T.OriginalFileDataID AS [X_DictionaryL");
            viewString.Append("icenseType.OriginalFileDataID], \r\n            T.Version AS [X_DictionaryLicenseT");
            viewString.Append("ype.Version], \r\n            T.VersionAntecedentID AS [X_DictionaryLicenseType.Ve");
            viewString.Append("rsionAntecedentID], \r\n            T.VersionCertainty AS [X_DictionaryLicenseType");
            viewString.Append(".VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [X_DictionaryLi");
            viewString.Append("censeType.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_Dic");
            viewString.Append("tionaryLicenseType.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_Dic");
            viewString.Append("tionaryLicenseType.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [");
            viewString.Append("X_DictionaryLicenseType.VersionOwnerContactID], \r\n            T.VersionOwnerComp");
            viewString.Append("anyID AS [X_DictionaryLicenseType.VersionOwnerCompanyID], \r\n            T.Versio");
            viewString.Append("nUpdated AS [X_DictionaryLicenseType.VersionUpdated], \r\n            True AS _fro");
            viewString.Append("m0\r\n        FROM NKDC.DictionaryLicenseTypes AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryLicenseType", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryLithologyInterrelation
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView139()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3168);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryLithologyInterrelation\r\n        [");
            viewString.Append("NKD.Module.BusinessObjects.Store.X_DictionaryLithologyInterrelation](T1.[X_Dicti");
            viewString.Append("onaryLithologyInterrelation.LithologyInterrelationID], T1.[X_DictionaryLithology");
            viewString.Append("Interrelation.StandardLithologyInterrelationName], T1.[X_DictionaryLithologyInte");
            viewString.Append("rrelation.CoalLithologyInterrelationName], T1.[X_DictionaryLithologyInterrelatio");
            viewString.Append("n.GoldLithologyInterrelationName], T1.[X_DictionaryLithologyInterrelation.Custom");
            viewString.Append("LithologyInterrelationName], T1.[X_DictionaryLithologyInterrelation.Description]");
            viewString.Append(", T1.[X_DictionaryLithologyInterrelation.FullDescription], T1.[X_DictionaryLitho");
            viewString.Append("logyInterrelation.Thumbnail], T1.[X_DictionaryLithologyInterrelation.OriginalFil");
            viewString.Append("eDataID], T1.[X_DictionaryLithologyInterrelation.Version], T1.[X_DictionaryLitho");
            viewString.Append("logyInterrelation.VersionAntecedentID], T1.[X_DictionaryLithologyInterrelation.V");
            viewString.Append("ersionCertainty], T1.[X_DictionaryLithologyInterrelation.VersionWorkflowInstance");
            viewString.Append("ID], T1.[X_DictionaryLithologyInterrelation.VersionUpdatedBy], T1.[X_DictionaryL");
            viewString.Append("ithologyInterrelation.VersionDeletedBy], T1.[X_DictionaryLithologyInterrelation.");
            viewString.Append("VersionOwnerContactID], T1.[X_DictionaryLithologyInterrelation.VersionOwnerCompa");
            viewString.Append("nyID], T1.[X_DictionaryLithologyInterrelation.VersionUpdated])\r\n    FROM (\r\n    ");
            viewString.Append("    SELECT \r\n            T.LithologyInterrelationID AS [X_DictionaryLithologyInt");
            viewString.Append("errelation.LithologyInterrelationID], \r\n            T.StandardLithologyInterrela");
            viewString.Append("tionName AS [X_DictionaryLithologyInterrelation.StandardLithologyInterrelationNa");
            viewString.Append("me], \r\n            T.CoalLithologyInterrelationName AS [X_DictionaryLithologyInt");
            viewString.Append("errelation.CoalLithologyInterrelationName], \r\n            T.GoldLithologyInterre");
            viewString.Append("lationName AS [X_DictionaryLithologyInterrelation.GoldLithologyInterrelationName");
            viewString.Append("], \r\n            T.CustomLithologyInterrelationName AS [X_DictionaryLithologyInt");
            viewString.Append("errelation.CustomLithologyInterrelationName], \r\n            T.Description AS [X_");
            viewString.Append("DictionaryLithologyInterrelation.Description], \r\n            T.FullDescription A");
            viewString.Append("S [X_DictionaryLithologyInterrelation.FullDescription], \r\n            T.Thumbnai");
            viewString.Append("l AS [X_DictionaryLithologyInterrelation.Thumbnail], \r\n            T.OriginalFil");
            viewString.Append("eDataID AS [X_DictionaryLithologyInterrelation.OriginalFileDataID], \r\n          ");
            viewString.Append("  T.Version AS [X_DictionaryLithologyInterrelation.Version], \r\n            T.Ver");
            viewString.Append("sionAntecedentID AS [X_DictionaryLithologyInterrelation.VersionAntecedentID], \r\n");
            viewString.Append("            T.VersionCertainty AS [X_DictionaryLithologyInterrelation.VersionCer");
            viewString.Append("tainty], \r\n            T.VersionWorkflowInstanceID AS [X_DictionaryLithologyInte");
            viewString.Append("rrelation.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_Dic");
            viewString.Append("tionaryLithologyInterrelation.VersionUpdatedBy], \r\n            T.VersionDeletedB");
            viewString.Append("y AS [X_DictionaryLithologyInterrelation.VersionDeletedBy], \r\n            T.Vers");
            viewString.Append("ionOwnerContactID AS [X_DictionaryLithologyInterrelation.VersionOwnerContactID],");
            viewString.Append(" \r\n            T.VersionOwnerCompanyID AS [X_DictionaryLithologyInterrelation.Ve");
            viewString.Append("rsionOwnerCompanyID], \r\n            T.VersionUpdated AS [X_DictionaryLithologyIn");
            viewString.Append("terrelation.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.Dic");
            viewString.Append("tionaryLithologyInterrelations AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryLithologyInterrelation", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryLithologyQualifier
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView140()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2952);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryLithologyQualifier\r\n        [NKD.");
            viewString.Append("Module.BusinessObjects.Store.X_DictionaryLithologyQualifier](T1.[X_DictionaryLit");
            viewString.Append("hologyQualifier.LithologyQualifierID], T1.[X_DictionaryLithologyQualifier.Standa");
            viewString.Append("rdLithologyQualifierName], T1.[X_DictionaryLithologyQualifier.CoalLithologyQuali");
            viewString.Append("fierName], T1.[X_DictionaryLithologyQualifier.GoldLithologyQualifierName], T1.[X");
            viewString.Append("_DictionaryLithologyQualifier.CustomLithologyQualifierName], T1.[X_DictionaryLit");
            viewString.Append("hologyQualifier.Description], T1.[X_DictionaryLithologyQualifier.FullDescription");
            viewString.Append("], T1.[X_DictionaryLithologyQualifier.Thumbnail], T1.[X_DictionaryLithologyQuali");
            viewString.Append("fier.OriginalFileDataID], T1.[X_DictionaryLithologyQualifier.Version], T1.[X_Dic");
            viewString.Append("tionaryLithologyQualifier.VersionAntecedentID], T1.[X_DictionaryLithologyQualifi");
            viewString.Append("er.VersionCertainty], T1.[X_DictionaryLithologyQualifier.VersionWorkflowInstance");
            viewString.Append("ID], T1.[X_DictionaryLithologyQualifier.VersionUpdatedBy], T1.[X_DictionaryLitho");
            viewString.Append("logyQualifier.VersionDeletedBy], T1.[X_DictionaryLithologyQualifier.VersionOwner");
            viewString.Append("ContactID], T1.[X_DictionaryLithologyQualifier.VersionOwnerCompanyID], T1.[X_Dic");
            viewString.Append("tionaryLithologyQualifier.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n       ");
            viewString.Append("     T.LithologyQualifierID AS [X_DictionaryLithologyQualifier.LithologyQualifie");
            viewString.Append("rID], \r\n            T.StandardLithologyQualifierName AS [X_DictionaryLithologyQu");
            viewString.Append("alifier.StandardLithologyQualifierName], \r\n            T.CoalLithologyQualifierN");
            viewString.Append("ame AS [X_DictionaryLithologyQualifier.CoalLithologyQualifierName], \r\n          ");
            viewString.Append("  T.GoldLithologyQualifierName AS [X_DictionaryLithologyQualifier.GoldLithologyQ");
            viewString.Append("ualifierName], \r\n            T.CustomLithologyQualifierName AS [X_DictionaryLith");
            viewString.Append("ologyQualifier.CustomLithologyQualifierName], \r\n            T.Description AS [X_");
            viewString.Append("DictionaryLithologyQualifier.Description], \r\n            T.FullDescription AS [X");
            viewString.Append("_DictionaryLithologyQualifier.FullDescription], \r\n            T.Thumbnail AS [X_");
            viewString.Append("DictionaryLithologyQualifier.Thumbnail], \r\n            T.OriginalFileDataID AS [");
            viewString.Append("X_DictionaryLithologyQualifier.OriginalFileDataID], \r\n            T.Version AS [");
            viewString.Append("X_DictionaryLithologyQualifier.Version], \r\n            T.VersionAntecedentID AS ");
            viewString.Append("[X_DictionaryLithologyQualifier.VersionAntecedentID], \r\n            T.VersionCer");
            viewString.Append("tainty AS [X_DictionaryLithologyQualifier.VersionCertainty], \r\n            T.Ver");
            viewString.Append("sionWorkflowInstanceID AS [X_DictionaryLithologyQualifier.VersionWorkflowInstanc");
            viewString.Append("eID], \r\n            T.VersionUpdatedBy AS [X_DictionaryLithologyQualifier.Versio");
            viewString.Append("nUpdatedBy], \r\n            T.VersionDeletedBy AS [X_DictionaryLithologyQualifier");
            viewString.Append(".VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [X_DictionaryLithol");
            viewString.Append("ogyQualifier.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [X");
            viewString.Append("_DictionaryLithologyQualifier.VersionOwnerCompanyID], \r\n            T.VersionUpd");
            viewString.Append("ated AS [X_DictionaryLithologyQualifier.VersionUpdated], \r\n            True AS _");
            viewString.Append("from0\r\n        FROM NKDC.DictionaryLithologyQualifiers AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryLithologyQualifier", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryLithologyType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView141()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2682);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryLithologyType\r\n        [NKD.Modul");
            viewString.Append("e.BusinessObjects.Store.X_DictionaryLithologyType](T1.[X_DictionaryLithologyType");
            viewString.Append(".LithologyTypeID], T1.[X_DictionaryLithologyType.StandardLithologyTypeName], T1.");
            viewString.Append("[X_DictionaryLithologyType.CoalLithologyTypeName], T1.[X_DictionaryLithologyType");
            viewString.Append(".GoldLithologyTypeName], T1.[X_DictionaryLithologyType.CustomLithologyTypeName],");
            viewString.Append(" T1.[X_DictionaryLithologyType.Description], T1.[X_DictionaryLithologyType.FullD");
            viewString.Append("escription], T1.[X_DictionaryLithologyType.Thumbnail], T1.[X_DictionaryLithology");
            viewString.Append("Type.OriginalFileDataID], T1.[X_DictionaryLithologyType.Version], T1.[X_Dictiona");
            viewString.Append("ryLithologyType.VersionAntecedentID], T1.[X_DictionaryLithologyType.VersionCerta");
            viewString.Append("inty], T1.[X_DictionaryLithologyType.VersionWorkflowInstanceID], T1.[X_Dictionar");
            viewString.Append("yLithologyType.VersionUpdatedBy], T1.[X_DictionaryLithologyType.VersionDeletedBy");
            viewString.Append("], T1.[X_DictionaryLithologyType.VersionOwnerContactID], T1.[X_DictionaryLitholo");
            viewString.Append("gyType.VersionOwnerCompanyID], T1.[X_DictionaryLithologyType.VersionUpdated])\r\n ");
            viewString.Append("   FROM (\r\n        SELECT \r\n            T.LithologyTypeID AS [X_DictionaryLithol");
            viewString.Append("ogyType.LithologyTypeID], \r\n            T.StandardLithologyTypeName AS [X_Dictio");
            viewString.Append("naryLithologyType.StandardLithologyTypeName], \r\n            T.CoalLithologyTypeN");
            viewString.Append("ame AS [X_DictionaryLithologyType.CoalLithologyTypeName], \r\n            T.GoldLi");
            viewString.Append("thologyTypeName AS [X_DictionaryLithologyType.GoldLithologyTypeName], \r\n        ");
            viewString.Append("    T.CustomLithologyTypeName AS [X_DictionaryLithologyType.CustomLithologyTypeN");
            viewString.Append("ame], \r\n            T.Description AS [X_DictionaryLithologyType.Description], \r\n");
            viewString.Append("            T.FullDescription AS [X_DictionaryLithologyType.FullDescription], \r\n");
            viewString.Append("            T.Thumbnail AS [X_DictionaryLithologyType.Thumbnail], \r\n            ");
            viewString.Append("T.OriginalFileDataID AS [X_DictionaryLithologyType.OriginalFileDataID], \r\n      ");
            viewString.Append("      T.Version AS [X_DictionaryLithologyType.Version], \r\n            T.VersionA");
            viewString.Append("ntecedentID AS [X_DictionaryLithologyType.VersionAntecedentID], \r\n            T.");
            viewString.Append("VersionCertainty AS [X_DictionaryLithologyType.VersionCertainty], \r\n            ");
            viewString.Append("T.VersionWorkflowInstanceID AS [X_DictionaryLithologyType.VersionWorkflowInstanc");
            viewString.Append("eID], \r\n            T.VersionUpdatedBy AS [X_DictionaryLithologyType.VersionUpda");
            viewString.Append("tedBy], \r\n            T.VersionDeletedBy AS [X_DictionaryLithologyType.VersionDe");
            viewString.Append("letedBy], \r\n            T.VersionOwnerContactID AS [X_DictionaryLithologyType.Ve");
            viewString.Append("rsionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [X_DictionaryLith");
            viewString.Append("ologyType.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [X_Dictionar");
            viewString.Append("yLithologyType.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.");
            viewString.Append("DictionaryLithologyTypes AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryLithologyType", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryLocationType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView142()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2628);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryLocationType\r\n        [NKD.Module");
            viewString.Append(".BusinessObjects.Store.X_DictionaryLocationType](T1.[X_DictionaryLocationType.Lo");
            viewString.Append("cationTypeID], T1.[X_DictionaryLocationType.StandardLocationTypeName], T1.[X_Dic");
            viewString.Append("tionaryLocationType.CoalLocationTypeName], T1.[X_DictionaryLocationType.GoldLoca");
            viewString.Append("tionTypeName], T1.[X_DictionaryLocationType.CustomLocationTypeName], T1.[X_Dicti");
            viewString.Append("onaryLocationType.Description], T1.[X_DictionaryLocationType.FullDescription], T");
            viewString.Append("1.[X_DictionaryLocationType.Thumbnail], T1.[X_DictionaryLocationType.OriginalFil");
            viewString.Append("eDataID], T1.[X_DictionaryLocationType.Version], T1.[X_DictionaryLocationType.Ve");
            viewString.Append("rsionAntecedentID], T1.[X_DictionaryLocationType.VersionCertainty], T1.[X_Dictio");
            viewString.Append("naryLocationType.VersionWorkflowInstanceID], T1.[X_DictionaryLocationType.Versio");
            viewString.Append("nUpdatedBy], T1.[X_DictionaryLocationType.VersionDeletedBy], T1.[X_DictionaryLoc");
            viewString.Append("ationType.VersionOwnerContactID], T1.[X_DictionaryLocationType.VersionOwnerCompa");
            viewString.Append("nyID], T1.[X_DictionaryLocationType.VersionUpdated])\r\n    FROM (\r\n        SELECT");
            viewString.Append(" \r\n            T.LocationTypeID AS [X_DictionaryLocationType.LocationTypeID], \r\n");
            viewString.Append("            T.StandardLocationTypeName AS [X_DictionaryLocationType.StandardLoca");
            viewString.Append("tionTypeName], \r\n            T.CoalLocationTypeName AS [X_DictionaryLocationType");
            viewString.Append(".CoalLocationTypeName], \r\n            T.GoldLocationTypeName AS [X_DictionaryLoc");
            viewString.Append("ationType.GoldLocationTypeName], \r\n            T.CustomLocationTypeName AS [X_Di");
            viewString.Append("ctionaryLocationType.CustomLocationTypeName], \r\n            T.Description AS [X_");
            viewString.Append("DictionaryLocationType.Description], \r\n            T.FullDescription AS [X_Dicti");
            viewString.Append("onaryLocationType.FullDescription], \r\n            T.Thumbnail AS [X_DictionaryLo");
            viewString.Append("cationType.Thumbnail], \r\n            T.OriginalFileDataID AS [X_DictionaryLocati");
            viewString.Append("onType.OriginalFileDataID], \r\n            T.Version AS [X_DictionaryLocationType");
            viewString.Append(".Version], \r\n            T.VersionAntecedentID AS [X_DictionaryLocationType.Vers");
            viewString.Append("ionAntecedentID], \r\n            T.VersionCertainty AS [X_DictionaryLocationType.");
            viewString.Append("VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [X_DictionaryLoc");
            viewString.Append("ationType.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_Dic");
            viewString.Append("tionaryLocationType.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_Di");
            viewString.Append("ctionaryLocationType.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS");
            viewString.Append(" [X_DictionaryLocationType.VersionOwnerContactID], \r\n            T.VersionOwnerC");
            viewString.Append("ompanyID AS [X_DictionaryLocationType.VersionOwnerCompanyID], \r\n            T.Ve");
            viewString.Append("rsionUpdated AS [X_DictionaryLocationType.VersionUpdated], \r\n            True AS");
            viewString.Append(" _from0\r\n        FROM NKDC.DictionaryLocationTypes AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryLocationType", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryMechanicalState
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView143()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2790);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryMechanicalState\r\n        [NKD.Mod");
            viewString.Append("ule.BusinessObjects.Store.X_DictionaryMechanicalState](T1.[X_DictionaryMechanica");
            viewString.Append("lState.MechanicalStateID], T1.[X_DictionaryMechanicalState.StandardMechanicalSta");
            viewString.Append("teName], T1.[X_DictionaryMechanicalState.CoalMechanicalStateName], T1.[X_Diction");
            viewString.Append("aryMechanicalState.GoldMechanicalStateName], T1.[X_DictionaryMechanicalState.Cus");
            viewString.Append("tomMechanicalStateName], T1.[X_DictionaryMechanicalState.Description], T1.[X_Dic");
            viewString.Append("tionaryMechanicalState.FullDescription], T1.[X_DictionaryMechanicalState.Thumbna");
            viewString.Append("il], T1.[X_DictionaryMechanicalState.OriginalFileDataID], T1.[X_DictionaryMechan");
            viewString.Append("icalState.Version], T1.[X_DictionaryMechanicalState.VersionAntecedentID], T1.[X_");
            viewString.Append("DictionaryMechanicalState.VersionCertainty], T1.[X_DictionaryMechanicalState.Ver");
            viewString.Append("sionWorkflowInstanceID], T1.[X_DictionaryMechanicalState.VersionUpdatedBy], T1.[");
            viewString.Append("X_DictionaryMechanicalState.VersionDeletedBy], T1.[X_DictionaryMechanicalState.V");
            viewString.Append("ersionOwnerContactID], T1.[X_DictionaryMechanicalState.VersionOwnerCompanyID], T");
            viewString.Append("1.[X_DictionaryMechanicalState.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n  ");
            viewString.Append("          T.MechanicalStateID AS [X_DictionaryMechanicalState.MechanicalStateID]");
            viewString.Append(", \r\n            T.StandardMechanicalStateName AS [X_DictionaryMechanicalState.St");
            viewString.Append("andardMechanicalStateName], \r\n            T.CoalMechanicalStateName AS [X_Dictio");
            viewString.Append("naryMechanicalState.CoalMechanicalStateName], \r\n            T.GoldMechanicalStat");
            viewString.Append("eName AS [X_DictionaryMechanicalState.GoldMechanicalStateName], \r\n            T.");
            viewString.Append("CustomMechanicalStateName AS [X_DictionaryMechanicalState.CustomMechanicalStateN");
            viewString.Append("ame], \r\n            T.Description AS [X_DictionaryMechanicalState.Description], ");
            viewString.Append("\r\n            T.FullDescription AS [X_DictionaryMechanicalState.FullDescription]");
            viewString.Append(", \r\n            T.Thumbnail AS [X_DictionaryMechanicalState.Thumbnail], \r\n      ");
            viewString.Append("      T.OriginalFileDataID AS [X_DictionaryMechanicalState.OriginalFileDataID], ");
            viewString.Append("\r\n            T.Version AS [X_DictionaryMechanicalState.Version], \r\n            ");
            viewString.Append("T.VersionAntecedentID AS [X_DictionaryMechanicalState.VersionAntecedentID], \r\n  ");
            viewString.Append("          T.VersionCertainty AS [X_DictionaryMechanicalState.VersionCertainty], ");
            viewString.Append("\r\n            T.VersionWorkflowInstanceID AS [X_DictionaryMechanicalState.Versio");
            viewString.Append("nWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_DictionaryMechanica");
            viewString.Append("lState.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_DictionaryMecha");
            viewString.Append("nicalState.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [X_Dictio");
            viewString.Append("naryMechanicalState.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyI");
            viewString.Append("D AS [X_DictionaryMechanicalState.VersionOwnerCompanyID], \r\n            T.Versio");
            viewString.Append("nUpdated AS [X_DictionaryMechanicalState.VersionUpdated], \r\n            True AS ");
            viewString.Append("_from0\r\n        FROM NKDC.DictionaryMechanicalStates AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryMechanicalState", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryMineralAbundance
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView144()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2844);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryMineralAbundance\r\n        [NKD.Mo");
            viewString.Append("dule.BusinessObjects.Store.X_DictionaryMineralAbundance](T1.[X_DictionaryMineral");
            viewString.Append("Abundance.MineralAbundanceID], T1.[X_DictionaryMineralAbundance.StandardMineralA");
            viewString.Append("bundanceName], T1.[X_DictionaryMineralAbundance.CoalMineralAbundanceName], T1.[X");
            viewString.Append("_DictionaryMineralAbundance.GoldMineralAbundanceName], T1.[X_DictionaryMineralAb");
            viewString.Append("undance.CustomMineralAbundanceName], T1.[X_DictionaryMineralAbundance.Descriptio");
            viewString.Append("n], T1.[X_DictionaryMineralAbundance.FullDescription], T1.[X_DictionaryMineralAb");
            viewString.Append("undance.Thumbnail], T1.[X_DictionaryMineralAbundance.OriginalFileDataID], T1.[X_");
            viewString.Append("DictionaryMineralAbundance.Version], T1.[X_DictionaryMineralAbundance.VersionAnt");
            viewString.Append("ecedentID], T1.[X_DictionaryMineralAbundance.VersionCertainty], T1.[X_Dictionary");
            viewString.Append("MineralAbundance.VersionWorkflowInstanceID], T1.[X_DictionaryMineralAbundance.Ve");
            viewString.Append("rsionUpdatedBy], T1.[X_DictionaryMineralAbundance.VersionDeletedBy], T1.[X_Dicti");
            viewString.Append("onaryMineralAbundance.VersionOwnerContactID], T1.[X_DictionaryMineralAbundance.V");
            viewString.Append("ersionOwnerCompanyID], T1.[X_DictionaryMineralAbundance.VersionUpdated])\r\n    FR");
            viewString.Append("OM (\r\n        SELECT \r\n            T.MineralAbundanceID AS [X_DictionaryMineralA");
            viewString.Append("bundance.MineralAbundanceID], \r\n            T.StandardMineralAbundanceName AS [X");
            viewString.Append("_DictionaryMineralAbundance.StandardMineralAbundanceName], \r\n            T.CoalM");
            viewString.Append("ineralAbundanceName AS [X_DictionaryMineralAbundance.CoalMineralAbundanceName], ");
            viewString.Append("\r\n            T.GoldMineralAbundanceName AS [X_DictionaryMineralAbundance.GoldMi");
            viewString.Append("neralAbundanceName], \r\n            T.CustomMineralAbundanceName AS [X_Dictionary");
            viewString.Append("MineralAbundance.CustomMineralAbundanceName], \r\n            T.Description AS [X_");
            viewString.Append("DictionaryMineralAbundance.Description], \r\n            T.FullDescription AS [X_D");
            viewString.Append("ictionaryMineralAbundance.FullDescription], \r\n            T.Thumbnail AS [X_Dict");
            viewString.Append("ionaryMineralAbundance.Thumbnail], \r\n            T.OriginalFileDataID AS [X_Dict");
            viewString.Append("ionaryMineralAbundance.OriginalFileDataID], \r\n            T.Version AS [X_Dictio");
            viewString.Append("naryMineralAbundance.Version], \r\n            T.VersionAntecedentID AS [X_Diction");
            viewString.Append("aryMineralAbundance.VersionAntecedentID], \r\n            T.VersionCertainty AS [X");
            viewString.Append("_DictionaryMineralAbundance.VersionCertainty], \r\n            T.VersionWorkflowIn");
            viewString.Append("stanceID AS [X_DictionaryMineralAbundance.VersionWorkflowInstanceID], \r\n        ");
            viewString.Append("    T.VersionUpdatedBy AS [X_DictionaryMineralAbundance.VersionUpdatedBy], \r\n   ");
            viewString.Append("         T.VersionDeletedBy AS [X_DictionaryMineralAbundance.VersionDeletedBy], ");
            viewString.Append("\r\n            T.VersionOwnerContactID AS [X_DictionaryMineralAbundance.VersionOw");
            viewString.Append("nerContactID], \r\n            T.VersionOwnerCompanyID AS [X_DictionaryMineralAbun");
            viewString.Append("dance.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [X_DictionaryMin");
            viewString.Append("eralAbundance.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.D");
            viewString.Append("ictionaryMineralAbundances AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryMineralAbundance", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryMineralAndFossilAbundance
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView145()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3330);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryMineralAndFossilAbundance\r\n      ");
            viewString.Append("  [NKD.Module.BusinessObjects.Store.X_DictionaryMineralAndFossilAbundance](T1.[X");
            viewString.Append("_DictionaryMineralAndFossilAbundance.MineralAndFossilAbundanceID], T1.[X_Diction");
            viewString.Append("aryMineralAndFossilAbundance.StandardMineralAndFossilAbundanceName], T1.[X_Dicti");
            viewString.Append("onaryMineralAndFossilAbundance.CoalMineralAndFossilAbundanceName], T1.[X_Diction");
            viewString.Append("aryMineralAndFossilAbundance.GoldMineralAndFossilAbundanceName], T1.[X_Dictionar");
            viewString.Append("yMineralAndFossilAbundance.CustomMineralAndFossilAbundanceName], T1.[X_Dictionar");
            viewString.Append("yMineralAndFossilAbundance.Description], T1.[X_DictionaryMineralAndFossilAbundan");
            viewString.Append("ce.FullDescription], T1.[X_DictionaryMineralAndFossilAbundance.Thumbnail], T1.[X");
            viewString.Append("_DictionaryMineralAndFossilAbundance.OriginalFileDataID], T1.[X_DictionaryMinera");
            viewString.Append("lAndFossilAbundance.Version], T1.[X_DictionaryMineralAndFossilAbundance.VersionA");
            viewString.Append("ntecedentID], T1.[X_DictionaryMineralAndFossilAbundance.VersionCertainty], T1.[X");
            viewString.Append("_DictionaryMineralAndFossilAbundance.VersionWorkflowInstanceID], T1.[X_Dictionar");
            viewString.Append("yMineralAndFossilAbundance.VersionUpdatedBy], T1.[X_DictionaryMineralAndFossilAb");
            viewString.Append("undance.VersionDeletedBy], T1.[X_DictionaryMineralAndFossilAbundance.VersionOwne");
            viewString.Append("rContactID], T1.[X_DictionaryMineralAndFossilAbundance.VersionOwnerCompanyID], T");
            viewString.Append("1.[X_DictionaryMineralAndFossilAbundance.VersionUpdated])\r\n    FROM (\r\n        S");
            viewString.Append("ELECT \r\n            T.MineralAndFossilAbundanceID AS [X_DictionaryMineralAndFoss");
            viewString.Append("ilAbundance.MineralAndFossilAbundanceID], \r\n            T.StandardMineralAndFoss");
            viewString.Append("ilAbundanceName AS [X_DictionaryMineralAndFossilAbundance.StandardMineralAndFoss");
            viewString.Append("ilAbundanceName], \r\n            T.CoalMineralAndFossilAbundanceName AS [X_Dictio");
            viewString.Append("naryMineralAndFossilAbundance.CoalMineralAndFossilAbundanceName], \r\n            ");
            viewString.Append("T.GoldMineralAndFossilAbundanceName AS [X_DictionaryMineralAndFossilAbundance.Go");
            viewString.Append("ldMineralAndFossilAbundanceName], \r\n            T.CustomMineralAndFossilAbundanc");
            viewString.Append("eName AS [X_DictionaryMineralAndFossilAbundance.CustomMineralAndFossilAbundanceN");
            viewString.Append("ame], \r\n            T.Description AS [X_DictionaryMineralAndFossilAbundance.Desc");
            viewString.Append("ription], \r\n            T.FullDescription AS [X_DictionaryMineralAndFossilAbunda");
            viewString.Append("nce.FullDescription], \r\n            T.Thumbnail AS [X_DictionaryMineralAndFossil");
            viewString.Append("Abundance.Thumbnail], \r\n            T.OriginalFileDataID AS [X_DictionaryMineral");
            viewString.Append("AndFossilAbundance.OriginalFileDataID], \r\n            T.Version AS [X_Dictionary");
            viewString.Append("MineralAndFossilAbundance.Version], \r\n            T.VersionAntecedentID AS [X_Di");
            viewString.Append("ctionaryMineralAndFossilAbundance.VersionAntecedentID], \r\n            T.VersionC");
            viewString.Append("ertainty AS [X_DictionaryMineralAndFossilAbundance.VersionCertainty], \r\n        ");
            viewString.Append("    T.VersionWorkflowInstanceID AS [X_DictionaryMineralAndFossilAbundance.Versio");
            viewString.Append("nWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_DictionaryMineralAn");
            viewString.Append("dFossilAbundance.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_Dicti");
            viewString.Append("onaryMineralAndFossilAbundance.VersionDeletedBy], \r\n            T.VersionOwnerCo");
            viewString.Append("ntactID AS [X_DictionaryMineralAndFossilAbundance.VersionOwnerContactID], \r\n    ");
            viewString.Append("        T.VersionOwnerCompanyID AS [X_DictionaryMineralAndFossilAbundance.Versio");
            viewString.Append("nOwnerCompanyID], \r\n            T.VersionUpdated AS [X_DictionaryMineralAndFossi");
            viewString.Append("lAbundance.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.Dict");
            viewString.Append("ionaryMineralAndFossilAbundances AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryMineralAndFossilAbundance", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryMineralAndFossilAssociation
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView146()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3438);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryMineralAndFossilAssociation\r\n    ");
            viewString.Append("    [NKD.Module.BusinessObjects.Store.X_DictionaryMineralAndFossilAssociation](T");
            viewString.Append("1.[X_DictionaryMineralAndFossilAssociation.MineralAndFossilAssociationID], T1.[X");
            viewString.Append("_DictionaryMineralAndFossilAssociation.StandardMineralAndFossilAssociationName],");
            viewString.Append(" T1.[X_DictionaryMineralAndFossilAssociation.CoalMineralAndFossilAssociationName");
            viewString.Append("], T1.[X_DictionaryMineralAndFossilAssociation.GoldMineralAndFossilAssociationNa");
            viewString.Append("me], T1.[X_DictionaryMineralAndFossilAssociation.CustomMineralAndFossilAssociati");
            viewString.Append("onName], T1.[X_DictionaryMineralAndFossilAssociation.Description], T1.[X_Diction");
            viewString.Append("aryMineralAndFossilAssociation.FullDescription], T1.[X_DictionaryMineralAndFossi");
            viewString.Append("lAssociation.Thumbnail], T1.[X_DictionaryMineralAndFossilAssociation.OriginalFil");
            viewString.Append("eDataID], T1.[X_DictionaryMineralAndFossilAssociation.Version], T1.[X_Dictionary");
            viewString.Append("MineralAndFossilAssociation.VersionAntecedentID], T1.[X_DictionaryMineralAndFoss");
            viewString.Append("ilAssociation.VersionCertainty], T1.[X_DictionaryMineralAndFossilAssociation.Ver");
            viewString.Append("sionWorkflowInstanceID], T1.[X_DictionaryMineralAndFossilAssociation.VersionUpda");
            viewString.Append("tedBy], T1.[X_DictionaryMineralAndFossilAssociation.VersionDeletedBy], T1.[X_Dic");
            viewString.Append("tionaryMineralAndFossilAssociation.VersionOwnerContactID], T1.[X_DictionaryMiner");
            viewString.Append("alAndFossilAssociation.VersionOwnerCompanyID], T1.[X_DictionaryMineralAndFossilA");
            viewString.Append("ssociation.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.MineralA");
            viewString.Append("ndFossilAssociationID AS [X_DictionaryMineralAndFossilAssociation.MineralAndFoss");
            viewString.Append("ilAssociationID], \r\n            T.StandardMineralAndFossilAssociationName AS [X_");
            viewString.Append("DictionaryMineralAndFossilAssociation.StandardMineralAndFossilAssociationName], ");
            viewString.Append("\r\n            T.CoalMineralAndFossilAssociationName AS [X_DictionaryMineralAndFo");
            viewString.Append("ssilAssociation.CoalMineralAndFossilAssociationName], \r\n            T.GoldMinera");
            viewString.Append("lAndFossilAssociationName AS [X_DictionaryMineralAndFossilAssociation.GoldMinera");
            viewString.Append("lAndFossilAssociationName], \r\n            T.CustomMineralAndFossilAssociationNam");
            viewString.Append("e AS [X_DictionaryMineralAndFossilAssociation.CustomMineralAndFossilAssociationN");
            viewString.Append("ame], \r\n            T.Description AS [X_DictionaryMineralAndFossilAssociation.De");
            viewString.Append("scription], \r\n            T.FullDescription AS [X_DictionaryMineralAndFossilAsso");
            viewString.Append("ciation.FullDescription], \r\n            T.Thumbnail AS [X_DictionaryMineralAndFo");
            viewString.Append("ssilAssociation.Thumbnail], \r\n            T.OriginalFileDataID AS [X_DictionaryM");
            viewString.Append("ineralAndFossilAssociation.OriginalFileDataID], \r\n            T.Version AS [X_Di");
            viewString.Append("ctionaryMineralAndFossilAssociation.Version], \r\n            T.VersionAntecedentI");
            viewString.Append("D AS [X_DictionaryMineralAndFossilAssociation.VersionAntecedentID], \r\n          ");
            viewString.Append("  T.VersionCertainty AS [X_DictionaryMineralAndFossilAssociation.VersionCertaint");
            viewString.Append("y], \r\n            T.VersionWorkflowInstanceID AS [X_DictionaryMineralAndFossilAs");
            viewString.Append("sociation.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_Dic");
            viewString.Append("tionaryMineralAndFossilAssociation.VersionUpdatedBy], \r\n            T.VersionDel");
            viewString.Append("etedBy AS [X_DictionaryMineralAndFossilAssociation.VersionDeletedBy], \r\n        ");
            viewString.Append("    T.VersionOwnerContactID AS [X_DictionaryMineralAndFossilAssociation.VersionO");
            viewString.Append("wnerContactID], \r\n            T.VersionOwnerCompanyID AS [X_DictionaryMineralAnd");
            viewString.Append("FossilAssociation.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [X_D");
            viewString.Append("ictionaryMineralAndFossilAssociation.VersionUpdated], \r\n            True AS _fro");
            viewString.Append("m0\r\n        FROM NKDC.DictionaryMineralAndFossilAssociations AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryMineralAndFossilAssociation", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryMineralAndFossilType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView147()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3060);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryMineralAndFossilType\r\n        [NK");
            viewString.Append("D.Module.BusinessObjects.Store.X_DictionaryMineralAndFossilType](T1.[X_Dictionar");
            viewString.Append("yMineralAndFossilType.MineralAndFossilTypeID], T1.[X_DictionaryMineralAndFossilT");
            viewString.Append("ype.StandardMineralAndFossilTypeName], T1.[X_DictionaryMineralAndFossilType.Coal");
            viewString.Append("MineralAndFossilTypeName], T1.[X_DictionaryMineralAndFossilType.GoldMineralAndFo");
            viewString.Append("ssilTypeName], T1.[X_DictionaryMineralAndFossilType.CustomMineralAndFossilTypeNa");
            viewString.Append("me], T1.[X_DictionaryMineralAndFossilType.Description], T1.[X_DictionaryMineralA");
            viewString.Append("ndFossilType.FullDescription], T1.[X_DictionaryMineralAndFossilType.Thumbnail], ");
            viewString.Append("T1.[X_DictionaryMineralAndFossilType.OriginalFileDataID], T1.[X_DictionaryMinera");
            viewString.Append("lAndFossilType.Version], T1.[X_DictionaryMineralAndFossilType.VersionAntecedentI");
            viewString.Append("D], T1.[X_DictionaryMineralAndFossilType.VersionCertainty], T1.[X_DictionaryMine");
            viewString.Append("ralAndFossilType.VersionWorkflowInstanceID], T1.[X_DictionaryMineralAndFossilTyp");
            viewString.Append("e.VersionUpdatedBy], T1.[X_DictionaryMineralAndFossilType.VersionDeletedBy], T1.");
            viewString.Append("[X_DictionaryMineralAndFossilType.VersionOwnerContactID], T1.[X_DictionaryMinera");
            viewString.Append("lAndFossilType.VersionOwnerCompanyID], T1.[X_DictionaryMineralAndFossilType.Vers");
            viewString.Append("ionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.MineralAndFossilTypeID ");
            viewString.Append("AS [X_DictionaryMineralAndFossilType.MineralAndFossilTypeID], \r\n            T.St");
            viewString.Append("andardMineralAndFossilTypeName AS [X_DictionaryMineralAndFossilType.StandardMine");
            viewString.Append("ralAndFossilTypeName], \r\n            T.CoalMineralAndFossilTypeName AS [X_Dictio");
            viewString.Append("naryMineralAndFossilType.CoalMineralAndFossilTypeName], \r\n            T.GoldMine");
            viewString.Append("ralAndFossilTypeName AS [X_DictionaryMineralAndFossilType.GoldMineralAndFossilTy");
            viewString.Append("peName], \r\n            T.CustomMineralAndFossilTypeName AS [X_DictionaryMineralA");
            viewString.Append("ndFossilType.CustomMineralAndFossilTypeName], \r\n            T.Description AS [X_");
            viewString.Append("DictionaryMineralAndFossilType.Description], \r\n            T.FullDescription AS ");
            viewString.Append("[X_DictionaryMineralAndFossilType.FullDescription], \r\n            T.Thumbnail AS");
            viewString.Append(" [X_DictionaryMineralAndFossilType.Thumbnail], \r\n            T.OriginalFileDataI");
            viewString.Append("D AS [X_DictionaryMineralAndFossilType.OriginalFileDataID], \r\n            T.Vers");
            viewString.Append("ion AS [X_DictionaryMineralAndFossilType.Version], \r\n            T.VersionAntece");
            viewString.Append("dentID AS [X_DictionaryMineralAndFossilType.VersionAntecedentID], \r\n            ");
            viewString.Append("T.VersionCertainty AS [X_DictionaryMineralAndFossilType.VersionCertainty], \r\n   ");
            viewString.Append("         T.VersionWorkflowInstanceID AS [X_DictionaryMineralAndFossilType.Versio");
            viewString.Append("nWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_DictionaryMineralAn");
            viewString.Append("dFossilType.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_Dictionary");
            viewString.Append("MineralAndFossilType.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS");
            viewString.Append(" [X_DictionaryMineralAndFossilType.VersionOwnerContactID], \r\n            T.Versi");
            viewString.Append("onOwnerCompanyID AS [X_DictionaryMineralAndFossilType.VersionOwnerCompanyID], \r\n");
            viewString.Append("            T.VersionUpdated AS [X_DictionaryMineralAndFossilType.VersionUpdated");
            viewString.Append("], \r\n            True AS _from0\r\n        FROM NKDC.DictionaryMineralAndFossilTyp");
            viewString.Append("es AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryMineralAndFossilType", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryMineralForm
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView148()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2574);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryMineralForm\r\n        [NKD.Module.");
            viewString.Append("BusinessObjects.Store.X_DictionaryMineralForm](T1.[X_DictionaryMineralForm.Miner");
            viewString.Append("alFormID], T1.[X_DictionaryMineralForm.StandardMineralFormName], T1.[X_Dictionar");
            viewString.Append("yMineralForm.CoalMineralFormName], T1.[X_DictionaryMineralForm.GoldMineralFormNa");
            viewString.Append("me], T1.[X_DictionaryMineralForm.CustomMineralFormName], T1.[X_DictionaryMineral");
            viewString.Append("Form.Description], T1.[X_DictionaryMineralForm.FullDescription], T1.[X_Dictionar");
            viewString.Append("yMineralForm.Thumbnail], T1.[X_DictionaryMineralForm.OriginalFileDataID], T1.[X_");
            viewString.Append("DictionaryMineralForm.Version], T1.[X_DictionaryMineralForm.VersionAntecedentID]");
            viewString.Append(", T1.[X_DictionaryMineralForm.VersionCertainty], T1.[X_DictionaryMineralForm.Ver");
            viewString.Append("sionWorkflowInstanceID], T1.[X_DictionaryMineralForm.VersionUpdatedBy], T1.[X_Di");
            viewString.Append("ctionaryMineralForm.VersionDeletedBy], T1.[X_DictionaryMineralForm.VersionOwnerC");
            viewString.Append("ontactID], T1.[X_DictionaryMineralForm.VersionOwnerCompanyID], T1.[X_DictionaryM");
            viewString.Append("ineralForm.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.MineralF");
            viewString.Append("ormID AS [X_DictionaryMineralForm.MineralFormID], \r\n            T.StandardMinera");
            viewString.Append("lFormName AS [X_DictionaryMineralForm.StandardMineralFormName], \r\n            T.");
            viewString.Append("CoalMineralFormName AS [X_DictionaryMineralForm.CoalMineralFormName], \r\n        ");
            viewString.Append("    T.GoldMineralFormName AS [X_DictionaryMineralForm.GoldMineralFormName], \r\n  ");
            viewString.Append("          T.CustomMineralFormName AS [X_DictionaryMineralForm.CustomMineralFormN");
            viewString.Append("ame], \r\n            T.Description AS [X_DictionaryMineralForm.Description], \r\n  ");
            viewString.Append("          T.FullDescription AS [X_DictionaryMineralForm.FullDescription], \r\n    ");
            viewString.Append("        T.Thumbnail AS [X_DictionaryMineralForm.Thumbnail], \r\n            T.Orig");
            viewString.Append("inalFileDataID AS [X_DictionaryMineralForm.OriginalFileDataID], \r\n            T.");
            viewString.Append("Version AS [X_DictionaryMineralForm.Version], \r\n            T.VersionAntecedentI");
            viewString.Append("D AS [X_DictionaryMineralForm.VersionAntecedentID], \r\n            T.VersionCerta");
            viewString.Append("inty AS [X_DictionaryMineralForm.VersionCertainty], \r\n            T.VersionWorkf");
            viewString.Append("lowInstanceID AS [X_DictionaryMineralForm.VersionWorkflowInstanceID], \r\n        ");
            viewString.Append("    T.VersionUpdatedBy AS [X_DictionaryMineralForm.VersionUpdatedBy], \r\n        ");
            viewString.Append("    T.VersionDeletedBy AS [X_DictionaryMineralForm.VersionDeletedBy], \r\n        ");
            viewString.Append("    T.VersionOwnerContactID AS [X_DictionaryMineralForm.VersionOwnerContactID], ");
            viewString.Append("\r\n            T.VersionOwnerCompanyID AS [X_DictionaryMineralForm.VersionOwnerCo");
            viewString.Append("mpanyID], \r\n            T.VersionUpdated AS [X_DictionaryMineralForm.VersionUpda");
            viewString.Append("ted], \r\n            True AS _from0\r\n        FROM NKDC.DictionaryMineralForms AS ");
            viewString.Append("T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryMineralForm", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryMineralStyle
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView149()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2628);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryMineralStyle\r\n        [NKD.Module");
            viewString.Append(".BusinessObjects.Store.X_DictionaryMineralStyle](T1.[X_DictionaryMineralStyle.Mi");
            viewString.Append("neralStyleID], T1.[X_DictionaryMineralStyle.StandardMineralStyleName], T1.[X_Dic");
            viewString.Append("tionaryMineralStyle.CoalMineralStyleName], T1.[X_DictionaryMineralStyle.GoldMine");
            viewString.Append("ralStyleName], T1.[X_DictionaryMineralStyle.CustomMineralStyleName], T1.[X_Dicti");
            viewString.Append("onaryMineralStyle.Description], T1.[X_DictionaryMineralStyle.FullDescription], T");
            viewString.Append("1.[X_DictionaryMineralStyle.Thumbnail], T1.[X_DictionaryMineralStyle.OriginalFil");
            viewString.Append("eDataID], T1.[X_DictionaryMineralStyle.Version], T1.[X_DictionaryMineralStyle.Ve");
            viewString.Append("rsionAntecedentID], T1.[X_DictionaryMineralStyle.VersionCertainty], T1.[X_Dictio");
            viewString.Append("naryMineralStyle.VersionWorkflowInstanceID], T1.[X_DictionaryMineralStyle.Versio");
            viewString.Append("nUpdatedBy], T1.[X_DictionaryMineralStyle.VersionDeletedBy], T1.[X_DictionaryMin");
            viewString.Append("eralStyle.VersionOwnerContactID], T1.[X_DictionaryMineralStyle.VersionOwnerCompa");
            viewString.Append("nyID], T1.[X_DictionaryMineralStyle.VersionUpdated])\r\n    FROM (\r\n        SELECT");
            viewString.Append(" \r\n            T.MineralStyleID AS [X_DictionaryMineralStyle.MineralStyleID], \r\n");
            viewString.Append("            T.StandardMineralStyleName AS [X_DictionaryMineralStyle.StandardMine");
            viewString.Append("ralStyleName], \r\n            T.CoalMineralStyleName AS [X_DictionaryMineralStyle");
            viewString.Append(".CoalMineralStyleName], \r\n            T.GoldMineralStyleName AS [X_DictionaryMin");
            viewString.Append("eralStyle.GoldMineralStyleName], \r\n            T.CustomMineralStyleName AS [X_Di");
            viewString.Append("ctionaryMineralStyle.CustomMineralStyleName], \r\n            T.Description AS [X_");
            viewString.Append("DictionaryMineralStyle.Description], \r\n            T.FullDescription AS [X_Dicti");
            viewString.Append("onaryMineralStyle.FullDescription], \r\n            T.Thumbnail AS [X_DictionaryMi");
            viewString.Append("neralStyle.Thumbnail], \r\n            T.OriginalFileDataID AS [X_DictionaryMinera");
            viewString.Append("lStyle.OriginalFileDataID], \r\n            T.Version AS [X_DictionaryMineralStyle");
            viewString.Append(".Version], \r\n            T.VersionAntecedentID AS [X_DictionaryMineralStyle.Vers");
            viewString.Append("ionAntecedentID], \r\n            T.VersionCertainty AS [X_DictionaryMineralStyle.");
            viewString.Append("VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [X_DictionaryMin");
            viewString.Append("eralStyle.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_Dic");
            viewString.Append("tionaryMineralStyle.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_Di");
            viewString.Append("ctionaryMineralStyle.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS");
            viewString.Append(" [X_DictionaryMineralStyle.VersionOwnerContactID], \r\n            T.VersionOwnerC");
            viewString.Append("ompanyID AS [X_DictionaryMineralStyle.VersionOwnerCompanyID], \r\n            T.Ve");
            viewString.Append("rsionUpdated AS [X_DictionaryMineralStyle.VersionUpdated], \r\n            True AS");
            viewString.Append(" _from0\r\n        FROM NKDC.DictionaryMineralStyles AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryMineralStyle", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryMineralType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView150()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2574);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryMineralType\r\n        [NKD.Module.");
            viewString.Append("BusinessObjects.Store.X_DictionaryMineralType](T1.[X_DictionaryMineralType.Miner");
            viewString.Append("alTypeID], T1.[X_DictionaryMineralType.StandardMineralTypeName], T1.[X_Dictionar");
            viewString.Append("yMineralType.CoalMineralTypeName], T1.[X_DictionaryMineralType.GoldMineralTypeNa");
            viewString.Append("me], T1.[X_DictionaryMineralType.CustomMineralTypeName], T1.[X_DictionaryMineral");
            viewString.Append("Type.Description], T1.[X_DictionaryMineralType.FullDescription], T1.[X_Dictionar");
            viewString.Append("yMineralType.Thumbnail], T1.[X_DictionaryMineralType.OriginalFileDataID], T1.[X_");
            viewString.Append("DictionaryMineralType.Version], T1.[X_DictionaryMineralType.VersionAntecedentID]");
            viewString.Append(", T1.[X_DictionaryMineralType.VersionCertainty], T1.[X_DictionaryMineralType.Ver");
            viewString.Append("sionWorkflowInstanceID], T1.[X_DictionaryMineralType.VersionUpdatedBy], T1.[X_Di");
            viewString.Append("ctionaryMineralType.VersionDeletedBy], T1.[X_DictionaryMineralType.VersionOwnerC");
            viewString.Append("ontactID], T1.[X_DictionaryMineralType.VersionOwnerCompanyID], T1.[X_DictionaryM");
            viewString.Append("ineralType.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.MineralT");
            viewString.Append("ypeID AS [X_DictionaryMineralType.MineralTypeID], \r\n            T.StandardMinera");
            viewString.Append("lTypeName AS [X_DictionaryMineralType.StandardMineralTypeName], \r\n            T.");
            viewString.Append("CoalMineralTypeName AS [X_DictionaryMineralType.CoalMineralTypeName], \r\n        ");
            viewString.Append("    T.GoldMineralTypeName AS [X_DictionaryMineralType.GoldMineralTypeName], \r\n  ");
            viewString.Append("          T.CustomMineralTypeName AS [X_DictionaryMineralType.CustomMineralTypeN");
            viewString.Append("ame], \r\n            T.Description AS [X_DictionaryMineralType.Description], \r\n  ");
            viewString.Append("          T.FullDescription AS [X_DictionaryMineralType.FullDescription], \r\n    ");
            viewString.Append("        T.Thumbnail AS [X_DictionaryMineralType.Thumbnail], \r\n            T.Orig");
            viewString.Append("inalFileDataID AS [X_DictionaryMineralType.OriginalFileDataID], \r\n            T.");
            viewString.Append("Version AS [X_DictionaryMineralType.Version], \r\n            T.VersionAntecedentI");
            viewString.Append("D AS [X_DictionaryMineralType.VersionAntecedentID], \r\n            T.VersionCerta");
            viewString.Append("inty AS [X_DictionaryMineralType.VersionCertainty], \r\n            T.VersionWorkf");
            viewString.Append("lowInstanceID AS [X_DictionaryMineralType.VersionWorkflowInstanceID], \r\n        ");
            viewString.Append("    T.VersionUpdatedBy AS [X_DictionaryMineralType.VersionUpdatedBy], \r\n        ");
            viewString.Append("    T.VersionDeletedBy AS [X_DictionaryMineralType.VersionDeletedBy], \r\n        ");
            viewString.Append("    T.VersionOwnerContactID AS [X_DictionaryMineralType.VersionOwnerContactID], ");
            viewString.Append("\r\n            T.VersionOwnerCompanyID AS [X_DictionaryMineralType.VersionOwnerCo");
            viewString.Append("mpanyID], \r\n            T.VersionUpdated AS [X_DictionaryMineralType.VersionUpda");
            viewString.Append("ted], \r\n            True AS _from0\r\n        FROM NKDC.DictionaryMineralTypes AS ");
            viewString.Append("T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryMineralType", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryModel
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView151()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3857);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryModel\r\n        [NKD.Module.Busine");
            viewString.Append("ssObjects.Store.X_DictionaryModel](T1.[X_DictionaryModel.ModelID], T1.[X_Diction");
            viewString.Append("aryModel.ParentModelID], T1.[X_DictionaryModel.StandardModelName], T1.[X_Diction");
            viewString.Append("aryModel.EcriModelName], T1.[X_DictionaryModel.CustomModelName], T1.[X_Dictionar");
            viewString.Append("yModel.CompanyID], T1.[X_DictionaryModel.OriginalManufacturerName], T1.[X_Dictio");
            viewString.Append("naryModel.ModelStatusID], T1.[X_DictionaryModel.DeviceTypeID], T1.[X_DictionaryM");
            viewString.Append("odel.IsMake], T1.[X_DictionaryModel.ManufacturedFrom], T1.[X_DictionaryModel.Man");
            viewString.Append("ufacturedUntil], T1.[X_DictionaryModel.SupportedUntil], T1.[X_DictionaryModel.Es");
            viewString.Append("timatedLifetimeUnitID], T1.[X_DictionaryModel.EstimatedLifetime], T1.[X_Dictiona");
            viewString.Append("ryModel.Description], T1.[X_DictionaryModel.FullDescription], T1.[X_DictionaryMo");
            viewString.Append("del.UserGuideFileDataID], T1.[X_DictionaryModel.DefaultLicenseTypeID], T1.[X_Dic");
            viewString.Append("tionaryModel.SecureFileDataID], T1.[X_DictionaryModel.SecureRedirectURL], T1.[X_");
            viewString.Append("DictionaryModel.Thumbnail], T1.[X_DictionaryModel.OriginalFileDataID], T1.[X_Dic");
            viewString.Append("tionaryModel.Version], T1.[X_DictionaryModel.VersionAntecedentID], T1.[X_Diction");
            viewString.Append("aryModel.VersionCertainty], T1.[X_DictionaryModel.VersionWorkflowInstanceID], T1");
            viewString.Append(".[X_DictionaryModel.VersionUpdatedBy], T1.[X_DictionaryModel.VersionDeletedBy], ");
            viewString.Append("T1.[X_DictionaryModel.VersionOwnerContactID], T1.[X_DictionaryModel.VersionOwner");
            viewString.Append("CompanyID], T1.[X_DictionaryModel.VersionUpdated])\r\n    FROM (\r\n        SELECT \r");
            viewString.Append("\n            T.ModelID AS [X_DictionaryModel.ModelID], \r\n            T.ParentMod");
            viewString.Append("elID AS [X_DictionaryModel.ParentModelID], \r\n            T.StandardModelName AS ");
            viewString.Append("[X_DictionaryModel.StandardModelName], \r\n            T.EcriModelName AS [X_Dicti");
            viewString.Append("onaryModel.EcriModelName], \r\n            T.CustomModelName AS [X_DictionaryModel");
            viewString.Append(".CustomModelName], \r\n            T.CompanyID AS [X_DictionaryModel.CompanyID], \r");
            viewString.Append("\n            T.OriginalManufacturerName AS [X_DictionaryModel.OriginalManufactur");
            viewString.Append("erName], \r\n            T.ModelStatusID AS [X_DictionaryModel.ModelStatusID], \r\n ");
            viewString.Append("           T.DeviceTypeID AS [X_DictionaryModel.DeviceTypeID], \r\n            T.I");
            viewString.Append("sMake AS [X_DictionaryModel.IsMake], \r\n            T.ManufacturedFrom AS [X_Dict");
            viewString.Append("ionaryModel.ManufacturedFrom], \r\n            T.ManufacturedUntil AS [X_Dictionar");
            viewString.Append("yModel.ManufacturedUntil], \r\n            T.SupportedUntil AS [X_DictionaryModel.");
            viewString.Append("SupportedUntil], \r\n            T.EstimatedLifetimeUnitID AS [X_DictionaryModel.E");
            viewString.Append("stimatedLifetimeUnitID], \r\n            T.EstimatedLifetime AS [X_DictionaryModel");
            viewString.Append(".EstimatedLifetime], \r\n            T.Description AS [X_DictionaryModel.Descripti");
            viewString.Append("on], \r\n            T.FullDescription AS [X_DictionaryModel.FullDescription], \r\n ");
            viewString.Append("           T.UserGuideFileDataID AS [X_DictionaryModel.UserGuideFileDataID], \r\n ");
            viewString.Append("           T.DefaultLicenseTypeID AS [X_DictionaryModel.DefaultLicenseTypeID], \r");
            viewString.Append("\n            T.SecureFileDataID AS [X_DictionaryModel.SecureFileDataID], \r\n     ");
            viewString.Append("       T.SecureRedirectURL AS [X_DictionaryModel.SecureRedirectURL], \r\n         ");
            viewString.Append("   T.Thumbnail AS [X_DictionaryModel.Thumbnail], \r\n            T.OriginalFileDat");
            viewString.Append("aID AS [X_DictionaryModel.OriginalFileDataID], \r\n            T.Version AS [X_Dic");
            viewString.Append("tionaryModel.Version], \r\n            T.VersionAntecedentID AS [X_DictionaryModel");
            viewString.Append(".VersionAntecedentID], \r\n            T.VersionCertainty AS [X_DictionaryModel.Ve");
            viewString.Append("rsionCertainty], \r\n            T.VersionWorkflowInstanceID AS [X_DictionaryModel");
            viewString.Append(".VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_DictionaryMo");
            viewString.Append("del.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_DictionaryModel.Ve");
            viewString.Append("rsionDeletedBy], \r\n            T.VersionOwnerContactID AS [X_DictionaryModel.Ver");
            viewString.Append("sionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [X_DictionaryModel");
            viewString.Append(".VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [X_DictionaryModel.Ve");
            viewString.Append("rsionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.DictionaryModels ");
            viewString.Append("AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryModel", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryModelCategory
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView152()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryModelCategory", "\r\n    SELECT VALUE -- Constructing X_DictionaryModelCategory\r\n        [NKD.Module" +
                    ".BusinessObjects.Store.X_DictionaryModelCategory](T1.[X_DictionaryModelCategory." +
                    "ModelCategoryID], T1.[X_DictionaryModelCategory.ModelID], T1.[X_DictionaryModelC" +
                    "ategory.CategoryDeviceTypeID], T1.[X_DictionaryModelCategory.Version], T1.[X_Dic" +
                    "tionaryModelCategory.VersionAntecedentID], T1.[X_DictionaryModelCategory.Version" +
                    "Certainty], T1.[X_DictionaryModelCategory.VersionWorkflowInstanceID], T1.[X_Dict" +
                    "ionaryModelCategory.VersionUpdatedBy], T1.[X_DictionaryModelCategory.VersionDele" +
                    "tedBy], T1.[X_DictionaryModelCategory.VersionOwnerContactID], T1.[X_DictionaryMo" +
                    "delCategory.VersionOwnerCompanyID], T1.[X_DictionaryModelCategory.VersionUpdated" +
                    "])\r\n    FROM (\r\n        SELECT \r\n            T.ModelCategoryID AS [X_DictionaryM" +
                    "odelCategory.ModelCategoryID], \r\n            T.ModelID AS [X_DictionaryModelCate" +
                    "gory.ModelID], \r\n            T.CategoryDeviceTypeID AS [X_DictionaryModelCategor" +
                    "y.CategoryDeviceTypeID], \r\n            T.Version AS [X_DictionaryModelCategory.V" +
                    "ersion], \r\n            T.VersionAntecedentID AS [X_DictionaryModelCategory.Versi" +
                    "onAntecedentID], \r\n            T.VersionCertainty AS [X_DictionaryModelCategory." +
                    "VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [X_DictionaryMod" +
                    "elCategory.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_Di" +
                    "ctionaryModelCategory.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_" +
                    "DictionaryModelCategory.VersionDeletedBy], \r\n            T.VersionOwnerContactID" +
                    " AS [X_DictionaryModelCategory.VersionOwnerContactID], \r\n            T.VersionOw" +
                    "nerCompanyID AS [X_DictionaryModelCategory.VersionOwnerCompanyID], \r\n           " +
                    " T.VersionUpdated AS [X_DictionaryModelCategory.VersionUpdated], \r\n            T" +
                    "rue AS _from0\r\n        FROM NKDC.DictionaryModelCategories AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryModelRelation
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView153()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2071);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryModelRelation\r\n        [NKD.Modul");
            viewString.Append("e.BusinessObjects.Store.X_DictionaryModelRelation](T1.[X_DictionaryModelRelation");
            viewString.Append(".ModelRelationID], T1.[X_DictionaryModelRelation.OriginalModelID], T1.[X_Diction");
            viewString.Append("aryModelRelation.RelatedModelID], T1.[X_DictionaryModelRelation.RelationTypeID],");
            viewString.Append(" T1.[X_DictionaryModelRelation.Related], T1.[X_DictionaryModelRelation.Version],");
            viewString.Append(" T1.[X_DictionaryModelRelation.VersionAntecedentID], T1.[X_DictionaryModelRelati");
            viewString.Append("on.VersionCertainty], T1.[X_DictionaryModelRelation.VersionWorkflowInstanceID], ");
            viewString.Append("T1.[X_DictionaryModelRelation.VersionUpdatedBy], T1.[X_DictionaryModelRelation.V");
            viewString.Append("ersionDeletedBy], T1.[X_DictionaryModelRelation.VersionOwnerContactID], T1.[X_Di");
            viewString.Append("ctionaryModelRelation.VersionOwnerCompanyID], T1.[X_DictionaryModelRelation.Vers");
            viewString.Append("ionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.ModelRelationID AS [X_D");
            viewString.Append("ictionaryModelRelation.ModelRelationID], \r\n            T.OriginalModelID AS [X_D");
            viewString.Append("ictionaryModelRelation.OriginalModelID], \r\n            T.RelatedModelID AS [X_Di");
            viewString.Append("ctionaryModelRelation.RelatedModelID], \r\n            T.RelationTypeID AS [X_Dict");
            viewString.Append("ionaryModelRelation.RelationTypeID], \r\n            T.Related AS [X_DictionaryMod");
            viewString.Append("elRelation.Related], \r\n            T.Version AS [X_DictionaryModelRelation.Versi");
            viewString.Append("on], \r\n            T.VersionAntecedentID AS [X_DictionaryModelRelation.VersionAn");
            viewString.Append("tecedentID], \r\n            T.VersionCertainty AS [X_DictionaryModelRelation.Vers");
            viewString.Append("ionCertainty], \r\n            T.VersionWorkflowInstanceID AS [X_DictionaryModelRe");
            viewString.Append("lation.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_Dictio");
            viewString.Append("naryModelRelation.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_Dict");
            viewString.Append("ionaryModelRelation.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS ");
            viewString.Append("[X_DictionaryModelRelation.VersionOwnerContactID], \r\n            T.VersionOwnerC");
            viewString.Append("ompanyID AS [X_DictionaryModelRelation.VersionOwnerCompanyID], \r\n            T.V");
            viewString.Append("ersionUpdated AS [X_DictionaryModelRelation.VersionUpdated], \r\n            True ");
            viewString.Append("AS _from0\r\n        FROM NKDC.DictionaryModelRelations AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryModelRelation", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryModelStatus
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView154()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2301);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryModelStatus\r\n        [NKD.Module.");
            viewString.Append("BusinessObjects.Store.X_DictionaryModelStatus](T1.[X_DictionaryModelStatus.Model");
            viewString.Append("StatusID], T1.[X_DictionaryModelStatus.StandardModelStatusName], T1.[X_Dictionar");
            viewString.Append("yModelStatus.CustomModelStatusName], T1.[X_DictionaryModelStatus.Description], T");
            viewString.Append("1.[X_DictionaryModelStatus.FullDescription], T1.[X_DictionaryModelStatus.Thumbna");
            viewString.Append("il], T1.[X_DictionaryModelStatus.OriginalFileDataID], T1.[X_DictionaryModelStatu");
            viewString.Append("s.Version], T1.[X_DictionaryModelStatus.VersionAntecedentID], T1.[X_DictionaryMo");
            viewString.Append("delStatus.VersionCertainty], T1.[X_DictionaryModelStatus.VersionWorkflowInstance");
            viewString.Append("ID], T1.[X_DictionaryModelStatus.VersionUpdatedBy], T1.[X_DictionaryModelStatus.");
            viewString.Append("VersionDeletedBy], T1.[X_DictionaryModelStatus.VersionOwnerContactID], T1.[X_Dic");
            viewString.Append("tionaryModelStatus.VersionOwnerCompanyID], T1.[X_DictionaryModelStatus.VersionUp");
            viewString.Append("dated])\r\n    FROM (\r\n        SELECT \r\n            T.ModelStatusID AS [X_Dictiona");
            viewString.Append("ryModelStatus.ModelStatusID], \r\n            T.StandardModelStatusName AS [X_Dict");
            viewString.Append("ionaryModelStatus.StandardModelStatusName], \r\n            T.CustomModelStatusNam");
            viewString.Append("e AS [X_DictionaryModelStatus.CustomModelStatusName], \r\n            T.Descriptio");
            viewString.Append("n AS [X_DictionaryModelStatus.Description], \r\n            T.FullDescription AS [");
            viewString.Append("X_DictionaryModelStatus.FullDescription], \r\n            T.Thumbnail AS [X_Dictio");
            viewString.Append("naryModelStatus.Thumbnail], \r\n            T.OriginalFileDataID AS [X_DictionaryM");
            viewString.Append("odelStatus.OriginalFileDataID], \r\n            T.Version AS [X_DictionaryModelSta");
            viewString.Append("tus.Version], \r\n            T.VersionAntecedentID AS [X_DictionaryModelStatus.Ve");
            viewString.Append("rsionAntecedentID], \r\n            T.VersionCertainty AS [X_DictionaryModelStatus");
            viewString.Append(".VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [X_DictionaryMo");
            viewString.Append("delStatus.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_Dic");
            viewString.Append("tionaryModelStatus.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_Dic");
            viewString.Append("tionaryModelStatus.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [");
            viewString.Append("X_DictionaryModelStatus.VersionOwnerContactID], \r\n            T.VersionOwnerComp");
            viewString.Append("anyID AS [X_DictionaryModelStatus.VersionOwnerCompanyID], \r\n            T.Versio");
            viewString.Append("nUpdated AS [X_DictionaryModelStatus.VersionUpdated], \r\n            True AS _fro");
            viewString.Append("m0\r\n        FROM NKDC.DictionaryModelStatus AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryModelStatus", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryMoistureSensitivity
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView155()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3007);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryMoistureSensitivity\r\n        [NKD");
            viewString.Append(".Module.BusinessObjects.Store.X_DictionaryMoistureSensitivity](T1.[X_DictionaryM");
            viewString.Append("oistureSensitivity.MoistureSensitivityID], T1.[X_DictionaryMoistureSensitivity.S");
            viewString.Append("tandardMoistureSensitivityName], T1.[X_DictionaryMoistureSensitivity.CoalMoistur");
            viewString.Append("eSensitivityName], T1.[X_DictionaryMoistureSensitivity.GoldMoistureSensitivityNa");
            viewString.Append("me], T1.[X_DictionaryMoistureSensitivity.CustomMoistureSensitivityName], T1.[X_D");
            viewString.Append("ictionaryMoistureSensitivity.Description], T1.[X_DictionaryMoistureSensitivity.F");
            viewString.Append("ullDescription], T1.[X_DictionaryMoistureSensitivity.Thumbnail], T1.[X_Dictionar");
            viewString.Append("yMoistureSensitivity.OriginalFileDataID], T1.[X_DictionaryMoistureSensitivity.Ve");
            viewString.Append("rsion], T1.[X_DictionaryMoistureSensitivity.VersionAntecedentID], T1.[X_Dictiona");
            viewString.Append("ryMoistureSensitivity.VersionCertainty], T1.[X_DictionaryMoistureSensitivity.Ver");
            viewString.Append("sionWorkflowInstanceID], T1.[X_DictionaryMoistureSensitivity.VersionUpdatedBy], ");
            viewString.Append("T1.[X_DictionaryMoistureSensitivity.VersionDeletedBy], T1.[X_DictionaryMoistureS");
            viewString.Append("ensitivity.VersionOwnerContactID], T1.[X_DictionaryMoistureSensitivity.VersionOw");
            viewString.Append("nerCompanyID], T1.[X_DictionaryMoistureSensitivity.VersionUpdated])\r\n    FROM (\r");
            viewString.Append("\n        SELECT \r\n            T.MoistureSensitivityID AS [X_DictionaryMoistureSe");
            viewString.Append("nsitivity.MoistureSensitivityID], \r\n            T.StandardMoistureSensitivityNam");
            viewString.Append("e AS [X_DictionaryMoistureSensitivity.StandardMoistureSensitivityName], \r\n      ");
            viewString.Append("      T.CoalMoistureSensitivityName AS [X_DictionaryMoistureSensitivity.CoalMois");
            viewString.Append("tureSensitivityName], \r\n            T.GoldMoistureSensitivityName AS [X_Dictiona");
            viewString.Append("ryMoistureSensitivity.GoldMoistureSensitivityName], \r\n            T.CustomMoistu");
            viewString.Append("reSensitivityName AS [X_DictionaryMoistureSensitivity.CustomMoistureSensitivityN");
            viewString.Append("ame], \r\n            T.Description AS [X_DictionaryMoistureSensitivity.Descriptio");
            viewString.Append("n], \r\n            T.FullDescription AS [X_DictionaryMoistureSensitivity.FullDesc");
            viewString.Append("ription], \r\n            T.Thumbnail AS [X_DictionaryMoistureSensitivity.Thumbnai");
            viewString.Append("l], \r\n            T.OriginalFileDataID AS [X_DictionaryMoistureSensitivity.Origi");
            viewString.Append("nalFileDataID], \r\n            T.Version AS [X_DictionaryMoistureSensitivity.Vers");
            viewString.Append("ion], \r\n            T.VersionAntecedentID AS [X_DictionaryMoistureSensitivity.Ve");
            viewString.Append("rsionAntecedentID], \r\n            T.VersionCertainty AS [X_DictionaryMoistureSen");
            viewString.Append("sitivity.VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [X_Dict");
            viewString.Append("ionaryMoistureSensitivity.VersionWorkflowInstanceID], \r\n            T.VersionUpd");
            viewString.Append("atedBy AS [X_DictionaryMoistureSensitivity.VersionUpdatedBy], \r\n            T.Ve");
            viewString.Append("rsionDeletedBy AS [X_DictionaryMoistureSensitivity.VersionDeletedBy], \r\n        ");
            viewString.Append("    T.VersionOwnerContactID AS [X_DictionaryMoistureSensitivity.VersionOwnerCont");
            viewString.Append("actID], \r\n            T.VersionOwnerCompanyID AS [X_DictionaryMoistureSensitivit");
            viewString.Append("y.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [X_DictionaryMoistur");
            viewString.Append("eSensitivity.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.Di");
            viewString.Append("ctionaryMoistureSensitivities AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryMoistureSensitivity", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryPartStatus
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView156()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2257);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryPartStatus\r\n        [NKD.Module.B");
            viewString.Append("usinessObjects.Store.X_DictionaryPartStatus](T1.[X_DictionaryPartStatus.PartStat");
            viewString.Append("usID], T1.[X_DictionaryPartStatus.StandardPartStatusName], T1.[X_DictionaryPartS");
            viewString.Append("tatus.CustomPartStatusName], T1.[X_DictionaryPartStatus.Description], T1.[X_Dict");
            viewString.Append("ionaryPartStatus.FullDescription], T1.[X_DictionaryPartStatus.Thumbnail], T1.[X_");
            viewString.Append("DictionaryPartStatus.OriginalFileDataID], T1.[X_DictionaryPartStatus.Version], T");
            viewString.Append("1.[X_DictionaryPartStatus.VersionAntecedentID], T1.[X_DictionaryPartStatus.Versi");
            viewString.Append("onCertainty], T1.[X_DictionaryPartStatus.VersionWorkflowInstanceID], T1.[X_Dicti");
            viewString.Append("onaryPartStatus.VersionUpdatedBy], T1.[X_DictionaryPartStatus.VersionDeletedBy],");
            viewString.Append(" T1.[X_DictionaryPartStatus.VersionOwnerContactID], T1.[X_DictionaryPartStatus.V");
            viewString.Append("ersionOwnerCompanyID], T1.[X_DictionaryPartStatus.VersionUpdated])\r\n    FROM (\r\n");
            viewString.Append("        SELECT \r\n            T.PartStatusID AS [X_DictionaryPartStatus.PartStatu");
            viewString.Append("sID], \r\n            T.StandardPartStatusName AS [X_DictionaryPartStatus.Standard");
            viewString.Append("PartStatusName], \r\n            T.CustomPartStatusName AS [X_DictionaryPartStatus");
            viewString.Append(".CustomPartStatusName], \r\n            T.Description AS [X_DictionaryPartStatus.D");
            viewString.Append("escription], \r\n            T.FullDescription AS [X_DictionaryPartStatus.FullDesc");
            viewString.Append("ription], \r\n            T.Thumbnail AS [X_DictionaryPartStatus.Thumbnail], \r\n   ");
            viewString.Append("         T.OriginalFileDataID AS [X_DictionaryPartStatus.OriginalFileDataID], \r\n");
            viewString.Append("            T.Version AS [X_DictionaryPartStatus.Version], \r\n            T.Versi");
            viewString.Append("onAntecedentID AS [X_DictionaryPartStatus.VersionAntecedentID], \r\n            T.");
            viewString.Append("VersionCertainty AS [X_DictionaryPartStatus.VersionCertainty], \r\n            T.V");
            viewString.Append("ersionWorkflowInstanceID AS [X_DictionaryPartStatus.VersionWorkflowInstanceID], ");
            viewString.Append("\r\n            T.VersionUpdatedBy AS [X_DictionaryPartStatus.VersionUpdatedBy], \r");
            viewString.Append("\n            T.VersionDeletedBy AS [X_DictionaryPartStatus.VersionDeletedBy], \r\n");
            viewString.Append("            T.VersionOwnerContactID AS [X_DictionaryPartStatus.VersionOwnerConta");
            viewString.Append("ctID], \r\n            T.VersionOwnerCompanyID AS [X_DictionaryPartStatus.VersionO");
            viewString.Append("wnerCompanyID], \r\n            T.VersionUpdated AS [X_DictionaryPartStatus.Versio");
            viewString.Append("nUpdated], \r\n            True AS _from0\r\n        FROM NKDC.DictionaryPartStatus ");
            viewString.Append("AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryPartStatus", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryPlasticity
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView157()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2521);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryPlasticity\r\n        [NKD.Module.B");
            viewString.Append("usinessObjects.Store.X_DictionaryPlasticity](T1.[X_DictionaryPlasticity.Plastici");
            viewString.Append("tyID], T1.[X_DictionaryPlasticity.StandardPlasticityName], T1.[X_DictionaryPlast");
            viewString.Append("icity.CoalPlasticityName], T1.[X_DictionaryPlasticity.GoldPlasticityName], T1.[X");
            viewString.Append("_DictionaryPlasticity.CustomPlasticityName], T1.[X_DictionaryPlasticity.Descript");
            viewString.Append("ion], T1.[X_DictionaryPlasticity.FullDescription], T1.[X_DictionaryPlasticity.Th");
            viewString.Append("umbnail], T1.[X_DictionaryPlasticity.OriginalFileDataID], T1.[X_DictionaryPlasti");
            viewString.Append("city.Version], T1.[X_DictionaryPlasticity.VersionAntecedentID], T1.[X_Dictionary");
            viewString.Append("Plasticity.VersionCertainty], T1.[X_DictionaryPlasticity.VersionWorkflowInstance");
            viewString.Append("ID], T1.[X_DictionaryPlasticity.VersionUpdatedBy], T1.[X_DictionaryPlasticity.Ve");
            viewString.Append("rsionDeletedBy], T1.[X_DictionaryPlasticity.VersionOwnerContactID], T1.[X_Dictio");
            viewString.Append("naryPlasticity.VersionOwnerCompanyID], T1.[X_DictionaryPlasticity.VersionUpdated");
            viewString.Append("])\r\n    FROM (\r\n        SELECT \r\n            T.PlasticityID AS [X_DictionaryPlas");
            viewString.Append("ticity.PlasticityID], \r\n            T.StandardPlasticityName AS [X_DictionaryPla");
            viewString.Append("sticity.StandardPlasticityName], \r\n            T.CoalPlasticityName AS [X_Dictio");
            viewString.Append("naryPlasticity.CoalPlasticityName], \r\n            T.GoldPlasticityName AS [X_Dic");
            viewString.Append("tionaryPlasticity.GoldPlasticityName], \r\n            T.CustomPlasticityName AS [");
            viewString.Append("X_DictionaryPlasticity.CustomPlasticityName], \r\n            T.Description AS [X_");
            viewString.Append("DictionaryPlasticity.Description], \r\n            T.FullDescription AS [X_Diction");
            viewString.Append("aryPlasticity.FullDescription], \r\n            T.Thumbnail AS [X_DictionaryPlasti");
            viewString.Append("city.Thumbnail], \r\n            T.OriginalFileDataID AS [X_DictionaryPlasticity.O");
            viewString.Append("riginalFileDataID], \r\n            T.Version AS [X_DictionaryPlasticity.Version],");
            viewString.Append(" \r\n            T.VersionAntecedentID AS [X_DictionaryPlasticity.VersionAnteceden");
            viewString.Append("tID], \r\n            T.VersionCertainty AS [X_DictionaryPlasticity.VersionCertain");
            viewString.Append("ty], \r\n            T.VersionWorkflowInstanceID AS [X_DictionaryPlasticity.Versio");
            viewString.Append("nWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_DictionaryPlasticit");
            viewString.Append("y.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_DictionaryPlasticity");
            viewString.Append(".VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [X_DictionaryPlasti");
            viewString.Append("city.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [X_Diction");
            viewString.Append("aryPlasticity.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [X_Dicti");
            viewString.Append("onaryPlasticity.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC");
            viewString.Append(".DictionaryPlasticities AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryPlasticity", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryPly
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView158()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryPly", "\r\n    SELECT VALUE -- Constructing X_DictionaryPly\r\n        [NKD.Module.BusinessO" +
                    "bjects.Store.X_DictionaryPly](T1.[X_DictionaryPly.PlyID], T1.[X_DictionaryPly.St" +
                    "andardPlyName], T1.[X_DictionaryPly.CustomPlyName], T1.[X_DictionaryPly.Descript" +
                    "ion], T1.[X_DictionaryPly.FullDescription], T1.[X_DictionaryPly.Thumbnail], T1.[" +
                    "X_DictionaryPly.OriginalFileDataID], T1.[X_DictionaryPly.Version], T1.[X_Diction" +
                    "aryPly.VersionAntecedentID], T1.[X_DictionaryPly.VersionCertainty], T1.[X_Dictio" +
                    "naryPly.VersionWorkflowInstanceID], T1.[X_DictionaryPly.VersionUpdatedBy], T1.[X" +
                    "_DictionaryPly.VersionDeletedBy], T1.[X_DictionaryPly.VersionOwnerContactID], T1" +
                    ".[X_DictionaryPly.VersionOwnerCompanyID], T1.[X_DictionaryPly.VersionUpdated])\r\n" +
                    "    FROM (\r\n        SELECT \r\n            T.PlyID AS [X_DictionaryPly.PlyID], \r\n " +
                    "           T.StandardPlyName AS [X_DictionaryPly.StandardPlyName], \r\n           " +
                    " T.CustomPlyName AS [X_DictionaryPly.CustomPlyName], \r\n            T.Description" +
                    " AS [X_DictionaryPly.Description], \r\n            T.FullDescription AS [X_Diction" +
                    "aryPly.FullDescription], \r\n            T.Thumbnail AS [X_DictionaryPly.Thumbnail" +
                    "], \r\n            T.OriginalFileDataID AS [X_DictionaryPly.OriginalFileDataID], \r" +
                    "\n            T.Version AS [X_DictionaryPly.Version], \r\n            T.VersionAnte" +
                    "cedentID AS [X_DictionaryPly.VersionAntecedentID], \r\n            T.VersionCertai" +
                    "nty AS [X_DictionaryPly.VersionCertainty], \r\n            T.VersionWorkflowInstan" +
                    "ceID AS [X_DictionaryPly.VersionWorkflowInstanceID], \r\n            T.VersionUpda" +
                    "tedBy AS [X_DictionaryPly.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS" +
                    " [X_DictionaryPly.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [X" +
                    "_DictionaryPly.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS " +
                    "[X_DictionaryPly.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [X_Di" +
                    "ctionaryPly.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.Dic" +
                    "tionaryPlies AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryPlyAlias
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView159()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryPlyAlias", "\r\n    SELECT VALUE -- Constructing X_DictionaryPlyAlias\r\n        [NKD.Module.Busi" +
                    "nessObjects.Store.X_DictionaryPlyAlias](T1.[X_DictionaryPlyAlias.PlyAliasID], T1" +
                    ".[X_DictionaryPlyAlias.PlyID], T1.[X_DictionaryPlyAlias.CustomPlyName], T1.[X_Di" +
                    "ctionaryPlyAlias.FullDescription], T1.[X_DictionaryPlyAlias.Thumbnail], T1.[X_Di" +
                    "ctionaryPlyAlias.OriginalFileDataID], T1.[X_DictionaryPlyAlias.Version], T1.[X_D" +
                    "ictionaryPlyAlias.VersionAntecedentID], T1.[X_DictionaryPlyAlias.VersionCertaint" +
                    "y], T1.[X_DictionaryPlyAlias.VersionWorkflowInstanceID], T1.[X_DictionaryPlyAlia" +
                    "s.VersionUpdatedBy], T1.[X_DictionaryPlyAlias.VersionDeletedBy], T1.[X_Dictionar" +
                    "yPlyAlias.VersionOwnerContactID], T1.[X_DictionaryPlyAlias.VersionOwnerCompanyID" +
                    "], T1.[X_DictionaryPlyAlias.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n     " +
                    "       T.PlyAliasID AS [X_DictionaryPlyAlias.PlyAliasID], \r\n            T.PlyID " +
                    "AS [X_DictionaryPlyAlias.PlyID], \r\n            T.CustomPlyName AS [X_DictionaryP" +
                    "lyAlias.CustomPlyName], \r\n            T.FullDescription AS [X_DictionaryPlyAlias" +
                    ".FullDescription], \r\n            T.Thumbnail AS [X_DictionaryPlyAlias.Thumbnail]" +
                    ", \r\n            T.OriginalFileDataID AS [X_DictionaryPlyAlias.OriginalFileDataID" +
                    "], \r\n            T.Version AS [X_DictionaryPlyAlias.Version], \r\n            T.Ve" +
                    "rsionAntecedentID AS [X_DictionaryPlyAlias.VersionAntecedentID], \r\n            T" +
                    ".VersionCertainty AS [X_DictionaryPlyAlias.VersionCertainty], \r\n            T.Ve" +
                    "rsionWorkflowInstanceID AS [X_DictionaryPlyAlias.VersionWorkflowInstanceID], \r\n " +
                    "           T.VersionUpdatedBy AS [X_DictionaryPlyAlias.VersionUpdatedBy], \r\n    " +
                    "        T.VersionDeletedBy AS [X_DictionaryPlyAlias.VersionDeletedBy], \r\n       " +
                    "     T.VersionOwnerContactID AS [X_DictionaryPlyAlias.VersionOwnerContactID], \r\n" +
                    "            T.VersionOwnerCompanyID AS [X_DictionaryPlyAlias.VersionOwnerCompany" +
                    "ID], \r\n            T.VersionUpdated AS [X_DictionaryPlyAlias.VersionUpdated], \r\n" +
                    "            True AS _from0\r\n        FROM NKDC.DictionaryPlyAlias AS T\r\n    ) AS " +
                    "T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryPointLoadTestType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView160()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2898);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryPointLoadTestType\r\n        [NKD.M");
            viewString.Append("odule.BusinessObjects.Store.X_DictionaryPointLoadTestType](T1.[X_DictionaryPoint");
            viewString.Append("LoadTestType.PointLoadTestTypeID], T1.[X_DictionaryPointLoadTestType.StandardPoi");
            viewString.Append("ntLoadTestTypeName], T1.[X_DictionaryPointLoadTestType.CoalPointLoadTestTypeName");
            viewString.Append("], T1.[X_DictionaryPointLoadTestType.GoldPointLoadTestTypeName], T1.[X_Dictionar");
            viewString.Append("yPointLoadTestType.CustomPointLoadTestTypeName], T1.[X_DictionaryPointLoadTestTy");
            viewString.Append("pe.Description], T1.[X_DictionaryPointLoadTestType.FullDescription], T1.[X_Dicti");
            viewString.Append("onaryPointLoadTestType.Thumbnail], T1.[X_DictionaryPointLoadTestType.OriginalFil");
            viewString.Append("eDataID], T1.[X_DictionaryPointLoadTestType.Version], T1.[X_DictionaryPointLoadT");
            viewString.Append("estType.VersionAntecedentID], T1.[X_DictionaryPointLoadTestType.VersionCertainty");
            viewString.Append("], T1.[X_DictionaryPointLoadTestType.VersionWorkflowInstanceID], T1.[X_Dictionar");
            viewString.Append("yPointLoadTestType.VersionUpdatedBy], T1.[X_DictionaryPointLoadTestType.VersionD");
            viewString.Append("eletedBy], T1.[X_DictionaryPointLoadTestType.VersionOwnerContactID], T1.[X_Dicti");
            viewString.Append("onaryPointLoadTestType.VersionOwnerCompanyID], T1.[X_DictionaryPointLoadTestType");
            viewString.Append(".VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.PointLoadTestTypeI");
            viewString.Append("D AS [X_DictionaryPointLoadTestType.PointLoadTestTypeID], \r\n            T.Standa");
            viewString.Append("rdPointLoadTestTypeName AS [X_DictionaryPointLoadTestType.StandardPointLoadTestT");
            viewString.Append("ypeName], \r\n            T.CoalPointLoadTestTypeName AS [X_DictionaryPointLoadTes");
            viewString.Append("tType.CoalPointLoadTestTypeName], \r\n            T.GoldPointLoadTestTypeName AS [");
            viewString.Append("X_DictionaryPointLoadTestType.GoldPointLoadTestTypeName], \r\n            T.Custom");
            viewString.Append("PointLoadTestTypeName AS [X_DictionaryPointLoadTestType.CustomPointLoadTestTypeN");
            viewString.Append("ame], \r\n            T.Description AS [X_DictionaryPointLoadTestType.Description]");
            viewString.Append(", \r\n            T.FullDescription AS [X_DictionaryPointLoadTestType.FullDescript");
            viewString.Append("ion], \r\n            T.Thumbnail AS [X_DictionaryPointLoadTestType.Thumbnail], \r\n");
            viewString.Append("            T.OriginalFileDataID AS [X_DictionaryPointLoadTestType.OriginalFileD");
            viewString.Append("ataID], \r\n            T.Version AS [X_DictionaryPointLoadTestType.Version], \r\n  ");
            viewString.Append("          T.VersionAntecedentID AS [X_DictionaryPointLoadTestType.VersionAnteced");
            viewString.Append("entID], \r\n            T.VersionCertainty AS [X_DictionaryPointLoadTestType.Versi");
            viewString.Append("onCertainty], \r\n            T.VersionWorkflowInstanceID AS [X_DictionaryPointLoa");
            viewString.Append("dTestType.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_Dic");
            viewString.Append("tionaryPointLoadTestType.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS ");
            viewString.Append("[X_DictionaryPointLoadTestType.VersionDeletedBy], \r\n            T.VersionOwnerCo");
            viewString.Append("ntactID AS [X_DictionaryPointLoadTestType.VersionOwnerContactID], \r\n            ");
            viewString.Append("T.VersionOwnerCompanyID AS [X_DictionaryPointLoadTestType.VersionOwnerCompanyID]");
            viewString.Append(", \r\n            T.VersionUpdated AS [X_DictionaryPointLoadTestType.VersionUpdate");
            viewString.Append("d], \r\n            True AS _from0\r\n        FROM NKDC.DictionaryPointLoadTestTypes");
            viewString.Append(" AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryPointLoadTestType", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryPosition
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView161()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2412);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryPosition\r\n        [NKD.Module.Bus");
            viewString.Append("inessObjects.Store.X_DictionaryPosition](T1.[X_DictionaryPosition.PositionID], T");
            viewString.Append("1.[X_DictionaryPosition.StandardPositionName], T1.[X_DictionaryPosition.CoalPosi");
            viewString.Append("tionName], T1.[X_DictionaryPosition.GoldPositionName], T1.[X_DictionaryPosition.");
            viewString.Append("CustomPositionName], T1.[X_DictionaryPosition.Description], T1.[X_DictionaryPosi");
            viewString.Append("tion.FullDescription], T1.[X_DictionaryPosition.Thumbnail], T1.[X_DictionaryPosi");
            viewString.Append("tion.OriginalFileDataID], T1.[X_DictionaryPosition.Version], T1.[X_DictionaryPos");
            viewString.Append("ition.VersionAntecedentID], T1.[X_DictionaryPosition.VersionCertainty], T1.[X_Di");
            viewString.Append("ctionaryPosition.VersionWorkflowInstanceID], T1.[X_DictionaryPosition.VersionUpd");
            viewString.Append("atedBy], T1.[X_DictionaryPosition.VersionDeletedBy], T1.[X_DictionaryPosition.Ve");
            viewString.Append("rsionOwnerContactID], T1.[X_DictionaryPosition.VersionOwnerCompanyID], T1.[X_Dic");
            viewString.Append("tionaryPosition.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.Pos");
            viewString.Append("itionID AS [X_DictionaryPosition.PositionID], \r\n            T.StandardPositionNa");
            viewString.Append("me AS [X_DictionaryPosition.StandardPositionName], \r\n            T.CoalPositionN");
            viewString.Append("ame AS [X_DictionaryPosition.CoalPositionName], \r\n            T.GoldPositionName");
            viewString.Append(" AS [X_DictionaryPosition.GoldPositionName], \r\n            T.CustomPositionName ");
            viewString.Append("AS [X_DictionaryPosition.CustomPositionName], \r\n            T.Description AS [X_");
            viewString.Append("DictionaryPosition.Description], \r\n            T.FullDescription AS [X_Dictionar");
            viewString.Append("yPosition.FullDescription], \r\n            T.Thumbnail AS [X_DictionaryPosition.T");
            viewString.Append("humbnail], \r\n            T.OriginalFileDataID AS [X_DictionaryPosition.OriginalF");
            viewString.Append("ileDataID], \r\n            T.Version AS [X_DictionaryPosition.Version], \r\n       ");
            viewString.Append("     T.VersionAntecedentID AS [X_DictionaryPosition.VersionAntecedentID], \r\n    ");
            viewString.Append("        T.VersionCertainty AS [X_DictionaryPosition.VersionCertainty], \r\n       ");
            viewString.Append("     T.VersionWorkflowInstanceID AS [X_DictionaryPosition.VersionWorkflowInstanc");
            viewString.Append("eID], \r\n            T.VersionUpdatedBy AS [X_DictionaryPosition.VersionUpdatedBy");
            viewString.Append("], \r\n            T.VersionDeletedBy AS [X_DictionaryPosition.VersionDeletedBy], ");
            viewString.Append("\r\n            T.VersionOwnerContactID AS [X_DictionaryPosition.VersionOwnerConta");
            viewString.Append("ctID], \r\n            T.VersionOwnerCompanyID AS [X_DictionaryPosition.VersionOwn");
            viewString.Append("erCompanyID], \r\n            T.VersionUpdated AS [X_DictionaryPosition.VersionUpd");
            viewString.Append("ated], \r\n            True AS _from0\r\n        FROM NKDC.DictionaryPositions AS T\r");
            viewString.Append("\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryPosition", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryProfession
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView162()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2520);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryProfession\r\n        [NKD.Module.B");
            viewString.Append("usinessObjects.Store.X_DictionaryProfession](T1.[X_DictionaryProfession.Professi");
            viewString.Append("onID], T1.[X_DictionaryProfession.StandardProfessionName], T1.[X_DictionaryProfe");
            viewString.Append("ssion.CoalProfessionName], T1.[X_DictionaryProfession.GoldProfessionName], T1.[X");
            viewString.Append("_DictionaryProfession.CustomProfessionName], T1.[X_DictionaryProfession.Descript");
            viewString.Append("ion], T1.[X_DictionaryProfession.FullDescription], T1.[X_DictionaryProfession.Th");
            viewString.Append("umbnail], T1.[X_DictionaryProfession.OriginalFileDataID], T1.[X_DictionaryProfes");
            viewString.Append("sion.Version], T1.[X_DictionaryProfession.VersionAntecedentID], T1.[X_Dictionary");
            viewString.Append("Profession.VersionCertainty], T1.[X_DictionaryProfession.VersionWorkflowInstance");
            viewString.Append("ID], T1.[X_DictionaryProfession.VersionUpdatedBy], T1.[X_DictionaryProfession.Ve");
            viewString.Append("rsionDeletedBy], T1.[X_DictionaryProfession.VersionOwnerContactID], T1.[X_Dictio");
            viewString.Append("naryProfession.VersionOwnerCompanyID], T1.[X_DictionaryProfession.VersionUpdated");
            viewString.Append("])\r\n    FROM (\r\n        SELECT \r\n            T.ProfessionID AS [X_DictionaryProf");
            viewString.Append("ession.ProfessionID], \r\n            T.StandardProfessionName AS [X_DictionaryPro");
            viewString.Append("fession.StandardProfessionName], \r\n            T.CoalProfessionName AS [X_Dictio");
            viewString.Append("naryProfession.CoalProfessionName], \r\n            T.GoldProfessionName AS [X_Dic");
            viewString.Append("tionaryProfession.GoldProfessionName], \r\n            T.CustomProfessionName AS [");
            viewString.Append("X_DictionaryProfession.CustomProfessionName], \r\n            T.Description AS [X_");
            viewString.Append("DictionaryProfession.Description], \r\n            T.FullDescription AS [X_Diction");
            viewString.Append("aryProfession.FullDescription], \r\n            T.Thumbnail AS [X_DictionaryProfes");
            viewString.Append("sion.Thumbnail], \r\n            T.OriginalFileDataID AS [X_DictionaryProfession.O");
            viewString.Append("riginalFileDataID], \r\n            T.Version AS [X_DictionaryProfession.Version],");
            viewString.Append(" \r\n            T.VersionAntecedentID AS [X_DictionaryProfession.VersionAnteceden");
            viewString.Append("tID], \r\n            T.VersionCertainty AS [X_DictionaryProfession.VersionCertain");
            viewString.Append("ty], \r\n            T.VersionWorkflowInstanceID AS [X_DictionaryProfession.Versio");
            viewString.Append("nWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_DictionaryProfessio");
            viewString.Append("n.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_DictionaryProfession");
            viewString.Append(".VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [X_DictionaryProfes");
            viewString.Append("sion.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [X_Diction");
            viewString.Append("aryProfession.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [X_Dicti");
            viewString.Append("onaryProfession.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC");
            viewString.Append(".DictionaryProfessions AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryProfession", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryProvinceGroup
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView163()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2825);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryProvinceGroup\r\n        [NKD.Modul");
            viewString.Append("e.BusinessObjects.Store.X_DictionaryProvinceGroup](T1.[X_DictionaryProvinceGroup");
            viewString.Append(".ProvinceGroupID], T1.[X_DictionaryProvinceGroup.StandardProvinceGroupName], T1.");
            viewString.Append("[X_DictionaryProvinceGroup.CoalProvinceGroupName], T1.[X_DictionaryProvinceGroup");
            viewString.Append(".GoldProvinceGroupName], T1.[X_DictionaryProvinceGroup.CustomProvinceGroupName],");
            viewString.Append(" T1.[X_DictionaryProvinceGroup.ParentProvinceTypeID], T1.[X_DictionaryProvinceGr");
            viewString.Append("oup.Description], T1.[X_DictionaryProvinceGroup.FullDescription], T1.[X_Dictiona");
            viewString.Append("ryProvinceGroup.Thumbnail], T1.[X_DictionaryProvinceGroup.OriginalFileDataID], T");
            viewString.Append("1.[X_DictionaryProvinceGroup.Version], T1.[X_DictionaryProvinceGroup.VersionAnte");
            viewString.Append("cedentID], T1.[X_DictionaryProvinceGroup.VersionCertainty], T1.[X_DictionaryProv");
            viewString.Append("inceGroup.VersionWorkflowInstanceID], T1.[X_DictionaryProvinceGroup.VersionUpdat");
            viewString.Append("edBy], T1.[X_DictionaryProvinceGroup.VersionDeletedBy], T1.[X_DictionaryProvince");
            viewString.Append("Group.VersionOwnerContactID], T1.[X_DictionaryProvinceGroup.VersionOwnerCompanyI");
            viewString.Append("D], T1.[X_DictionaryProvinceGroup.VersionUpdated])\r\n    FROM (\r\n        SELECT \r");
            viewString.Append("\n            T.ProvinceGroupID AS [X_DictionaryProvinceGroup.ProvinceGroupID], \r");
            viewString.Append("\n            T.StandardProvinceGroupName AS [X_DictionaryProvinceGroup.StandardP");
            viewString.Append("rovinceGroupName], \r\n            T.CoalProvinceGroupName AS [X_DictionaryProvinc");
            viewString.Append("eGroup.CoalProvinceGroupName], \r\n            T.GoldProvinceGroupName AS [X_Dicti");
            viewString.Append("onaryProvinceGroup.GoldProvinceGroupName], \r\n            T.CustomProvinceGroupNa");
            viewString.Append("me AS [X_DictionaryProvinceGroup.CustomProvinceGroupName], \r\n            T.Paren");
            viewString.Append("tProvinceTypeID AS [X_DictionaryProvinceGroup.ParentProvinceTypeID], \r\n         ");
            viewString.Append("   T.Description AS [X_DictionaryProvinceGroup.Description], \r\n            T.Ful");
            viewString.Append("lDescription AS [X_DictionaryProvinceGroup.FullDescription], \r\n            T.Thu");
            viewString.Append("mbnail AS [X_DictionaryProvinceGroup.Thumbnail], \r\n            T.OriginalFileDat");
            viewString.Append("aID AS [X_DictionaryProvinceGroup.OriginalFileDataID], \r\n            T.Version A");
            viewString.Append("S [X_DictionaryProvinceGroup.Version], \r\n            T.VersionAntecedentID AS [X");
            viewString.Append("_DictionaryProvinceGroup.VersionAntecedentID], \r\n            T.VersionCertainty ");
            viewString.Append("AS [X_DictionaryProvinceGroup.VersionCertainty], \r\n            T.VersionWorkflow");
            viewString.Append("InstanceID AS [X_DictionaryProvinceGroup.VersionWorkflowInstanceID], \r\n         ");
            viewString.Append("   T.VersionUpdatedBy AS [X_DictionaryProvinceGroup.VersionUpdatedBy], \r\n       ");
            viewString.Append("     T.VersionDeletedBy AS [X_DictionaryProvinceGroup.VersionDeletedBy], \r\n     ");
            viewString.Append("       T.VersionOwnerContactID AS [X_DictionaryProvinceGroup.VersionOwnerContact");
            viewString.Append("ID], \r\n            T.VersionOwnerCompanyID AS [X_DictionaryProvinceGroup.Version");
            viewString.Append("OwnerCompanyID], \r\n            T.VersionUpdated AS [X_DictionaryProvinceGroup.Ve");
            viewString.Append("rsionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.DictionaryProvinc");
            viewString.Append("eGroups AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryProvinceGroup", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryProvinceType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView164()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2628);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryProvinceType\r\n        [NKD.Module");
            viewString.Append(".BusinessObjects.Store.X_DictionaryProvinceType](T1.[X_DictionaryProvinceType.Pr");
            viewString.Append("ovinceTypeID], T1.[X_DictionaryProvinceType.StandardProvinceTypeName], T1.[X_Dic");
            viewString.Append("tionaryProvinceType.CoalProvinceTypeName], T1.[X_DictionaryProvinceType.GoldProv");
            viewString.Append("inceTypeName], T1.[X_DictionaryProvinceType.CustomProvinceTypeName], T1.[X_Dicti");
            viewString.Append("onaryProvinceType.Description], T1.[X_DictionaryProvinceType.FullDescription], T");
            viewString.Append("1.[X_DictionaryProvinceType.Thumbnail], T1.[X_DictionaryProvinceType.OriginalFil");
            viewString.Append("eDataID], T1.[X_DictionaryProvinceType.Version], T1.[X_DictionaryProvinceType.Ve");
            viewString.Append("rsionAntecedentID], T1.[X_DictionaryProvinceType.VersionCertainty], T1.[X_Dictio");
            viewString.Append("naryProvinceType.VersionWorkflowInstanceID], T1.[X_DictionaryProvinceType.Versio");
            viewString.Append("nUpdatedBy], T1.[X_DictionaryProvinceType.VersionDeletedBy], T1.[X_DictionaryPro");
            viewString.Append("vinceType.VersionOwnerContactID], T1.[X_DictionaryProvinceType.VersionOwnerCompa");
            viewString.Append("nyID], T1.[X_DictionaryProvinceType.VersionUpdated])\r\n    FROM (\r\n        SELECT");
            viewString.Append(" \r\n            T.ProvinceTypeID AS [X_DictionaryProvinceType.ProvinceTypeID], \r\n");
            viewString.Append("            T.StandardProvinceTypeName AS [X_DictionaryProvinceType.StandardProv");
            viewString.Append("inceTypeName], \r\n            T.CoalProvinceTypeName AS [X_DictionaryProvinceType");
            viewString.Append(".CoalProvinceTypeName], \r\n            T.GoldProvinceTypeName AS [X_DictionaryPro");
            viewString.Append("vinceType.GoldProvinceTypeName], \r\n            T.CustomProvinceTypeName AS [X_Di");
            viewString.Append("ctionaryProvinceType.CustomProvinceTypeName], \r\n            T.Description AS [X_");
            viewString.Append("DictionaryProvinceType.Description], \r\n            T.FullDescription AS [X_Dicti");
            viewString.Append("onaryProvinceType.FullDescription], \r\n            T.Thumbnail AS [X_DictionaryPr");
            viewString.Append("ovinceType.Thumbnail], \r\n            T.OriginalFileDataID AS [X_DictionaryProvin");
            viewString.Append("ceType.OriginalFileDataID], \r\n            T.Version AS [X_DictionaryProvinceType");
            viewString.Append(".Version], \r\n            T.VersionAntecedentID AS [X_DictionaryProvinceType.Vers");
            viewString.Append("ionAntecedentID], \r\n            T.VersionCertainty AS [X_DictionaryProvinceType.");
            viewString.Append("VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [X_DictionaryPro");
            viewString.Append("vinceType.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_Dic");
            viewString.Append("tionaryProvinceType.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_Di");
            viewString.Append("ctionaryProvinceType.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS");
            viewString.Append(" [X_DictionaryProvinceType.VersionOwnerContactID], \r\n            T.VersionOwnerC");
            viewString.Append("ompanyID AS [X_DictionaryProvinceType.VersionOwnerCompanyID], \r\n            T.Ve");
            viewString.Append("rsionUpdated AS [X_DictionaryProvinceType.VersionUpdated], \r\n            True AS");
            viewString.Append(" _from0\r\n        FROM NKDC.DictionaryProvinceTypes AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryProvinceType", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryRelationType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView165()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2628);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryRelationType\r\n        [NKD.Module");
            viewString.Append(".BusinessObjects.Store.X_DictionaryRelationType](T1.[X_DictionaryRelationType.Re");
            viewString.Append("lationTypeID], T1.[X_DictionaryRelationType.StandardRelationTypeName], T1.[X_Dic");
            viewString.Append("tionaryRelationType.CoalRelationTypeName], T1.[X_DictionaryRelationType.GoldRela");
            viewString.Append("tionTypeName], T1.[X_DictionaryRelationType.CustomRelationTypeName], T1.[X_Dicti");
            viewString.Append("onaryRelationType.Description], T1.[X_DictionaryRelationType.FullDescription], T");
            viewString.Append("1.[X_DictionaryRelationType.Thumbnail], T1.[X_DictionaryRelationType.OriginalFil");
            viewString.Append("eDataID], T1.[X_DictionaryRelationType.Version], T1.[X_DictionaryRelationType.Ve");
            viewString.Append("rsionAntecedentID], T1.[X_DictionaryRelationType.VersionCertainty], T1.[X_Dictio");
            viewString.Append("naryRelationType.VersionWorkflowInstanceID], T1.[X_DictionaryRelationType.Versio");
            viewString.Append("nUpdatedBy], T1.[X_DictionaryRelationType.VersionDeletedBy], T1.[X_DictionaryRel");
            viewString.Append("ationType.VersionOwnerContactID], T1.[X_DictionaryRelationType.VersionOwnerCompa");
            viewString.Append("nyID], T1.[X_DictionaryRelationType.VersionUpdated])\r\n    FROM (\r\n        SELECT");
            viewString.Append(" \r\n            T.RelationTypeID AS [X_DictionaryRelationType.RelationTypeID], \r\n");
            viewString.Append("            T.StandardRelationTypeName AS [X_DictionaryRelationType.StandardRela");
            viewString.Append("tionTypeName], \r\n            T.CoalRelationTypeName AS [X_DictionaryRelationType");
            viewString.Append(".CoalRelationTypeName], \r\n            T.GoldRelationTypeName AS [X_DictionaryRel");
            viewString.Append("ationType.GoldRelationTypeName], \r\n            T.CustomRelationTypeName AS [X_Di");
            viewString.Append("ctionaryRelationType.CustomRelationTypeName], \r\n            T.Description AS [X_");
            viewString.Append("DictionaryRelationType.Description], \r\n            T.FullDescription AS [X_Dicti");
            viewString.Append("onaryRelationType.FullDescription], \r\n            T.Thumbnail AS [X_DictionaryRe");
            viewString.Append("lationType.Thumbnail], \r\n            T.OriginalFileDataID AS [X_DictionaryRelati");
            viewString.Append("onType.OriginalFileDataID], \r\n            T.Version AS [X_DictionaryRelationType");
            viewString.Append(".Version], \r\n            T.VersionAntecedentID AS [X_DictionaryRelationType.Vers");
            viewString.Append("ionAntecedentID], \r\n            T.VersionCertainty AS [X_DictionaryRelationType.");
            viewString.Append("VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [X_DictionaryRel");
            viewString.Append("ationType.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_Dic");
            viewString.Append("tionaryRelationType.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_Di");
            viewString.Append("ctionaryRelationType.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS");
            viewString.Append(" [X_DictionaryRelationType.VersionOwnerContactID], \r\n            T.VersionOwnerC");
            viewString.Append("ompanyID AS [X_DictionaryRelationType.VersionOwnerCompanyID], \r\n            T.Ve");
            viewString.Append("rsionUpdated AS [X_DictionaryRelationType.VersionUpdated], \r\n            True AS");
            viewString.Append(" _from0\r\n        FROM NKDC.DictionaryRelationTypes AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryRelationType", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryRockMassUnitType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView166()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2844);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryRockMassUnitType\r\n        [NKD.Mo");
            viewString.Append("dule.BusinessObjects.Store.X_DictionaryRockMassUnitType](T1.[X_DictionaryRockMas");
            viewString.Append("sUnitType.RockMassUnitTypeID], T1.[X_DictionaryRockMassUnitType.StandardRockMass");
            viewString.Append("UnitTypeName], T1.[X_DictionaryRockMassUnitType.CoalRockMassUnitTypeName], T1.[X");
            viewString.Append("_DictionaryRockMassUnitType.GoldRockMassUnitTypeName], T1.[X_DictionaryRockMassU");
            viewString.Append("nitType.CustomRockMassUnitTypeName], T1.[X_DictionaryRockMassUnitType.Descriptio");
            viewString.Append("n], T1.[X_DictionaryRockMassUnitType.FullDescription], T1.[X_DictionaryRockMassU");
            viewString.Append("nitType.Thumbnail], T1.[X_DictionaryRockMassUnitType.OriginalFileDataID], T1.[X_");
            viewString.Append("DictionaryRockMassUnitType.Version], T1.[X_DictionaryRockMassUnitType.VersionAnt");
            viewString.Append("ecedentID], T1.[X_DictionaryRockMassUnitType.VersionCertainty], T1.[X_Dictionary");
            viewString.Append("RockMassUnitType.VersionWorkflowInstanceID], T1.[X_DictionaryRockMassUnitType.Ve");
            viewString.Append("rsionUpdatedBy], T1.[X_DictionaryRockMassUnitType.VersionDeletedBy], T1.[X_Dicti");
            viewString.Append("onaryRockMassUnitType.VersionOwnerContactID], T1.[X_DictionaryRockMassUnitType.V");
            viewString.Append("ersionOwnerCompanyID], T1.[X_DictionaryRockMassUnitType.VersionUpdated])\r\n    FR");
            viewString.Append("OM (\r\n        SELECT \r\n            T.RockMassUnitTypeID AS [X_DictionaryRockMass");
            viewString.Append("UnitType.RockMassUnitTypeID], \r\n            T.StandardRockMassUnitTypeName AS [X");
            viewString.Append("_DictionaryRockMassUnitType.StandardRockMassUnitTypeName], \r\n            T.CoalR");
            viewString.Append("ockMassUnitTypeName AS [X_DictionaryRockMassUnitType.CoalRockMassUnitTypeName], ");
            viewString.Append("\r\n            T.GoldRockMassUnitTypeName AS [X_DictionaryRockMassUnitType.GoldRo");
            viewString.Append("ckMassUnitTypeName], \r\n            T.CustomRockMassUnitTypeName AS [X_Dictionary");
            viewString.Append("RockMassUnitType.CustomRockMassUnitTypeName], \r\n            T.Description AS [X_");
            viewString.Append("DictionaryRockMassUnitType.Description], \r\n            T.FullDescription AS [X_D");
            viewString.Append("ictionaryRockMassUnitType.FullDescription], \r\n            T.Thumbnail AS [X_Dict");
            viewString.Append("ionaryRockMassUnitType.Thumbnail], \r\n            T.OriginalFileDataID AS [X_Dict");
            viewString.Append("ionaryRockMassUnitType.OriginalFileDataID], \r\n            T.Version AS [X_Dictio");
            viewString.Append("naryRockMassUnitType.Version], \r\n            T.VersionAntecedentID AS [X_Diction");
            viewString.Append("aryRockMassUnitType.VersionAntecedentID], \r\n            T.VersionCertainty AS [X");
            viewString.Append("_DictionaryRockMassUnitType.VersionCertainty], \r\n            T.VersionWorkflowIn");
            viewString.Append("stanceID AS [X_DictionaryRockMassUnitType.VersionWorkflowInstanceID], \r\n        ");
            viewString.Append("    T.VersionUpdatedBy AS [X_DictionaryRockMassUnitType.VersionUpdatedBy], \r\n   ");
            viewString.Append("         T.VersionDeletedBy AS [X_DictionaryRockMassUnitType.VersionDeletedBy], ");
            viewString.Append("\r\n            T.VersionOwnerContactID AS [X_DictionaryRockMassUnitType.VersionOw");
            viewString.Append("nerContactID], \r\n            T.VersionOwnerCompanyID AS [X_DictionaryRockMassUni");
            viewString.Append("tType.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [X_DictionaryRoc");
            viewString.Append("kMassUnitType.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.D");
            viewString.Append("ictionaryRockMassUnitTypes AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryRockMassUnitType", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionarySampleCategory
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView167()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2737);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionarySampleCategory\r\n        [NKD.Modu");
            viewString.Append("le.BusinessObjects.Store.X_DictionarySampleCategory](T1.[X_DictionarySampleCateg");
            viewString.Append("ory.SampleCategoryID], T1.[X_DictionarySampleCategory.StandardSampleCategoryName");
            viewString.Append("], T1.[X_DictionarySampleCategory.CoalSampleCategoryName], T1.[X_DictionarySampl");
            viewString.Append("eCategory.GoldSampleCategoryName], T1.[X_DictionarySampleCategory.CustomSampleCa");
            viewString.Append("tegoryName], T1.[X_DictionarySampleCategory.Description], T1.[X_DictionarySample");
            viewString.Append("Category.FullDescription], T1.[X_DictionarySampleCategory.Thumbnail], T1.[X_Dict");
            viewString.Append("ionarySampleCategory.OriginalFileDataID], T1.[X_DictionarySampleCategory.Version");
            viewString.Append("], T1.[X_DictionarySampleCategory.VersionAntecedentID], T1.[X_DictionarySampleCa");
            viewString.Append("tegory.VersionCertainty], T1.[X_DictionarySampleCategory.VersionWorkflowInstance");
            viewString.Append("ID], T1.[X_DictionarySampleCategory.VersionUpdatedBy], T1.[X_DictionarySampleCat");
            viewString.Append("egory.VersionDeletedBy], T1.[X_DictionarySampleCategory.VersionOwnerContactID], ");
            viewString.Append("T1.[X_DictionarySampleCategory.VersionOwnerCompanyID], T1.[X_DictionarySampleCat");
            viewString.Append("egory.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.SampleCategor");
            viewString.Append("yID AS [X_DictionarySampleCategory.SampleCategoryID], \r\n            T.StandardSa");
            viewString.Append("mpleCategoryName AS [X_DictionarySampleCategory.StandardSampleCategoryName], \r\n ");
            viewString.Append("           T.CoalSampleCategoryName AS [X_DictionarySampleCategory.CoalSampleCat");
            viewString.Append("egoryName], \r\n            T.GoldSampleCategoryName AS [X_DictionarySampleCategor");
            viewString.Append("y.GoldSampleCategoryName], \r\n            T.CustomSampleCategoryName AS [X_Dictio");
            viewString.Append("narySampleCategory.CustomSampleCategoryName], \r\n            T.Description AS [X_");
            viewString.Append("DictionarySampleCategory.Description], \r\n            T.FullDescription AS [X_Dic");
            viewString.Append("tionarySampleCategory.FullDescription], \r\n            T.Thumbnail AS [X_Dictiona");
            viewString.Append("rySampleCategory.Thumbnail], \r\n            T.OriginalFileDataID AS [X_Dictionary");
            viewString.Append("SampleCategory.OriginalFileDataID], \r\n            T.Version AS [X_DictionarySamp");
            viewString.Append("leCategory.Version], \r\n            T.VersionAntecedentID AS [X_DictionarySampleC");
            viewString.Append("ategory.VersionAntecedentID], \r\n            T.VersionCertainty AS [X_DictionaryS");
            viewString.Append("ampleCategory.VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [X");
            viewString.Append("_DictionarySampleCategory.VersionWorkflowInstanceID], \r\n            T.VersionUpd");
            viewString.Append("atedBy AS [X_DictionarySampleCategory.VersionUpdatedBy], \r\n            T.Version");
            viewString.Append("DeletedBy AS [X_DictionarySampleCategory.VersionDeletedBy], \r\n            T.Vers");
            viewString.Append("ionOwnerContactID AS [X_DictionarySampleCategory.VersionOwnerContactID], \r\n     ");
            viewString.Append("       T.VersionOwnerCompanyID AS [X_DictionarySampleCategory.VersionOwnerCompan");
            viewString.Append("yID], \r\n            T.VersionUpdated AS [X_DictionarySampleCategory.VersionUpdat");
            viewString.Append("ed], \r\n            True AS _from0\r\n        FROM NKDC.DictionarySampleCategories ");
            viewString.Append("AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionarySampleCategory", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionarySampleState
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView168()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2574);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionarySampleState\r\n        [NKD.Module.");
            viewString.Append("BusinessObjects.Store.X_DictionarySampleState](T1.[X_DictionarySampleState.Sampl");
            viewString.Append("eStateID], T1.[X_DictionarySampleState.StandardSampleStateName], T1.[X_Dictionar");
            viewString.Append("ySampleState.CoalSampleStateName], T1.[X_DictionarySampleState.GoldSampleStateNa");
            viewString.Append("me], T1.[X_DictionarySampleState.CustomSampleStateName], T1.[X_DictionarySampleS");
            viewString.Append("tate.Description], T1.[X_DictionarySampleState.FullDescription], T1.[X_Dictionar");
            viewString.Append("ySampleState.Thumbnail], T1.[X_DictionarySampleState.OriginalFileDataID], T1.[X_");
            viewString.Append("DictionarySampleState.Version], T1.[X_DictionarySampleState.VersionAntecedentID]");
            viewString.Append(", T1.[X_DictionarySampleState.VersionCertainty], T1.[X_DictionarySampleState.Ver");
            viewString.Append("sionWorkflowInstanceID], T1.[X_DictionarySampleState.VersionUpdatedBy], T1.[X_Di");
            viewString.Append("ctionarySampleState.VersionDeletedBy], T1.[X_DictionarySampleState.VersionOwnerC");
            viewString.Append("ontactID], T1.[X_DictionarySampleState.VersionOwnerCompanyID], T1.[X_DictionaryS");
            viewString.Append("ampleState.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.SampleSt");
            viewString.Append("ateID AS [X_DictionarySampleState.SampleStateID], \r\n            T.StandardSample");
            viewString.Append("StateName AS [X_DictionarySampleState.StandardSampleStateName], \r\n            T.");
            viewString.Append("CoalSampleStateName AS [X_DictionarySampleState.CoalSampleStateName], \r\n        ");
            viewString.Append("    T.GoldSampleStateName AS [X_DictionarySampleState.GoldSampleStateName], \r\n  ");
            viewString.Append("          T.CustomSampleStateName AS [X_DictionarySampleState.CustomSampleStateN");
            viewString.Append("ame], \r\n            T.Description AS [X_DictionarySampleState.Description], \r\n  ");
            viewString.Append("          T.FullDescription AS [X_DictionarySampleState.FullDescription], \r\n    ");
            viewString.Append("        T.Thumbnail AS [X_DictionarySampleState.Thumbnail], \r\n            T.Orig");
            viewString.Append("inalFileDataID AS [X_DictionarySampleState.OriginalFileDataID], \r\n            T.");
            viewString.Append("Version AS [X_DictionarySampleState.Version], \r\n            T.VersionAntecedentI");
            viewString.Append("D AS [X_DictionarySampleState.VersionAntecedentID], \r\n            T.VersionCerta");
            viewString.Append("inty AS [X_DictionarySampleState.VersionCertainty], \r\n            T.VersionWorkf");
            viewString.Append("lowInstanceID AS [X_DictionarySampleState.VersionWorkflowInstanceID], \r\n        ");
            viewString.Append("    T.VersionUpdatedBy AS [X_DictionarySampleState.VersionUpdatedBy], \r\n        ");
            viewString.Append("    T.VersionDeletedBy AS [X_DictionarySampleState.VersionDeletedBy], \r\n        ");
            viewString.Append("    T.VersionOwnerContactID AS [X_DictionarySampleState.VersionOwnerContactID], ");
            viewString.Append("\r\n            T.VersionOwnerCompanyID AS [X_DictionarySampleState.VersionOwnerCo");
            viewString.Append("mpanyID], \r\n            T.VersionUpdated AS [X_DictionarySampleState.VersionUpda");
            viewString.Append("ted], \r\n            True AS _from0\r\n        FROM NKDC.DictionarySampleStates AS ");
            viewString.Append("T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionarySampleState", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionarySampleType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView169()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2520);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionarySampleType\r\n        [NKD.Module.B");
            viewString.Append("usinessObjects.Store.X_DictionarySampleType](T1.[X_DictionarySampleType.SampleTy");
            viewString.Append("peID], T1.[X_DictionarySampleType.StandardSampleTypeName], T1.[X_DictionarySampl");
            viewString.Append("eType.CoalSampleTypeName], T1.[X_DictionarySampleType.GoldSampleTypeName], T1.[X");
            viewString.Append("_DictionarySampleType.CustomSampleTypeName], T1.[X_DictionarySampleType.Descript");
            viewString.Append("ion], T1.[X_DictionarySampleType.FullDescription], T1.[X_DictionarySampleType.Th");
            viewString.Append("umbnail], T1.[X_DictionarySampleType.OriginalFileDataID], T1.[X_DictionarySample");
            viewString.Append("Type.Version], T1.[X_DictionarySampleType.VersionAntecedentID], T1.[X_Dictionary");
            viewString.Append("SampleType.VersionCertainty], T1.[X_DictionarySampleType.VersionWorkflowInstance");
            viewString.Append("ID], T1.[X_DictionarySampleType.VersionUpdatedBy], T1.[X_DictionarySampleType.Ve");
            viewString.Append("rsionDeletedBy], T1.[X_DictionarySampleType.VersionOwnerContactID], T1.[X_Dictio");
            viewString.Append("narySampleType.VersionOwnerCompanyID], T1.[X_DictionarySampleType.VersionUpdated");
            viewString.Append("])\r\n    FROM (\r\n        SELECT \r\n            T.SampleTypeID AS [X_DictionarySamp");
            viewString.Append("leType.SampleTypeID], \r\n            T.StandardSampleTypeName AS [X_DictionarySam");
            viewString.Append("pleType.StandardSampleTypeName], \r\n            T.CoalSampleTypeName AS [X_Dictio");
            viewString.Append("narySampleType.CoalSampleTypeName], \r\n            T.GoldSampleTypeName AS [X_Dic");
            viewString.Append("tionarySampleType.GoldSampleTypeName], \r\n            T.CustomSampleTypeName AS [");
            viewString.Append("X_DictionarySampleType.CustomSampleTypeName], \r\n            T.Description AS [X_");
            viewString.Append("DictionarySampleType.Description], \r\n            T.FullDescription AS [X_Diction");
            viewString.Append("arySampleType.FullDescription], \r\n            T.Thumbnail AS [X_DictionarySample");
            viewString.Append("Type.Thumbnail], \r\n            T.OriginalFileDataID AS [X_DictionarySampleType.O");
            viewString.Append("riginalFileDataID], \r\n            T.Version AS [X_DictionarySampleType.Version],");
            viewString.Append(" \r\n            T.VersionAntecedentID AS [X_DictionarySampleType.VersionAnteceden");
            viewString.Append("tID], \r\n            T.VersionCertainty AS [X_DictionarySampleType.VersionCertain");
            viewString.Append("ty], \r\n            T.VersionWorkflowInstanceID AS [X_DictionarySampleType.Versio");
            viewString.Append("nWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_DictionarySampleTyp");
            viewString.Append("e.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_DictionarySampleType");
            viewString.Append(".VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [X_DictionarySample");
            viewString.Append("Type.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [X_Diction");
            viewString.Append("arySampleType.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [X_Dicti");
            viewString.Append("onarySampleType.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC");
            viewString.Append(".DictionarySampleTypes AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionarySampleType", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionarySeam
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView170()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionarySeam", "\r\n    SELECT VALUE -- Constructing X_DictionarySeam\r\n        [NKD.Module.Business" +
                    "Objects.Store.X_DictionarySeam](T1.[X_DictionarySeam.SeamID], T1.[X_DictionarySe" +
                    "am.StandardSeamName], T1.[X_DictionarySeam.CustomSeamName], T1.[X_DictionarySeam" +
                    ".Description], T1.[X_DictionarySeam.FullDescription], T1.[X_DictionarySeam.Thumb" +
                    "nail], T1.[X_DictionarySeam.OriginalFileDataID], T1.[X_DictionarySeam.Version], " +
                    "T1.[X_DictionarySeam.VersionAntecedentID], T1.[X_DictionarySeam.VersionCertainty" +
                    "], T1.[X_DictionarySeam.VersionWorkflowInstanceID], T1.[X_DictionarySeam.Version" +
                    "UpdatedBy], T1.[X_DictionarySeam.VersionDeletedBy], T1.[X_DictionarySeam.Version" +
                    "OwnerContactID], T1.[X_DictionarySeam.VersionOwnerCompanyID], T1.[X_DictionarySe" +
                    "am.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.SeamID AS [X_Dic" +
                    "tionarySeam.SeamID], \r\n            T.StandardSeamName AS [X_DictionarySeam.Stand" +
                    "ardSeamName], \r\n            T.CustomSeamName AS [X_DictionarySeam.CustomSeamName" +
                    "], \r\n            T.Description AS [X_DictionarySeam.Description], \r\n            " +
                    "T.FullDescription AS [X_DictionarySeam.FullDescription], \r\n            T.Thumbna" +
                    "il AS [X_DictionarySeam.Thumbnail], \r\n            T.OriginalFileDataID AS [X_Dic" +
                    "tionarySeam.OriginalFileDataID], \r\n            T.Version AS [X_DictionarySeam.Ve" +
                    "rsion], \r\n            T.VersionAntecedentID AS [X_DictionarySeam.VersionAntecede" +
                    "ntID], \r\n            T.VersionCertainty AS [X_DictionarySeam.VersionCertainty], " +
                    "\r\n            T.VersionWorkflowInstanceID AS [X_DictionarySeam.VersionWorkflowIn" +
                    "stanceID], \r\n            T.VersionUpdatedBy AS [X_DictionarySeam.VersionUpdatedB" +
                    "y], \r\n            T.VersionDeletedBy AS [X_DictionarySeam.VersionDeletedBy], \r\n " +
                    "           T.VersionOwnerContactID AS [X_DictionarySeam.VersionOwnerContactID], " +
                    "\r\n            T.VersionOwnerCompanyID AS [X_DictionarySeam.VersionOwnerCompanyID" +
                    "], \r\n            T.VersionUpdated AS [X_DictionarySeam.VersionUpdated], \r\n      " +
                    "      True AS _from0\r\n        FROM NKDC.DictionarySeams AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionarySeamAlias
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView171()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionarySeamAlias", "\r\n    SELECT VALUE -- Constructing X_DictionarySeamAlias\r\n        [NKD.Module.Bus" +
                    "inessObjects.Store.X_DictionarySeamAlias](T1.[X_DictionarySeamAlias.SeamAliasID]" +
                    ", T1.[X_DictionarySeamAlias.SeamID], T1.[X_DictionarySeamAlias.CustomSeamName], " +
                    "T1.[X_DictionarySeamAlias.FullDescription], T1.[X_DictionarySeamAlias.Thumbnail]" +
                    ", T1.[X_DictionarySeamAlias.OriginalFileDataID], T1.[X_DictionarySeamAlias.Versi" +
                    "on], T1.[X_DictionarySeamAlias.VersionAntecedentID], T1.[X_DictionarySeamAlias.V" +
                    "ersionCertainty], T1.[X_DictionarySeamAlias.VersionWorkflowInstanceID], T1.[X_Di" +
                    "ctionarySeamAlias.VersionUpdatedBy], T1.[X_DictionarySeamAlias.VersionDeletedBy]" +
                    ", T1.[X_DictionarySeamAlias.VersionOwnerContactID], T1.[X_DictionarySeamAlias.Ve" +
                    "rsionOwnerCompanyID], T1.[X_DictionarySeamAlias.VersionUpdated])\r\n    FROM (\r\n  " +
                    "      SELECT \r\n            T.SeamAliasID AS [X_DictionarySeamAlias.SeamAliasID]," +
                    " \r\n            T.SeamID AS [X_DictionarySeamAlias.SeamID], \r\n            T.Custo" +
                    "mSeamName AS [X_DictionarySeamAlias.CustomSeamName], \r\n            T.FullDescrip" +
                    "tion AS [X_DictionarySeamAlias.FullDescription], \r\n            T.Thumbnail AS [X" +
                    "_DictionarySeamAlias.Thumbnail], \r\n            T.OriginalFileDataID AS [X_Dictio" +
                    "narySeamAlias.OriginalFileDataID], \r\n            T.Version AS [X_DictionarySeamA" +
                    "lias.Version], \r\n            T.VersionAntecedentID AS [X_DictionarySeamAlias.Ver" +
                    "sionAntecedentID], \r\n            T.VersionCertainty AS [X_DictionarySeamAlias.Ve" +
                    "rsionCertainty], \r\n            T.VersionWorkflowInstanceID AS [X_DictionarySeamA" +
                    "lias.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_Dictiona" +
                    "rySeamAlias.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_Dictionary" +
                    "SeamAlias.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [X_Diction" +
                    "arySeamAlias.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [X" +
                    "_DictionarySeamAlias.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [" +
                    "X_DictionarySeamAlias.VersionUpdated], \r\n            True AS _from0\r\n        FRO" +
                    "M NKDC.DictionarySeamAlias AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionarySedimentaryFeature
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView172()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2952);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionarySedimentaryFeature\r\n        [NKD.");
            viewString.Append("Module.BusinessObjects.Store.X_DictionarySedimentaryFeature](T1.[X_DictionarySed");
            viewString.Append("imentaryFeature.SedimentaryFeatureID], T1.[X_DictionarySedimentaryFeature.Standa");
            viewString.Append("rdSedimentaryFeatureName], T1.[X_DictionarySedimentaryFeature.CoalSedimentaryFea");
            viewString.Append("tureName], T1.[X_DictionarySedimentaryFeature.GoldSedimentaryFeatureName], T1.[X");
            viewString.Append("_DictionarySedimentaryFeature.CustomSedimentaryFeatureName], T1.[X_DictionarySed");
            viewString.Append("imentaryFeature.Description], T1.[X_DictionarySedimentaryFeature.FullDescription");
            viewString.Append("], T1.[X_DictionarySedimentaryFeature.Thumbnail], T1.[X_DictionarySedimentaryFea");
            viewString.Append("ture.OriginalFileDataID], T1.[X_DictionarySedimentaryFeature.Version], T1.[X_Dic");
            viewString.Append("tionarySedimentaryFeature.VersionAntecedentID], T1.[X_DictionarySedimentaryFeatu");
            viewString.Append("re.VersionCertainty], T1.[X_DictionarySedimentaryFeature.VersionWorkflowInstance");
            viewString.Append("ID], T1.[X_DictionarySedimentaryFeature.VersionUpdatedBy], T1.[X_DictionarySedim");
            viewString.Append("entaryFeature.VersionDeletedBy], T1.[X_DictionarySedimentaryFeature.VersionOwner");
            viewString.Append("ContactID], T1.[X_DictionarySedimentaryFeature.VersionOwnerCompanyID], T1.[X_Dic");
            viewString.Append("tionarySedimentaryFeature.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n       ");
            viewString.Append("     T.SedimentaryFeatureID AS [X_DictionarySedimentaryFeature.SedimentaryFeatur");
            viewString.Append("eID], \r\n            T.StandardSedimentaryFeatureName AS [X_DictionarySedimentary");
            viewString.Append("Feature.StandardSedimentaryFeatureName], \r\n            T.CoalSedimentaryFeatureN");
            viewString.Append("ame AS [X_DictionarySedimentaryFeature.CoalSedimentaryFeatureName], \r\n          ");
            viewString.Append("  T.GoldSedimentaryFeatureName AS [X_DictionarySedimentaryFeature.GoldSedimentar");
            viewString.Append("yFeatureName], \r\n            T.CustomSedimentaryFeatureName AS [X_DictionarySedi");
            viewString.Append("mentaryFeature.CustomSedimentaryFeatureName], \r\n            T.Description AS [X_");
            viewString.Append("DictionarySedimentaryFeature.Description], \r\n            T.FullDescription AS [X");
            viewString.Append("_DictionarySedimentaryFeature.FullDescription], \r\n            T.Thumbnail AS [X_");
            viewString.Append("DictionarySedimentaryFeature.Thumbnail], \r\n            T.OriginalFileDataID AS [");
            viewString.Append("X_DictionarySedimentaryFeature.OriginalFileDataID], \r\n            T.Version AS [");
            viewString.Append("X_DictionarySedimentaryFeature.Version], \r\n            T.VersionAntecedentID AS ");
            viewString.Append("[X_DictionarySedimentaryFeature.VersionAntecedentID], \r\n            T.VersionCer");
            viewString.Append("tainty AS [X_DictionarySedimentaryFeature.VersionCertainty], \r\n            T.Ver");
            viewString.Append("sionWorkflowInstanceID AS [X_DictionarySedimentaryFeature.VersionWorkflowInstanc");
            viewString.Append("eID], \r\n            T.VersionUpdatedBy AS [X_DictionarySedimentaryFeature.Versio");
            viewString.Append("nUpdatedBy], \r\n            T.VersionDeletedBy AS [X_DictionarySedimentaryFeature");
            viewString.Append(".VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [X_DictionarySedime");
            viewString.Append("ntaryFeature.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [X");
            viewString.Append("_DictionarySedimentaryFeature.VersionOwnerCompanyID], \r\n            T.VersionUpd");
            viewString.Append("ated AS [X_DictionarySedimentaryFeature.VersionUpdated], \r\n            True AS _");
            viewString.Append("from0\r\n        FROM NKDC.DictionarySedimentaryFeatures AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionarySedimentaryFeature", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryShade
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView173()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2250);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryShade\r\n        [NKD.Module.Busine");
            viewString.Append("ssObjects.Store.X_DictionaryShade](T1.[X_DictionaryShade.ShadeID], T1.[X_Diction");
            viewString.Append("aryShade.StandardShadeName], T1.[X_DictionaryShade.CoalShadeName], T1.[X_Diction");
            viewString.Append("aryShade.GoldShadeName], T1.[X_DictionaryShade.CustomShadeName], T1.[X_Dictionar");
            viewString.Append("yShade.Description], T1.[X_DictionaryShade.FullDescription], T1.[X_DictionarySha");
            viewString.Append("de.Thumbnail], T1.[X_DictionaryShade.OriginalFileDataID], T1.[X_DictionaryShade.");
            viewString.Append("Version], T1.[X_DictionaryShade.VersionAntecedentID], T1.[X_DictionaryShade.Vers");
            viewString.Append("ionCertainty], T1.[X_DictionaryShade.VersionWorkflowInstanceID], T1.[X_Dictionar");
            viewString.Append("yShade.VersionUpdatedBy], T1.[X_DictionaryShade.VersionDeletedBy], T1.[X_Diction");
            viewString.Append("aryShade.VersionOwnerContactID], T1.[X_DictionaryShade.VersionOwnerCompanyID], T");
            viewString.Append("1.[X_DictionaryShade.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            ");
            viewString.Append("T.ShadeID AS [X_DictionaryShade.ShadeID], \r\n            T.StandardShadeName AS [");
            viewString.Append("X_DictionaryShade.StandardShadeName], \r\n            T.CoalShadeName AS [X_Dictio");
            viewString.Append("naryShade.CoalShadeName], \r\n            T.GoldShadeName AS [X_DictionaryShade.Go");
            viewString.Append("ldShadeName], \r\n            T.CustomShadeName AS [X_DictionaryShade.CustomShadeN");
            viewString.Append("ame], \r\n            T.Description AS [X_DictionaryShade.Description], \r\n        ");
            viewString.Append("    T.FullDescription AS [X_DictionaryShade.FullDescription], \r\n            T.Th");
            viewString.Append("umbnail AS [X_DictionaryShade.Thumbnail], \r\n            T.OriginalFileDataID AS ");
            viewString.Append("[X_DictionaryShade.OriginalFileDataID], \r\n            T.Version AS [X_Dictionary");
            viewString.Append("Shade.Version], \r\n            T.VersionAntecedentID AS [X_DictionaryShade.Versio");
            viewString.Append("nAntecedentID], \r\n            T.VersionCertainty AS [X_DictionaryShade.VersionCe");
            viewString.Append("rtainty], \r\n            T.VersionWorkflowInstanceID AS [X_DictionaryShade.Versio");
            viewString.Append("nWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_DictionaryShade.Ver");
            viewString.Append("sionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_DictionaryShade.VersionDe");
            viewString.Append("letedBy], \r\n            T.VersionOwnerContactID AS [X_DictionaryShade.VersionOwn");
            viewString.Append("erContactID], \r\n            T.VersionOwnerCompanyID AS [X_DictionaryShade.Versio");
            viewString.Append("nOwnerCompanyID], \r\n            T.VersionUpdated AS [X_DictionaryShade.VersionUp");
            viewString.Append("dated], \r\n            True AS _from0\r\n        FROM NKDC.DictionaryShades AS T\r\n ");
            viewString.Append("   ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryShade", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryShape
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView174()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2250);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryShape\r\n        [NKD.Module.Busine");
            viewString.Append("ssObjects.Store.X_DictionaryShape](T1.[X_DictionaryShape.ShapeID], T1.[X_Diction");
            viewString.Append("aryShape.StandardShapeName], T1.[X_DictionaryShape.CoalShapeName], T1.[X_Diction");
            viewString.Append("aryShape.GoldShapeName], T1.[X_DictionaryShape.CustomShapeName], T1.[X_Dictionar");
            viewString.Append("yShape.Description], T1.[X_DictionaryShape.FullDescription], T1.[X_DictionarySha");
            viewString.Append("pe.Thumbnail], T1.[X_DictionaryShape.OriginalFileDataID], T1.[X_DictionaryShape.");
            viewString.Append("Version], T1.[X_DictionaryShape.VersionAntecedentID], T1.[X_DictionaryShape.Vers");
            viewString.Append("ionCertainty], T1.[X_DictionaryShape.VersionWorkflowInstanceID], T1.[X_Dictionar");
            viewString.Append("yShape.VersionUpdatedBy], T1.[X_DictionaryShape.VersionDeletedBy], T1.[X_Diction");
            viewString.Append("aryShape.VersionOwnerContactID], T1.[X_DictionaryShape.VersionOwnerCompanyID], T");
            viewString.Append("1.[X_DictionaryShape.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            ");
            viewString.Append("T.ShapeID AS [X_DictionaryShape.ShapeID], \r\n            T.StandardShapeName AS [");
            viewString.Append("X_DictionaryShape.StandardShapeName], \r\n            T.CoalShapeName AS [X_Dictio");
            viewString.Append("naryShape.CoalShapeName], \r\n            T.GoldShapeName AS [X_DictionaryShape.Go");
            viewString.Append("ldShapeName], \r\n            T.CustomShapeName AS [X_DictionaryShape.CustomShapeN");
            viewString.Append("ame], \r\n            T.Description AS [X_DictionaryShape.Description], \r\n        ");
            viewString.Append("    T.FullDescription AS [X_DictionaryShape.FullDescription], \r\n            T.Th");
            viewString.Append("umbnail AS [X_DictionaryShape.Thumbnail], \r\n            T.OriginalFileDataID AS ");
            viewString.Append("[X_DictionaryShape.OriginalFileDataID], \r\n            T.Version AS [X_Dictionary");
            viewString.Append("Shape.Version], \r\n            T.VersionAntecedentID AS [X_DictionaryShape.Versio");
            viewString.Append("nAntecedentID], \r\n            T.VersionCertainty AS [X_DictionaryShape.VersionCe");
            viewString.Append("rtainty], \r\n            T.VersionWorkflowInstanceID AS [X_DictionaryShape.Versio");
            viewString.Append("nWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_DictionaryShape.Ver");
            viewString.Append("sionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_DictionaryShape.VersionDe");
            viewString.Append("letedBy], \r\n            T.VersionOwnerContactID AS [X_DictionaryShape.VersionOwn");
            viewString.Append("erContactID], \r\n            T.VersionOwnerCompanyID AS [X_DictionaryShape.Versio");
            viewString.Append("nOwnerCompanyID], \r\n            T.VersionUpdated AS [X_DictionaryShape.VersionUp");
            viewString.Append("dated], \r\n            True AS _from0\r\n        FROM NKDC.DictionaryShapes AS T\r\n ");
            viewString.Append("   ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryShape", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryStratigraphy
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView175()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2629);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryStratigraphy\r\n        [NKD.Module");
            viewString.Append(".BusinessObjects.Store.X_DictionaryStratigraphy](T1.[X_DictionaryStratigraphy.St");
            viewString.Append("ratigraphyID], T1.[X_DictionaryStratigraphy.StandardStratigraphyName], T1.[X_Dic");
            viewString.Append("tionaryStratigraphy.CoalStratigraphyName], T1.[X_DictionaryStratigraphy.GoldStra");
            viewString.Append("tigraphyName], T1.[X_DictionaryStratigraphy.CustomStratigraphyName], T1.[X_Dicti");
            viewString.Append("onaryStratigraphy.Description], T1.[X_DictionaryStratigraphy.FullDescription], T");
            viewString.Append("1.[X_DictionaryStratigraphy.Thumbnail], T1.[X_DictionaryStratigraphy.OriginalFil");
            viewString.Append("eDataID], T1.[X_DictionaryStratigraphy.Version], T1.[X_DictionaryStratigraphy.Ve");
            viewString.Append("rsionAntecedentID], T1.[X_DictionaryStratigraphy.VersionCertainty], T1.[X_Dictio");
            viewString.Append("naryStratigraphy.VersionWorkflowInstanceID], T1.[X_DictionaryStratigraphy.Versio");
            viewString.Append("nUpdatedBy], T1.[X_DictionaryStratigraphy.VersionDeletedBy], T1.[X_DictionaryStr");
            viewString.Append("atigraphy.VersionOwnerContactID], T1.[X_DictionaryStratigraphy.VersionOwnerCompa");
            viewString.Append("nyID], T1.[X_DictionaryStratigraphy.VersionUpdated])\r\n    FROM (\r\n        SELECT");
            viewString.Append(" \r\n            T.StratigraphyID AS [X_DictionaryStratigraphy.StratigraphyID], \r\n");
            viewString.Append("            T.StandardStratigraphyName AS [X_DictionaryStratigraphy.StandardStra");
            viewString.Append("tigraphyName], \r\n            T.CoalStratigraphyName AS [X_DictionaryStratigraphy");
            viewString.Append(".CoalStratigraphyName], \r\n            T.GoldStratigraphyName AS [X_DictionaryStr");
            viewString.Append("atigraphy.GoldStratigraphyName], \r\n            T.CustomStratigraphyName AS [X_Di");
            viewString.Append("ctionaryStratigraphy.CustomStratigraphyName], \r\n            T.Description AS [X_");
            viewString.Append("DictionaryStratigraphy.Description], \r\n            T.FullDescription AS [X_Dicti");
            viewString.Append("onaryStratigraphy.FullDescription], \r\n            T.Thumbnail AS [X_DictionarySt");
            viewString.Append("ratigraphy.Thumbnail], \r\n            T.OriginalFileDataID AS [X_DictionaryStrati");
            viewString.Append("graphy.OriginalFileDataID], \r\n            T.Version AS [X_DictionaryStratigraphy");
            viewString.Append(".Version], \r\n            T.VersionAntecedentID AS [X_DictionaryStratigraphy.Vers");
            viewString.Append("ionAntecedentID], \r\n            T.VersionCertainty AS [X_DictionaryStratigraphy.");
            viewString.Append("VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [X_DictionaryStr");
            viewString.Append("atigraphy.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_Dic");
            viewString.Append("tionaryStratigraphy.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_Di");
            viewString.Append("ctionaryStratigraphy.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS");
            viewString.Append(" [X_DictionaryStratigraphy.VersionOwnerContactID], \r\n            T.VersionOwnerC");
            viewString.Append("ompanyID AS [X_DictionaryStratigraphy.VersionOwnerCompanyID], \r\n            T.Ve");
            viewString.Append("rsionUpdated AS [X_DictionaryStratigraphy.VersionUpdated], \r\n            True AS");
            viewString.Append(" _from0\r\n        FROM NKDC.DictionaryStratigraphies AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryStratigraphy", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionarySurfaceRoughness
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView176()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2845);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionarySurfaceRoughness\r\n        [NKD.Mo");
            viewString.Append("dule.BusinessObjects.Store.X_DictionarySurfaceRoughness](T1.[X_DictionarySurface");
            viewString.Append("Roughness.SurfaceRoughnessID], T1.[X_DictionarySurfaceRoughness.StandardSurfaceR");
            viewString.Append("oughnessName], T1.[X_DictionarySurfaceRoughness.CoalSurfaceRoughnessName], T1.[X");
            viewString.Append("_DictionarySurfaceRoughness.GoldSurfaceRoughnessName], T1.[X_DictionarySurfaceRo");
            viewString.Append("ughness.CustomSurfaceRoughnessName], T1.[X_DictionarySurfaceRoughness.Descriptio");
            viewString.Append("n], T1.[X_DictionarySurfaceRoughness.FullDescription], T1.[X_DictionarySurfaceRo");
            viewString.Append("ughness.Thumbnail], T1.[X_DictionarySurfaceRoughness.OriginalFileDataID], T1.[X_");
            viewString.Append("DictionarySurfaceRoughness.Version], T1.[X_DictionarySurfaceRoughness.VersionAnt");
            viewString.Append("ecedentID], T1.[X_DictionarySurfaceRoughness.VersionCertainty], T1.[X_Dictionary");
            viewString.Append("SurfaceRoughness.VersionWorkflowInstanceID], T1.[X_DictionarySurfaceRoughness.Ve");
            viewString.Append("rsionUpdatedBy], T1.[X_DictionarySurfaceRoughness.VersionDeletedBy], T1.[X_Dicti");
            viewString.Append("onarySurfaceRoughness.VersionOwnerContactID], T1.[X_DictionarySurfaceRoughness.V");
            viewString.Append("ersionOwnerCompanyID], T1.[X_DictionarySurfaceRoughness.VersionUpdated])\r\n    FR");
            viewString.Append("OM (\r\n        SELECT \r\n            T.SurfaceRoughnessID AS [X_DictionarySurfaceR");
            viewString.Append("oughness.SurfaceRoughnessID], \r\n            T.StandardSurfaceRoughnessName AS [X");
            viewString.Append("_DictionarySurfaceRoughness.StandardSurfaceRoughnessName], \r\n            T.CoalS");
            viewString.Append("urfaceRoughnessName AS [X_DictionarySurfaceRoughness.CoalSurfaceRoughnessName], ");
            viewString.Append("\r\n            T.GoldSurfaceRoughnessName AS [X_DictionarySurfaceRoughness.GoldSu");
            viewString.Append("rfaceRoughnessName], \r\n            T.CustomSurfaceRoughnessName AS [X_Dictionary");
            viewString.Append("SurfaceRoughness.CustomSurfaceRoughnessName], \r\n            T.Description AS [X_");
            viewString.Append("DictionarySurfaceRoughness.Description], \r\n            T.FullDescription AS [X_D");
            viewString.Append("ictionarySurfaceRoughness.FullDescription], \r\n            T.Thumbnail AS [X_Dict");
            viewString.Append("ionarySurfaceRoughness.Thumbnail], \r\n            T.OriginalFileDataID AS [X_Dict");
            viewString.Append("ionarySurfaceRoughness.OriginalFileDataID], \r\n            T.Version AS [X_Dictio");
            viewString.Append("narySurfaceRoughness.Version], \r\n            T.VersionAntecedentID AS [X_Diction");
            viewString.Append("arySurfaceRoughness.VersionAntecedentID], \r\n            T.VersionCertainty AS [X");
            viewString.Append("_DictionarySurfaceRoughness.VersionCertainty], \r\n            T.VersionWorkflowIn");
            viewString.Append("stanceID AS [X_DictionarySurfaceRoughness.VersionWorkflowInstanceID], \r\n        ");
            viewString.Append("    T.VersionUpdatedBy AS [X_DictionarySurfaceRoughness.VersionUpdatedBy], \r\n   ");
            viewString.Append("         T.VersionDeletedBy AS [X_DictionarySurfaceRoughness.VersionDeletedBy], ");
            viewString.Append("\r\n            T.VersionOwnerContactID AS [X_DictionarySurfaceRoughness.VersionOw");
            viewString.Append("nerContactID], \r\n            T.VersionOwnerCompanyID AS [X_DictionarySurfaceRoug");
            viewString.Append("hness.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [X_DictionarySur");
            viewString.Append("faceRoughness.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.D");
            viewString.Append("ictionarySurfaceRoughnesses AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionarySurfaceRoughness", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionarySurveyAccuracy
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView177()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2737);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionarySurveyAccuracy\r\n        [NKD.Modu");
            viewString.Append("le.BusinessObjects.Store.X_DictionarySurveyAccuracy](T1.[X_DictionarySurveyAccur");
            viewString.Append("acy.SurveyAccuracyID], T1.[X_DictionarySurveyAccuracy.StandardSurveyAccuracyName");
            viewString.Append("], T1.[X_DictionarySurveyAccuracy.CoalSurveyAccuracyName], T1.[X_DictionarySurve");
            viewString.Append("yAccuracy.GoldSurveyAccuracyName], T1.[X_DictionarySurveyAccuracy.CustomSurveyAc");
            viewString.Append("curacyName], T1.[X_DictionarySurveyAccuracy.Description], T1.[X_DictionarySurvey");
            viewString.Append("Accuracy.FullDescription], T1.[X_DictionarySurveyAccuracy.Thumbnail], T1.[X_Dict");
            viewString.Append("ionarySurveyAccuracy.OriginalFileDataID], T1.[X_DictionarySurveyAccuracy.Version");
            viewString.Append("], T1.[X_DictionarySurveyAccuracy.VersionAntecedentID], T1.[X_DictionarySurveyAc");
            viewString.Append("curacy.VersionCertainty], T1.[X_DictionarySurveyAccuracy.VersionWorkflowInstance");
            viewString.Append("ID], T1.[X_DictionarySurveyAccuracy.VersionUpdatedBy], T1.[X_DictionarySurveyAcc");
            viewString.Append("uracy.VersionDeletedBy], T1.[X_DictionarySurveyAccuracy.VersionOwnerContactID], ");
            viewString.Append("T1.[X_DictionarySurveyAccuracy.VersionOwnerCompanyID], T1.[X_DictionarySurveyAcc");
            viewString.Append("uracy.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.SurveyAccurac");
            viewString.Append("yID AS [X_DictionarySurveyAccuracy.SurveyAccuracyID], \r\n            T.StandardSu");
            viewString.Append("rveyAccuracyName AS [X_DictionarySurveyAccuracy.StandardSurveyAccuracyName], \r\n ");
            viewString.Append("           T.CoalSurveyAccuracyName AS [X_DictionarySurveyAccuracy.CoalSurveyAcc");
            viewString.Append("uracyName], \r\n            T.GoldSurveyAccuracyName AS [X_DictionarySurveyAccurac");
            viewString.Append("y.GoldSurveyAccuracyName], \r\n            T.CustomSurveyAccuracyName AS [X_Dictio");
            viewString.Append("narySurveyAccuracy.CustomSurveyAccuracyName], \r\n            T.Description AS [X_");
            viewString.Append("DictionarySurveyAccuracy.Description], \r\n            T.FullDescription AS [X_Dic");
            viewString.Append("tionarySurveyAccuracy.FullDescription], \r\n            T.Thumbnail AS [X_Dictiona");
            viewString.Append("rySurveyAccuracy.Thumbnail], \r\n            T.OriginalFileDataID AS [X_Dictionary");
            viewString.Append("SurveyAccuracy.OriginalFileDataID], \r\n            T.Version AS [X_DictionarySurv");
            viewString.Append("eyAccuracy.Version], \r\n            T.VersionAntecedentID AS [X_DictionarySurveyA");
            viewString.Append("ccuracy.VersionAntecedentID], \r\n            T.VersionCertainty AS [X_DictionaryS");
            viewString.Append("urveyAccuracy.VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [X");
            viewString.Append("_DictionarySurveyAccuracy.VersionWorkflowInstanceID], \r\n            T.VersionUpd");
            viewString.Append("atedBy AS [X_DictionarySurveyAccuracy.VersionUpdatedBy], \r\n            T.Version");
            viewString.Append("DeletedBy AS [X_DictionarySurveyAccuracy.VersionDeletedBy], \r\n            T.Vers");
            viewString.Append("ionOwnerContactID AS [X_DictionarySurveyAccuracy.VersionOwnerContactID], \r\n     ");
            viewString.Append("       T.VersionOwnerCompanyID AS [X_DictionarySurveyAccuracy.VersionOwnerCompan");
            viewString.Append("yID], \r\n            T.VersionUpdated AS [X_DictionarySurveyAccuracy.VersionUpdat");
            viewString.Append("ed], \r\n            True AS _from0\r\n        FROM NKDC.DictionarySurveyAccuracies ");
            viewString.Append("AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionarySurveyAccuracy", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryTexture
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView178()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2358);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryTexture\r\n        [NKD.Module.Busi");
            viewString.Append("nessObjects.Store.X_DictionaryTexture](T1.[X_DictionaryTexture.TextureID], T1.[X");
            viewString.Append("_DictionaryTexture.StandardTextureName], T1.[X_DictionaryTexture.CoalTextureName");
            viewString.Append("], T1.[X_DictionaryTexture.GoldTextureName], T1.[X_DictionaryTexture.CustomTextu");
            viewString.Append("reName], T1.[X_DictionaryTexture.Description], T1.[X_DictionaryTexture.FullDescr");
            viewString.Append("iption], T1.[X_DictionaryTexture.Thumbnail], T1.[X_DictionaryTexture.OriginalFil");
            viewString.Append("eDataID], T1.[X_DictionaryTexture.Version], T1.[X_DictionaryTexture.VersionAntec");
            viewString.Append("edentID], T1.[X_DictionaryTexture.VersionCertainty], T1.[X_DictionaryTexture.Ver");
            viewString.Append("sionWorkflowInstanceID], T1.[X_DictionaryTexture.VersionUpdatedBy], T1.[X_Dictio");
            viewString.Append("naryTexture.VersionDeletedBy], T1.[X_DictionaryTexture.VersionOwnerContactID], T");
            viewString.Append("1.[X_DictionaryTexture.VersionOwnerCompanyID], T1.[X_DictionaryTexture.VersionUp");
            viewString.Append("dated])\r\n    FROM (\r\n        SELECT \r\n            T.TextureID AS [X_DictionaryTe");
            viewString.Append("xture.TextureID], \r\n            T.StandardTextureName AS [X_DictionaryTexture.St");
            viewString.Append("andardTextureName], \r\n            T.CoalTextureName AS [X_DictionaryTexture.Coal");
            viewString.Append("TextureName], \r\n            T.GoldTextureName AS [X_DictionaryTexture.GoldTextur");
            viewString.Append("eName], \r\n            T.CustomTextureName AS [X_DictionaryTexture.CustomTextureN");
            viewString.Append("ame], \r\n            T.Description AS [X_DictionaryTexture.Description], \r\n      ");
            viewString.Append("      T.FullDescription AS [X_DictionaryTexture.FullDescription], \r\n            ");
            viewString.Append("T.Thumbnail AS [X_DictionaryTexture.Thumbnail], \r\n            T.OriginalFileData");
            viewString.Append("ID AS [X_DictionaryTexture.OriginalFileDataID], \r\n            T.Version AS [X_Di");
            viewString.Append("ctionaryTexture.Version], \r\n            T.VersionAntecedentID AS [X_DictionaryTe");
            viewString.Append("xture.VersionAntecedentID], \r\n            T.VersionCertainty AS [X_DictionaryTex");
            viewString.Append("ture.VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [X_Dictiona");
            viewString.Append("ryTexture.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_Dic");
            viewString.Append("tionaryTexture.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_Diction");
            viewString.Append("aryTexture.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [X_Dictio");
            viewString.Append("naryTexture.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [X_");
            viewString.Append("DictionaryTexture.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [X_D");
            viewString.Append("ictionaryTexture.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKD");
            viewString.Append("C.DictionaryTextures AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryTexture", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryUnit
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView179()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2624);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryUnit\r\n        [NKD.Module.Busines");
            viewString.Append("sObjects.Store.X_DictionaryUnit](T1.[X_DictionaryUnit.UnitID], T1.[X_DictionaryU");
            viewString.Append("nit.UnitTypeID], T1.[X_DictionaryUnit.StrictlySI], T1.[X_DictionaryUnit.Equivale");
            viewString.Append("ntUnitID], T1.[X_DictionaryUnit.EquivalentMultiplier], T1.[X_DictionaryUnit.Stan");
            viewString.Append("dardUnitName], T1.[X_DictionaryUnit.CoalUnitName], T1.[X_DictionaryUnit.GoldUnit");
            viewString.Append("Name], T1.[X_DictionaryUnit.CustomUnitName], T1.[X_DictionaryUnit.Description], ");
            viewString.Append("T1.[X_DictionaryUnit.FullDescription], T1.[X_DictionaryUnit.Thumbnail], T1.[X_Di");
            viewString.Append("ctionaryUnit.OriginalFileDataID], T1.[X_DictionaryUnit.Version], T1.[X_Dictionar");
            viewString.Append("yUnit.VersionAntecedentID], T1.[X_DictionaryUnit.VersionCertainty], T1.[X_Dictio");
            viewString.Append("naryUnit.VersionWorkflowInstanceID], T1.[X_DictionaryUnit.VersionUpdatedBy], T1.");
            viewString.Append("[X_DictionaryUnit.VersionDeletedBy], T1.[X_DictionaryUnit.VersionOwnerContactID]");
            viewString.Append(", T1.[X_DictionaryUnit.VersionOwnerCompanyID], T1.[X_DictionaryUnit.VersionUpdat");
            viewString.Append("ed])\r\n    FROM (\r\n        SELECT \r\n            T.UnitID AS [X_DictionaryUnit.Uni");
            viewString.Append("tID], \r\n            T.UnitTypeID AS [X_DictionaryUnit.UnitTypeID], \r\n           ");
            viewString.Append(" T.StrictlySI AS [X_DictionaryUnit.StrictlySI], \r\n            T.EquivalentUnitID");
            viewString.Append(" AS [X_DictionaryUnit.EquivalentUnitID], \r\n            T.EquivalentMultiplier AS");
            viewString.Append(" [X_DictionaryUnit.EquivalentMultiplier], \r\n            T.StandardUnitName AS [X");
            viewString.Append("_DictionaryUnit.StandardUnitName], \r\n            T.CoalUnitName AS [X_Dictionary");
            viewString.Append("Unit.CoalUnitName], \r\n            T.GoldUnitName AS [X_DictionaryUnit.GoldUnitNa");
            viewString.Append("me], \r\n            T.CustomUnitName AS [X_DictionaryUnit.CustomUnitName], \r\n    ");
            viewString.Append("        T.Description AS [X_DictionaryUnit.Description], \r\n            T.FullDes");
            viewString.Append("cription AS [X_DictionaryUnit.FullDescription], \r\n            T.Thumbnail AS [X_");
            viewString.Append("DictionaryUnit.Thumbnail], \r\n            T.OriginalFileDataID AS [X_DictionaryUn");
            viewString.Append("it.OriginalFileDataID], \r\n            T.Version AS [X_DictionaryUnit.Version], \r");
            viewString.Append("\n            T.VersionAntecedentID AS [X_DictionaryUnit.VersionAntecedentID], \r\n");
            viewString.Append("            T.VersionCertainty AS [X_DictionaryUnit.VersionCertainty], \r\n       ");
            viewString.Append("     T.VersionWorkflowInstanceID AS [X_DictionaryUnit.VersionWorkflowInstanceID]");
            viewString.Append(", \r\n            T.VersionUpdatedBy AS [X_DictionaryUnit.VersionUpdatedBy], \r\n   ");
            viewString.Append("         T.VersionDeletedBy AS [X_DictionaryUnit.VersionDeletedBy], \r\n          ");
            viewString.Append("  T.VersionOwnerContactID AS [X_DictionaryUnit.VersionOwnerContactID], \r\n       ");
            viewString.Append("     T.VersionOwnerCompanyID AS [X_DictionaryUnit.VersionOwnerCompanyID], \r\n    ");
            viewString.Append("        T.VersionUpdated AS [X_DictionaryUnit.VersionUpdated], \r\n            Tru");
            viewString.Append("e AS _from0\r\n        FROM NKDC.DictionaryUnits AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryUnit", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryUnitType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView180()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2170);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryUnitType\r\n        [NKD.Module.Bus");
            viewString.Append("inessObjects.Store.X_DictionaryUnitType](T1.[X_DictionaryUnitType.UnitTypeID], T");
            viewString.Append("1.[X_DictionaryUnitType.StandardUnitTypeName], T1.[X_DictionaryUnitType.CustomUn");
            viewString.Append("itTypeName], T1.[X_DictionaryUnitType.Description], T1.[X_DictionaryUnitType.Ful");
            viewString.Append("lDescription], T1.[X_DictionaryUnitType.Thumbnail], T1.[X_DictionaryUnitType.Ori");
            viewString.Append("ginalFileDataID], T1.[X_DictionaryUnitType.Version], T1.[X_DictionaryUnitType.Ve");
            viewString.Append("rsionAntecedentID], T1.[X_DictionaryUnitType.VersionCertainty], T1.[X_Dictionary");
            viewString.Append("UnitType.VersionWorkflowInstanceID], T1.[X_DictionaryUnitType.VersionUpdatedBy],");
            viewString.Append(" T1.[X_DictionaryUnitType.VersionDeletedBy], T1.[X_DictionaryUnitType.VersionOwn");
            viewString.Append("erContactID], T1.[X_DictionaryUnitType.VersionOwnerCompanyID], T1.[X_DictionaryU");
            viewString.Append("nitType.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.UnitTypeID ");
            viewString.Append("AS [X_DictionaryUnitType.UnitTypeID], \r\n            T.StandardUnitTypeName AS [X");
            viewString.Append("_DictionaryUnitType.StandardUnitTypeName], \r\n            T.CustomUnitTypeName AS");
            viewString.Append(" [X_DictionaryUnitType.CustomUnitTypeName], \r\n            T.Description AS [X_Di");
            viewString.Append("ctionaryUnitType.Description], \r\n            T.FullDescription AS [X_DictionaryU");
            viewString.Append("nitType.FullDescription], \r\n            T.Thumbnail AS [X_DictionaryUnitType.Thu");
            viewString.Append("mbnail], \r\n            T.OriginalFileDataID AS [X_DictionaryUnitType.OriginalFil");
            viewString.Append("eDataID], \r\n            T.Version AS [X_DictionaryUnitType.Version], \r\n         ");
            viewString.Append("   T.VersionAntecedentID AS [X_DictionaryUnitType.VersionAntecedentID], \r\n      ");
            viewString.Append("      T.VersionCertainty AS [X_DictionaryUnitType.VersionCertainty], \r\n         ");
            viewString.Append("   T.VersionWorkflowInstanceID AS [X_DictionaryUnitType.VersionWorkflowInstanceI");
            viewString.Append("D], \r\n            T.VersionUpdatedBy AS [X_DictionaryUnitType.VersionUpdatedBy],");
            viewString.Append(" \r\n            T.VersionDeletedBy AS [X_DictionaryUnitType.VersionDeletedBy], \r\n");
            viewString.Append("            T.VersionOwnerContactID AS [X_DictionaryUnitType.VersionOwnerContact");
            viewString.Append("ID], \r\n            T.VersionOwnerCompanyID AS [X_DictionaryUnitType.VersionOwner");
            viewString.Append("CompanyID], \r\n            T.VersionUpdated AS [X_DictionaryUnitType.VersionUpdat");
            viewString.Append("ed], \r\n            True AS _from0\r\n        FROM NKDC.DictionaryUnitTypes AS T\r\n ");
            viewString.Append("   ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryUnitType", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryWeathering
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView181()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2520);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryWeathering\r\n        [NKD.Module.B");
            viewString.Append("usinessObjects.Store.X_DictionaryWeathering](T1.[X_DictionaryWeathering.Weatheri");
            viewString.Append("ngID], T1.[X_DictionaryWeathering.StandardWeatheringName], T1.[X_DictionaryWeath");
            viewString.Append("ering.CoalWeatheringName], T1.[X_DictionaryWeathering.GoldWeatheringName], T1.[X");
            viewString.Append("_DictionaryWeathering.CustomWeatheringName], T1.[X_DictionaryWeathering.Descript");
            viewString.Append("ion], T1.[X_DictionaryWeathering.FullDescription], T1.[X_DictionaryWeathering.Th");
            viewString.Append("umbnail], T1.[X_DictionaryWeathering.OriginalFileDataID], T1.[X_DictionaryWeathe");
            viewString.Append("ring.Version], T1.[X_DictionaryWeathering.VersionAntecedentID], T1.[X_Dictionary");
            viewString.Append("Weathering.VersionCertainty], T1.[X_DictionaryWeathering.VersionWorkflowInstance");
            viewString.Append("ID], T1.[X_DictionaryWeathering.VersionUpdatedBy], T1.[X_DictionaryWeathering.Ve");
            viewString.Append("rsionDeletedBy], T1.[X_DictionaryWeathering.VersionOwnerContactID], T1.[X_Dictio");
            viewString.Append("naryWeathering.VersionOwnerCompanyID], T1.[X_DictionaryWeathering.VersionUpdated");
            viewString.Append("])\r\n    FROM (\r\n        SELECT \r\n            T.WeatheringID AS [X_DictionaryWeat");
            viewString.Append("hering.WeatheringID], \r\n            T.StandardWeatheringName AS [X_DictionaryWea");
            viewString.Append("thering.StandardWeatheringName], \r\n            T.CoalWeatheringName AS [X_Dictio");
            viewString.Append("naryWeathering.CoalWeatheringName], \r\n            T.GoldWeatheringName AS [X_Dic");
            viewString.Append("tionaryWeathering.GoldWeatheringName], \r\n            T.CustomWeatheringName AS [");
            viewString.Append("X_DictionaryWeathering.CustomWeatheringName], \r\n            T.Description AS [X_");
            viewString.Append("DictionaryWeathering.Description], \r\n            T.FullDescription AS [X_Diction");
            viewString.Append("aryWeathering.FullDescription], \r\n            T.Thumbnail AS [X_DictionaryWeathe");
            viewString.Append("ring.Thumbnail], \r\n            T.OriginalFileDataID AS [X_DictionaryWeathering.O");
            viewString.Append("riginalFileDataID], \r\n            T.Version AS [X_DictionaryWeathering.Version],");
            viewString.Append(" \r\n            T.VersionAntecedentID AS [X_DictionaryWeathering.VersionAnteceden");
            viewString.Append("tID], \r\n            T.VersionCertainty AS [X_DictionaryWeathering.VersionCertain");
            viewString.Append("ty], \r\n            T.VersionWorkflowInstanceID AS [X_DictionaryWeathering.Versio");
            viewString.Append("nWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_DictionaryWeatherin");
            viewString.Append("g.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_DictionaryWeathering");
            viewString.Append(".VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [X_DictionaryWeathe");
            viewString.Append("ring.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [X_Diction");
            viewString.Append("aryWeathering.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [X_Dicti");
            viewString.Append("onaryWeathering.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC");
            viewString.Append(".DictionaryWeatherings AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryWeathering", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryWorkType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView182()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2270);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryWorkType\r\n        [NKD.Module.Bus");
            viewString.Append("inessObjects.Store.X_DictionaryWorkType](T1.[X_DictionaryWorkType.WorkTypeID], T");
            viewString.Append("1.[X_DictionaryWorkType.ProfessionID], T1.[X_DictionaryWorkType.WorkTypeClassID]");
            viewString.Append(", T1.[X_DictionaryWorkType.WorkTypeName], T1.[X_DictionaryWorkType.WorkTypeDescr");
            viewString.Append("iption], T1.[X_DictionaryWorkType.FullDescription], T1.[X_DictionaryWorkType.Thu");
            viewString.Append("mbnail], T1.[X_DictionaryWorkType.OriginalFileDataID], T1.[X_DictionaryWorkType.");
            viewString.Append("Version], T1.[X_DictionaryWorkType.VersionAntecedentID], T1.[X_DictionaryWorkTyp");
            viewString.Append("e.VersionCertainty], T1.[X_DictionaryWorkType.VersionWorkflowInstanceID], T1.[X_");
            viewString.Append("DictionaryWorkType.VersionUpdatedBy], T1.[X_DictionaryWorkType.VersionDeletedBy]");
            viewString.Append(", T1.[X_DictionaryWorkType.VersionOwnerContactID], T1.[X_DictionaryWorkType.Vers");
            viewString.Append("ionOwnerCompanyID], T1.[X_DictionaryWorkType.VersionUpdated])\r\n    FROM (\r\n     ");
            viewString.Append("   SELECT \r\n            T.WorkTypeID AS [X_DictionaryWorkType.WorkTypeID], \r\n   ");
            viewString.Append("         T.ProfessionID AS [X_DictionaryWorkType.ProfessionID], \r\n            T.");
            viewString.Append("WorkTypeClassID AS [X_DictionaryWorkType.WorkTypeClassID], \r\n            T.WorkT");
            viewString.Append("ypeName AS [X_DictionaryWorkType.WorkTypeName], \r\n            T.WorkTypeDescript");
            viewString.Append("ion AS [X_DictionaryWorkType.WorkTypeDescription], \r\n            T.FullDescripti");
            viewString.Append("on AS [X_DictionaryWorkType.FullDescription], \r\n            T.Thumbnail AS [X_Di");
            viewString.Append("ctionaryWorkType.Thumbnail], \r\n            T.OriginalFileDataID AS [X_Dictionary");
            viewString.Append("WorkType.OriginalFileDataID], \r\n            T.Version AS [X_DictionaryWorkType.V");
            viewString.Append("ersion], \r\n            T.VersionAntecedentID AS [X_DictionaryWorkType.VersionAnt");
            viewString.Append("ecedentID], \r\n            T.VersionCertainty AS [X_DictionaryWorkType.VersionCer");
            viewString.Append("tainty], \r\n            T.VersionWorkflowInstanceID AS [X_DictionaryWorkType.Vers");
            viewString.Append("ionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_DictionaryWorkTyp");
            viewString.Append("e.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_DictionaryWorkType.V");
            viewString.Append("ersionDeletedBy], \r\n            T.VersionOwnerContactID AS [X_DictionaryWorkType");
            viewString.Append(".VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [X_DictionaryW");
            viewString.Append("orkType.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [X_DictionaryW");
            viewString.Append("orkType.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.Diction");
            viewString.Append("aryWorkTypes AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryWorkType", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryWorkTypeClass
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView183()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2215);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryWorkTypeClass\r\n        [NKD.Modul");
            viewString.Append("e.BusinessObjects.Store.X_DictionaryWorkTypeClass](T1.[X_DictionaryWorkTypeClass");
            viewString.Append(".WorkTypeClassID], T1.[X_DictionaryWorkTypeClass.WorkTypeClassName], T1.[X_Dicti");
            viewString.Append("onaryWorkTypeClass.Description], T1.[X_DictionaryWorkTypeClass.FullDescription],");
            viewString.Append(" T1.[X_DictionaryWorkTypeClass.Thumbnail], T1.[X_DictionaryWorkTypeClass.Origina");
            viewString.Append("lFileDataID], T1.[X_DictionaryWorkTypeClass.Version], T1.[X_DictionaryWorkTypeCl");
            viewString.Append("ass.VersionAntecedentID], T1.[X_DictionaryWorkTypeClass.VersionCertainty], T1.[X");
            viewString.Append("_DictionaryWorkTypeClass.VersionWorkflowInstanceID], T1.[X_DictionaryWorkTypeCla");
            viewString.Append("ss.VersionUpdatedBy], T1.[X_DictionaryWorkTypeClass.VersionDeletedBy], T1.[X_Dic");
            viewString.Append("tionaryWorkTypeClass.VersionOwnerContactID], T1.[X_DictionaryWorkTypeClass.Versi");
            viewString.Append("onOwnerCompanyID], T1.[X_DictionaryWorkTypeClass.VersionUpdated])\r\n    FROM (\r\n ");
            viewString.Append("       SELECT \r\n            T.WorkTypeClassID AS [X_DictionaryWorkTypeClass.Work");
            viewString.Append("TypeClassID], \r\n            T.WorkTypeClassName AS [X_DictionaryWorkTypeClass.Wo");
            viewString.Append("rkTypeClassName], \r\n            T.Description AS [X_DictionaryWorkTypeClass.Desc");
            viewString.Append("ription], \r\n            T.FullDescription AS [X_DictionaryWorkTypeClass.FullDesc");
            viewString.Append("ription], \r\n            T.Thumbnail AS [X_DictionaryWorkTypeClass.Thumbnail], \r\n");
            viewString.Append("            T.OriginalFileDataID AS [X_DictionaryWorkTypeClass.OriginalFileDataI");
            viewString.Append("D], \r\n            T.Version AS [X_DictionaryWorkTypeClass.Version], \r\n          ");
            viewString.Append("  T.VersionAntecedentID AS [X_DictionaryWorkTypeClass.VersionAntecedentID], \r\n  ");
            viewString.Append("          T.VersionCertainty AS [X_DictionaryWorkTypeClass.VersionCertainty], \r\n");
            viewString.Append("            T.VersionWorkflowInstanceID AS [X_DictionaryWorkTypeClass.VersionWor");
            viewString.Append("kflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_DictionaryWorkTypeClass");
            viewString.Append(".VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_DictionaryWorkTypeCla");
            viewString.Append("ss.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [X_DictionaryWork");
            viewString.Append("TypeClass.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [X_Di");
            viewString.Append("ctionaryWorkTypeClass.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS ");
            viewString.Append("[X_DictionaryWorkTypeClass.VersionUpdated], \r\n            True AS _from0\r\n      ");
            viewString.Append("  FROM NKDC.DictionaryWorkTypeClasses AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryWorkTypeClass", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryWorkTypeRelation
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView184()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryWorkTypeRelation", "\r\n    SELECT VALUE -- Constructing X_DictionaryWorkTypeRelation\r\n        [NKD.Mod" +
                    "ule.BusinessObjects.Store.X_DictionaryWorkTypeRelation](T1.[X_DictionaryWorkType" +
                    "Relation.WorkTypeRelationID], T1.[X_DictionaryWorkTypeRelation.WorkTypeID], T1.[" +
                    "X_DictionaryWorkTypeRelation.ParentWorkTypeID], T1.[X_DictionaryWorkTypeRelation" +
                    ".Version], T1.[X_DictionaryWorkTypeRelation.VersionAntecedentID], T1.[X_Dictiona" +
                    "ryWorkTypeRelation.VersionCertainty], T1.[X_DictionaryWorkTypeRelation.VersionWo" +
                    "rkflowInstanceID], T1.[X_DictionaryWorkTypeRelation.VersionUpdatedBy], T1.[X_Dic" +
                    "tionaryWorkTypeRelation.VersionDeletedBy], T1.[X_DictionaryWorkTypeRelation.Vers" +
                    "ionOwnerContactID], T1.[X_DictionaryWorkTypeRelation.VersionOwnerCompanyID], T1." +
                    "[X_DictionaryWorkTypeRelation.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n   " +
                    "         T.WorkTypeRelationID AS [X_DictionaryWorkTypeRelation.WorkTypeRelationI" +
                    "D], \r\n            T.WorkTypeID AS [X_DictionaryWorkTypeRelation.WorkTypeID], \r\n " +
                    "           T.ParentWorkTypeID AS [X_DictionaryWorkTypeRelation.ParentWorkTypeID]" +
                    ", \r\n            T.Version AS [X_DictionaryWorkTypeRelation.Version], \r\n         " +
                    "   T.VersionAntecedentID AS [X_DictionaryWorkTypeRelation.VersionAntecedentID], " +
                    "\r\n            T.VersionCertainty AS [X_DictionaryWorkTypeRelation.VersionCertain" +
                    "ty], \r\n            T.VersionWorkflowInstanceID AS [X_DictionaryWorkTypeRelation." +
                    "VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_DictionaryWor" +
                    "kTypeRelation.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_Dictiona" +
                    "ryWorkTypeRelation.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [" +
                    "X_DictionaryWorkTypeRelation.VersionOwnerContactID], \r\n            T.VersionOwne" +
                    "rCompanyID AS [X_DictionaryWorkTypeRelation.VersionOwnerCompanyID], \r\n          " +
                    "  T.VersionUpdated AS [X_DictionaryWorkTypeRelation.VersionUpdated], \r\n         " +
                    "   True AS _from0\r\n        FROM NKDC.DictionaryWorkTypeRelations AS T\r\n    ) AS " +
                    "T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_Drilling
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView185()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3203);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_Drilling\r\n        [NKD.Module.BusinessObjec");
            viewString.Append("ts.Store.X_Drilling](T1.[X_Drilling.DrillingID], T1.[X_Drilling.HeaderID], T1.[X");
            viewString.Append("_Drilling.DrillerFromDepth], T1.[X_Drilling.DrillerToDepth], T1.[X_Drilling.Dril");
            viewString.Append("lerRecoveredLength], T1.[X_Drilling.RunNumber], T1.[X_Drilling.DrillingDate], T1");
            viewString.Append(".[X_Drilling.DrillingCompanyID], T1.[X_Drilling.DrillRigNumber], T1.[X_Drilling.");
            viewString.Append("DrillRigTypeID], T1.[X_Drilling.DrillerID], T1.[X_Drilling.DrillBitTypeID], T1.[");
            viewString.Append("X_Drilling.DrillFluidID], T1.[X_Drilling.DrillSizeID], T1.[X_Drilling.CoreSize],");
            viewString.Append(" T1.[X_Drilling.HoleSize], T1.[X_Drilling.Reamed], T1.[X_Drilling.GeologistFromD");
            viewString.Append("epth], T1.[X_Drilling.GeologistToDepth], T1.[X_Drilling.GeologistRecoveredLength");
            viewString.Append("], T1.[X_Drilling.RockQualityDesignationLength], T1.[X_Drilling.Comment], T1.[X_");
            viewString.Append("Drilling.Version], T1.[X_Drilling.VersionAntecedentID], T1.[X_Drilling.VersionCe");
            viewString.Append("rtainty], T1.[X_Drilling.VersionWorkflowInstanceID], T1.[X_Drilling.VersionUpdat");
            viewString.Append("edBy], T1.[X_Drilling.VersionDeletedBy], T1.[X_Drilling.VersionOwnerContactID], ");
            viewString.Append("T1.[X_Drilling.VersionOwnerCompanyID], T1.[X_Drilling.VersionUpdated])\r\n    FROM");
            viewString.Append(" (\r\n        SELECT \r\n            T.DrillingID AS [X_Drilling.DrillingID], \r\n    ");
            viewString.Append("        T.HeaderID AS [X_Drilling.HeaderID], \r\n            T.DrillerFromDepth AS");
            viewString.Append(" [X_Drilling.DrillerFromDepth], \r\n            T.DrillerToDepth AS [X_Drilling.Dr");
            viewString.Append("illerToDepth], \r\n            T.DrillerRecoveredLength AS [X_Drilling.DrillerReco");
            viewString.Append("veredLength], \r\n            T.RunNumber AS [X_Drilling.RunNumber], \r\n           ");
            viewString.Append(" T.DrillingDate AS [X_Drilling.DrillingDate], \r\n            T.DrillingCompanyID ");
            viewString.Append("AS [X_Drilling.DrillingCompanyID], \r\n            T.DrillRigNumber AS [X_Drilling");
            viewString.Append(".DrillRigNumber], \r\n            T.DrillRigTypeID AS [X_Drilling.DrillRigTypeID],");
            viewString.Append(" \r\n            T.DrillerID AS [X_Drilling.DrillerID], \r\n            T.DrillBitTy");
            viewString.Append("peID AS [X_Drilling.DrillBitTypeID], \r\n            T.DrillFluidID AS [X_Drilling");
            viewString.Append(".DrillFluidID], \r\n            T.DrillSizeID AS [X_Drilling.DrillSizeID], \r\n     ");
            viewString.Append("       T.CoreSize AS [X_Drilling.CoreSize], \r\n            T.HoleSize AS [X_Drill");
            viewString.Append("ing.HoleSize], \r\n            T.Reamed AS [X_Drilling.Reamed], \r\n            T.Ge");
            viewString.Append("ologistFromDepth AS [X_Drilling.GeologistFromDepth], \r\n            T.GeologistTo");
            viewString.Append("Depth AS [X_Drilling.GeologistToDepth], \r\n            T.GeologistRecoveredLength");
            viewString.Append(" AS [X_Drilling.GeologistRecoveredLength], \r\n            T.RockQualityDesignatio");
            viewString.Append("nLength AS [X_Drilling.RockQualityDesignationLength], \r\n            T.Comment AS");
            viewString.Append(" [X_Drilling.Comment], \r\n            T.Version AS [X_Drilling.Version], \r\n      ");
            viewString.Append("      T.VersionAntecedentID AS [X_Drilling.VersionAntecedentID], \r\n            T");
            viewString.Append(".VersionCertainty AS [X_Drilling.VersionCertainty], \r\n            T.VersionWorkf");
            viewString.Append("lowInstanceID AS [X_Drilling.VersionWorkflowInstanceID], \r\n            T.Version");
            viewString.Append("UpdatedBy AS [X_Drilling.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS ");
            viewString.Append("[X_Drilling.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [X_Drill");
            viewString.Append("ing.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [X_Drilling");
            viewString.Append(".VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [X_Drilling.VersionUp");
            viewString.Append("dated], \r\n            True AS _from0\r\n        FROM NKDC.Drillings AS T\r\n    ) AS");
            viewString.Append(" T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_Drilling", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_Experience
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView186()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(4056);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_Experience\r\n        [NKD.Module.BusinessObj");
            viewString.Append("ects.Store.X_Experience](T1.[X_Experience.ExperienceID], T1.[X_Experience.Experi");
            viewString.Append("enceName], T1.[X_Experience.ExperienceGroupID], T1.[X_Experience.CompanyID], T1.");
            viewString.Append("[X_Experience.ProjectID], T1.[X_Experience.ContactID], T1.[X_Experience.Location");
            viewString.Append("ID], T1.[X_Experience.ProvinceID], T1.[X_Experience.LinestringID], T1.[X_Experie");
            viewString.Append("nce.WorkTypeID], T1.[X_Experience.ProfessionID], T1.[X_Experience.PositionID], T");
            viewString.Append("1.[X_Experience.ClientAlias], T1.[X_Experience.Division], T1.[X_Experience.Offic");
            viewString.Append("eLocationAlias], T1.[X_Experience.ExternalProjectCode], T1.[X_Experience.Estimat");
            viewString.Append("edDurationDays], T1.[X_Experience.UserExperienceLevel], T1.[X_Experience.Assigne");
            viewString.Append("dExperienceLevel], T1.[X_Experience.NormalizedExperienceLevel], T1.[X_Experience");
            viewString.Append(".DateStart], T1.[X_Experience.DateFinished], T1.[X_Experience.Expiry], T1.[X_Exp");
            viewString.Append("erience.HourlyRate], T1.[X_Experience.DailyRate], T1.[X_Experience.AnnualRate], ");
            viewString.Append("T1.[X_Experience.BlendedHourlyRate], T1.[X_Experience.BlendedHourlyCost], T1.[X_");
            viewString.Append("Experience.Comment], T1.[X_Experience.IsApproved], T1.[X_Experience.Version], T1");
            viewString.Append(".[X_Experience.VersionAntecedentID], T1.[X_Experience.VersionCertainty], T1.[X_E");
            viewString.Append("xperience.VersionWorkflowInstanceID], T1.[X_Experience.VersionUpdatedBy], T1.[X_");
            viewString.Append("Experience.VersionDeletedBy], T1.[X_Experience.VersionOwnerContactID], T1.[X_Exp");
            viewString.Append("erience.VersionOwnerCompanyID], T1.[X_Experience.VersionUpdated])\r\n    FROM (\r\n ");
            viewString.Append("       SELECT \r\n            T.ExperienceID AS [X_Experience.ExperienceID], \r\n   ");
            viewString.Append("         T.ExperienceName AS [X_Experience.ExperienceName], \r\n            T.Expe");
            viewString.Append("rienceGroupID AS [X_Experience.ExperienceGroupID], \r\n            T.CompanyID AS ");
            viewString.Append("[X_Experience.CompanyID], \r\n            T.ProjectID AS [X_Experience.ProjectID],");
            viewString.Append(" \r\n            T.ContactID AS [X_Experience.ContactID], \r\n            T.Location");
            viewString.Append("ID AS [X_Experience.LocationID], \r\n            T.ProvinceID AS [X_Experience.Pro");
            viewString.Append("vinceID], \r\n            T.LinestringID AS [X_Experience.LinestringID], \r\n       ");
            viewString.Append("     T.WorkTypeID AS [X_Experience.WorkTypeID], \r\n            T.ProfessionID AS ");
            viewString.Append("[X_Experience.ProfessionID], \r\n            T.PositionID AS [X_Experience.Positio");
            viewString.Append("nID], \r\n            T.ClientAlias AS [X_Experience.ClientAlias], \r\n            T");
            viewString.Append(".Division AS [X_Experience.Division], \r\n            T.OfficeLocationAlias AS [X_");
            viewString.Append("Experience.OfficeLocationAlias], \r\n            T.ExternalProjectCode AS [X_Exper");
            viewString.Append("ience.ExternalProjectCode], \r\n            T.EstimatedDurationDays AS [X_Experien");
            viewString.Append("ce.EstimatedDurationDays], \r\n            T.UserExperienceLevel AS [X_Experience.");
            viewString.Append("UserExperienceLevel], \r\n            T.AssignedExperienceLevel AS [X_Experience.A");
            viewString.Append("ssignedExperienceLevel], \r\n            T.NormalizedExperienceLevel AS [X_Experie");
            viewString.Append("nce.NormalizedExperienceLevel], \r\n            T.DateStart AS [X_Experience.DateS");
            viewString.Append("tart], \r\n            T.DateFinished AS [X_Experience.DateFinished], \r\n          ");
            viewString.Append("  T.Expiry AS [X_Experience.Expiry], \r\n            T.HourlyRate AS [X_Experience");
            viewString.Append(".HourlyRate], \r\n            T.DailyRate AS [X_Experience.DailyRate], \r\n         ");
            viewString.Append("   T.AnnualRate AS [X_Experience.AnnualRate], \r\n            T.BlendedHourlyRate ");
            viewString.Append("AS [X_Experience.BlendedHourlyRate], \r\n            T.BlendedHourlyCost AS [X_Exp");
            viewString.Append("erience.BlendedHourlyCost], \r\n            T.Comment AS [X_Experience.Comment], \r");
            viewString.Append("\n            T.IsApproved AS [X_Experience.IsApproved], \r\n            T.Version ");
            viewString.Append("AS [X_Experience.Version], \r\n            T.VersionAntecedentID AS [X_Experience.");
            viewString.Append("VersionAntecedentID], \r\n            T.VersionCertainty AS [X_Experience.VersionC");
            viewString.Append("ertainty], \r\n            T.VersionWorkflowInstanceID AS [X_Experience.VersionWor");
            viewString.Append("kflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_Experience.VersionUpdat");
            viewString.Append("edBy], \r\n            T.VersionDeletedBy AS [X_Experience.VersionDeletedBy], \r\n  ");
            viewString.Append("          T.VersionOwnerContactID AS [X_Experience.VersionOwnerContactID], \r\n   ");
            viewString.Append("         T.VersionOwnerCompanyID AS [X_Experience.VersionOwnerCompanyID], \r\n    ");
            viewString.Append("        T.VersionUpdated AS [X_Experience.VersionUpdated], \r\n            True AS");
            viewString.Append(" _from0\r\n        FROM NKDC.Experiences AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_Experience", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_FileData
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView187()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2370);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_FileData\r\n        [NKD.Module.BusinessObjec");
            viewString.Append("ts.Store.X_FileData](T1.[X_FileData.FileDataID], T1.[X_FileData.ParentFileID], T");
            viewString.Append("1.[X_FileData.TableType], T1.[X_FileData.ReferenceID], T1.[X_FileData.WorkerID],");
            viewString.Append(" T1.[X_FileData.FileTypeID], T1.[X_FileData.FileName], T1.[X_FileData.DocumentTy");
            viewString.Append("pe], T1.[X_FileData.MimeType], T1.[X_FileData.Author], T1.[X_FileData.FileBytes]");
            viewString.Append(", T1.[X_FileData.FileContent], T1.[X_FileData.FileChecksum], T1.[X_FileData.File");
            viewString.Append("Length], T1.[X_FileData.Comment], T1.[X_FileData.Version], T1.[X_FileData.Versio");
            viewString.Append("nAntecedentID], T1.[X_FileData.VersionCertainty], T1.[X_FileData.VersionWorkflow");
            viewString.Append("InstanceID], T1.[X_FileData.VersionUpdatedBy], T1.[X_FileData.VersionDeletedBy],");
            viewString.Append(" T1.[X_FileData.VersionOwnerContactID], T1.[X_FileData.VersionOwnerCompanyID], T");
            viewString.Append("1.[X_FileData.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.FileD");
            viewString.Append("ataID AS [X_FileData.FileDataID], \r\n            T.ParentFileID AS [X_FileData.Pa");
            viewString.Append("rentFileID], \r\n            T.TableType AS [X_FileData.TableType], \r\n            ");
            viewString.Append("T.ReferenceID AS [X_FileData.ReferenceID], \r\n            T.WorkerID AS [X_FileDa");
            viewString.Append("ta.WorkerID], \r\n            T.FileTypeID AS [X_FileData.FileTypeID], \r\n         ");
            viewString.Append("   T.FileName AS [X_FileData.FileName], \r\n            T.DocumentType AS [X_FileD");
            viewString.Append("ata.DocumentType], \r\n            T.MimeType AS [X_FileData.MimeType], \r\n        ");
            viewString.Append("    T.Author AS [X_FileData.Author], \r\n            T.FileBytes AS [X_FileData.Fi");
            viewString.Append("leBytes], \r\n            T.FileContent AS [X_FileData.FileContent], \r\n           ");
            viewString.Append(" T.FileChecksum AS [X_FileData.FileChecksum], \r\n            T.FileLength AS [X_F");
            viewString.Append("ileData.FileLength], \r\n            T.Comment AS [X_FileData.Comment], \r\n        ");
            viewString.Append("    T.Version AS [X_FileData.Version], \r\n            T.VersionAntecedentID AS [X");
            viewString.Append("_FileData.VersionAntecedentID], \r\n            T.VersionCertainty AS [X_FileData.");
            viewString.Append("VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [X_FileData.Vers");
            viewString.Append("ionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_FileData.VersionU");
            viewString.Append("pdatedBy], \r\n            T.VersionDeletedBy AS [X_FileData.VersionDeletedBy], \r\n");
            viewString.Append("            T.VersionOwnerContactID AS [X_FileData.VersionOwnerContactID], \r\n   ");
            viewString.Append("         T.VersionOwnerCompanyID AS [X_FileData.VersionOwnerCompanyID], \r\n      ");
            viewString.Append("      T.VersionUpdated AS [X_FileData.VersionUpdated], \r\n            True AS _fr");
            viewString.Append("om0\r\n        FROM NKDC.FileDatas AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_FileData", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_Geology
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView188()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_Geology", "\r\n    SELECT VALUE -- Constructing X_Geology\r\n        [NKD.Module.BusinessObjects" +
                    ".Store.X_Geology](T1.[X_Geology.GeologyID], T1.[X_Geology.HeaderID], T1.[X_Geolo" +
                    "gy.GeologyContactID], T1.[X_Geology.FromDepth], T1.[X_Geology.ToDepth], T1.[X_Ge" +
                    "ology.Comment], T1.[X_Geology.Version], T1.[X_Geology.VersionAntecedentID], T1.[" +
                    "X_Geology.VersionCertainty], T1.[X_Geology.VersionWorkflowInstanceID], T1.[X_Geo" +
                    "logy.VersionUpdatedBy], T1.[X_Geology.VersionDeletedBy], T1.[X_Geology.VersionOw" +
                    "nerContactID], T1.[X_Geology.VersionOwnerCompanyID], T1.[X_Geology.VersionUpdate" +
                    "d])\r\n    FROM (\r\n        SELECT \r\n            T.GeologyID AS [X_Geology.GeologyI" +
                    "D], \r\n            T.HeaderID AS [X_Geology.HeaderID], \r\n            T.GeologyCon" +
                    "tactID AS [X_Geology.GeologyContactID], \r\n            T.FromDepth AS [X_Geology." +
                    "FromDepth], \r\n            T.ToDepth AS [X_Geology.ToDepth], \r\n            T.Comm" +
                    "ent AS [X_Geology.Comment], \r\n            T.Version AS [X_Geology.Version], \r\n  " +
                    "          T.VersionAntecedentID AS [X_Geology.VersionAntecedentID], \r\n          " +
                    "  T.VersionCertainty AS [X_Geology.VersionCertainty], \r\n            T.VersionWor" +
                    "kflowInstanceID AS [X_Geology.VersionWorkflowInstanceID], \r\n            T.Versio" +
                    "nUpdatedBy AS [X_Geology.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS " +
                    "[X_Geology.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [X_Geolog" +
                    "y.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [X_Geology.Ve" +
                    "rsionOwnerCompanyID], \r\n            T.VersionUpdated AS [X_Geology.VersionUpdate" +
                    "d], \r\n            True AS _from0\r\n        FROM NKDC.Geologies AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_Geophysics
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView189()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2090);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_Geophysics\r\n        [NKD.Module.BusinessObj");
            viewString.Append("ects.Store.X_Geophysics](T1.[X_Geophysics.GeophysicsID], T1.[X_Geophysics.FileNa");
            viewString.Append("me], T1.[X_Geophysics.OriginalFileDataID], T1.[X_Geophysics.HeaderID], T1.[X_Geo");
            viewString.Append("physics.DimensionUnitID], T1.[X_Geophysics.LasVersion], T1.[X_Geophysics.LasForm");
            viewString.Append("at], T1.[X_Geophysics.LasWrap], T1.[X_Geophysics.LasDelimiter], T1.[X_Geophysics");
            viewString.Append(".LasNullValue], T1.[X_Geophysics.Version], T1.[X_Geophysics.VersionAntecedentID]");
            viewString.Append(", T1.[X_Geophysics.VersionCertainty], T1.[X_Geophysics.VersionWorkflowInstanceID");
            viewString.Append("], T1.[X_Geophysics.VersionUpdatedBy], T1.[X_Geophysics.VersionDeletedBy], T1.[X");
            viewString.Append("_Geophysics.VersionOwnerContactID], T1.[X_Geophysics.VersionOwnerCompanyID], T1.");
            viewString.Append("[X_Geophysics.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.Geoph");
            viewString.Append("ysicsID AS [X_Geophysics.GeophysicsID], \r\n            T.FileName AS [X_Geophysic");
            viewString.Append("s.FileName], \r\n            T.OriginalFileDataID AS [X_Geophysics.OriginalFileDat");
            viewString.Append("aID], \r\n            T.HeaderID AS [X_Geophysics.HeaderID], \r\n            T.Dimen");
            viewString.Append("sionUnitID AS [X_Geophysics.DimensionUnitID], \r\n            T.LasVersion AS [X_G");
            viewString.Append("eophysics.LasVersion], \r\n            T.LasFormat AS [X_Geophysics.LasFormat], \r\n");
            viewString.Append("            T.LasWrap AS [X_Geophysics.LasWrap], \r\n            T.LasDelimiter AS");
            viewString.Append(" [X_Geophysics.LasDelimiter], \r\n            T.LasNullValue AS [X_Geophysics.LasN");
            viewString.Append("ullValue], \r\n            T.Version AS [X_Geophysics.Version], \r\n            T.Ve");
            viewString.Append("rsionAntecedentID AS [X_Geophysics.VersionAntecedentID], \r\n            T.Version");
            viewString.Append("Certainty AS [X_Geophysics.VersionCertainty], \r\n            T.VersionWorkflowIns");
            viewString.Append("tanceID AS [X_Geophysics.VersionWorkflowInstanceID], \r\n            T.VersionUpda");
            viewString.Append("tedBy AS [X_Geophysics.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X");
            viewString.Append("_Geophysics.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [X_Geoph");
            viewString.Append("ysics.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [X_Geophy");
            viewString.Append("sics.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [X_Geophysics.Ver");
            viewString.Append("sionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.Geophysics AS T\r\n ");
            viewString.Append("   ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_Geophysics", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_GeophysicsData
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView190()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_GeophysicsData", "\r\n    SELECT VALUE -- Constructing X_GeophysicsData\r\n        [NKD.Module.Business" +
                    "Objects.Store.X_GeophysicsData](T1.[X_GeophysicsData.GeophysicsDataID], T1.[X_Ge" +
                    "ophysicsData.GeophysicsMetadataID], T1.[X_GeophysicsData.Dimension], T1.[X_Geoph" +
                    "ysicsData.MeasurementValue], T1.[X_GeophysicsData.MeasurementText], T1.[X_Geophy" +
                    "sicsData.Version], T1.[X_GeophysicsData.VersionAntecedentID], T1.[X_GeophysicsDa" +
                    "ta.VersionCertainty], T1.[X_GeophysicsData.VersionWorkflowInstanceID], T1.[X_Geo" +
                    "physicsData.VersionUpdatedBy], T1.[X_GeophysicsData.VersionDeletedBy], T1.[X_Geo" +
                    "physicsData.VersionOwnerContactID], T1.[X_GeophysicsData.VersionOwnerCompanyID]," +
                    " T1.[X_GeophysicsData.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n           " +
                    " T.GeophysicsDataID AS [X_GeophysicsData.GeophysicsDataID], \r\n            T.Geop" +
                    "hysicsMetadataID AS [X_GeophysicsData.GeophysicsMetadataID], \r\n            T.Dim" +
                    "ension AS [X_GeophysicsData.Dimension], \r\n            T.MeasurementValue AS [X_G" +
                    "eophysicsData.MeasurementValue], \r\n            T.MeasurementText AS [X_Geophysic" +
                    "sData.MeasurementText], \r\n            T.Version AS [X_GeophysicsData.Version], \r" +
                    "\n            T.VersionAntecedentID AS [X_GeophysicsData.VersionAntecedentID], \r\n" +
                    "            T.VersionCertainty AS [X_GeophysicsData.VersionCertainty], \r\n       " +
                    "     T.VersionWorkflowInstanceID AS [X_GeophysicsData.VersionWorkflowInstanceID]" +
                    ", \r\n            T.VersionUpdatedBy AS [X_GeophysicsData.VersionUpdatedBy], \r\n   " +
                    "         T.VersionDeletedBy AS [X_GeophysicsData.VersionDeletedBy], \r\n          " +
                    "  T.VersionOwnerContactID AS [X_GeophysicsData.VersionOwnerContactID], \r\n       " +
                    "     T.VersionOwnerCompanyID AS [X_GeophysicsData.VersionOwnerCompanyID], \r\n    " +
                    "        T.VersionUpdated AS [X_GeophysicsData.VersionUpdated], \r\n            Tru" +
                    "e AS _from0\r\n        FROM NKDC.GeophysicsDatas AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_GeophysicsMetadata
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView191()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2253);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_GeophysicsMetadata\r\n        [NKD.Module.Bus");
            viewString.Append("inessObjects.Store.X_GeophysicsMetadata](T1.[X_GeophysicsMetadata.GeophysicsMeta");
            viewString.Append("dataID], T1.[X_GeophysicsMetadata.GeophysicsID], T1.[X_GeophysicsMetadata.Parame");
            viewString.Append("terID], T1.[X_GeophysicsMetadata.Mnemonic], T1.[X_GeophysicsMetadata.Unit], T1.[");
            viewString.Append("X_GeophysicsMetadata.Data], T1.[X_GeophysicsMetadata.Code], T1.[X_GeophysicsMeta");
            viewString.Append("data.Description], T1.[X_GeophysicsMetadata.Format], T1.[X_GeophysicsMetadata.Ve");
            viewString.Append("rsion], T1.[X_GeophysicsMetadata.VersionAntecedentID], T1.[X_GeophysicsMetadata.");
            viewString.Append("VersionCertainty], T1.[X_GeophysicsMetadata.VersionWorkflowInstanceID], T1.[X_Ge");
            viewString.Append("ophysicsMetadata.VersionUpdatedBy], T1.[X_GeophysicsMetadata.VersionDeletedBy], ");
            viewString.Append("T1.[X_GeophysicsMetadata.VersionOwnerContactID], T1.[X_GeophysicsMetadata.Versio");
            viewString.Append("nOwnerCompanyID], T1.[X_GeophysicsMetadata.VersionUpdated])\r\n    FROM (\r\n       ");
            viewString.Append(" SELECT \r\n            T.GeophysicsMetadataID AS [X_GeophysicsMetadata.Geophysics");
            viewString.Append("MetadataID], \r\n            T.GeophysicsID AS [X_GeophysicsMetadata.GeophysicsID]");
            viewString.Append(", \r\n            T.ParameterID AS [X_GeophysicsMetadata.ParameterID], \r\n         ");
            viewString.Append("   T.Mnemonic AS [X_GeophysicsMetadata.Mnemonic], \r\n            T.Unit AS [X_Geo");
            viewString.Append("physicsMetadata.Unit], \r\n            T.Data AS [X_GeophysicsMetadata.Data], \r\n  ");
            viewString.Append("          T.Code AS [X_GeophysicsMetadata.Code], \r\n            T.Description AS ");
            viewString.Append("[X_GeophysicsMetadata.Description], \r\n            T.Format AS [X_GeophysicsMetad");
            viewString.Append("ata.Format], \r\n            T.Version AS [X_GeophysicsMetadata.Version], \r\n      ");
            viewString.Append("      T.VersionAntecedentID AS [X_GeophysicsMetadata.VersionAntecedentID], \r\n   ");
            viewString.Append("         T.VersionCertainty AS [X_GeophysicsMetadata.VersionCertainty], \r\n      ");
            viewString.Append("      T.VersionWorkflowInstanceID AS [X_GeophysicsMetadata.VersionWorkflowInstan");
            viewString.Append("ceID], \r\n            T.VersionUpdatedBy AS [X_GeophysicsMetadata.VersionUpdatedB");
            viewString.Append("y], \r\n            T.VersionDeletedBy AS [X_GeophysicsMetadata.VersionDeletedBy],");
            viewString.Append(" \r\n            T.VersionOwnerContactID AS [X_GeophysicsMetadata.VersionOwnerCont");
            viewString.Append("actID], \r\n            T.VersionOwnerCompanyID AS [X_GeophysicsMetadata.VersionOw");
            viewString.Append("nerCompanyID], \r\n            T.VersionUpdated AS [X_GeophysicsMetadata.VersionUp");
            viewString.Append("dated], \r\n            True AS _from0\r\n        FROM NKDC.GeophysicsMetadatas AS T");
            viewString.Append("\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_GeophysicsMetadata", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_Header
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView192()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3968);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_Header\r\n        [NKD.Module.BusinessObjects");
            viewString.Append(".Store.X_Header](T1.[X_Header.HeaderID], T1.[X_Header.ProjectID], T1.[X_Header.H");
            viewString.Append("oleName], T1.[X_Header.Site], T1.[X_Header.HoleTypeID], T1.[X_Header.DataStatusI");
            viewString.Append("D], T1.[X_Header.PrimaryHolePurposeID], T1.[X_Header.SurveyAccuracyID], T1.[X_He");
            viewString.Append("ader.GeodeticDatumID], T1.[X_Header.UtmZoneNumber], T1.[X_Header.UtmZoneHemisphe");
            viewString.Append("re], T1.[X_Header.HeightDatumID], T1.[X_Header.EastingUtm], T1.[X_Header.Northin");
            viewString.Append("gUtm], T1.[X_Header.Elevation], T1.[X_Header.Inclination], T1.[X_Header.Azimuth]");
            viewString.Append(", T1.[X_Header.LocationID], T1.[X_Header.StartDate], T1.[X_Header.CompleteDate],");
            viewString.Append(" T1.[X_Header.TotalDepth], T1.[X_Header.HoleRedrilled], T1.[X_Header.GeologyComp");
            viewString.Append("anyID], T1.[X_Header.HasHadGeotechLogs], T1.[X_Header.HasHadCorePhotos], T1.[X_H");
            viewString.Append("eader.DefaultGeophysicalLoggingCompanyID], T1.[X_Header.DefaultGeophysicalLogger");
            viewString.Append("ID], T1.[X_Header.StandingWaterLevel], T1.[X_Header.StandingWaterLevelDate], T1.");
            viewString.Append("[X_Header.DateRehabilitated], T1.[X_Header.HoleStatusID], T1.[X_Header.Comment],");
            viewString.Append(" T1.[X_Header.Version], T1.[X_Header.VersionAntecedentID], T1.[X_Header.VersionC");
            viewString.Append("ertainty], T1.[X_Header.VersionWorkflowInstanceID], T1.[X_Header.VersionUpdatedB");
            viewString.Append("y], T1.[X_Header.VersionDeletedBy], T1.[X_Header.VersionOwnerContactID], T1.[X_H");
            viewString.Append("eader.VersionOwnerCompanyID], T1.[X_Header.VersionUpdated])\r\n    FROM (\r\n       ");
            viewString.Append(" SELECT \r\n            T.HeaderID AS [X_Header.HeaderID], \r\n            T.Project");
            viewString.Append("ID AS [X_Header.ProjectID], \r\n            T.HoleName AS [X_Header.HoleName], \r\n ");
            viewString.Append("           T.Site AS [X_Header.Site], \r\n            T.HoleTypeID AS [X_Header.Ho");
            viewString.Append("leTypeID], \r\n            T.DataStatusID AS [X_Header.DataStatusID], \r\n          ");
            viewString.Append("  T.PrimaryHolePurposeID AS [X_Header.PrimaryHolePurposeID], \r\n            T.Sur");
            viewString.Append("veyAccuracyID AS [X_Header.SurveyAccuracyID], \r\n            T.GeodeticDatumID AS");
            viewString.Append(" [X_Header.GeodeticDatumID], \r\n            T.UtmZoneNumber AS [X_Header.UtmZoneN");
            viewString.Append("umber], \r\n            T.UtmZoneHemisphere AS [X_Header.UtmZoneHemisphere], \r\n   ");
            viewString.Append("         T.HeightDatumID AS [X_Header.HeightDatumID], \r\n            T.EastingUtm");
            viewString.Append(" AS [X_Header.EastingUtm], \r\n            T.NorthingUtm AS [X_Header.NorthingUtm]");
            viewString.Append(", \r\n            T.Elevation AS [X_Header.Elevation], \r\n            T.Inclination");
            viewString.Append(" AS [X_Header.Inclination], \r\n            T.Azimuth AS [X_Header.Azimuth], \r\n   ");
            viewString.Append("         T.LocationID AS [X_Header.LocationID], \r\n            T.StartDate AS [X_");
            viewString.Append("Header.StartDate], \r\n            T.CompleteDate AS [X_Header.CompleteDate], \r\n  ");
            viewString.Append("          T.TotalDepth AS [X_Header.TotalDepth], \r\n            T.HoleRedrilled A");
            viewString.Append("S [X_Header.HoleRedrilled], \r\n            T.GeologyCompanyID AS [X_Header.Geolog");
            viewString.Append("yCompanyID], \r\n            T.HasHadGeotechLogs AS [X_Header.HasHadGeotechLogs], ");
            viewString.Append("\r\n            T.HasHadCorePhotos AS [X_Header.HasHadCorePhotos], \r\n            T");
            viewString.Append(".DefaultGeophysicalLoggingCompanyID AS [X_Header.DefaultGeophysicalLoggingCompan");
            viewString.Append("yID], \r\n            T.DefaultGeophysicalLoggerID AS [X_Header.DefaultGeophysical");
            viewString.Append("LoggerID], \r\n            T.StandingWaterLevel AS [X_Header.StandingWaterLevel], ");
            viewString.Append("\r\n            T.StandingWaterLevelDate AS [X_Header.StandingWaterLevelDate], \r\n ");
            viewString.Append("           T.DateRehabilitated AS [X_Header.DateRehabilitated], \r\n            T.");
            viewString.Append("HoleStatusID AS [X_Header.HoleStatusID], \r\n            T.Comment AS [X_Header.Co");
            viewString.Append("mment], \r\n            T.Version AS [X_Header.Version], \r\n            T.VersionAn");
            viewString.Append("tecedentID AS [X_Header.VersionAntecedentID], \r\n            T.VersionCertainty A");
            viewString.Append("S [X_Header.VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [X_H");
            viewString.Append("eader.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_Header.");
            viewString.Append("VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_Header.VersionDeletedB");
            viewString.Append("y], \r\n            T.VersionOwnerContactID AS [X_Header.VersionOwnerContactID], \r");
            viewString.Append("\n            T.VersionOwnerCompanyID AS [X_Header.VersionOwnerCompanyID], \r\n    ");
            viewString.Append("        T.VersionUpdated AS [X_Header.VersionUpdated], \r\n            True AS _fr");
            viewString.Append("om0\r\n        FROM NKDC.Headers AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_Header", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_HeaderGeophysicalLog
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView193()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2172);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_HeaderGeophysicalLog\r\n        [NKD.Module.B");
            viewString.Append("usinessObjects.Store.X_HeaderGeophysicalLog](T1.[X_HeaderGeophysicalLog.HeaderGe");
            viewString.Append("ophysicalLogID], T1.[X_HeaderGeophysicalLog.HeaderID], T1.[X_HeaderGeophysicalLo");
            viewString.Append("g.GeophysicalLogTypeID], T1.[X_HeaderGeophysicalLog.Sequence], T1.[X_HeaderGeoph");
            viewString.Append("ysicalLog.GeophysicalLoggingCompanyID], T1.[X_HeaderGeophysicalLog.GeophysicalLo");
            viewString.Append("ggerID], T1.[X_HeaderGeophysicalLog.Version], T1.[X_HeaderGeophysicalLog.Version");
            viewString.Append("AntecedentID], T1.[X_HeaderGeophysicalLog.VersionCertainty], T1.[X_HeaderGeophys");
            viewString.Append("icalLog.VersionWorkflowInstanceID], T1.[X_HeaderGeophysicalLog.VersionUpdatedBy]");
            viewString.Append(", T1.[X_HeaderGeophysicalLog.VersionDeletedBy], T1.[X_HeaderGeophysicalLog.Versi");
            viewString.Append("onOwnerContactID], T1.[X_HeaderGeophysicalLog.VersionOwnerCompanyID], T1.[X_Head");
            viewString.Append("erGeophysicalLog.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.He");
            viewString.Append("aderGeophysicalLogID AS [X_HeaderGeophysicalLog.HeaderGeophysicalLogID], \r\n     ");
            viewString.Append("       T.HeaderID AS [X_HeaderGeophysicalLog.HeaderID], \r\n            T.Geophysi");
            viewString.Append("calLogTypeID AS [X_HeaderGeophysicalLog.GeophysicalLogTypeID], \r\n            T.S");
            viewString.Append("equence AS [X_HeaderGeophysicalLog.Sequence], \r\n            T.GeophysicalLogging");
            viewString.Append("CompanyID AS [X_HeaderGeophysicalLog.GeophysicalLoggingCompanyID], \r\n           ");
            viewString.Append(" T.GeophysicalLoggerID AS [X_HeaderGeophysicalLog.GeophysicalLoggerID], \r\n      ");
            viewString.Append("      T.Version AS [X_HeaderGeophysicalLog.Version], \r\n            T.VersionAnte");
            viewString.Append("cedentID AS [X_HeaderGeophysicalLog.VersionAntecedentID], \r\n            T.Versio");
            viewString.Append("nCertainty AS [X_HeaderGeophysicalLog.VersionCertainty], \r\n            T.Version");
            viewString.Append("WorkflowInstanceID AS [X_HeaderGeophysicalLog.VersionWorkflowInstanceID], \r\n    ");
            viewString.Append("        T.VersionUpdatedBy AS [X_HeaderGeophysicalLog.VersionUpdatedBy], \r\n     ");
            viewString.Append("       T.VersionDeletedBy AS [X_HeaderGeophysicalLog.VersionDeletedBy], \r\n      ");
            viewString.Append("      T.VersionOwnerContactID AS [X_HeaderGeophysicalLog.VersionOwnerContactID],");
            viewString.Append(" \r\n            T.VersionOwnerCompanyID AS [X_HeaderGeophysicalLog.VersionOwnerCo");
            viewString.Append("mpanyID], \r\n            T.VersionUpdated AS [X_HeaderGeophysicalLog.VersionUpdat");
            viewString.Append("ed], \r\n            True AS _from0\r\n        FROM NKDC.HeaderGeophysicalLogs AS T\r");
            viewString.Append("\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_HeaderGeophysicalLog", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_HeaderRelation
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView194()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_HeaderRelation", "\r\n    SELECT VALUE -- Constructing X_HeaderRelation\r\n        [NKD.Module.Business" +
                    "Objects.Store.X_HeaderRelation](T1.[X_HeaderRelation.HeaderRelationID], T1.[X_He" +
                    "aderRelation.OriginalHeaderID], T1.[X_HeaderRelation.RelatedHeaderID], T1.[X_Hea" +
                    "derRelation.RelationTypeID], T1.[X_HeaderRelation.Related], T1.[X_HeaderRelation" +
                    ".Version], T1.[X_HeaderRelation.VersionAntecedentID], T1.[X_HeaderRelation.Versi" +
                    "onCertainty], T1.[X_HeaderRelation.VersionWorkflowInstanceID], T1.[X_HeaderRelat" +
                    "ion.VersionUpdatedBy], T1.[X_HeaderRelation.VersionDeletedBy], T1.[X_HeaderRelat" +
                    "ion.VersionOwnerContactID], T1.[X_HeaderRelation.VersionOwnerCompanyID], T1.[X_H" +
                    "eaderRelation.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.Heade" +
                    "rRelationID AS [X_HeaderRelation.HeaderRelationID], \r\n            T.OriginalHead" +
                    "erID AS [X_HeaderRelation.OriginalHeaderID], \r\n            T.RelatedHeaderID AS " +
                    "[X_HeaderRelation.RelatedHeaderID], \r\n            T.RelationTypeID AS [X_HeaderR" +
                    "elation.RelationTypeID], \r\n            T.Related AS [X_HeaderRelation.Related], " +
                    "\r\n            T.Version AS [X_HeaderRelation.Version], \r\n            T.VersionAn" +
                    "tecedentID AS [X_HeaderRelation.VersionAntecedentID], \r\n            T.VersionCer" +
                    "tainty AS [X_HeaderRelation.VersionCertainty], \r\n            T.VersionWorkflowIn" +
                    "stanceID AS [X_HeaderRelation.VersionWorkflowInstanceID], \r\n            T.Versio" +
                    "nUpdatedBy AS [X_HeaderRelation.VersionUpdatedBy], \r\n            T.VersionDelete" +
                    "dBy AS [X_HeaderRelation.VersionDeletedBy], \r\n            T.VersionOwnerContactI" +
                    "D AS [X_HeaderRelation.VersionOwnerContactID], \r\n            T.VersionOwnerCompa" +
                    "nyID AS [X_HeaderRelation.VersionOwnerCompanyID], \r\n            T.VersionUpdated" +
                    " AS [X_HeaderRelation.VersionUpdated], \r\n            True AS _from0\r\n        FRO" +
                    "M NKDC.HeaderRelations AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_Interpretation
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView195()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3890);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_Interpretation\r\n        [NKD.Module.Busines");
            viewString.Append("sObjects.Store.X_Interpretation](T1.[X_Interpretation.InterpretationID], T1.[X_I");
            viewString.Append("nterpretation.FromDepth], T1.[X_Interpretation.ToDepth], T1.[X_Interpretation.To");
            viewString.Append("pX], T1.[X_Interpretation.TopY], T1.[X_Interpretation.TopZ], T1.[X_Interpretatio");
            viewString.Append("n.CentroidX], T1.[X_Interpretation.CentroidY], T1.[X_Interpretation.CentroidZ], ");
            viewString.Append("T1.[X_Interpretation.BottomX], T1.[X_Interpretation.BottomY], T1.[X_Interpretati");
            viewString.Append("on.BottomZ], T1.[X_Interpretation.DesurveyID], T1.[X_Interpretation.HeaderID], T");
            viewString.Append("1.[X_Interpretation.AssayGroupTestSampleID], T1.[X_Interpretation.CasingID], T1.");
            viewString.Append("[X_Interpretation.CementingID], T1.[X_Interpretation.DefectID], T1.[X_Interpreta");
            viewString.Append("tion.DrillingID], T1.[X_Interpretation.GeologyID], T1.[X_Interpretation.Geophysi");
            viewString.Append("csDataID], T1.[X_Interpretation.LithologyID], T1.[X_Interpretation.SeamID], T1.[");
            viewString.Append("X_Interpretation.PlyID], T1.[X_Interpretation.MineralogyID], T1.[X_Interpretatio");
            viewString.Append("n.PointLoadID], T1.[X_Interpretation.RecoveryID], T1.[X_Interpretation.BlockMode");
            viewString.Append("lBlockID], T1.[X_Interpretation.Version], T1.[X_Interpretation.VersionAntecedent");
            viewString.Append("ID], T1.[X_Interpretation.VersionCertainty], T1.[X_Interpretation.VersionWorkflo");
            viewString.Append("wInstanceID], T1.[X_Interpretation.VersionUpdatedBy], T1.[X_Interpretation.Versi");
            viewString.Append("onDeletedBy], T1.[X_Interpretation.VersionOwnerContactID], T1.[X_Interpretation.");
            viewString.Append("VersionOwnerCompanyID], T1.[X_Interpretation.VersionUpdated])\r\n    FROM (\r\n     ");
            viewString.Append("   SELECT \r\n            T.InterpretationID AS [X_Interpretation.InterpretationID");
            viewString.Append("], \r\n            T.FromDepth AS [X_Interpretation.FromDepth], \r\n            T.To");
            viewString.Append("Depth AS [X_Interpretation.ToDepth], \r\n            T.TopX AS [X_Interpretation.T");
            viewString.Append("opX], \r\n            T.TopY AS [X_Interpretation.TopY], \r\n            T.TopZ AS [");
            viewString.Append("X_Interpretation.TopZ], \r\n            T.CentroidX AS [X_Interpretation.CentroidX");
            viewString.Append("], \r\n            T.CentroidY AS [X_Interpretation.CentroidY], \r\n            T.Ce");
            viewString.Append("ntroidZ AS [X_Interpretation.CentroidZ], \r\n            T.BottomX AS [X_Interpret");
            viewString.Append("ation.BottomX], \r\n            T.BottomY AS [X_Interpretation.BottomY], \r\n       ");
            viewString.Append("     T.BottomZ AS [X_Interpretation.BottomZ], \r\n            T.DesurveyID AS [X_I");
            viewString.Append("nterpretation.DesurveyID], \r\n            T.HeaderID AS [X_Interpretation.HeaderI");
            viewString.Append("D], \r\n            T.AssayGroupTestSampleID AS [X_Interpretation.AssayGroupTestSa");
            viewString.Append("mpleID], \r\n            T.CasingID AS [X_Interpretation.CasingID], \r\n            ");
            viewString.Append("T.CementingID AS [X_Interpretation.CementingID], \r\n            T.DefectID AS [X_");
            viewString.Append("Interpretation.DefectID], \r\n            T.DrillingID AS [X_Interpretation.Drilli");
            viewString.Append("ngID], \r\n            T.GeologyID AS [X_Interpretation.GeologyID], \r\n            ");
            viewString.Append("T.GeophysicsDataID AS [X_Interpretation.GeophysicsDataID], \r\n            T.Litho");
            viewString.Append("logyID AS [X_Interpretation.LithologyID], \r\n            T.SeamID AS [X_Interpret");
            viewString.Append("ation.SeamID], \r\n            T.PlyID AS [X_Interpretation.PlyID], \r\n            ");
            viewString.Append("T.MineralogyID AS [X_Interpretation.MineralogyID], \r\n            T.PointLoadID A");
            viewString.Append("S [X_Interpretation.PointLoadID], \r\n            T.RecoveryID AS [X_Interpretatio");
            viewString.Append("n.RecoveryID], \r\n            T.BlockModelBlockID AS [X_Interpretation.BlockModel");
            viewString.Append("BlockID], \r\n            T.Version AS [X_Interpretation.Version], \r\n            T");
            viewString.Append(".VersionAntecedentID AS [X_Interpretation.VersionAntecedentID], \r\n            T.");
            viewString.Append("VersionCertainty AS [X_Interpretation.VersionCertainty], \r\n            T.Version");
            viewString.Append("WorkflowInstanceID AS [X_Interpretation.VersionWorkflowInstanceID], \r\n          ");
            viewString.Append("  T.VersionUpdatedBy AS [X_Interpretation.VersionUpdatedBy], \r\n            T.Ver");
            viewString.Append("sionDeletedBy AS [X_Interpretation.VersionDeletedBy], \r\n            T.VersionOwn");
            viewString.Append("erContactID AS [X_Interpretation.VersionOwnerContactID], \r\n            T.Version");
            viewString.Append("OwnerCompanyID AS [X_Interpretation.VersionOwnerCompanyID], \r\n            T.Vers");
            viewString.Append("ionUpdated AS [X_Interpretation.VersionUpdated], \r\n            True AS _from0\r\n ");
            viewString.Append("       FROM NKDC.Interpretations AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_Interpretation", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_InterpretationData
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView196()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_InterpretationData", "\r\n    SELECT VALUE -- Constructing X_InterpretationData\r\n        [NKD.Module.Busi" +
                    "nessObjects.Store.X_InterpretationData](T1.[X_InterpretationData.InterpretationD" +
                    "ataID], T1.[X_InterpretationData.InterpretationID], T1.[X_InterpretationData.Par" +
                    "ameterID], T1.[X_InterpretationData.InterpretationDataText], T1.[X_Interpretatio" +
                    "nData.InterpretationDataValue], T1.[X_InterpretationData.Version], T1.[X_Interpr" +
                    "etationData.VersionAntecedentID], T1.[X_InterpretationData.VersionCertainty], T1" +
                    ".[X_InterpretationData.VersionWorkflowInstanceID], T1.[X_InterpretationData.Vers" +
                    "ionUpdatedBy], T1.[X_InterpretationData.VersionDeletedBy], T1.[X_InterpretationD" +
                    "ata.VersionOwnerContactID], T1.[X_InterpretationData.VersionOwnerCompanyID], T1." +
                    "[X_InterpretationData.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n           " +
                    " T.InterpretationDataID AS [X_InterpretationData.InterpretationDataID], \r\n      " +
                    "      T.InterpretationID AS [X_InterpretationData.InterpretationID], \r\n         " +
                    "   T.ParameterID AS [X_InterpretationData.ParameterID], \r\n            T.Interpre" +
                    "tationDataText AS [X_InterpretationData.InterpretationDataText], \r\n            T" +
                    ".InterpretationDataValue AS [X_InterpretationData.InterpretationDataValue], \r\n  " +
                    "          T.Version AS [X_InterpretationData.Version], \r\n            T.VersionAn" +
                    "tecedentID AS [X_InterpretationData.VersionAntecedentID], \r\n            T.Versio" +
                    "nCertainty AS [X_InterpretationData.VersionCertainty], \r\n            T.VersionWo" +
                    "rkflowInstanceID AS [X_InterpretationData.VersionWorkflowInstanceID], \r\n        " +
                    "    T.VersionUpdatedBy AS [X_InterpretationData.VersionUpdatedBy], \r\n           " +
                    " T.VersionDeletedBy AS [X_InterpretationData.VersionDeletedBy], \r\n            T." +
                    "VersionOwnerContactID AS [X_InterpretationData.VersionOwnerContactID], \r\n       " +
                    "     T.VersionOwnerCompanyID AS [X_InterpretationData.VersionOwnerCompanyID], \r\n" +
                    "            T.VersionUpdated AS [X_InterpretationData.VersionUpdated], \r\n       " +
                    "     True AS _from0\r\n        FROM NKDC.InterpretationDatas AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_Lease
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView197()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_Lease", "\r\n    SELECT VALUE -- Constructing X_Lease\r\n        [NKD.Module.BusinessObjects.S" +
                    "tore.X_Lease](T1.[X_Lease.LeaseID], T1.[X_Lease.TenementID], T1.[X_Lease.LeaseNu" +
                    "mber], T1.[X_Lease.OwnerCompanyID], T1.[X_Lease.ApprovedByContactID], T1.[X_Leas" +
                    "e.ValidFrom], T1.[X_Lease.Expiry], T1.[X_Lease.Comment], T1.[X_Lease.Version], T" +
                    "1.[X_Lease.VersionAntecedentID], T1.[X_Lease.VersionCertainty], T1.[X_Lease.Vers" +
                    "ionWorkflowInstanceID], T1.[X_Lease.VersionUpdatedBy], T1.[X_Lease.VersionDelete" +
                    "dBy], T1.[X_Lease.VersionOwnerContactID], T1.[X_Lease.VersionOwnerCompanyID], T1" +
                    ".[X_Lease.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.LeaseID A" +
                    "S [X_Lease.LeaseID], \r\n            T.TenementID AS [X_Lease.TenementID], \r\n     " +
                    "       T.LeaseNumber AS [X_Lease.LeaseNumber], \r\n            T.OwnerCompanyID AS" +
                    " [X_Lease.OwnerCompanyID], \r\n            T.ApprovedByContactID AS [X_Lease.Appro" +
                    "vedByContactID], \r\n            T.ValidFrom AS [X_Lease.ValidFrom], \r\n           " +
                    " T.Expiry AS [X_Lease.Expiry], \r\n            T.Comment AS [X_Lease.Comment], \r\n " +
                    "           T.Version AS [X_Lease.Version], \r\n            T.VersionAntecedentID A" +
                    "S [X_Lease.VersionAntecedentID], \r\n            T.VersionCertainty AS [X_Lease.Ve" +
                    "rsionCertainty], \r\n            T.VersionWorkflowInstanceID AS [X_Lease.VersionWo" +
                    "rkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_Lease.VersionUpdatedBy" +
                    "], \r\n            T.VersionDeletedBy AS [X_Lease.VersionDeletedBy], \r\n           " +
                    " T.VersionOwnerContactID AS [X_Lease.VersionOwnerContactID], \r\n            T.Ver" +
                    "sionOwnerCompanyID AS [X_Lease.VersionOwnerCompanyID], \r\n            T.VersionUp" +
                    "dated AS [X_Lease.VersionUpdated], \r\n            True AS _from0\r\n        FROM NK" +
                    "DC.Leases AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_LeaseApplication
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView198()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2526);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_LeaseApplication\r\n        [NKD.Module.Busin");
            viewString.Append("essObjects.Store.X_LeaseApplication](T1.[X_LeaseApplication.LeaseApplicationID],");
            viewString.Append(" T1.[X_LeaseApplication.TenementID], T1.[X_LeaseApplication.LeaseApplicationType");
            viewString.Append("ID], T1.[X_LeaseApplication.LeaseApplicationNumber], T1.[X_LeaseApplication.Owne");
            viewString.Append("rCompanyID], T1.[X_LeaseApplication.OfficeOfApproval], T1.[X_LeaseApplication.Ap");
            viewString.Append("proved], T1.[X_LeaseApplication.ApprovedByContactID], T1.[X_LeaseApplication.Val");
            viewString.Append("idFrom], T1.[X_LeaseApplication.Expiry], T1.[X_LeaseApplication.Comment], T1.[X_");
            viewString.Append("LeaseApplication.Version], T1.[X_LeaseApplication.VersionAntecedentID], T1.[X_Le");
            viewString.Append("aseApplication.VersionCertainty], T1.[X_LeaseApplication.VersionWorkflowInstance");
            viewString.Append("ID], T1.[X_LeaseApplication.VersionUpdatedBy], T1.[X_LeaseApplication.VersionDel");
            viewString.Append("etedBy], T1.[X_LeaseApplication.VersionOwnerContactID], T1.[X_LeaseApplication.V");
            viewString.Append("ersionOwnerCompanyID], T1.[X_LeaseApplication.VersionUpdated])\r\n    FROM (\r\n    ");
            viewString.Append("    SELECT \r\n            T.LeaseApplicationID AS [X_LeaseApplication.LeaseApplic");
            viewString.Append("ationID], \r\n            T.TenementID AS [X_LeaseApplication.TenementID], \r\n     ");
            viewString.Append("       T.LeaseApplicationTypeID AS [X_LeaseApplication.LeaseApplicationTypeID], ");
            viewString.Append("\r\n            T.LeaseApplicationNumber AS [X_LeaseApplication.LeaseApplicationNu");
            viewString.Append("mber], \r\n            T.OwnerCompanyID AS [X_LeaseApplication.OwnerCompanyID], \r\n");
            viewString.Append("            T.OfficeOfApproval AS [X_LeaseApplication.OfficeOfApproval], \r\n     ");
            viewString.Append("       T.Approved AS [X_LeaseApplication.Approved], \r\n            T.ApprovedByCo");
            viewString.Append("ntactID AS [X_LeaseApplication.ApprovedByContactID], \r\n            T.ValidFrom A");
            viewString.Append("S [X_LeaseApplication.ValidFrom], \r\n            T.Expiry AS [X_LeaseApplication.");
            viewString.Append("Expiry], \r\n            T.Comment AS [X_LeaseApplication.Comment], \r\n            ");
            viewString.Append("T.Version AS [X_LeaseApplication.Version], \r\n            T.VersionAntecedentID A");
            viewString.Append("S [X_LeaseApplication.VersionAntecedentID], \r\n            T.VersionCertainty AS ");
            viewString.Append("[X_LeaseApplication.VersionCertainty], \r\n            T.VersionWorkflowInstanceID");
            viewString.Append(" AS [X_LeaseApplication.VersionWorkflowInstanceID], \r\n            T.VersionUpdat");
            viewString.Append("edBy AS [X_LeaseApplication.VersionUpdatedBy], \r\n            T.VersionDeletedBy ");
            viewString.Append("AS [X_LeaseApplication.VersionDeletedBy], \r\n            T.VersionOwnerContactID ");
            viewString.Append("AS [X_LeaseApplication.VersionOwnerContactID], \r\n            T.VersionOwnerCompa");
            viewString.Append("nyID AS [X_LeaseApplication.VersionOwnerCompanyID], \r\n            T.VersionUpdat");
            viewString.Append("ed AS [X_LeaseApplication.VersionUpdated], \r\n            True AS _from0\r\n       ");
            viewString.Append(" FROM NKDC.LeaseApplications AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_LeaseApplication", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_License
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView199()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(6159);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_License\r\n        [NKD.Module.BusinessObject");
            viewString.Append("s.Store.X_License](T1.[X_License.LicenseID], T1.[X_License.CompanyID], T1.[X_Lic");
            viewString.Append("ense.ContactID], T1.[X_License.LicenseeGUID], T1.[X_License.LicenseeName], T1.[X");
            viewString.Append("_License.LicenseeUsername], T1.[X_License.LicenseeUniqueMachineCode1], T1.[X_Lic");
            viewString.Append("ense.LicenseeUniqueMachineCode2], T1.[X_License.LicenseeGroupID], T1.[X_License.");
            viewString.Append("LicensorIP], T1.[X_License.LicensorName], T1.[X_License.LicenseTypeID], T1.[X_Li");
            viewString.Append("cense.LicenseType], T1.[X_License.LicenseURL], T1.[X_License.RootServerName], T1");
            viewString.Append(".[X_License.RootServerID], T1.[X_License.ServerName], T1.[X_License.ServerID], T");
            viewString.Append("1.[X_License.ApplicationID], T1.[X_License.ServiceAuthenticationMethod], T1.[X_L");
            viewString.Append("icense.ServiceAuthorisationMethod], T1.[X_License.ValidFrom], T1.[X_License.Expi");
            viewString.Append("ry], T1.[X_License.SupportExpiry], T1.[X_License.ValidForDuration], T1.[X_Licens");
            viewString.Append("e.ValidForUnitID], T1.[X_License.ValidForUnitTarget], T1.[X_License.VersionMajor");
            viewString.Append("], T1.[X_License.VersionMinor], T1.[X_License.VersionBuild], T1.[X_License.Suppo");
            viewString.Append("rtedToMajor], T1.[X_License.SupportedToMinor], T1.[X_License.SupportedToBuild], ");
            viewString.Append("T1.[X_License.Nuked], T1.[X_License.NukedReason], T1.[X_License.TimeServerID], T");
            viewString.Append("1.[X_License.TimeServerName], T1.[X_License.TimeServerResolutionMask], T1.[X_Lic");
            viewString.Append("ense.TimeServerIP], T1.[X_License.PreAuthorizationCode], T1.[X_License.PreAuthor");
            viewString.Append("izationExecuted], T1.[X_License.Signatory1], T1.[X_License.Signatory2], T1.[X_Li");
            viewString.Append("cense.Signatory3], T1.[X_License.Signature1], T1.[X_License.Signature2], T1.[X_L");
            viewString.Append("icense.Signature3], T1.[X_License.Received], T1.[X_License.CheckedIn], T1.[X_Lic");
            viewString.Append("ense.LicenceeCertificate], T1.[X_License.LicensorCertificate], T1.[X_License.Che");
            viewString.Append("cksumType], T1.[X_License.Checksum], T1.[X_License.EncryptedKey], T1.[X_License.");
            viewString.Append("LicenseKeyCode], T1.[X_License.Version], T1.[X_License.VersionAntecedentID], T1.");
            viewString.Append("[X_License.VersionCertainty], T1.[X_License.VersionWorkflowInstanceID], T1.[X_Li");
            viewString.Append("cense.VersionUpdatedBy], T1.[X_License.VersionDeletedBy], T1.[X_License.VersionO");
            viewString.Append("wnerContactID], T1.[X_License.VersionOwnerCompanyID], T1.[X_License.VersionUpdat");
            viewString.Append("ed])\r\n    FROM (\r\n        SELECT \r\n            T.LicenseID AS [X_License.License");
            viewString.Append("ID], \r\n            T.CompanyID AS [X_License.CompanyID], \r\n            T.Contact");
            viewString.Append("ID AS [X_License.ContactID], \r\n            T.LicenseeGUID AS [X_License.Licensee");
            viewString.Append("GUID], \r\n            T.LicenseeName AS [X_License.LicenseeName], \r\n            T");
            viewString.Append(".LicenseeUsername AS [X_License.LicenseeUsername], \r\n            T.LicenseeUniqu");
            viewString.Append("eMachineCode1 AS [X_License.LicenseeUniqueMachineCode1], \r\n            T.License");
            viewString.Append("eUniqueMachineCode2 AS [X_License.LicenseeUniqueMachineCode2], \r\n            T.L");
            viewString.Append("icenseeGroupID AS [X_License.LicenseeGroupID], \r\n            T.LicensorIP AS [X_");
            viewString.Append("License.LicensorIP], \r\n            T.LicensorName AS [X_License.LicensorName], \r");
            viewString.Append("\n            T.LicenseTypeID AS [X_License.LicenseTypeID], \r\n            T.Licen");
            viewString.Append("seType AS [X_License.LicenseType], \r\n            T.LicenseURL AS [X_License.Lice");
            viewString.Append("nseURL], \r\n            T.RootServerName AS [X_License.RootServerName], \r\n       ");
            viewString.Append("     T.RootServerID AS [X_License.RootServerID], \r\n            T.ServerName AS [");
            viewString.Append("X_License.ServerName], \r\n            T.ServerID AS [X_License.ServerID], \r\n     ");
            viewString.Append("       T.ApplicationID AS [X_License.ApplicationID], \r\n            T.ServiceAuth");
            viewString.Append("enticationMethod AS [X_License.ServiceAuthenticationMethod], \r\n            T.Ser");
            viewString.Append("viceAuthorisationMethod AS [X_License.ServiceAuthorisationMethod], \r\n           ");
            viewString.Append(" T.ValidFrom AS [X_License.ValidFrom], \r\n            T.Expiry AS [X_License.Expi");
            viewString.Append("ry], \r\n            T.SupportExpiry AS [X_License.SupportExpiry], \r\n            T");
            viewString.Append(".ValidForDuration AS [X_License.ValidForDuration], \r\n            T.ValidForUnitI");
            viewString.Append("D AS [X_License.ValidForUnitID], \r\n            T.ValidForUnitTarget AS [X_Licens");
            viewString.Append("e.ValidForUnitTarget], \r\n            T.VersionMajor AS [X_License.VersionMajor],");
            viewString.Append(" \r\n            T.VersionMinor AS [X_License.VersionMinor], \r\n            T.Versi");
            viewString.Append("onBuild AS [X_License.VersionBuild], \r\n            T.SupportedToMajor AS [X_Lice");
            viewString.Append("nse.SupportedToMajor], \r\n            T.SupportedToMinor AS [X_License.SupportedT");
            viewString.Append("oMinor], \r\n            T.SupportedToBuild AS [X_License.SupportedToBuild], \r\n   ");
            viewString.Append("         T.Nuked AS [X_License.Nuked], \r\n            T.NukedReason AS [X_License");
            viewString.Append(".NukedReason], \r\n            T.TimeServerID AS [X_License.TimeServerID], \r\n     ");
            viewString.Append("       T.TimeServerName AS [X_License.TimeServerName], \r\n            T.TimeServe");
            viewString.Append("rResolutionMask AS [X_License.TimeServerResolutionMask], \r\n            T.TimeSer");
            viewString.Append("verIP AS [X_License.TimeServerIP], \r\n            T.PreAuthorizationCode AS [X_Li");
            viewString.Append("cense.PreAuthorizationCode], \r\n            T.PreAuthorizationExecuted AS [X_Lice");
            viewString.Append("nse.PreAuthorizationExecuted], \r\n            T.Signatory1 AS [X_License.Signator");
            viewString.Append("y1], \r\n            T.Signatory2 AS [X_License.Signatory2], \r\n            T.Signa");
            viewString.Append("tory3 AS [X_License.Signatory3], \r\n            T.Signature1 AS [X_License.Signat");
            viewString.Append("ure1], \r\n            T.Signature2 AS [X_License.Signature2], \r\n            T.Sig");
            viewString.Append("nature3 AS [X_License.Signature3], \r\n            T.Received AS [X_License.Receiv");
            viewString.Append("ed], \r\n            T.CheckedIn AS [X_License.CheckedIn], \r\n            T.Licence");
            viewString.Append("eCertificate AS [X_License.LicenceeCertificate], \r\n            T.LicensorCertifi");
            viewString.Append("cate AS [X_License.LicensorCertificate], \r\n            T.ChecksumType AS [X_Lice");
            viewString.Append("nse.ChecksumType], \r\n            T.Checksum AS [X_License.Checksum], \r\n         ");
            viewString.Append("   T.EncryptedKey AS [X_License.EncryptedKey], \r\n            T.LicenseKeyCode AS");
            viewString.Append(" [X_License.LicenseKeyCode], \r\n            T.Version AS [X_License.Version], \r\n ");
            viewString.Append("           T.VersionAntecedentID AS [X_License.VersionAntecedentID], \r\n         ");
            viewString.Append("   T.VersionCertainty AS [X_License.VersionCertainty], \r\n            T.VersionWo");
            viewString.Append("rkflowInstanceID AS [X_License.VersionWorkflowInstanceID], \r\n            T.Versi");
            viewString.Append("onUpdatedBy AS [X_License.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS");
            viewString.Append(" [X_License.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [X_Licen");
            viewString.Append("se.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [X_License.V");
            viewString.Append("ersionOwnerCompanyID], \r\n            T.VersionUpdated AS [X_License.VersionUpdat");
            viewString.Append("ed], \r\n            True AS _from0\r\n        FROM NKDC.Licenses AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_License", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_LicenseAsset
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView200()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_LicenseAsset", "\r\n    SELECT VALUE -- Constructing X_LicenseAsset\r\n        [NKD.Module.BusinessOb" +
                    "jects.Store.X_LicenseAsset](T1.[X_LicenseAsset.LicenseAssetID], T1.[X_LicenseAss" +
                    "et.LicenseID], T1.[X_LicenseAsset.AssetID], T1.[X_LicenseAsset.ModelID], T1.[X_L" +
                    "icenseAsset.Restrictions], T1.[X_LicenseAsset.Version], T1.[X_LicenseAsset.Versi" +
                    "onAntecedentID], T1.[X_LicenseAsset.VersionCertainty], T1.[X_LicenseAsset.Versio" +
                    "nWorkflowInstanceID], T1.[X_LicenseAsset.VersionUpdatedBy], T1.[X_LicenseAsset.V" +
                    "ersionDeletedBy], T1.[X_LicenseAsset.VersionOwnerContactID], T1.[X_LicenseAsset." +
                    "VersionOwnerCompanyID], T1.[X_LicenseAsset.VersionUpdated])\r\n    FROM (\r\n       " +
                    " SELECT \r\n            T.LicenseAssetID AS [X_LicenseAsset.LicenseAssetID], \r\n   " +
                    "         T.LicenseID AS [X_LicenseAsset.LicenseID], \r\n            T.AssetID AS [" +
                    "X_LicenseAsset.AssetID], \r\n            T.ModelID AS [X_LicenseAsset.ModelID], \r\n" +
                    "            T.Restrictions AS [X_LicenseAsset.Restrictions], \r\n            T.Ver" +
                    "sion AS [X_LicenseAsset.Version], \r\n            T.VersionAntecedentID AS [X_Lice" +
                    "nseAsset.VersionAntecedentID], \r\n            T.VersionCertainty AS [X_LicenseAss" +
                    "et.VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [X_LicenseAss" +
                    "et.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_LicenseAss" +
                    "et.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_LicenseAsset.Versio" +
                    "nDeletedBy], \r\n            T.VersionOwnerContactID AS [X_LicenseAsset.VersionOwn" +
                    "erContactID], \r\n            T.VersionOwnerCompanyID AS [X_LicenseAsset.VersionOw" +
                    "nerCompanyID], \r\n            T.VersionUpdated AS [X_LicenseAsset.VersionUpdated]" +
                    ", \r\n            True AS _from0\r\n        FROM NKDC.LicenseAssets AS T\r\n    ) AS T" +
                    "1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_Lithology
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView201()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(5024);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_Lithology\r\n        [NKD.Module.BusinessObje");
            viewString.Append("cts.Store.X_Lithology](T1.[X_Lithology.LithologyID], T1.[X_Lithology.HeaderID], ");
            viewString.Append("T1.[X_Lithology.FromDepth], T1.[X_Lithology.ToDepth], T1.[X_Lithology.RecoveredT");
            viewString.Append("hickness], T1.[X_Lithology.DomainID], T1.[X_Lithology.SeamID], T1.[X_Lithology.P");
            viewString.Append("lyID], T1.[X_Lithology.StratigraphyID], T1.[X_Lithology.HorizonID], T1.[X_Lithol");
            viewString.Append("ogy.SampleTypeID], T1.[X_Lithology.SampleNumber], T1.[X_Lithology.SampleMassKg],");
            viewString.Append(" T1.[X_Lithology.IntervalStatusID], T1.[X_Lithology.LithologyPercentage], T1.[X_");
            viewString.Append("Lithology.LithologyTypeID], T1.[X_Lithology.LithologyQualifierID], T1.[X_Litholo");
            viewString.Append("gy.ShadeID], T1.[X_Lithology.HueID], T1.[X_Lithology.ColourID], T1.[X_Lithology.");
            viewString.Append("PrimaryAdjectiveID], T1.[X_Lithology.LithologyInterrelationID], T1.[X_Lithology.");
            viewString.Append("WeatheringID], T1.[X_Lithology.EstimatedStrengthID], T1.[X_Lithology.BedSpacingI");
            viewString.Append("D], T1.[X_Lithology.DefectTypeID], T1.[X_Lithology.DefectCompletenessID], T1.[X_");
            viewString.Append("Lithology.DefectSpacingID], T1.[X_Lithology.DefectDip], T1.[X_Lithology.CoreStat");
            viewString.Append("eID], T1.[X_Lithology.MechanicalStateID], T1.[X_Lithology.TextureID], T1.[X_Lith");
            viewString.Append("ology.BasalContactID], T1.[X_Lithology.PrimarySedimentaryFeatureID], T1.[X_Litho");
            viewString.Append("logy.BeddingDip], T1.[X_Lithology.MineralAndFossilAbundanceID], T1.[X_Lithology.");
            viewString.Append("MineralAndFossilTypeID], T1.[X_Lithology.MineralAndFossilAssociationID], T1.[X_L");
            viewString.Append("ithology.GasDetectedID], T1.[X_Lithology.Description], T1.[X_Lithology.Version],");
            viewString.Append(" T1.[X_Lithology.VersionAntecedentID], T1.[X_Lithology.VersionCertainty], T1.[X_");
            viewString.Append("Lithology.VersionWorkflowInstanceID], T1.[X_Lithology.VersionUpdatedBy], T1.[X_L");
            viewString.Append("ithology.VersionDeletedBy], T1.[X_Lithology.VersionOwnerContactID], T1.[X_Lithol");
            viewString.Append("ogy.VersionOwnerCompanyID], T1.[X_Lithology.VersionUpdated])\r\n    FROM (\r\n      ");
            viewString.Append("  SELECT \r\n            T.LithologyID AS [X_Lithology.LithologyID], \r\n           ");
            viewString.Append(" T.HeaderID AS [X_Lithology.HeaderID], \r\n            T.FromDepth AS [X_Lithology");
            viewString.Append(".FromDepth], \r\n            T.ToDepth AS [X_Lithology.ToDepth], \r\n            T.R");
            viewString.Append("ecoveredThickness AS [X_Lithology.RecoveredThickness], \r\n            T.DomainID ");
            viewString.Append("AS [X_Lithology.DomainID], \r\n            T.SeamID AS [X_Lithology.SeamID], \r\n   ");
            viewString.Append("         T.PlyID AS [X_Lithology.PlyID], \r\n            T.StratigraphyID AS [X_Li");
            viewString.Append("thology.StratigraphyID], \r\n            T.HorizonID AS [X_Lithology.HorizonID], \r");
            viewString.Append("\n            T.SampleTypeID AS [X_Lithology.SampleTypeID], \r\n            T.Sampl");
            viewString.Append("eNumber AS [X_Lithology.SampleNumber], \r\n            T.SampleMassKg AS [X_Lithol");
            viewString.Append("ogy.SampleMassKg], \r\n            T.IntervalStatusID AS [X_Lithology.IntervalStat");
            viewString.Append("usID], \r\n            T.LithologyPercentage AS [X_Lithology.LithologyPercentage],");
            viewString.Append(" \r\n            T.LithologyTypeID AS [X_Lithology.LithologyTypeID], \r\n           ");
            viewString.Append(" T.LithologyQualifierID AS [X_Lithology.LithologyQualifierID], \r\n            T.S");
            viewString.Append("hadeID AS [X_Lithology.ShadeID], \r\n            T.HueID AS [X_Lithology.HueID], \r");
            viewString.Append("\n            T.ColourID AS [X_Lithology.ColourID], \r\n            T.PrimaryAdject");
            viewString.Append("iveID AS [X_Lithology.PrimaryAdjectiveID], \r\n            T.LithologyInterrelatio");
            viewString.Append("nID AS [X_Lithology.LithologyInterrelationID], \r\n            T.WeatheringID AS [");
            viewString.Append("X_Lithology.WeatheringID], \r\n            T.EstimatedStrengthID AS [X_Lithology.E");
            viewString.Append("stimatedStrengthID], \r\n            T.BedSpacingID AS [X_Lithology.BedSpacingID],");
            viewString.Append(" \r\n            T.DefectTypeID AS [X_Lithology.DefectTypeID], \r\n            T.Def");
            viewString.Append("ectCompletenessID AS [X_Lithology.DefectCompletenessID], \r\n            T.DefectS");
            viewString.Append("pacingID AS [X_Lithology.DefectSpacingID], \r\n            T.DefectDip AS [X_Litho");
            viewString.Append("logy.DefectDip], \r\n            T.CoreStateID AS [X_Lithology.CoreStateID], \r\n   ");
            viewString.Append("         T.MechanicalStateID AS [X_Lithology.MechanicalStateID], \r\n            T");
            viewString.Append(".TextureID AS [X_Lithology.TextureID], \r\n            T.BasalContactID AS [X_Lith");
            viewString.Append("ology.BasalContactID], \r\n            T.PrimarySedimentaryFeatureID AS [X_Litholo");
            viewString.Append("gy.PrimarySedimentaryFeatureID], \r\n            T.BeddingDip AS [X_Lithology.Bedd");
            viewString.Append("ingDip], \r\n            T.MineralAndFossilAbundanceID AS [X_Lithology.MineralAndF");
            viewString.Append("ossilAbundanceID], \r\n            T.MineralAndFossilTypeID AS [X_Lithology.Minera");
            viewString.Append("lAndFossilTypeID], \r\n            T.MineralAndFossilAssociationID AS [X_Lithology");
            viewString.Append(".MineralAndFossilAssociationID], \r\n            T.GasDetectedID AS [X_Lithology.G");
            viewString.Append("asDetectedID], \r\n            T.Description AS [X_Lithology.Description], \r\n     ");
            viewString.Append("       T.Version AS [X_Lithology.Version], \r\n            T.VersionAntecedentID A");
            viewString.Append("S [X_Lithology.VersionAntecedentID], \r\n            T.VersionCertainty AS [X_Lith");
            viewString.Append("ology.VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [X_Litholo");
            viewString.Append("gy.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_Lithology.");
            viewString.Append("VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_Lithology.VersionDelet");
            viewString.Append("edBy], \r\n            T.VersionOwnerContactID AS [X_Lithology.VersionOwnerContact");
            viewString.Append("ID], \r\n            T.VersionOwnerCompanyID AS [X_Lithology.VersionOwnerCompanyID");
            viewString.Append("], \r\n            T.VersionUpdated AS [X_Lithology.VersionUpdated], \r\n           ");
            viewString.Append(" True AS _from0\r\n        FROM NKDC.Lithologies AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_Lithology", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_Location
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView202()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2523);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_Location\r\n        [NKD.Module.BusinessObjec");
            viewString.Append("ts.Store.X_Location](T1.[X_Location.LocationID], T1.[X_Location.LocationTypeID],");
            viewString.Append(" T1.[X_Location.DefaultLocationName], T1.[X_Location.LocationCode], T1.[X_Locati");
            viewString.Append("on.LocationGeography], T1.[X_Location.LatitudeWGS84], T1.[X_Location.LongitudeWG");
            viewString.Append("S84], T1.[X_Location.Elevation], T1.[X_Location.CountryID], T1.[X_Location.Count");
            viewString.Append("ryStateID], T1.[X_Location.Postcode], T1.[X_Location.DefaultCulture], T1.[X_Loca");
            viewString.Append("tion.OwnerCompanyID], T1.[X_Location.ResponsibleContactID], T1.[X_Location.Comme");
            viewString.Append("nt], T1.[X_Location.Version], T1.[X_Location.VersionAntecedentID], T1.[X_Locatio");
            viewString.Append("n.VersionCertainty], T1.[X_Location.VersionWorkflowInstanceID], T1.[X_Location.V");
            viewString.Append("ersionUpdatedBy], T1.[X_Location.VersionDeletedBy], T1.[X_Location.VersionOwnerC");
            viewString.Append("ontactID], T1.[X_Location.VersionOwnerCompanyID], T1.[X_Location.VersionUpdated]");
            viewString.Append(")\r\n    FROM (\r\n        SELECT \r\n            T.LocationID AS [X_Location.Location");
            viewString.Append("ID], \r\n            T.LocationTypeID AS [X_Location.LocationTypeID], \r\n          ");
            viewString.Append("  T.DefaultLocationName AS [X_Location.DefaultLocationName], \r\n            T.Loc");
            viewString.Append("ationCode AS [X_Location.LocationCode], \r\n            T.LocationGeography AS [X_");
            viewString.Append("Location.LocationGeography], \r\n            T.LatitudeWGS84 AS [X_Location.Latitu");
            viewString.Append("deWGS84], \r\n            T.LongitudeWGS84 AS [X_Location.LongitudeWGS84], \r\n     ");
            viewString.Append("       T.Elevation AS [X_Location.Elevation], \r\n            T.CountryID AS [X_Lo");
            viewString.Append("cation.CountryID], \r\n            T.CountryStateID AS [X_Location.CountryStateID]");
            viewString.Append(", \r\n            T.Postcode AS [X_Location.Postcode], \r\n            T.DefaultCult");
            viewString.Append("ure AS [X_Location.DefaultCulture], \r\n            T.OwnerCompanyID AS [X_Locatio");
            viewString.Append("n.OwnerCompanyID], \r\n            T.ResponsibleContactID AS [X_Location.Responsib");
            viewString.Append("leContactID], \r\n            T.Comment AS [X_Location.Comment], \r\n            T.V");
            viewString.Append("ersion AS [X_Location.Version], \r\n            T.VersionAntecedentID AS [X_Locati");
            viewString.Append("on.VersionAntecedentID], \r\n            T.VersionCertainty AS [X_Location.Version");
            viewString.Append("Certainty], \r\n            T.VersionWorkflowInstanceID AS [X_Location.VersionWork");
            viewString.Append("flowInstanceID], \r\n            T.VersionUpdatedBy AS [X_Location.VersionUpdatedB");
            viewString.Append("y], \r\n            T.VersionDeletedBy AS [X_Location.VersionDeletedBy], \r\n       ");
            viewString.Append("     T.VersionOwnerContactID AS [X_Location.VersionOwnerContactID], \r\n          ");
            viewString.Append("  T.VersionOwnerCompanyID AS [X_Location.VersionOwnerCompanyID], \r\n            T");
            viewString.Append(".VersionUpdated AS [X_Location.VersionUpdated], \r\n            True AS _from0\r\n  ");
            viewString.Append("      FROM NKDC.Locations AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_Location", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_LocationAlias
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView203()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_LocationAlias", "\r\n    SELECT VALUE -- Constructing X_LocationAlias\r\n        [NKD.Module.BusinessO" +
                    "bjects.Store.X_LocationAlias](T1.[X_LocationAlias.LocationAliasID], T1.[X_Locati" +
                    "onAlias.LocationID], T1.[X_LocationAlias.Alias], T1.[X_LocationAlias.Culture], T" +
                    "1.[X_LocationAlias.Priority], T1.[X_LocationAlias.Version], T1.[X_LocationAlias." +
                    "VersionAntecedentID], T1.[X_LocationAlias.VersionCertainty], T1.[X_LocationAlias" +
                    ".VersionWorkflowInstanceID], T1.[X_LocationAlias.VersionUpdatedBy], T1.[X_Locati" +
                    "onAlias.VersionDeletedBy], T1.[X_LocationAlias.VersionOwnerContactID], T1.[X_Loc" +
                    "ationAlias.VersionOwnerCompanyID], T1.[X_LocationAlias.VersionUpdated])\r\n    FRO" +
                    "M (\r\n        SELECT \r\n            T.LocationAliasID AS [X_LocationAlias.Location" +
                    "AliasID], \r\n            T.LocationID AS [X_LocationAlias.LocationID], \r\n        " +
                    "    T.Alias AS [X_LocationAlias.Alias], \r\n            T.Culture AS [X_LocationAl" +
                    "ias.Culture], \r\n            T.Priority AS [X_LocationAlias.Priority], \r\n        " +
                    "    T.Version AS [X_LocationAlias.Version], \r\n            T.VersionAntecedentID " +
                    "AS [X_LocationAlias.VersionAntecedentID], \r\n            T.VersionCertainty AS [X" +
                    "_LocationAlias.VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [" +
                    "X_LocationAlias.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS " +
                    "[X_LocationAlias.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_Locat" +
                    "ionAlias.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [X_Location" +
                    "Alias.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [X_Locati" +
                    "onAlias.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [X_LocationAli" +
                    "as.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.LocationAlia" +
                    "s AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_LocationData
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView204()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_LocationData", "\r\n    SELECT VALUE -- Constructing X_LocationData\r\n        [NKD.Module.BusinessOb" +
                    "jects.Store.X_LocationData](T1.[X_LocationData.LocationDataID], T1.[X_LocationDa" +
                    "ta.ParentLocationDataID], T1.[X_LocationData.TableType], T1.[X_LocationData.Refe" +
                    "renceID], T1.[X_LocationData.LocationID], T1.[X_LocationData.Version], T1.[X_Loc" +
                    "ationData.VersionAntecedentID], T1.[X_LocationData.VersionCertainty], T1.[X_Loca" +
                    "tionData.VersionWorkflowInstanceID], T1.[X_LocationData.VersionUpdatedBy], T1.[X" +
                    "_LocationData.VersionDeletedBy], T1.[X_LocationData.VersionOwnerContactID], T1.[" +
                    "X_LocationData.VersionOwnerCompanyID], T1.[X_LocationData.VersionUpdated])\r\n    " +
                    "FROM (\r\n        SELECT \r\n            T.LocationDataID AS [X_LocationData.Locatio" +
                    "nDataID], \r\n            T.ParentLocationDataID AS [X_LocationData.ParentLocation" +
                    "DataID], \r\n            T.TableType AS [X_LocationData.TableType], \r\n            " +
                    "T.ReferenceID AS [X_LocationData.ReferenceID], \r\n            T.LocationID AS [X_" +
                    "LocationData.LocationID], \r\n            T.Version AS [X_LocationData.Version], \r" +
                    "\n            T.VersionAntecedentID AS [X_LocationData.VersionAntecedentID], \r\n  " +
                    "          T.VersionCertainty AS [X_LocationData.VersionCertainty], \r\n           " +
                    " T.VersionWorkflowInstanceID AS [X_LocationData.VersionWorkflowInstanceID], \r\n  " +
                    "          T.VersionUpdatedBy AS [X_LocationData.VersionUpdatedBy], \r\n           " +
                    " T.VersionDeletedBy AS [X_LocationData.VersionDeletedBy], \r\n            T.Versio" +
                    "nOwnerContactID AS [X_LocationData.VersionOwnerContactID], \r\n            T.Versi" +
                    "onOwnerCompanyID AS [X_LocationData.VersionOwnerCompanyID], \r\n            T.Vers" +
                    "ionUpdated AS [X_LocationData.VersionUpdated], \r\n            True AS _from0\r\n   " +
                    "     FROM NKDC.LocationDatas AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_LocationHistory
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView205()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_LocationHistory", "\r\n    SELECT VALUE -- Constructing X_LocationHistory\r\n        [NKD.Module.Busines" +
                    "sObjects.Store.X_LocationHistory](T1.[X_LocationHistory.LocationHistoryID], T1.[" +
                    "X_LocationHistory.LocationHistory], T1.[X_LocationHistory.LocationTaken], T1.[X_" +
                    "LocationHistory.CorrectedLocationID], T1.[X_LocationHistory.ContactID], T1.[X_Lo" +
                    "cationHistory.Version], T1.[X_LocationHistory.VersionAntecedentID], T1.[X_Locati" +
                    "onHistory.VersionCertainty], T1.[X_LocationHistory.VersionWorkflowInstanceID], T" +
                    "1.[X_LocationHistory.VersionUpdatedBy], T1.[X_LocationHistory.VersionDeletedBy]," +
                    " T1.[X_LocationHistory.VersionOwnerContactID], T1.[X_LocationHistory.VersionOwne" +
                    "rCompanyID], T1.[X_LocationHistory.VersionUpdated])\r\n    FROM (\r\n        SELECT " +
                    "\r\n            T.LocationHistoryID AS [X_LocationHistory.LocationHistoryID], \r\n  " +
                    "          T.LocationHistory AS [X_LocationHistory.LocationHistory], \r\n          " +
                    "  T.LocationTaken AS [X_LocationHistory.LocationTaken], \r\n            T.Correcte" +
                    "dLocationID AS [X_LocationHistory.CorrectedLocationID], \r\n            T.ContactI" +
                    "D AS [X_LocationHistory.ContactID], \r\n            T.Version AS [X_LocationHistor" +
                    "y.Version], \r\n            T.VersionAntecedentID AS [X_LocationHistory.VersionAnt" +
                    "ecedentID], \r\n            T.VersionCertainty AS [X_LocationHistory.VersionCertai" +
                    "nty], \r\n            T.VersionWorkflowInstanceID AS [X_LocationHistory.VersionWor" +
                    "kflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_LocationHistory.Version" +
                    "UpdatedBy], \r\n            T.VersionDeletedBy AS [X_LocationHistory.VersionDelete" +
                    "dBy], \r\n            T.VersionOwnerContactID AS [X_LocationHistory.VersionOwnerCo" +
                    "ntactID], \r\n            T.VersionOwnerCompanyID AS [X_LocationHistory.VersionOwn" +
                    "erCompanyID], \r\n            T.VersionUpdated AS [X_LocationHistory.VersionUpdate" +
                    "d], \r\n            True AS _from0\r\n        FROM NKDC.LocationTraces AS T\r\n    ) A" +
                    "S T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_Mineralogy
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView206()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2161);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_Mineralogy\r\n        [NKD.Module.BusinessObj");
            viewString.Append("ects.Store.X_Mineralogy](T1.[X_Mineralogy.MineralogyID], T1.[X_Mineralogy.Header");
            viewString.Append("ID], T1.[X_Mineralogy.FromDepth], T1.[X_Mineralogy.ToDepth], T1.[X_Mineralogy.Mi");
            viewString.Append("neralAbundanceID], T1.[X_Mineralogy.MineralFormID], T1.[X_Mineralogy.MineralType");
            viewString.Append("ID], T1.[X_Mineralogy.MineralStyleID], T1.[X_Mineralogy.Logged], T1.[X_Mineralog");
            viewString.Append("y.LoggedBy], T1.[X_Mineralogy.Comment], T1.[X_Mineralogy.Version], T1.[X_Mineral");
            viewString.Append("ogy.VersionAntecedentID], T1.[X_Mineralogy.VersionCertainty], T1.[X_Mineralogy.V");
            viewString.Append("ersionWorkflowInstanceID], T1.[X_Mineralogy.VersionUpdatedBy], T1.[X_Mineralogy.");
            viewString.Append("VersionDeletedBy], T1.[X_Mineralogy.VersionOwnerContactID], T1.[X_Mineralogy.Ver");
            viewString.Append("sionOwnerCompanyID], T1.[X_Mineralogy.VersionUpdated])\r\n    FROM (\r\n        SELE");
            viewString.Append("CT \r\n            T.MineralogyID AS [X_Mineralogy.MineralogyID], \r\n            T.");
            viewString.Append("HeaderID AS [X_Mineralogy.HeaderID], \r\n            T.FromDepth AS [X_Mineralogy.");
            viewString.Append("FromDepth], \r\n            T.ToDepth AS [X_Mineralogy.ToDepth], \r\n            T.M");
            viewString.Append("ineralAbundanceID AS [X_Mineralogy.MineralAbundanceID], \r\n            T.MineralF");
            viewString.Append("ormID AS [X_Mineralogy.MineralFormID], \r\n            T.MineralTypeID AS [X_Miner");
            viewString.Append("alogy.MineralTypeID], \r\n            T.MineralStyleID AS [X_Mineralogy.MineralSty");
            viewString.Append("leID], \r\n            T.Logged AS [X_Mineralogy.Logged], \r\n            T.LoggedBy");
            viewString.Append(" AS [X_Mineralogy.LoggedBy], \r\n            T.Comment AS [X_Mineralogy.Comment], ");
            viewString.Append("\r\n            T.Version AS [X_Mineralogy.Version], \r\n            T.VersionAntece");
            viewString.Append("dentID AS [X_Mineralogy.VersionAntecedentID], \r\n            T.VersionCertainty A");
            viewString.Append("S [X_Mineralogy.VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS ");
            viewString.Append("[X_Mineralogy.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X");
            viewString.Append("_Mineralogy.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_Mineralogy");
            viewString.Append(".VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [X_Mineralogy.Versi");
            viewString.Append("onOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [X_Mineralogy.Versio");
            viewString.Append("nOwnerCompanyID], \r\n            T.VersionUpdated AS [X_Mineralogy.VersionUpdated");
            viewString.Append("], \r\n            True AS _from0\r\n        FROM NKDC.Mineralogies AS T\r\n    ) AS T");
            viewString.Append("1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_Mineralogy", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_ModelCharacteristic
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView207()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_ModelCharacteristic", "\r\n    SELECT VALUE -- Constructing X_ModelCharacteristic\r\n        [NKD.Module.Bus" +
                    "inessObjects.Store.X_ModelCharacteristic](T1.[X_ModelCharacteristic.ModelCharact" +
                    "eristicID], T1.[X_ModelCharacteristic.ModelID], T1.[X_ModelCharacteristic.Charac" +
                    "teristicID], T1.[X_ModelCharacteristic.Value], T1.[X_ModelCharacteristic.Version" +
                    "], T1.[X_ModelCharacteristic.VersionAntecedentID], T1.[X_ModelCharacteristic.Ver" +
                    "sionCertainty], T1.[X_ModelCharacteristic.VersionWorkflowInstanceID], T1.[X_Mode" +
                    "lCharacteristic.VersionUpdatedBy], T1.[X_ModelCharacteristic.VersionDeletedBy], " +
                    "T1.[X_ModelCharacteristic.VersionOwnerContactID], T1.[X_ModelCharacteristic.Vers" +
                    "ionOwnerCompanyID], T1.[X_ModelCharacteristic.VersionUpdated])\r\n    FROM (\r\n    " +
                    "    SELECT \r\n            T.ModelCharacteristicID AS [X_ModelCharacteristic.Model" +
                    "CharacteristicID], \r\n            T.ModelID AS [X_ModelCharacteristic.ModelID], \r" +
                    "\n            T.CharacteristicID AS [X_ModelCharacteristic.CharacteristicID], \r\n " +
                    "           T.[Value] AS [X_ModelCharacteristic.Value], \r\n            T.Version A" +
                    "S [X_ModelCharacteristic.Version], \r\n            T.VersionAntecedentID AS [X_Mod" +
                    "elCharacteristic.VersionAntecedentID], \r\n            T.VersionCertainty AS [X_Mo" +
                    "delCharacteristic.VersionCertainty], \r\n            T.VersionWorkflowInstanceID A" +
                    "S [X_ModelCharacteristic.VersionWorkflowInstanceID], \r\n            T.VersionUpda" +
                    "tedBy AS [X_ModelCharacteristic.VersionUpdatedBy], \r\n            T.VersionDelete" +
                    "dBy AS [X_ModelCharacteristic.VersionDeletedBy], \r\n            T.VersionOwnerCon" +
                    "tactID AS [X_ModelCharacteristic.VersionOwnerContactID], \r\n            T.Version" +
                    "OwnerCompanyID AS [X_ModelCharacteristic.VersionOwnerCompanyID], \r\n            T" +
                    ".VersionUpdated AS [X_ModelCharacteristic.VersionUpdated], \r\n            True AS" +
                    " _from0\r\n        FROM NKDC.ModelCharacteristics AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_Opportunity
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView208()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3168);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_Opportunity\r\n        [NKD.Module.BusinessOb");
            viewString.Append("jects.Store.X_Opportunity](T1.[X_Opportunity.OpportunityID], T1.[X_Opportunity.O");
            viewString.Append("pportunityName], T1.[X_Opportunity.OpportunityContactID], T1.[X_Opportunity.Oppo");
            viewString.Append("rtunityCompanyID], T1.[X_Opportunity.StatusWorkTypeID], T1.[X_Opportunity.Regard");
            viewString.Append("ingWorkTypeID], T1.[X_Opportunity.Description], T1.[X_Opportunity.ProposalContac");
            viewString.Append("tID], T1.[X_Opportunity.ProposalFileDataID], T1.[X_Opportunity.ProjectID], T1.[X");
            viewString.Append("_Opportunity.ExperienceID], T1.[X_Opportunity.OpenedBy], T1.[X_Opportunity.Assig");
            viewString.Append("nedBy], T1.[X_Opportunity.MaintainedBy], T1.[X_Opportunity.ConvertedBy], T1.[X_O");
            viewString.Append("pportunity.EstimatedConversion], T1.[X_Opportunity.EstimatedDurationHours], T1.[");
            viewString.Append("X_Opportunity.EstimatedRevenue], T1.[X_Opportunity.Probability], T1.[X_Opportuni");
            viewString.Append("ty.Version], T1.[X_Opportunity.VersionAntecedentID], T1.[X_Opportunity.VersionCe");
            viewString.Append("rtainty], T1.[X_Opportunity.VersionWorkflowInstanceID], T1.[X_Opportunity.Versio");
            viewString.Append("nUpdatedBy], T1.[X_Opportunity.VersionDeletedBy], T1.[X_Opportunity.VersionOwner");
            viewString.Append("ContactID], T1.[X_Opportunity.VersionOwnerCompanyID], T1.[X_Opportunity.VersionU");
            viewString.Append("pdated])\r\n    FROM (\r\n        SELECT \r\n            T.OpportunityID AS [X_Opportu");
            viewString.Append("nity.OpportunityID], \r\n            T.OpportunityName AS [X_Opportunity.Opportuni");
            viewString.Append("tyName], \r\n            T.OpportunityContactID AS [X_Opportunity.OpportunityConta");
            viewString.Append("ctID], \r\n            T.OpportunityCompanyID AS [X_Opportunity.OpportunityCompany");
            viewString.Append("ID], \r\n            T.StatusWorkTypeID AS [X_Opportunity.StatusWorkTypeID], \r\n   ");
            viewString.Append("         T.RegardingWorkTypeID AS [X_Opportunity.RegardingWorkTypeID], \r\n       ");
            viewString.Append("     T.Description AS [X_Opportunity.Description], \r\n            T.ProposalConta");
            viewString.Append("ctID AS [X_Opportunity.ProposalContactID], \r\n            T.ProposalFileDataID AS");
            viewString.Append(" [X_Opportunity.ProposalFileDataID], \r\n            T.ProjectID AS [X_Opportunity");
            viewString.Append(".ProjectID], \r\n            T.ExperienceID AS [X_Opportunity.ExperienceID], \r\n   ");
            viewString.Append("         T.OpenedBy AS [X_Opportunity.OpenedBy], \r\n            T.AssignedBy AS [");
            viewString.Append("X_Opportunity.AssignedBy], \r\n            T.MaintainedBy AS [X_Opportunity.Mainta");
            viewString.Append("inedBy], \r\n            T.ConvertedBy AS [X_Opportunity.ConvertedBy], \r\n         ");
            viewString.Append("   T.EstimatedConversion AS [X_Opportunity.EstimatedConversion], \r\n            T");
            viewString.Append(".EstimatedDurationHours AS [X_Opportunity.EstimatedDurationHours], \r\n           ");
            viewString.Append(" T.EstimatedRevenue AS [X_Opportunity.EstimatedRevenue], \r\n            T.Probabi");
            viewString.Append("lity AS [X_Opportunity.Probability], \r\n            T.Version AS [X_Opportunity.V");
            viewString.Append("ersion], \r\n            T.VersionAntecedentID AS [X_Opportunity.VersionAntecedent");
            viewString.Append("ID], \r\n            T.VersionCertainty AS [X_Opportunity.VersionCertainty], \r\n   ");
            viewString.Append("         T.VersionWorkflowInstanceID AS [X_Opportunity.VersionWorkflowInstanceID");
            viewString.Append("], \r\n            T.VersionUpdatedBy AS [X_Opportunity.VersionUpdatedBy], \r\n     ");
            viewString.Append("       T.VersionDeletedBy AS [X_Opportunity.VersionDeletedBy], \r\n            T.V");
            viewString.Append("ersionOwnerContactID AS [X_Opportunity.VersionOwnerContactID], \r\n            T.V");
            viewString.Append("ersionOwnerCompanyID AS [X_Opportunity.VersionOwnerCompanyID], \r\n            T.V");
            viewString.Append("ersionUpdated AS [X_Opportunity.VersionUpdated], \r\n            True AS _from0\r\n ");
            viewString.Append("       FROM NKDC.Opportunities AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_Opportunity", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_Parameter
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView209()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_Parameter", "\r\n    SELECT VALUE -- Constructing X_Parameter\r\n        [NKD.Module.BusinessObjec" +
                    "ts.Store.X_Parameter](T1.[X_Parameter.ParameterID], T1.[X_Parameter.ParameterTyp" +
                    "e], T1.[X_Parameter.ParameterName], T1.[X_Parameter.DefaultParameterValue], T1.[" +
                    "X_Parameter.DefaultParameterText], T1.[X_Parameter.UnitID], T1.[X_Parameter.Form" +
                    "at], T1.[X_Parameter.Description], T1.[X_Parameter.Locale], T1.[X_Parameter.Vers" +
                    "ion], T1.[X_Parameter.VersionAntecedentID], T1.[X_Parameter.VersionCertainty], T" +
                    "1.[X_Parameter.VersionWorkflowInstanceID], T1.[X_Parameter.VersionUpdatedBy], T1" +
                    ".[X_Parameter.VersionDeletedBy], T1.[X_Parameter.VersionOwnerContactID], T1.[X_P" +
                    "arameter.VersionOwnerCompanyID], T1.[X_Parameter.VersionUpdated])\r\n    FROM (\r\n " +
                    "       SELECT \r\n            T.ParameterID AS [X_Parameter.ParameterID], \r\n      " +
                    "      T.ParameterType AS [X_Parameter.ParameterType], \r\n            T.ParameterN" +
                    "ame AS [X_Parameter.ParameterName], \r\n            T.DefaultParameterValue AS [X_" +
                    "Parameter.DefaultParameterValue], \r\n            T.DefaultParameterText AS [X_Par" +
                    "ameter.DefaultParameterText], \r\n            T.UnitID AS [X_Parameter.UnitID], \r\n" +
                    "            T.Format AS [X_Parameter.Format], \r\n            T.Description AS [X_" +
                    "Parameter.Description], \r\n            T.Locale AS [X_Parameter.Locale], \r\n      " +
                    "      T.Version AS [X_Parameter.Version], \r\n            T.VersionAntecedentID AS" +
                    " [X_Parameter.VersionAntecedentID], \r\n            T.VersionCertainty AS [X_Param" +
                    "eter.VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [X_Paramete" +
                    "r.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_Parameter.V" +
                    "ersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_Parameter.VersionDelete" +
                    "dBy], \r\n            T.VersionOwnerContactID AS [X_Parameter.VersionOwnerContactI" +
                    "D], \r\n            T.VersionOwnerCompanyID AS [X_Parameter.VersionOwnerCompanyID]" +
                    ", \r\n            T.VersionUpdated AS [X_Parameter.VersionUpdated], \r\n            " +
                    "True AS _from0\r\n        FROM NKDC.Parameters AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_ParameterDuplicate
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView210()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_ParameterDuplicate", "\r\n    SELECT VALUE -- Constructing X_ParameterDuplicate\r\n        [NKD.Module.Busi" +
                    "nessObjects.Store.X_ParameterDuplicate](T1.[X_ParameterDuplicate.ParameterDuplic" +
                    "ateID], T1.[X_ParameterDuplicate.Parameter1ID], T1.[X_ParameterDuplicate.Paramet" +
                    "er2ID], T1.[X_ParameterDuplicate.Version], T1.[X_ParameterDuplicate.VersionAntec" +
                    "edentID], T1.[X_ParameterDuplicate.VersionCertainty], T1.[X_ParameterDuplicate.V" +
                    "ersionWorkflowInstanceID], T1.[X_ParameterDuplicate.VersionUpdatedBy], T1.[X_Par" +
                    "ameterDuplicate.VersionDeletedBy], T1.[X_ParameterDuplicate.VersionOwnerContactI" +
                    "D], T1.[X_ParameterDuplicate.VersionOwnerCompanyID], T1.[X_ParameterDuplicate.Ve" +
                    "rsionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.ParameterDuplicateID " +
                    "AS [X_ParameterDuplicate.ParameterDuplicateID], \r\n            T.Parameter1ID AS " +
                    "[X_ParameterDuplicate.Parameter1ID], \r\n            T.Parameter2ID AS [X_Paramete" +
                    "rDuplicate.Parameter2ID], \r\n            T.Version AS [X_ParameterDuplicate.Versi" +
                    "on], \r\n            T.VersionAntecedentID AS [X_ParameterDuplicate.VersionAnteced" +
                    "entID], \r\n            T.VersionCertainty AS [X_ParameterDuplicate.VersionCertain" +
                    "ty], \r\n            T.VersionWorkflowInstanceID AS [X_ParameterDuplicate.VersionW" +
                    "orkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_ParameterDuplicate.Ve" +
                    "rsionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_ParameterDuplicate.Versi" +
                    "onDeletedBy], \r\n            T.VersionOwnerContactID AS [X_ParameterDuplicate.Ver" +
                    "sionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [X_ParameterDuplic" +
                    "ate.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [X_ParameterDuplic" +
                    "ate.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.ParameterDu" +
                    "plicates AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_ParameterGroup
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView211()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_ParameterGroup", "\r\n    SELECT VALUE -- Constructing X_ParameterGroup\r\n        [NKD.Module.Business" +
                    "Objects.Store.X_ParameterGroup](T1.[X_ParameterGroup.ParameterGroupID], T1.[X_Pa" +
                    "rameterGroup.ParameterID], T1.[X_ParameterGroup.GroupID], T1.[X_ParameterGroup.V" +
                    "ersion], T1.[X_ParameterGroup.VersionAntecedentID], T1.[X_ParameterGroup.Version" +
                    "Certainty], T1.[X_ParameterGroup.VersionWorkflowInstanceID], T1.[X_ParameterGrou" +
                    "p.VersionUpdatedBy], T1.[X_ParameterGroup.VersionDeletedBy], T1.[X_ParameterGrou" +
                    "p.VersionOwnerContactID], T1.[X_ParameterGroup.VersionOwnerCompanyID], T1.[X_Par" +
                    "ameterGroup.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.Paramet" +
                    "erGroupID AS [X_ParameterGroup.ParameterGroupID], \r\n            T.ParameterID AS" +
                    " [X_ParameterGroup.ParameterID], \r\n            T.GroupID AS [X_ParameterGroup.Gr" +
                    "oupID], \r\n            T.Version AS [X_ParameterGroup.Version], \r\n            T.V" +
                    "ersionAntecedentID AS [X_ParameterGroup.VersionAntecedentID], \r\n            T.Ve" +
                    "rsionCertainty AS [X_ParameterGroup.VersionCertainty], \r\n            T.VersionWo" +
                    "rkflowInstanceID AS [X_ParameterGroup.VersionWorkflowInstanceID], \r\n            " +
                    "T.VersionUpdatedBy AS [X_ParameterGroup.VersionUpdatedBy], \r\n            T.Versi" +
                    "onDeletedBy AS [X_ParameterGroup.VersionDeletedBy], \r\n            T.VersionOwner" +
                    "ContactID AS [X_ParameterGroup.VersionOwnerContactID], \r\n            T.VersionOw" +
                    "nerCompanyID AS [X_ParameterGroup.VersionOwnerCompanyID], \r\n            T.Versio" +
                    "nUpdated AS [X_ParameterGroup.VersionUpdated], \r\n            True AS _from0\r\n   " +
                    "     FROM NKDC.ParameterGroups AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_PartCharacteristic
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView212()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_PartCharacteristic", "\r\n    SELECT VALUE -- Constructing X_PartCharacteristic\r\n        [NKD.Module.Busi" +
                    "nessObjects.Store.X_PartCharacteristic](T1.[X_PartCharacteristic.PartCharacteris" +
                    "ticID], T1.[X_PartCharacteristic.PartID], T1.[X_PartCharacteristic.Characteristi" +
                    "cID], T1.[X_PartCharacteristic.Value], T1.[X_PartCharacteristic.Version], T1.[X_" +
                    "PartCharacteristic.VersionAntecedentID], T1.[X_PartCharacteristic.VersionCertain" +
                    "ty], T1.[X_PartCharacteristic.VersionWorkflowInstanceID], T1.[X_PartCharacterist" +
                    "ic.VersionUpdatedBy], T1.[X_PartCharacteristic.VersionDeletedBy], T1.[X_PartChar" +
                    "acteristic.VersionOwnerContactID], T1.[X_PartCharacteristic.VersionOwnerCompanyI" +
                    "D], T1.[X_PartCharacteristic.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n    " +
                    "        T.PartCharacteristicID AS [X_PartCharacteristic.PartCharacteristicID], \r" +
                    "\n            T.PartID AS [X_PartCharacteristic.PartID], \r\n            T.Characte" +
                    "risticID AS [X_PartCharacteristic.CharacteristicID], \r\n            T.[Value] AS " +
                    "[X_PartCharacteristic.Value], \r\n            T.Version AS [X_PartCharacteristic.V" +
                    "ersion], \r\n            T.VersionAntecedentID AS [X_PartCharacteristic.VersionAnt" +
                    "ecedentID], \r\n            T.VersionCertainty AS [X_PartCharacteristic.VersionCer" +
                    "tainty], \r\n            T.VersionWorkflowInstanceID AS [X_PartCharacteristic.Vers" +
                    "ionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_PartCharacteristi" +
                    "c.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_PartCharacteristic.V" +
                    "ersionDeletedBy], \r\n            T.VersionOwnerContactID AS [X_PartCharacteristic" +
                    ".VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [X_PartCharact" +
                    "eristic.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [X_PartCharact" +
                    "eristic.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.PartCha" +
                    "racteristics AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_PointLoad
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView213()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2599);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_PointLoad\r\n        [NKD.Module.BusinessObje");
            viewString.Append("cts.Store.X_PointLoad](T1.[X_PointLoad.PointLoadID], T1.[X_PointLoad.HeaderID], ");
            viewString.Append("T1.[X_PointLoad.FromDepth], T1.[X_PointLoad.ToDepth], T1.[X_PointLoad.SampleNumb");
            viewString.Append("er], T1.[X_PointLoad.SampleLength], T1.[X_PointLoad.SampleStateID], T1.[X_PointL");
            viewString.Append("oad.SampleTypeID], T1.[X_PointLoad.TestSampleCode], T1.[X_PointLoad.TestSampleDe");
            viewString.Append("pth], T1.[X_PointLoad.PointLoadTestTypeID], T1.[X_PointLoad.PlatenSeparation], T");
            viewString.Append("1.[X_PointLoad.Width], T1.[X_PointLoad.FailureLoad], T1.[X_PointLoad.FailureMode");
            viewString.Append("ID], T1.[X_PointLoad.Comment], T1.[X_PointLoad.Version], T1.[X_PointLoad.Version");
            viewString.Append("AntecedentID], T1.[X_PointLoad.VersionCertainty], T1.[X_PointLoad.VersionWorkflo");
            viewString.Append("wInstanceID], T1.[X_PointLoad.VersionUpdatedBy], T1.[X_PointLoad.VersionDeletedB");
            viewString.Append("y], T1.[X_PointLoad.VersionOwnerContactID], T1.[X_PointLoad.VersionOwnerCompanyI");
            viewString.Append("D], T1.[X_PointLoad.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T");
            viewString.Append(".PointLoadID AS [X_PointLoad.PointLoadID], \r\n            T.HeaderID AS [X_PointL");
            viewString.Append("oad.HeaderID], \r\n            T.FromDepth AS [X_PointLoad.FromDepth], \r\n         ");
            viewString.Append("   T.ToDepth AS [X_PointLoad.ToDepth], \r\n            T.SampleNumber AS [X_PointL");
            viewString.Append("oad.SampleNumber], \r\n            T.SampleLength AS [X_PointLoad.SampleLength], \r");
            viewString.Append("\n            T.SampleStateID AS [X_PointLoad.SampleStateID], \r\n            T.Sam");
            viewString.Append("pleTypeID AS [X_PointLoad.SampleTypeID], \r\n            T.TestSampleCode AS [X_Po");
            viewString.Append("intLoad.TestSampleCode], \r\n            T.TestSampleDepth AS [X_PointLoad.TestSam");
            viewString.Append("pleDepth], \r\n            T.PointLoadTestTypeID AS [X_PointLoad.PointLoadTestType");
            viewString.Append("ID], \r\n            T.PlatenSeparation AS [X_PointLoad.PlatenSeparation], \r\n     ");
            viewString.Append("       T.Width AS [X_PointLoad.Width], \r\n            T.FailureLoad AS [X_PointLo");
            viewString.Append("ad.FailureLoad], \r\n            T.FailureModeID AS [X_PointLoad.FailureModeID], \r");
            viewString.Append("\n            T.Comment AS [X_PointLoad.Comment], \r\n            T.Version AS [X_P");
            viewString.Append("ointLoad.Version], \r\n            T.VersionAntecedentID AS [X_PointLoad.VersionAn");
            viewString.Append("tecedentID], \r\n            T.VersionCertainty AS [X_PointLoad.VersionCertainty],");
            viewString.Append(" \r\n            T.VersionWorkflowInstanceID AS [X_PointLoad.VersionWorkflowInstan");
            viewString.Append("ceID], \r\n            T.VersionUpdatedBy AS [X_PointLoad.VersionUpdatedBy], \r\n   ");
            viewString.Append("         T.VersionDeletedBy AS [X_PointLoad.VersionDeletedBy], \r\n            T.V");
            viewString.Append("ersionOwnerContactID AS [X_PointLoad.VersionOwnerContactID], \r\n            T.Ver");
            viewString.Append("sionOwnerCompanyID AS [X_PointLoad.VersionOwnerCompanyID], \r\n            T.Versi");
            viewString.Append("onUpdated AS [X_PointLoad.VersionUpdated], \r\n            True AS _from0\r\n       ");
            viewString.Append(" FROM NKDC.PointLoads AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_PointLoad", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_Project
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView214()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_Project", "\r\n    SELECT VALUE -- Constructing X_Project\r\n        [NKD.Module.BusinessObjects" +
                    ".Store.X_Project](T1.[X_Project.ProjectID], T1.[X_Project.ParentProjectID], T1.[" +
                    "X_Project.ProjectName], T1.[X_Project.ProjectCode], T1.[X_Project.ProjectTypeID]" +
                    ", T1.[X_Project.ClientCompanyID], T1.[X_Project.ClientContactID], T1.[X_Project." +
                    "TenementID], T1.[X_Project.Comment], T1.[X_Project.Version], T1.[X_Project.Versi" +
                    "onAntecedentID], T1.[X_Project.VersionCertainty], T1.[X_Project.VersionWorkflowI" +
                    "nstanceID], T1.[X_Project.VersionUpdatedBy], T1.[X_Project.VersionDeletedBy], T1" +
                    ".[X_Project.VersionOwnerContactID], T1.[X_Project.VersionOwnerCompanyID], T1.[X_" +
                    "Project.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.ProjectID A" +
                    "S [X_Project.ProjectID], \r\n            T.ParentProjectID AS [X_Project.ParentPro" +
                    "jectID], \r\n            T.ProjectName AS [X_Project.ProjectName], \r\n            T" +
                    ".ProjectCode AS [X_Project.ProjectCode], \r\n            T.ProjectTypeID AS [X_Pro" +
                    "ject.ProjectTypeID], \r\n            T.ClientCompanyID AS [X_Project.ClientCompany" +
                    "ID], \r\n            T.ClientContactID AS [X_Project.ClientContactID], \r\n         " +
                    "   T.TenementID AS [X_Project.TenementID], \r\n            T.Comment AS [X_Project" +
                    ".Comment], \r\n            T.Version AS [X_Project.Version], \r\n            T.Versi" +
                    "onAntecedentID AS [X_Project.VersionAntecedentID], \r\n            T.VersionCertai" +
                    "nty AS [X_Project.VersionCertainty], \r\n            T.VersionWorkflowInstanceID A" +
                    "S [X_Project.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_" +
                    "Project.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_Project.Versio" +
                    "nDeletedBy], \r\n            T.VersionOwnerContactID AS [X_Project.VersionOwnerCon" +
                    "tactID], \r\n            T.VersionOwnerCompanyID AS [X_Project.VersionOwnerCompany" +
                    "ID], \r\n            T.VersionUpdated AS [X_Project.VersionUpdated], \r\n           " +
                    " True AS _from0\r\n        FROM NKDC.Projects AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_ProjectDeliverable
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView215()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(4331);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_ProjectDeliverable\r\n        [NKD.Module.Bus");
            viewString.Append("inessObjects.Store.X_ProjectDeliverable](T1.[X_ProjectDeliverable.ProjectDeliver");
            viewString.Append("ableID], T1.[X_ProjectDeliverable.ProjectID], T1.[X_ProjectDeliverable.Sequence]");
            viewString.Append(", T1.[X_ProjectDeliverable.DeliverableName], T1.[X_ProjectDeliverable.WorkTypeID");
            viewString.Append("], T1.[X_ProjectDeliverable.MilestoneTaskID], T1.[X_ProjectDeliverable.Descripti");
            viewString.Append("on], T1.[X_ProjectDeliverable.InitiatedBy], T1.[X_ProjectDeliverable.Initiated],");
            viewString.Append(" T1.[X_ProjectDeliverable.ApprovedBy], T1.[X_ProjectDeliverable.Approved], T1.[X");
            viewString.Append("_ProjectDeliverable.EvidenceDescription], T1.[X_ProjectDeliverable.EvidenceFileD");
            viewString.Append("ataID], T1.[X_ProjectDeliverable.EvidenceContractID], T1.[X_ProjectDeliverable.E");
            viewString.Append("videnceContactID], T1.[X_ProjectDeliverable.EvidenceCreated], T1.[X_ProjectDeliv");
            viewString.Append("erable.ExpectedProRataUnits], T1.[X_ProjectDeliverable.ExpectedProRataPerUnitID]");
            viewString.Append(", T1.[X_ProjectDeliverable.ExpectedProRataValue], T1.[X_ProjectDeliverable.Estim");
            viewString.Append("atedDurationManHours], T1.[X_ProjectDeliverable.EstimatedCost], T1.[X_ProjectDel");
            viewString.Append("iverable.Due], T1.[X_ProjectDeliverable.HourlyPenalties], T1.[X_ProjectDeliverab");
            viewString.Append("le.TotalValue], T1.[X_ProjectDeliverable.Completed], T1.[X_ProjectDeliverable.Co");
            viewString.Append("mment], T1.[X_ProjectDeliverable.Version], T1.[X_ProjectDeliverable.VersionAntec");
            viewString.Append("edentID], T1.[X_ProjectDeliverable.VersionCertainty], T1.[X_ProjectDeliverable.V");
            viewString.Append("ersionWorkflowInstanceID], T1.[X_ProjectDeliverable.VersionUpdatedBy], T1.[X_Pro");
            viewString.Append("jectDeliverable.VersionDeletedBy], T1.[X_ProjectDeliverable.VersionOwnerContactI");
            viewString.Append("D], T1.[X_ProjectDeliverable.VersionOwnerCompanyID], T1.[X_ProjectDeliverable.Ve");
            viewString.Append("rsionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.ProjectDeliverableID ");
            viewString.Append("AS [X_ProjectDeliverable.ProjectDeliverableID], \r\n            T.ProjectID AS [X_");
            viewString.Append("ProjectDeliverable.ProjectID], \r\n            T.Sequence AS [X_ProjectDeliverable");
            viewString.Append(".Sequence], \r\n            T.DeliverableName AS [X_ProjectDeliverable.Deliverable");
            viewString.Append("Name], \r\n            T.WorkTypeID AS [X_ProjectDeliverable.WorkTypeID], \r\n      ");
            viewString.Append("      T.MilestoneTaskID AS [X_ProjectDeliverable.MilestoneTaskID], \r\n           ");
            viewString.Append(" T.Description AS [X_ProjectDeliverable.Description], \r\n            T.InitiatedB");
            viewString.Append("y AS [X_ProjectDeliverable.InitiatedBy], \r\n            T.Initiated AS [X_Project");
            viewString.Append("Deliverable.Initiated], \r\n            T.ApprovedBy AS [X_ProjectDeliverable.Appr");
            viewString.Append("ovedBy], \r\n            T.Approved AS [X_ProjectDeliverable.Approved], \r\n        ");
            viewString.Append("    T.EvidenceDescription AS [X_ProjectDeliverable.EvidenceDescription], \r\n     ");
            viewString.Append("       T.EvidenceFileDataID AS [X_ProjectDeliverable.EvidenceFileDataID], \r\n    ");
            viewString.Append("        T.EvidenceContractID AS [X_ProjectDeliverable.EvidenceContractID], \r\n   ");
            viewString.Append("         T.EvidenceContactID AS [X_ProjectDeliverable.EvidenceContactID], \r\n    ");
            viewString.Append("        T.EvidenceCreated AS [X_ProjectDeliverable.EvidenceCreated], \r\n         ");
            viewString.Append("   T.ExpectedProRataUnits AS [X_ProjectDeliverable.ExpectedProRataUnits], \r\n    ");
            viewString.Append("        T.ExpectedProRataPerUnitID AS [X_ProjectDeliverable.ExpectedProRataPerUn");
            viewString.Append("itID], \r\n            T.ExpectedProRataValue AS [X_ProjectDeliverable.ExpectedPro");
            viewString.Append("RataValue], \r\n            T.EstimatedDurationManHours AS [X_ProjectDeliverable.E");
            viewString.Append("stimatedDurationManHours], \r\n            T.EstimatedCost AS [X_ProjectDeliverabl");
            viewString.Append("e.EstimatedCost], \r\n            T.Due AS [X_ProjectDeliverable.Due], \r\n         ");
            viewString.Append("   T.HourlyPenalties AS [X_ProjectDeliverable.HourlyPenalties], \r\n            T.");
            viewString.Append("TotalValue AS [X_ProjectDeliverable.TotalValue], \r\n            T.Completed AS [X");
            viewString.Append("_ProjectDeliverable.Completed], \r\n            T.Comment AS [X_ProjectDeliverable");
            viewString.Append(".Comment], \r\n            T.Version AS [X_ProjectDeliverable.Version], \r\n        ");
            viewString.Append("    T.VersionAntecedentID AS [X_ProjectDeliverable.VersionAntecedentID], \r\n     ");
            viewString.Append("       T.VersionCertainty AS [X_ProjectDeliverable.VersionCertainty], \r\n        ");
            viewString.Append("    T.VersionWorkflowInstanceID AS [X_ProjectDeliverable.VersionWorkflowInstance");
            viewString.Append("ID], \r\n            T.VersionUpdatedBy AS [X_ProjectDeliverable.VersionUpdatedBy]");
            viewString.Append(", \r\n            T.VersionDeletedBy AS [X_ProjectDeliverable.VersionDeletedBy], \r");
            viewString.Append("\n            T.VersionOwnerContactID AS [X_ProjectDeliverable.VersionOwnerContac");
            viewString.Append("tID], \r\n            T.VersionOwnerCompanyID AS [X_ProjectDeliverable.VersionOwne");
            viewString.Append("rCompanyID], \r\n            T.VersionUpdated AS [X_ProjectDeliverable.VersionUpda");
            viewString.Append("ted], \r\n            True AS _from0\r\n        FROM NKDC.ProjectDeliverables AS T\r\n");
            viewString.Append("    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_ProjectDeliverable", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_ProjectPlan
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView216()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_ProjectPlan", "\r\n    SELECT VALUE -- Constructing X_ProjectPlan\r\n        [NKD.Module.BusinessObj" +
                    "ects.Store.X_ProjectPlan](T1.[X_ProjectPlan.ProjectPlanID], T1.[X_ProjectPlan.Pr" +
                    "ojectID], T1.[X_ProjectPlan.ParentProjectPlanID], T1.[X_ProjectPlan.ProjectPlanN" +
                    "ame], T1.[X_ProjectPlan.ResponsibleContactID], T1.[X_ProjectPlan.Comment], T1.[X" +
                    "_ProjectPlan.Version], T1.[X_ProjectPlan.VersionAntecedentID], T1.[X_ProjectPlan" +
                    ".VersionCertainty], T1.[X_ProjectPlan.VersionWorkflowInstanceID], T1.[X_ProjectP" +
                    "lan.VersionUpdatedBy], T1.[X_ProjectPlan.VersionDeletedBy], T1.[X_ProjectPlan.Ve" +
                    "rsionOwnerContactID], T1.[X_ProjectPlan.VersionOwnerCompanyID], T1.[X_ProjectPla" +
                    "n.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.ProjectPlanID AS " +
                    "[X_ProjectPlan.ProjectPlanID], \r\n            T.ProjectID AS [X_ProjectPlan.Proje" +
                    "ctID], \r\n            T.ParentProjectPlanID AS [X_ProjectPlan.ParentProjectPlanID" +
                    "], \r\n            T.ProjectPlanName AS [X_ProjectPlan.ProjectPlanName], \r\n       " +
                    "     T.ResponsibleContactID AS [X_ProjectPlan.ResponsibleContactID], \r\n         " +
                    "   T.Comment AS [X_ProjectPlan.Comment], \r\n            T.Version AS [X_ProjectPl" +
                    "an.Version], \r\n            T.VersionAntecedentID AS [X_ProjectPlan.VersionAntece" +
                    "dentID], \r\n            T.VersionCertainty AS [X_ProjectPlan.VersionCertainty], \r" +
                    "\n            T.VersionWorkflowInstanceID AS [X_ProjectPlan.VersionWorkflowInstan" +
                    "ceID], \r\n            T.VersionUpdatedBy AS [X_ProjectPlan.VersionUpdatedBy], \r\n " +
                    "           T.VersionDeletedBy AS [X_ProjectPlan.VersionDeletedBy], \r\n           " +
                    " T.VersionOwnerContactID AS [X_ProjectPlan.VersionOwnerContactID], \r\n           " +
                    " T.VersionOwnerCompanyID AS [X_ProjectPlan.VersionOwnerCompanyID], \r\n           " +
                    " T.VersionUpdated AS [X_ProjectPlan.VersionUpdated], \r\n            True AS _from" +
                    "0\r\n        FROM NKDC.ProjectPlans AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_ProjectPlanTask
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView217()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2520);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_ProjectPlanTask\r\n        [NKD.Module.Busine");
            viewString.Append("ssObjects.Store.X_ProjectPlanTask](T1.[X_ProjectPlanTask.ProjectPlanTaskID], T1.");
            viewString.Append("[X_ProjectPlanTask.ProjectPlanID], T1.[X_ProjectPlanTask.ParentProjectPlanTaskID");
            viewString.Append("], T1.[X_ProjectPlanTask.ProjectTaskName], T1.[X_ProjectPlanTask.TaskID], T1.[X_");
            viewString.Append("ProjectPlanTask.WorkTypeID], T1.[X_ProjectPlanTask.Priority], T1.[X_ProjectPlanT");
            viewString.Append("ask.Progress], T1.[X_ProjectPlanTask.StartDate], T1.[X_ProjectPlanTask.StopDate]");
            viewString.Append(", T1.[X_ProjectPlanTask.AllocatedManHours], T1.[X_ProjectPlanTask.Comment], T1.[");
            viewString.Append("X_ProjectPlanTask.Version], T1.[X_ProjectPlanTask.VersionAntecedentID], T1.[X_Pr");
            viewString.Append("ojectPlanTask.VersionCertainty], T1.[X_ProjectPlanTask.VersionWorkflowInstanceID");
            viewString.Append("], T1.[X_ProjectPlanTask.VersionUpdatedBy], T1.[X_ProjectPlanTask.VersionDeleted");
            viewString.Append("By], T1.[X_ProjectPlanTask.VersionOwnerContactID], T1.[X_ProjectPlanTask.Version");
            viewString.Append("OwnerCompanyID], T1.[X_ProjectPlanTask.VersionUpdated])\r\n    FROM (\r\n        SEL");
            viewString.Append("ECT \r\n            T.ProjectPlanTaskID AS [X_ProjectPlanTask.ProjectPlanTaskID], ");
            viewString.Append("\r\n            T.ProjectPlanID AS [X_ProjectPlanTask.ProjectPlanID], \r\n          ");
            viewString.Append("  T.ParentProjectPlanTaskID AS [X_ProjectPlanTask.ParentProjectPlanTaskID], \r\n  ");
            viewString.Append("          T.ProjectTaskName AS [X_ProjectPlanTask.ProjectTaskName], \r\n          ");
            viewString.Append("  T.TaskID AS [X_ProjectPlanTask.TaskID], \r\n            T.WorkTypeID AS [X_Proje");
            viewString.Append("ctPlanTask.WorkTypeID], \r\n            T.Priority AS [X_ProjectPlanTask.Priority]");
            viewString.Append(", \r\n            T.Progress AS [X_ProjectPlanTask.Progress], \r\n            T.Star");
            viewString.Append("tDate AS [X_ProjectPlanTask.StartDate], \r\n            T.StopDate AS [X_ProjectPl");
            viewString.Append("anTask.StopDate], \r\n            T.AllocatedManHours AS [X_ProjectPlanTask.Alloca");
            viewString.Append("tedManHours], \r\n            T.Comment AS [X_ProjectPlanTask.Comment], \r\n        ");
            viewString.Append("    T.Version AS [X_ProjectPlanTask.Version], \r\n            T.VersionAntecedentI");
            viewString.Append("D AS [X_ProjectPlanTask.VersionAntecedentID], \r\n            T.VersionCertainty A");
            viewString.Append("S [X_ProjectPlanTask.VersionCertainty], \r\n            T.VersionWorkflowInstanceI");
            viewString.Append("D AS [X_ProjectPlanTask.VersionWorkflowInstanceID], \r\n            T.VersionUpdat");
            viewString.Append("edBy AS [X_ProjectPlanTask.VersionUpdatedBy], \r\n            T.VersionDeletedBy A");
            viewString.Append("S [X_ProjectPlanTask.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS");
            viewString.Append(" [X_ProjectPlanTask.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyI");
            viewString.Append("D AS [X_ProjectPlanTask.VersionOwnerCompanyID], \r\n            T.VersionUpdated A");
            viewString.Append("S [X_ProjectPlanTask.VersionUpdated], \r\n            True AS _from0\r\n        FROM");
            viewString.Append(" NKDC.ProjectPlanTasks AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_ProjectPlanTask", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_ProjectPlanTaskComplianceResponse
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView218()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3069);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_ProjectPlanTaskComplianceResponse\r\n        ");
            viewString.Append("[NKD.Module.BusinessObjects.Store.X_ProjectPlanTaskComplianceResponse](T1.[X_Pro");
            viewString.Append("jectPlanTaskComplianceResponse.ProjectPlanTaskComplianceResponseID], T1.[X_Proje");
            viewString.Append("ctPlanTaskComplianceResponse.ProjectPlanTaskID], T1.[X_ProjectPlanTaskCompliance");
            viewString.Append("Response.ProjectPlanTaskResponseID], T1.[X_ProjectPlanTaskComplianceResponse.Com");
            viewString.Append("plianceWorkTypeID], T1.[X_ProjectPlanTaskComplianceResponse.ComplianceFormRespon");
            viewString.Append("se], T1.[X_ProjectPlanTaskComplianceResponse.CompletedBy], T1.[X_ProjectPlanTask");
            viewString.Append("ComplianceResponse.Completed], T1.[X_ProjectPlanTaskComplianceResponse.ApprovedB");
            viewString.Append("y], T1.[X_ProjectPlanTaskComplianceResponse.Approved], T1.[X_ProjectPlanTaskComp");
            viewString.Append("lianceResponse.Version], T1.[X_ProjectPlanTaskComplianceResponse.VersionAntecede");
            viewString.Append("ntID], T1.[X_ProjectPlanTaskComplianceResponse.VersionCertainty], T1.[X_ProjectP");
            viewString.Append("lanTaskComplianceResponse.VersionWorkflowInstanceID], T1.[X_ProjectPlanTaskCompl");
            viewString.Append("ianceResponse.VersionUpdatedBy], T1.[X_ProjectPlanTaskComplianceResponse.Version");
            viewString.Append("DeletedBy], T1.[X_ProjectPlanTaskComplianceResponse.VersionOwnerContactID], T1.[");
            viewString.Append("X_ProjectPlanTaskComplianceResponse.VersionOwnerCompanyID], T1.[X_ProjectPlanTas");
            viewString.Append("kComplianceResponse.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T");
            viewString.Append(".ProjectPlanTaskComplianceResponseID AS [X_ProjectPlanTaskComplianceResponse.Pro");
            viewString.Append("jectPlanTaskComplianceResponseID], \r\n            T.ProjectPlanTaskID AS [X_Proje");
            viewString.Append("ctPlanTaskComplianceResponse.ProjectPlanTaskID], \r\n            T.ProjectPlanTask");
            viewString.Append("ResponseID AS [X_ProjectPlanTaskComplianceResponse.ProjectPlanTaskResponseID], \r");
            viewString.Append("\n            T.ComplianceWorkTypeID AS [X_ProjectPlanTaskComplianceResponse.Comp");
            viewString.Append("lianceWorkTypeID], \r\n            T.ComplianceFormResponse AS [X_ProjectPlanTaskC");
            viewString.Append("omplianceResponse.ComplianceFormResponse], \r\n            T.CompletedBy AS [X_Pro");
            viewString.Append("jectPlanTaskComplianceResponse.CompletedBy], \r\n            T.Completed AS [X_Pro");
            viewString.Append("jectPlanTaskComplianceResponse.Completed], \r\n            T.ApprovedBy AS [X_Proj");
            viewString.Append("ectPlanTaskComplianceResponse.ApprovedBy], \r\n            T.Approved AS [X_Projec");
            viewString.Append("tPlanTaskComplianceResponse.Approved], \r\n            T.Version AS [X_ProjectPlan");
            viewString.Append("TaskComplianceResponse.Version], \r\n            T.VersionAntecedentID AS [X_Proje");
            viewString.Append("ctPlanTaskComplianceResponse.VersionAntecedentID], \r\n            T.VersionCertai");
            viewString.Append("nty AS [X_ProjectPlanTaskComplianceResponse.VersionCertainty], \r\n            T.V");
            viewString.Append("ersionWorkflowInstanceID AS [X_ProjectPlanTaskComplianceResponse.VersionWorkflow");
            viewString.Append("InstanceID], \r\n            T.VersionUpdatedBy AS [X_ProjectPlanTaskComplianceRes");
            viewString.Append("ponse.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_ProjectPlanTaskC");
            viewString.Append("omplianceResponse.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [X");
            viewString.Append("_ProjectPlanTaskComplianceResponse.VersionOwnerContactID], \r\n            T.Versi");
            viewString.Append("onOwnerCompanyID AS [X_ProjectPlanTaskComplianceResponse.VersionOwnerCompanyID],");
            viewString.Append(" \r\n            T.VersionUpdated AS [X_ProjectPlanTaskComplianceResponse.VersionU");
            viewString.Append("pdated], \r\n            True AS _from0\r\n        FROM NKDC.ProjectPlanTaskComplian");
            viewString.Append("ceResponses AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_ProjectPlanTaskComplianceResponse", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_ProjectPlanTaskData
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView219()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_ProjectPlanTaskData", "\r\n    SELECT VALUE -- Constructing X_ProjectPlanTaskData\r\n        [NKD.Module.Bus" +
                    "inessObjects.Store.X_ProjectPlanTaskData](T1.[X_ProjectPlanTaskData.ProjectPlanT" +
                    "askDataID], T1.[X_ProjectPlanTaskData.ParentProjectPlanTaskDataID], T1.[X_Projec" +
                    "tPlanTaskData.TableType], T1.[X_ProjectPlanTaskData.ReferenceID], T1.[X_ProjectP" +
                    "lanTaskData.ProjectPlanTaskID], T1.[X_ProjectPlanTaskData.Version], T1.[X_Projec" +
                    "tPlanTaskData.VersionAntecedentID], T1.[X_ProjectPlanTaskData.VersionCertainty]," +
                    " T1.[X_ProjectPlanTaskData.VersionWorkflowInstanceID], T1.[X_ProjectPlanTaskData" +
                    ".VersionUpdatedBy], T1.[X_ProjectPlanTaskData.VersionDeletedBy], T1.[X_ProjectPl" +
                    "anTaskData.VersionOwnerContactID], T1.[X_ProjectPlanTaskData.VersionOwnerCompany" +
                    "ID], T1.[X_ProjectPlanTaskData.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n  " +
                    "          T.ProjectPlanTaskDataID AS [X_ProjectPlanTaskData.ProjectPlanTaskDataI" +
                    "D], \r\n            T.ParentProjectPlanTaskDataID AS [X_ProjectPlanTaskData.Parent" +
                    "ProjectPlanTaskDataID], \r\n            T.TableType AS [X_ProjectPlanTaskData.Tabl" +
                    "eType], \r\n            T.ReferenceID AS [X_ProjectPlanTaskData.ReferenceID], \r\n  " +
                    "          T.ProjectPlanTaskID AS [X_ProjectPlanTaskData.ProjectPlanTaskID], \r\n  " +
                    "          T.Version AS [X_ProjectPlanTaskData.Version], \r\n            T.VersionA" +
                    "ntecedentID AS [X_ProjectPlanTaskData.VersionAntecedentID], \r\n            T.Vers" +
                    "ionCertainty AS [X_ProjectPlanTaskData.VersionCertainty], \r\n            T.Versio" +
                    "nWorkflowInstanceID AS [X_ProjectPlanTaskData.VersionWorkflowInstanceID], \r\n    " +
                    "        T.VersionUpdatedBy AS [X_ProjectPlanTaskData.VersionUpdatedBy], \r\n      " +
                    "      T.VersionDeletedBy AS [X_ProjectPlanTaskData.VersionDeletedBy], \r\n        " +
                    "    T.VersionOwnerContactID AS [X_ProjectPlanTaskData.VersionOwnerContactID], \r\n" +
                    "            T.VersionOwnerCompanyID AS [X_ProjectPlanTaskData.VersionOwnerCompan" +
                    "yID], \r\n            T.VersionUpdated AS [X_ProjectPlanTaskData.VersionUpdated], " +
                    "\r\n            True AS _from0\r\n        FROM NKDC.ProjectPlanTaskDatas AS T\r\n    )" +
                    " AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_ProjectPlanTaskResponse
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView220()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(4784);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_ProjectPlanTaskResponse\r\n        [NKD.Modul");
            viewString.Append("e.BusinessObjects.Store.X_ProjectPlanTaskResponse](T1.[X_ProjectPlanTaskResponse");
            viewString.Append(".ProjectPlanTaskResponseID], T1.[X_ProjectPlanTaskResponse.ProjectID], T1.[X_Pro");
            viewString.Append("jectPlanTaskResponse.ProjectPlanTaskID], T1.[X_ProjectPlanTaskResponse.Responsib");
            viewString.Append("leCompanyID], T1.[X_ProjectPlanTaskResponse.ResponsibleContactID], T1.[X_Project");
            viewString.Append("PlanTaskResponse.ActualTaskID], T1.[X_ProjectPlanTaskResponse.ActualWorkTypeID],");
            viewString.Append(" T1.[X_ProjectPlanTaskResponse.ActualGraphDataGroupID], T1.[X_ProjectPlanTaskRes");
            viewString.Append("ponse.ActualGraphDataID], T1.[X_ProjectPlanTaskResponse.Began], T1.[X_ProjectPla");
            viewString.Append("nTaskResponse.Completed], T1.[X_ProjectPlanTaskResponse.Hours], T1.[X_ProjectPla");
            viewString.Append("nTaskResponse.EstimatedProRataUnits], T1.[X_ProjectPlanTaskResponse.EstimatedPro");
            viewString.Append("RataCost], T1.[X_ProjectPlanTaskResponse.EstimatedValue], T1.[X_ProjectPlanTaskR");
            viewString.Append("esponse.EstimatedRevenue], T1.[X_ProjectPlanTaskResponse.PerformanceMetricParame");
            viewString.Append("terID], T1.[X_ProjectPlanTaskResponse.PerformanceMetricQuantity], T1.[X_ProjectP");
            viewString.Append("lanTaskResponse.PerformanceMetricContributedPercent], T1.[X_ProjectPlanTaskRespo");
            viewString.Append("nse.ApprovedProRataUnits], T1.[X_ProjectPlanTaskResponse.ApprovedProRataCost], T");
            viewString.Append("1.[X_ProjectPlanTaskResponse.Approved], T1.[X_ProjectPlanTaskResponse.ApprovedBy");
            viewString.Append("], T1.[X_ProjectPlanTaskResponse.Comments], T1.[X_ProjectPlanTaskResponse.Versio");
            viewString.Append("nPriority], T1.[X_ProjectPlanTaskResponse.Version], T1.[X_ProjectPlanTaskRespons");
            viewString.Append("e.VersionAntecedentID], T1.[X_ProjectPlanTaskResponse.VersionCertainty], T1.[X_P");
            viewString.Append("rojectPlanTaskResponse.VersionWorkflowInstanceID], T1.[X_ProjectPlanTaskResponse");
            viewString.Append(".VersionUpdatedBy], T1.[X_ProjectPlanTaskResponse.VersionDeletedBy], T1.[X_Proje");
            viewString.Append("ctPlanTaskResponse.VersionOwnerContactID], T1.[X_ProjectPlanTaskResponse.Version");
            viewString.Append("OwnerCompanyID], T1.[X_ProjectPlanTaskResponse.VersionUpdated])\r\n    FROM (\r\n   ");
            viewString.Append("     SELECT \r\n            T.ProjectPlanTaskResponseID AS [X_ProjectPlanTaskRespo");
            viewString.Append("nse.ProjectPlanTaskResponseID], \r\n            T.ProjectID AS [X_ProjectPlanTaskR");
            viewString.Append("esponse.ProjectID], \r\n            T.ProjectPlanTaskID AS [X_ProjectPlanTaskRespo");
            viewString.Append("nse.ProjectPlanTaskID], \r\n            T.ResponsibleCompanyID AS [X_ProjectPlanTa");
            viewString.Append("skResponse.ResponsibleCompanyID], \r\n            T.ResponsibleContactID AS [X_Pro");
            viewString.Append("jectPlanTaskResponse.ResponsibleContactID], \r\n            T.ActualTaskID AS [X_P");
            viewString.Append("rojectPlanTaskResponse.ActualTaskID], \r\n            T.ActualWorkTypeID AS [X_Pro");
            viewString.Append("jectPlanTaskResponse.ActualWorkTypeID], \r\n            T.ActualGraphDataGroupID A");
            viewString.Append("S [X_ProjectPlanTaskResponse.ActualGraphDataGroupID], \r\n            T.ActualGrap");
            viewString.Append("hDataID AS [X_ProjectPlanTaskResponse.ActualGraphDataID], \r\n            T.Began ");
            viewString.Append("AS [X_ProjectPlanTaskResponse.Began], \r\n            T.Completed AS [X_ProjectPla");
            viewString.Append("nTaskResponse.Completed], \r\n            T.Hours AS [X_ProjectPlanTaskResponse.Ho");
            viewString.Append("urs], \r\n            T.EstimatedProRataUnits AS [X_ProjectPlanTaskResponse.Estima");
            viewString.Append("tedProRataUnits], \r\n            T.EstimatedProRataCost AS [X_ProjectPlanTaskResp");
            viewString.Append("onse.EstimatedProRataCost], \r\n            T.EstimatedValue AS [X_ProjectPlanTask");
            viewString.Append("Response.EstimatedValue], \r\n            T.EstimatedRevenue AS [X_ProjectPlanTask");
            viewString.Append("Response.EstimatedRevenue], \r\n            T.PerformanceMetricParameterID AS [X_P");
            viewString.Append("rojectPlanTaskResponse.PerformanceMetricParameterID], \r\n            T.Performanc");
            viewString.Append("eMetricQuantity AS [X_ProjectPlanTaskResponse.PerformanceMetricQuantity], \r\n    ");
            viewString.Append("        T.PerformanceMetricContributedPercent AS [X_ProjectPlanTaskResponse.Perf");
            viewString.Append("ormanceMetricContributedPercent], \r\n            T.ApprovedProRataUnits AS [X_Pro");
            viewString.Append("jectPlanTaskResponse.ApprovedProRataUnits], \r\n            T.ApprovedProRataCost ");
            viewString.Append("AS [X_ProjectPlanTaskResponse.ApprovedProRataCost], \r\n            T.Approved AS ");
            viewString.Append("[X_ProjectPlanTaskResponse.Approved], \r\n            T.ApprovedBy AS [X_ProjectPl");
            viewString.Append("anTaskResponse.ApprovedBy], \r\n            T.Comments AS [X_ProjectPlanTaskRespon");
            viewString.Append("se.Comments], \r\n            T.VersionPriority AS [X_ProjectPlanTaskResponse.Vers");
            viewString.Append("ionPriority], \r\n            T.Version AS [X_ProjectPlanTaskResponse.Version], \r\n");
            viewString.Append("            T.VersionAntecedentID AS [X_ProjectPlanTaskResponse.VersionAnteceden");
            viewString.Append("tID], \r\n            T.VersionCertainty AS [X_ProjectPlanTaskResponse.VersionCert");
            viewString.Append("ainty], \r\n            T.VersionWorkflowInstanceID AS [X_ProjectPlanTaskResponse.");
            viewString.Append("VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_ProjectPlanTa");
            viewString.Append("skResponse.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_ProjectPlan");
            viewString.Append("TaskResponse.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [X_Proj");
            viewString.Append("ectPlanTaskResponse.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyI");
            viewString.Append("D AS [X_ProjectPlanTaskResponse.VersionOwnerCompanyID], \r\n            T.VersionU");
            viewString.Append("pdated AS [X_ProjectPlanTaskResponse.VersionUpdated], \r\n            True AS _fro");
            viewString.Append("m0\r\n        FROM NKDC.ProjectPlanTaskResponses AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_ProjectPlanTaskResponse", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_ProjectPlanTaskResponseData
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView221()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2327);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_ProjectPlanTaskResponseData\r\n        [NKD.M");
            viewString.Append("odule.BusinessObjects.Store.X_ProjectPlanTaskResponseData](T1.[X_ProjectPlanTask");
            viewString.Append("ResponseData.ProjectPlanTaskResponseDataID], T1.[X_ProjectPlanTaskResponseData.P");
            viewString.Append("arentProjectPlanTaskResponseDataID], T1.[X_ProjectPlanTaskResponseData.TableType");
            viewString.Append("], T1.[X_ProjectPlanTaskResponseData.ReferenceID], T1.[X_ProjectPlanTaskResponse");
            viewString.Append("Data.ProjectPlanTaskResponseID], T1.[X_ProjectPlanTaskResponseData.Version], T1.");
            viewString.Append("[X_ProjectPlanTaskResponseData.VersionAntecedentID], T1.[X_ProjectPlanTaskRespon");
            viewString.Append("seData.VersionCertainty], T1.[X_ProjectPlanTaskResponseData.VersionWorkflowInsta");
            viewString.Append("nceID], T1.[X_ProjectPlanTaskResponseData.VersionUpdatedBy], T1.[X_ProjectPlanTa");
            viewString.Append("skResponseData.VersionDeletedBy], T1.[X_ProjectPlanTaskResponseData.VersionOwner");
            viewString.Append("ContactID], T1.[X_ProjectPlanTaskResponseData.VersionOwnerCompanyID], T1.[X_Proj");
            viewString.Append("ectPlanTaskResponseData.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n         ");
            viewString.Append("   T.ProjectPlanTaskResponseDataID AS [X_ProjectPlanTaskResponseData.ProjectPlan");
            viewString.Append("TaskResponseDataID], \r\n            T.ParentProjectPlanTaskResponseDataID AS [X_P");
            viewString.Append("rojectPlanTaskResponseData.ParentProjectPlanTaskResponseDataID], \r\n            T");
            viewString.Append(".TableType AS [X_ProjectPlanTaskResponseData.TableType], \r\n            T.Referen");
            viewString.Append("ceID AS [X_ProjectPlanTaskResponseData.ReferenceID], \r\n            T.ProjectPlan");
            viewString.Append("TaskResponseID AS [X_ProjectPlanTaskResponseData.ProjectPlanTaskResponseID], \r\n ");
            viewString.Append("           T.Version AS [X_ProjectPlanTaskResponseData.Version], \r\n            T");
            viewString.Append(".VersionAntecedentID AS [X_ProjectPlanTaskResponseData.VersionAntecedentID], \r\n ");
            viewString.Append("           T.VersionCertainty AS [X_ProjectPlanTaskResponseData.VersionCertainty");
            viewString.Append("], \r\n            T.VersionWorkflowInstanceID AS [X_ProjectPlanTaskResponseData.V");
            viewString.Append("ersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_ProjectPlanTas");
            viewString.Append("kResponseData.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_ProjectP");
            viewString.Append("lanTaskResponseData.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS ");
            viewString.Append("[X_ProjectPlanTaskResponseData.VersionOwnerContactID], \r\n            T.VersionOw");
            viewString.Append("nerCompanyID AS [X_ProjectPlanTaskResponseData.VersionOwnerCompanyID], \r\n       ");
            viewString.Append("     T.VersionUpdated AS [X_ProjectPlanTaskResponseData.VersionUpdated], \r\n     ");
            viewString.Append("       True AS _from0\r\n        FROM NKDC.ProjectPlanTaskResponseDatas AS T\r\n    ");
            viewString.Append(") AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_ProjectPlanTaskResponseData", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_ProjectPlanTaskWorker
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView222()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2075);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_ProjectPlanTaskWorker\r\n        [NKD.Module.");
            viewString.Append("BusinessObjects.Store.X_ProjectPlanTaskWorker](T1.[X_ProjectPlanTaskWorker.Proje");
            viewString.Append("ctPlanTaskWorkerID], T1.[X_ProjectPlanTaskWorker.ProjectPlanTaskID], T1.[X_Proje");
            viewString.Append("ctPlanTaskWorker.ExperienceID], T1.[X_ProjectPlanTaskWorker.AvailableFromDate], ");
            viewString.Append("T1.[X_ProjectPlanTaskWorker.AvailableUntilDate], T1.[X_ProjectPlanTaskWorker.Ver");
            viewString.Append("sion], T1.[X_ProjectPlanTaskWorker.VersionAntecedentID], T1.[X_ProjectPlanTaskWo");
            viewString.Append("rker.VersionCertainty], T1.[X_ProjectPlanTaskWorker.VersionWorkflowInstanceID], ");
            viewString.Append("T1.[X_ProjectPlanTaskWorker.VersionUpdatedBy], T1.[X_ProjectPlanTaskWorker.Versi");
            viewString.Append("onDeletedBy], T1.[X_ProjectPlanTaskWorker.VersionOwnerContactID], T1.[X_ProjectP");
            viewString.Append("lanTaskWorker.VersionOwnerCompanyID], T1.[X_ProjectPlanTaskWorker.VersionUpdated");
            viewString.Append("])\r\n    FROM (\r\n        SELECT \r\n            T.ProjectPlanTaskWorkerID AS [X_Pro");
            viewString.Append("jectPlanTaskWorker.ProjectPlanTaskWorkerID], \r\n            T.ProjectPlanTaskID A");
            viewString.Append("S [X_ProjectPlanTaskWorker.ProjectPlanTaskID], \r\n            T.ExperienceID AS [");
            viewString.Append("X_ProjectPlanTaskWorker.ExperienceID], \r\n            T.AvailableFromDate AS [X_P");
            viewString.Append("rojectPlanTaskWorker.AvailableFromDate], \r\n            T.AvailableUntilDate AS [");
            viewString.Append("X_ProjectPlanTaskWorker.AvailableUntilDate], \r\n            T.Version AS [X_Proje");
            viewString.Append("ctPlanTaskWorker.Version], \r\n            T.VersionAntecedentID AS [X_ProjectPlan");
            viewString.Append("TaskWorker.VersionAntecedentID], \r\n            T.VersionCertainty AS [X_ProjectP");
            viewString.Append("lanTaskWorker.VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [X");
            viewString.Append("_ProjectPlanTaskWorker.VersionWorkflowInstanceID], \r\n            T.VersionUpdate");
            viewString.Append("dBy AS [X_ProjectPlanTaskWorker.VersionUpdatedBy], \r\n            T.VersionDelete");
            viewString.Append("dBy AS [X_ProjectPlanTaskWorker.VersionDeletedBy], \r\n            T.VersionOwnerC");
            viewString.Append("ontactID AS [X_ProjectPlanTaskWorker.VersionOwnerContactID], \r\n            T.Ver");
            viewString.Append("sionOwnerCompanyID AS [X_ProjectPlanTaskWorker.VersionOwnerCompanyID], \r\n       ");
            viewString.Append("     T.VersionUpdated AS [X_ProjectPlanTaskWorker.VersionUpdated], \r\n           ");
            viewString.Append(" True AS _from0\r\n        FROM NKDC.ProjectPlanTaskWorkers AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_ProjectPlanTaskWorker", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_ProspectusProject
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView223()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3103);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_ProspectusProject\r\n        [NKD.Module.Busi");
            viewString.Append("nessObjects.Store.X_ProspectusProject](T1.[X_ProspectusProject.ProspectusProject");
            viewString.Append("ID], T1.[X_ProspectusProject.ProjectID], T1.[X_ProspectusProject.ProspectusProje");
            viewString.Append("ctName], T1.[X_ProspectusProject.CompanyName], T1.[X_ProspectusProject.CompanyID");
            viewString.Append("], T1.[X_ProspectusProject.Geologist], T1.[X_ProspectusProject.GeologistContactI");
            viewString.Append("D], T1.[X_ProspectusProject.GeologyCompanyID], T1.[X_ProspectusProject.ListDate]");
            viewString.Append(", T1.[X_ProspectusProject.Cost], T1.[X_ProspectusProject.CurrencyID], T1.[X_Pros");
            viewString.Append("pectusProject.Pages], T1.[X_ProspectusProject.CountryID], T1.[X_ProspectusProjec");
            viewString.Append("t.CountryStateID], T1.[X_ProspectusProject.Place], T1.[X_ProspectusProject.Tenem");
            viewString.Append("entID], T1.[X_ProspectusProject.ProvinceID], T1.[X_ProspectusProject.Version], T");
            viewString.Append("1.[X_ProspectusProject.VersionAntecedentID], T1.[X_ProspectusProject.VersionCert");
            viewString.Append("ainty], T1.[X_ProspectusProject.VersionWorkflowInstanceID], T1.[X_ProspectusProj");
            viewString.Append("ect.VersionUpdatedBy], T1.[X_ProspectusProject.VersionDeletedBy], T1.[X_Prospect");
            viewString.Append("usProject.VersionOwnerContactID], T1.[X_ProspectusProject.VersionOwnerCompanyID]");
            viewString.Append(", T1.[X_ProspectusProject.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n       ");
            viewString.Append("     T.ProspectusProjectID AS [X_ProspectusProject.ProspectusProjectID], \r\n     ");
            viewString.Append("       T.ProjectID AS [X_ProspectusProject.ProjectID], \r\n            T.Prospectu");
            viewString.Append("sProjectName AS [X_ProspectusProject.ProspectusProjectName], \r\n            T.Com");
            viewString.Append("panyName AS [X_ProspectusProject.CompanyName], \r\n            T.CompanyID AS [X_P");
            viewString.Append("rospectusProject.CompanyID], \r\n            T.Geologist AS [X_ProspectusProject.G");
            viewString.Append("eologist], \r\n            T.GeologistContactID AS [X_ProspectusProject.GeologistC");
            viewString.Append("ontactID], \r\n            T.GeologyCompanyID AS [X_ProspectusProject.GeologyCompa");
            viewString.Append("nyID], \r\n            T.ListDate AS [X_ProspectusProject.ListDate], \r\n           ");
            viewString.Append(" T.Cost AS [X_ProspectusProject.Cost], \r\n            T.CurrencyID AS [X_Prospect");
            viewString.Append("usProject.CurrencyID], \r\n            T.Pages AS [X_ProspectusProject.Pages], \r\n ");
            viewString.Append("           T.CountryID AS [X_ProspectusProject.CountryID], \r\n            T.Count");
            viewString.Append("ryStateID AS [X_ProspectusProject.CountryStateID], \r\n            T.Place AS [X_P");
            viewString.Append("rospectusProject.Place], \r\n            T.TenementID AS [X_ProspectusProject.Tene");
            viewString.Append("mentID], \r\n            T.ProvinceID AS [X_ProspectusProject.ProvinceID], \r\n     ");
            viewString.Append("       T.Version AS [X_ProspectusProject.Version], \r\n            T.VersionAntece");
            viewString.Append("dentID AS [X_ProspectusProject.VersionAntecedentID], \r\n            T.VersionCert");
            viewString.Append("ainty AS [X_ProspectusProject.VersionCertainty], \r\n            T.VersionWorkflow");
            viewString.Append("InstanceID AS [X_ProspectusProject.VersionWorkflowInstanceID], \r\n            T.V");
            viewString.Append("ersionUpdatedBy AS [X_ProspectusProject.VersionUpdatedBy], \r\n            T.Versi");
            viewString.Append("onDeletedBy AS [X_ProspectusProject.VersionDeletedBy], \r\n            T.VersionOw");
            viewString.Append("nerContactID AS [X_ProspectusProject.VersionOwnerContactID], \r\n            T.Ver");
            viewString.Append("sionOwnerCompanyID AS [X_ProspectusProject.VersionOwnerCompanyID], \r\n           ");
            viewString.Append(" T.VersionUpdated AS [X_ProspectusProject.VersionUpdated], \r\n            True AS");
            viewString.Append(" _from0\r\n        FROM NKDC.ProspectusProjects AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_ProspectusProject", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_ProspectusProjectCommodity
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView224()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_ProspectusProjectCommodity", "\r\n    SELECT VALUE -- Constructing X_ProspectusProjectCommodity\r\n        [NKD.Mod" +
                    "ule.BusinessObjects.Store.X_ProspectusProjectCommodity](T1.[X_ProspectusProjectC" +
                    "ommodity.ProspectusProjectCommodityID], T1.[X_ProspectusProjectCommodity.Prospec" +
                    "tusProjectID], T1.[X_ProspectusProjectCommodity.CommodityID], T1.[X_ProspectusPr" +
                    "ojectCommodity.Version], T1.[X_ProspectusProjectCommodity.VersionAntecedentID], " +
                    "T1.[X_ProspectusProjectCommodity.VersionCertainty], T1.[X_ProspectusProjectCommo" +
                    "dity.VersionWorkflowInstanceID], T1.[X_ProspectusProjectCommodity.VersionUpdated" +
                    "By], T1.[X_ProspectusProjectCommodity.VersionDeletedBy], T1.[X_ProspectusProject" +
                    "Commodity.VersionOwnerContactID], T1.[X_ProspectusProjectCommodity.VersionOwnerC" +
                    "ompanyID], T1.[X_ProspectusProjectCommodity.VersionUpdated])\r\n    FROM (\r\n      " +
                    "  SELECT \r\n            T.ProspectusProjectCommodityID AS [X_ProspectusProjectCom" +
                    "modity.ProspectusProjectCommodityID], \r\n            T.ProspectusProjectID AS [X_" +
                    "ProspectusProjectCommodity.ProspectusProjectID], \r\n            T.CommodityID AS " +
                    "[X_ProspectusProjectCommodity.CommodityID], \r\n            T.Version AS [X_Prospe" +
                    "ctusProjectCommodity.Version], \r\n            T.VersionAntecedentID AS [X_Prospec" +
                    "tusProjectCommodity.VersionAntecedentID], \r\n            T.VersionCertainty AS [X" +
                    "_ProspectusProjectCommodity.VersionCertainty], \r\n            T.VersionWorkflowIn" +
                    "stanceID AS [X_ProspectusProjectCommodity.VersionWorkflowInstanceID], \r\n        " +
                    "    T.VersionUpdatedBy AS [X_ProspectusProjectCommodity.VersionUpdatedBy], \r\n   " +
                    "         T.VersionDeletedBy AS [X_ProspectusProjectCommodity.VersionDeletedBy], " +
                    "\r\n            T.VersionOwnerContactID AS [X_ProspectusProjectCommodity.VersionOw" +
                    "nerContactID], \r\n            T.VersionOwnerCompanyID AS [X_ProspectusProjectComm" +
                    "odity.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [X_ProspectusPro" +
                    "jectCommodity.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.P" +
                    "rospectusProjectCommodities AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_Province
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView225()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2500);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_Province\r\n        [NKD.Module.BusinessObjec");
            viewString.Append("ts.Store.X_Province](T1.[X_Province.ProvinceID], T1.[X_Province.ProvinceTypeID],");
            viewString.Append(" T1.[X_Province.DefaultProvinceName], T1.[X_Province.ProvinceCode], T1.[X_Provin");
            viewString.Append("ce.ProvinceGeography], T1.[X_Province.MarkerLatitudeWGS84], T1.[X_Province.Marke");
            viewString.Append("rLongitudeWGS84], T1.[X_Province.ProvinceGroupID], T1.[X_Province.CountryID], T1");
            viewString.Append(".[X_Province.CountryStateID], T1.[X_Province.DefaultCulture], T1.[X_Province.Own");
            viewString.Append("erCompanyID], T1.[X_Province.ResponsibleContactID], T1.[X_Province.Comment], T1.");
            viewString.Append("[X_Province.Version], T1.[X_Province.VersionAntecedentID], T1.[X_Province.Versio");
            viewString.Append("nCertainty], T1.[X_Province.VersionWorkflowInstanceID], T1.[X_Province.VersionUp");
            viewString.Append("datedBy], T1.[X_Province.VersionDeletedBy], T1.[X_Province.VersionOwnerContactID");
            viewString.Append("], T1.[X_Province.VersionOwnerCompanyID], T1.[X_Province.VersionUpdated])\r\n    F");
            viewString.Append("ROM (\r\n        SELECT \r\n            T.ProvinceID AS [X_Province.ProvinceID], \r\n ");
            viewString.Append("           T.ProvinceTypeID AS [X_Province.ProvinceTypeID], \r\n            T.Defa");
            viewString.Append("ultProvinceName AS [X_Province.DefaultProvinceName], \r\n            T.ProvinceCod");
            viewString.Append("e AS [X_Province.ProvinceCode], \r\n            T.ProvinceGeography AS [X_Province");
            viewString.Append(".ProvinceGeography], \r\n            T.MarkerLatitudeWGS84 AS [X_Province.MarkerLa");
            viewString.Append("titudeWGS84], \r\n            T.MarkerLongitudeWGS84 AS [X_Province.MarkerLongitud");
            viewString.Append("eWGS84], \r\n            T.ProvinceGroupID AS [X_Province.ProvinceGroupID], \r\n    ");
            viewString.Append("        T.CountryID AS [X_Province.CountryID], \r\n            T.CountryStateID AS");
            viewString.Append(" [X_Province.CountryStateID], \r\n            T.DefaultCulture AS [X_Province.Defa");
            viewString.Append("ultCulture], \r\n            T.OwnerCompanyID AS [X_Province.OwnerCompanyID], \r\n  ");
            viewString.Append("          T.ResponsibleContactID AS [X_Province.ResponsibleContactID], \r\n       ");
            viewString.Append("     T.Comment AS [X_Province.Comment], \r\n            T.Version AS [X_Province.V");
            viewString.Append("ersion], \r\n            T.VersionAntecedentID AS [X_Province.VersionAntecedentID]");
            viewString.Append(", \r\n            T.VersionCertainty AS [X_Province.VersionCertainty], \r\n         ");
            viewString.Append("   T.VersionWorkflowInstanceID AS [X_Province.VersionWorkflowInstanceID], \r\n    ");
            viewString.Append("        T.VersionUpdatedBy AS [X_Province.VersionUpdatedBy], \r\n            T.Ver");
            viewString.Append("sionDeletedBy AS [X_Province.VersionDeletedBy], \r\n            T.VersionOwnerCont");
            viewString.Append("actID AS [X_Province.VersionOwnerContactID], \r\n            T.VersionOwnerCompany");
            viewString.Append("ID AS [X_Province.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [X_P");
            viewString.Append("rovince.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.Provinc");
            viewString.Append("es AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_Province", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_ProvinceAlias
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView226()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_ProvinceAlias", "\r\n    SELECT VALUE -- Constructing X_ProvinceAlias\r\n        [NKD.Module.BusinessO" +
                    "bjects.Store.X_ProvinceAlias](T1.[X_ProvinceAlias.ProvinceAliasID], T1.[X_Provin" +
                    "ceAlias.ProvinceID], T1.[X_ProvinceAlias.Alias], T1.[X_ProvinceAlias.Culture], T" +
                    "1.[X_ProvinceAlias.Priority], T1.[X_ProvinceAlias.Version], T1.[X_ProvinceAlias." +
                    "VersionAntecedentID], T1.[X_ProvinceAlias.VersionCertainty], T1.[X_ProvinceAlias" +
                    ".VersionWorkflowInstanceID], T1.[X_ProvinceAlias.VersionUpdatedBy], T1.[X_Provin" +
                    "ceAlias.VersionDeletedBy], T1.[X_ProvinceAlias.VersionOwnerContactID], T1.[X_Pro" +
                    "vinceAlias.VersionOwnerCompanyID], T1.[X_ProvinceAlias.VersionUpdated])\r\n    FRO" +
                    "M (\r\n        SELECT \r\n            T.ProvinceAliasID AS [X_ProvinceAlias.Province" +
                    "AliasID], \r\n            T.ProvinceID AS [X_ProvinceAlias.ProvinceID], \r\n        " +
                    "    T.Alias AS [X_ProvinceAlias.Alias], \r\n            T.Culture AS [X_ProvinceAl" +
                    "ias.Culture], \r\n            T.Priority AS [X_ProvinceAlias.Priority], \r\n        " +
                    "    T.Version AS [X_ProvinceAlias.Version], \r\n            T.VersionAntecedentID " +
                    "AS [X_ProvinceAlias.VersionAntecedentID], \r\n            T.VersionCertainty AS [X" +
                    "_ProvinceAlias.VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [" +
                    "X_ProvinceAlias.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS " +
                    "[X_ProvinceAlias.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_Provi" +
                    "nceAlias.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [X_Province" +
                    "Alias.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [X_Provin" +
                    "ceAlias.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [X_ProvinceAli" +
                    "as.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.ProvinceAlia" +
                    "s AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_ProvinceData
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView227()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_ProvinceData", "\r\n    SELECT VALUE -- Constructing X_ProvinceData\r\n        [NKD.Module.BusinessOb" +
                    "jects.Store.X_ProvinceData](T1.[X_ProvinceData.ProvinceDataID], T1.[X_ProvinceDa" +
                    "ta.ParentProvinceDataID], T1.[X_ProvinceData.TableType], T1.[X_ProvinceData.Refe" +
                    "renceID], T1.[X_ProvinceData.ProvinceID], T1.[X_ProvinceData.Version], T1.[X_Pro" +
                    "vinceData.VersionAntecedentID], T1.[X_ProvinceData.VersionCertainty], T1.[X_Prov" +
                    "inceData.VersionWorkflowInstanceID], T1.[X_ProvinceData.VersionUpdatedBy], T1.[X" +
                    "_ProvinceData.VersionDeletedBy], T1.[X_ProvinceData.VersionOwnerContactID], T1.[" +
                    "X_ProvinceData.VersionOwnerCompanyID], T1.[X_ProvinceData.VersionUpdated])\r\n    " +
                    "FROM (\r\n        SELECT \r\n            T.ProvinceDataID AS [X_ProvinceData.Provinc" +
                    "eDataID], \r\n            T.ParentProvinceDataID AS [X_ProvinceData.ParentProvince" +
                    "DataID], \r\n            T.TableType AS [X_ProvinceData.TableType], \r\n            " +
                    "T.ReferenceID AS [X_ProvinceData.ReferenceID], \r\n            T.ProvinceID AS [X_" +
                    "ProvinceData.ProvinceID], \r\n            T.Version AS [X_ProvinceData.Version], \r" +
                    "\n            T.VersionAntecedentID AS [X_ProvinceData.VersionAntecedentID], \r\n  " +
                    "          T.VersionCertainty AS [X_ProvinceData.VersionCertainty], \r\n           " +
                    " T.VersionWorkflowInstanceID AS [X_ProvinceData.VersionWorkflowInstanceID], \r\n  " +
                    "          T.VersionUpdatedBy AS [X_ProvinceData.VersionUpdatedBy], \r\n           " +
                    " T.VersionDeletedBy AS [X_ProvinceData.VersionDeletedBy], \r\n            T.Versio" +
                    "nOwnerContactID AS [X_ProvinceData.VersionOwnerContactID], \r\n            T.Versi" +
                    "onOwnerCompanyID AS [X_ProvinceData.VersionOwnerCompanyID], \r\n            T.Vers" +
                    "ionUpdated AS [X_ProvinceData.VersionUpdated], \r\n            True AS _from0\r\n   " +
                    "     FROM NKDC.ProvinceDatas AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_ProvinceRelation
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView228()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_ProvinceRelation", "\r\n    SELECT VALUE -- Constructing X_ProvinceRelation\r\n        [NKD.Module.Busine" +
                    "ssObjects.Store.X_ProvinceRelation](T1.[X_ProvinceRelation.ProvinceRelationID], " +
                    "T1.[X_ProvinceRelation.OriginalProvinceID], T1.[X_ProvinceRelation.RelatedProvin" +
                    "ceID], T1.[X_ProvinceRelation.RelationTypeID], T1.[X_ProvinceRelation.Related], " +
                    "T1.[X_ProvinceRelation.Version], T1.[X_ProvinceRelation.VersionAntecedentID], T1" +
                    ".[X_ProvinceRelation.VersionCertainty], T1.[X_ProvinceRelation.VersionWorkflowIn" +
                    "stanceID], T1.[X_ProvinceRelation.VersionUpdatedBy], T1.[X_ProvinceRelation.Vers" +
                    "ionDeletedBy], T1.[X_ProvinceRelation.VersionOwnerContactID], T1.[X_ProvinceRela" +
                    "tion.VersionOwnerCompanyID], T1.[X_ProvinceRelation.VersionUpdated])\r\n    FROM (" +
                    "\r\n        SELECT \r\n            T.ProvinceRelationID AS [X_ProvinceRelation.Provi" +
                    "nceRelationID], \r\n            T.OriginalProvinceID AS [X_ProvinceRelation.Origin" +
                    "alProvinceID], \r\n            T.RelatedProvinceID AS [X_ProvinceRelation.RelatedP" +
                    "rovinceID], \r\n            T.RelationTypeID AS [X_ProvinceRelation.RelationTypeID" +
                    "], \r\n            T.Related AS [X_ProvinceRelation.Related], \r\n            T.Vers" +
                    "ion AS [X_ProvinceRelation.Version], \r\n            T.VersionAntecedentID AS [X_P" +
                    "rovinceRelation.VersionAntecedentID], \r\n            T.VersionCertainty AS [X_Pro" +
                    "vinceRelation.VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [X" +
                    "_ProvinceRelation.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy A" +
                    "S [X_ProvinceRelation.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_" +
                    "ProvinceRelation.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [X_" +
                    "ProvinceRelation.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID A" +
                    "S [X_ProvinceRelation.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS " +
                    "[X_ProvinceRelation.VersionUpdated], \r\n            True AS _from0\r\n        FROM " +
                    "NKDC.ProvinceRelations AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_Recovery
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView229()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2157);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_Recovery\r\n        [NKD.Module.BusinessObjec");
            viewString.Append("ts.Store.X_Recovery](T1.[X_Recovery.RecoveryID], T1.[X_Recovery.HeaderID], T1.[X");
            viewString.Append("_Recovery.FromDepth], T1.[X_Recovery.ToDepth], T1.[X_Recovery.Advance], T1.[X_Re");
            viewString.Append("covery.CoreLoss], T1.[X_Recovery.CoreRecovered], T1.[X_Recovery.Solid], T1.[X_Re");
            viewString.Append("covery.Total], T1.[X_Recovery.Confident], T1.[X_Recovery.DrillSizeID], T1.[X_Rec");
            viewString.Append("overy.CoreSize], T1.[X_Recovery.Comment], T1.[X_Recovery.Version], T1.[X_Recover");
            viewString.Append("y.VersionAntecedentID], T1.[X_Recovery.VersionCertainty], T1.[X_Recovery.Version");
            viewString.Append("WorkflowInstanceID], T1.[X_Recovery.VersionUpdatedBy], T1.[X_Recovery.VersionDel");
            viewString.Append("etedBy], T1.[X_Recovery.VersionOwnerContactID], T1.[X_Recovery.VersionOwnerCompa");
            viewString.Append("nyID], T1.[X_Recovery.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n           ");
            viewString.Append(" T.RecoveryID AS [X_Recovery.RecoveryID], \r\n            T.HeaderID AS [X_Recover");
            viewString.Append("y.HeaderID], \r\n            T.FromDepth AS [X_Recovery.FromDepth], \r\n            ");
            viewString.Append("T.ToDepth AS [X_Recovery.ToDepth], \r\n            T.Advance AS [X_Recovery.Advanc");
            viewString.Append("e], \r\n            T.CoreLoss AS [X_Recovery.CoreLoss], \r\n            T.CoreRecov");
            viewString.Append("ered AS [X_Recovery.CoreRecovered], \r\n            T.Solid AS [X_Recovery.Solid],");
            viewString.Append(" \r\n            T.Total AS [X_Recovery.Total], \r\n            T.Confident AS [X_Re");
            viewString.Append("covery.Confident], \r\n            T.DrillSizeID AS [X_Recovery.DrillSizeID], \r\n  ");
            viewString.Append("          T.CoreSize AS [X_Recovery.CoreSize], \r\n            T.Comment AS [X_Rec");
            viewString.Append("overy.Comment], \r\n            T.Version AS [X_Recovery.Version], \r\n            T");
            viewString.Append(".VersionAntecedentID AS [X_Recovery.VersionAntecedentID], \r\n            T.Versio");
            viewString.Append("nCertainty AS [X_Recovery.VersionCertainty], \r\n            T.VersionWorkflowInst");
            viewString.Append("anceID AS [X_Recovery.VersionWorkflowInstanceID], \r\n            T.VersionUpdated");
            viewString.Append("By AS [X_Recovery.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_Reco");
            viewString.Append("very.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [X_Recovery.Ver");
            viewString.Append("sionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [X_Recovery.Versio");
            viewString.Append("nOwnerCompanyID], \r\n            T.VersionUpdated AS [X_Recovery.VersionUpdated],");
            viewString.Append(" \r\n            True AS _from0\r\n        FROM NKDC.Recoveries AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_Recovery", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_Sample
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView230()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2152);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_Sample\r\n        [NKD.Module.BusinessObjects");
            viewString.Append(".Store.X_Sample](T1.[X_Sample.SampleID], T1.[X_Sample.HeaderID], T1.[X_Sample.Sa");
            viewString.Append("mpleCategoryID], T1.[X_Sample.SampleStateID], T1.[X_Sample.SampleTypeID], T1.[X_");
            viewString.Append("Sample.SampleName], T1.[X_Sample.SampleNumber], T1.[X_Sample.SampleTaken], T1.[X");
            viewString.Append("_Sample.FromDepth], T1.[X_Sample.ToDepth], T1.[X_Sample.SampleMassKg], T1.[X_Sam");
            viewString.Append("ple.DryMassKg], T1.[X_Sample.LocationID], T1.[X_Sample.Version], T1.[X_Sample.Ve");
            viewString.Append("rsionAntecedentID], T1.[X_Sample.VersionCertainty], T1.[X_Sample.VersionWorkflow");
            viewString.Append("InstanceID], T1.[X_Sample.VersionUpdatedBy], T1.[X_Sample.VersionDeletedBy], T1.");
            viewString.Append("[X_Sample.VersionOwnerContactID], T1.[X_Sample.VersionOwnerCompanyID], T1.[X_Sam");
            viewString.Append("ple.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.SampleID AS [X_");
            viewString.Append("Sample.SampleID], \r\n            T.HeaderID AS [X_Sample.HeaderID], \r\n           ");
            viewString.Append(" T.SampleCategoryID AS [X_Sample.SampleCategoryID], \r\n            T.SampleStateI");
            viewString.Append("D AS [X_Sample.SampleStateID], \r\n            T.SampleTypeID AS [X_Sample.SampleT");
            viewString.Append("ypeID], \r\n            T.SampleName AS [X_Sample.SampleName], \r\n            T.Sam");
            viewString.Append("pleNumber AS [X_Sample.SampleNumber], \r\n            T.SampleTaken AS [X_Sample.S");
            viewString.Append("ampleTaken], \r\n            T.FromDepth AS [X_Sample.FromDepth], \r\n            T.");
            viewString.Append("ToDepth AS [X_Sample.ToDepth], \r\n            T.SampleMassKg AS [X_Sample.SampleM");
            viewString.Append("assKg], \r\n            T.DryMassKg AS [X_Sample.DryMassKg], \r\n            T.Locat");
            viewString.Append("ionID AS [X_Sample.LocationID], \r\n            T.Version AS [X_Sample.Version], \r");
            viewString.Append("\n            T.VersionAntecedentID AS [X_Sample.VersionAntecedentID], \r\n        ");
            viewString.Append("    T.VersionCertainty AS [X_Sample.VersionCertainty], \r\n            T.VersionWo");
            viewString.Append("rkflowInstanceID AS [X_Sample.VersionWorkflowInstanceID], \r\n            T.Versio");
            viewString.Append("nUpdatedBy AS [X_Sample.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [");
            viewString.Append("X_Sample.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [X_Sample.V");
            viewString.Append("ersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [X_Sample.Versio");
            viewString.Append("nOwnerCompanyID], \r\n            T.VersionUpdated AS [X_Sample.VersionUpdated], \r");
            viewString.Append("\n            True AS _from0\r\n        FROM NKDC.Samples AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_Sample", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_SecurityBlacklist
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView231()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3393);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_SecurityBlacklist\r\n        [NKD.Module.Busi");
            viewString.Append("nessObjects.Store.X_SecurityBlacklist](T1.[X_SecurityBlacklist.SecurityBlacklist");
            viewString.Append("ID], T1.[X_SecurityBlacklist.OwnerApplicationID], T1.[X_SecurityBlacklist.OwnerC");
            viewString.Append("ompanyID], T1.[X_SecurityBlacklist.OwnerContactID], T1.[X_SecurityBlacklist.Owne");
            viewString.Append("rProjectID], T1.[X_SecurityBlacklist.OwnerEntitySystemType], T1.[X_SecurityBlack");
            viewString.Append("list.OwnerTableType], T1.[X_SecurityBlacklist.OwnerField], T1.[X_SecurityBlackli");
            viewString.Append("st.OwnerReferenceID], T1.[X_SecurityBlacklist.AccessorApplicationID], T1.[X_Secu");
            viewString.Append("rityBlacklist.AccessorCompanyID], T1.[X_SecurityBlacklist.AccessorProjectID], T1");
            viewString.Append(".[X_SecurityBlacklist.AccessorContactID], T1.[X_SecurityBlacklist.AccessorRoleID");
            viewString.Append("], T1.[X_SecurityBlacklist.CanCreate], T1.[X_SecurityBlacklist.CanRead], T1.[X_S");
            viewString.Append("ecurityBlacklist.CanUpdate], T1.[X_SecurityBlacklist.CanDelete], T1.[X_SecurityB");
            viewString.Append("lacklist.Version], T1.[X_SecurityBlacklist.VersionAntecedentID], T1.[X_SecurityB");
            viewString.Append("lacklist.VersionCertainty], T1.[X_SecurityBlacklist.VersionWorkflowInstanceID], ");
            viewString.Append("T1.[X_SecurityBlacklist.VersionUpdatedBy], T1.[X_SecurityBlacklist.VersionDelete");
            viewString.Append("dBy], T1.[X_SecurityBlacklist.VersionOwnerContactID], T1.[X_SecurityBlacklist.Ve");
            viewString.Append("rsionOwnerCompanyID], T1.[X_SecurityBlacklist.VersionUpdated])\r\n    FROM (\r\n    ");
            viewString.Append("    SELECT \r\n            T.SecurityBlacklistID AS [X_SecurityBlacklist.SecurityB");
            viewString.Append("lacklistID], \r\n            T.OwnerApplicationID AS [X_SecurityBlacklist.OwnerApp");
            viewString.Append("licationID], \r\n            T.OwnerCompanyID AS [X_SecurityBlacklist.OwnerCompany");
            viewString.Append("ID], \r\n            T.OwnerContactID AS [X_SecurityBlacklist.OwnerContactID], \r\n ");
            viewString.Append("           T.OwnerProjectID AS [X_SecurityBlacklist.OwnerProjectID], \r\n         ");
            viewString.Append("   T.OwnerEntitySystemType AS [X_SecurityBlacklist.OwnerEntitySystemType], \r\n   ");
            viewString.Append("         T.OwnerTableType AS [X_SecurityBlacklist.OwnerTableType], \r\n           ");
            viewString.Append(" T.OwnerField AS [X_SecurityBlacklist.OwnerField], \r\n            T.OwnerReferenc");
            viewString.Append("eID AS [X_SecurityBlacklist.OwnerReferenceID], \r\n            T.AccessorApplicati");
            viewString.Append("onID AS [X_SecurityBlacklist.AccessorApplicationID], \r\n            T.AccessorCom");
            viewString.Append("panyID AS [X_SecurityBlacklist.AccessorCompanyID], \r\n            T.AccessorProje");
            viewString.Append("ctID AS [X_SecurityBlacklist.AccessorProjectID], \r\n            T.AccessorContact");
            viewString.Append("ID AS [X_SecurityBlacklist.AccessorContactID], \r\n            T.AccessorRoleID AS");
            viewString.Append(" [X_SecurityBlacklist.AccessorRoleID], \r\n            T.CanCreate AS [X_SecurityB");
            viewString.Append("lacklist.CanCreate], \r\n            T.CanRead AS [X_SecurityBlacklist.CanRead], \r");
            viewString.Append("\n            T.CanUpdate AS [X_SecurityBlacklist.CanUpdate], \r\n            T.Can");
            viewString.Append("Delete AS [X_SecurityBlacklist.CanDelete], \r\n            T.Version AS [X_Securit");
            viewString.Append("yBlacklist.Version], \r\n            T.VersionAntecedentID AS [X_SecurityBlacklist");
            viewString.Append(".VersionAntecedentID], \r\n            T.VersionCertainty AS [X_SecurityBlacklist.");
            viewString.Append("VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [X_SecurityBlack");
            viewString.Append("list.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_Security");
            viewString.Append("Blacklist.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_SecurityBlac");
            viewString.Append("klist.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [X_SecurityBla");
            viewString.Append("cklist.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [X_Secur");
            viewString.Append("ityBlacklist.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [X_Securi");
            viewString.Append("tyBlacklist.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.Sec");
            viewString.Append("urityBlacklists AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_SecurityBlacklist", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_SecurityWhitelist
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView232()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3393);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_SecurityWhitelist\r\n        [NKD.Module.Busi");
            viewString.Append("nessObjects.Store.X_SecurityWhitelist](T1.[X_SecurityWhitelist.SecurityWhitelist");
            viewString.Append("ID], T1.[X_SecurityWhitelist.OwnerApplicationID], T1.[X_SecurityWhitelist.OwnerC");
            viewString.Append("ompanyID], T1.[X_SecurityWhitelist.OwnerContactID], T1.[X_SecurityWhitelist.Owne");
            viewString.Append("rProjectID], T1.[X_SecurityWhitelist.OwnerEntitySystemType], T1.[X_SecurityWhite");
            viewString.Append("list.OwnerTableType], T1.[X_SecurityWhitelist.OwnerField], T1.[X_SecurityWhiteli");
            viewString.Append("st.OwnerReferenceID], T1.[X_SecurityWhitelist.AccessorApplicationID], T1.[X_Secu");
            viewString.Append("rityWhitelist.AccessorCompanyID], T1.[X_SecurityWhitelist.AccessorProjectID], T1");
            viewString.Append(".[X_SecurityWhitelist.AccessorContactID], T1.[X_SecurityWhitelist.AccessorRoleID");
            viewString.Append("], T1.[X_SecurityWhitelist.CanCreate], T1.[X_SecurityWhitelist.CanRead], T1.[X_S");
            viewString.Append("ecurityWhitelist.CanUpdate], T1.[X_SecurityWhitelist.CanDelete], T1.[X_SecurityW");
            viewString.Append("hitelist.Version], T1.[X_SecurityWhitelist.VersionAntecedentID], T1.[X_SecurityW");
            viewString.Append("hitelist.VersionCertainty], T1.[X_SecurityWhitelist.VersionWorkflowInstanceID], ");
            viewString.Append("T1.[X_SecurityWhitelist.VersionUpdatedBy], T1.[X_SecurityWhitelist.VersionDelete");
            viewString.Append("dBy], T1.[X_SecurityWhitelist.VersionOwnerContactID], T1.[X_SecurityWhitelist.Ve");
            viewString.Append("rsionOwnerCompanyID], T1.[X_SecurityWhitelist.VersionUpdated])\r\n    FROM (\r\n    ");
            viewString.Append("    SELECT \r\n            T.SecurityWhitelistID AS [X_SecurityWhitelist.SecurityW");
            viewString.Append("hitelistID], \r\n            T.OwnerApplicationID AS [X_SecurityWhitelist.OwnerApp");
            viewString.Append("licationID], \r\n            T.OwnerCompanyID AS [X_SecurityWhitelist.OwnerCompany");
            viewString.Append("ID], \r\n            T.OwnerContactID AS [X_SecurityWhitelist.OwnerContactID], \r\n ");
            viewString.Append("           T.OwnerProjectID AS [X_SecurityWhitelist.OwnerProjectID], \r\n         ");
            viewString.Append("   T.OwnerEntitySystemType AS [X_SecurityWhitelist.OwnerEntitySystemType], \r\n   ");
            viewString.Append("         T.OwnerTableType AS [X_SecurityWhitelist.OwnerTableType], \r\n           ");
            viewString.Append(" T.OwnerField AS [X_SecurityWhitelist.OwnerField], \r\n            T.OwnerReferenc");
            viewString.Append("eID AS [X_SecurityWhitelist.OwnerReferenceID], \r\n            T.AccessorApplicati");
            viewString.Append("onID AS [X_SecurityWhitelist.AccessorApplicationID], \r\n            T.AccessorCom");
            viewString.Append("panyID AS [X_SecurityWhitelist.AccessorCompanyID], \r\n            T.AccessorProje");
            viewString.Append("ctID AS [X_SecurityWhitelist.AccessorProjectID], \r\n            T.AccessorContact");
            viewString.Append("ID AS [X_SecurityWhitelist.AccessorContactID], \r\n            T.AccessorRoleID AS");
            viewString.Append(" [X_SecurityWhitelist.AccessorRoleID], \r\n            T.CanCreate AS [X_SecurityW");
            viewString.Append("hitelist.CanCreate], \r\n            T.CanRead AS [X_SecurityWhitelist.CanRead], \r");
            viewString.Append("\n            T.CanUpdate AS [X_SecurityWhitelist.CanUpdate], \r\n            T.Can");
            viewString.Append("Delete AS [X_SecurityWhitelist.CanDelete], \r\n            T.Version AS [X_Securit");
            viewString.Append("yWhitelist.Version], \r\n            T.VersionAntecedentID AS [X_SecurityWhitelist");
            viewString.Append(".VersionAntecedentID], \r\n            T.VersionCertainty AS [X_SecurityWhitelist.");
            viewString.Append("VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [X_SecurityWhite");
            viewString.Append("list.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_Security");
            viewString.Append("Whitelist.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_SecurityWhit");
            viewString.Append("elist.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [X_SecurityWhi");
            viewString.Append("telist.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [X_Secur");
            viewString.Append("ityWhitelist.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [X_Securi");
            viewString.Append("tyWhitelist.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.Sec");
            viewString.Append("urityWhitelists AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_SecurityWhitelist", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_Server
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView233()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_Server", "\r\n    SELECT VALUE -- Constructing X_Server\r\n        [NKD.Module.BusinessObjects." +
                    "Store.X_Server](T1.[X_Server.ServerID], T1.[X_Server.Hostname], T1.[X_Server.Dom" +
                    "ain], T1.[X_Server.IP], T1.[X_Server.ServerUniqueMachineCode1], T1.[X_Server.Ser" +
                    "verUniqueMachineCode2], T1.[X_Server.ServerUniqueMachineCode3], T1.[X_Server.Cer" +
                    "tificate1], T1.[X_Server.Certificate2], T1.[X_Server.Version], T1.[X_Server.Vers" +
                    "ionAntecedentID], T1.[X_Server.VersionCertainty], T1.[X_Server.VersionWorkflowIn" +
                    "stanceID], T1.[X_Server.VersionUpdatedBy], T1.[X_Server.VersionDeletedBy], T1.[X" +
                    "_Server.VersionOwnerContactID], T1.[X_Server.VersionOwnerCompanyID], T1.[X_Serve" +
                    "r.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.ServerID AS [X_Se" +
                    "rver.ServerID], \r\n            T.Hostname AS [X_Server.Hostname], \r\n            T" +
                    ".Domain AS [X_Server.Domain], \r\n            T.IP AS [X_Server.IP], \r\n           " +
                    " T.ServerUniqueMachineCode1 AS [X_Server.ServerUniqueMachineCode1], \r\n          " +
                    "  T.ServerUniqueMachineCode2 AS [X_Server.ServerUniqueMachineCode2], \r\n         " +
                    "   T.ServerUniqueMachineCode3 AS [X_Server.ServerUniqueMachineCode3], \r\n        " +
                    "    T.Certificate1 AS [X_Server.Certificate1], \r\n            T.Certificate2 AS [" +
                    "X_Server.Certificate2], \r\n            T.Version AS [X_Server.Version], \r\n       " +
                    "     T.VersionAntecedentID AS [X_Server.VersionAntecedentID], \r\n            T.Ve" +
                    "rsionCertainty AS [X_Server.VersionCertainty], \r\n            T.VersionWorkflowIn" +
                    "stanceID AS [X_Server.VersionWorkflowInstanceID], \r\n            T.VersionUpdated" +
                    "By AS [X_Server.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_Server" +
                    ".VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [X_Server.VersionOw" +
                    "nerContactID], \r\n            T.VersionOwnerCompanyID AS [X_Server.VersionOwnerCo" +
                    "mpanyID], \r\n            T.VersionUpdated AS [X_Server.VersionUpdated], \r\n       " +
                    "     True AS _from0\r\n        FROM NKDC.Servers AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_Survey
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView234()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2267);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_Survey\r\n        [NKD.Module.BusinessObjects");
            viewString.Append(".Store.X_Survey](T1.[X_Survey.SurveyID], T1.[X_Survey.HeaderID], T1.[X_Survey.De");
            viewString.Append("pth], T1.[X_Survey.Dip], T1.[X_Survey.MagneticDip], T1.[X_Survey.MagnetAffected]");
            viewString.Append(", T1.[X_Survey.OriginalAzimuth], T1.[X_Survey.CorrectedAzimuth], T1.[X_Survey.Gr");
            viewString.Append("avity], T1.[X_Survey.InstrumentModelID], T1.[X_Survey.InstrumentAssetID], T1.[X_");
            viewString.Append("Survey.Surveyed], T1.[X_Survey.SurveyContactID], T1.[X_Survey.SurveyCompanyID], ");
            viewString.Append("T1.[X_Survey.Version], T1.[X_Survey.VersionAntecedentID], T1.[X_Survey.VersionCe");
            viewString.Append("rtainty], T1.[X_Survey.VersionWorkflowInstanceID], T1.[X_Survey.VersionUpdatedBy");
            viewString.Append("], T1.[X_Survey.VersionDeletedBy], T1.[X_Survey.VersionOwnerContactID], T1.[X_Su");
            viewString.Append("rvey.VersionOwnerCompanyID], T1.[X_Survey.VersionUpdated])\r\n    FROM (\r\n        ");
            viewString.Append("SELECT \r\n            T.SurveyID AS [X_Survey.SurveyID], \r\n            T.HeaderID");
            viewString.Append(" AS [X_Survey.HeaderID], \r\n            T.Depth AS [X_Survey.Depth], \r\n          ");
            viewString.Append("  T.Dip AS [X_Survey.Dip], \r\n            T.MagneticDip AS [X_Survey.MagneticDip]");
            viewString.Append(", \r\n            T.MagnetAffected AS [X_Survey.MagnetAffected], \r\n            T.O");
            viewString.Append("riginalAzimuth AS [X_Survey.OriginalAzimuth], \r\n            T.CorrectedAzimuth A");
            viewString.Append("S [X_Survey.CorrectedAzimuth], \r\n            T.Gravity AS [X_Survey.Gravity], \r\n");
            viewString.Append("            T.InstrumentModelID AS [X_Survey.InstrumentModelID], \r\n            T");
            viewString.Append(".InstrumentAssetID AS [X_Survey.InstrumentAssetID], \r\n            T.Surveyed AS ");
            viewString.Append("[X_Survey.Surveyed], \r\n            T.SurveyContactID AS [X_Survey.SurveyContactI");
            viewString.Append("D], \r\n            T.SurveyCompanyID AS [X_Survey.SurveyCompanyID], \r\n           ");
            viewString.Append(" T.Version AS [X_Survey.Version], \r\n            T.VersionAntecedentID AS [X_Surv");
            viewString.Append("ey.VersionAntecedentID], \r\n            T.VersionCertainty AS [X_Survey.VersionCe");
            viewString.Append("rtainty], \r\n            T.VersionWorkflowInstanceID AS [X_Survey.VersionWorkflow");
            viewString.Append("InstanceID], \r\n            T.VersionUpdatedBy AS [X_Survey.VersionUpdatedBy], \r\n");
            viewString.Append("            T.VersionDeletedBy AS [X_Survey.VersionDeletedBy], \r\n            T.V");
            viewString.Append("ersionOwnerContactID AS [X_Survey.VersionOwnerContactID], \r\n            T.Versio");
            viewString.Append("nOwnerCompanyID AS [X_Survey.VersionOwnerCompanyID], \r\n            T.VersionUpda");
            viewString.Append("ted AS [X_Survey.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKD");
            viewString.Append("C.Surveys AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_Survey", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_Task
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView235()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2955);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_Task\r\n        [NKD.Module.BusinessObjects.S");
            viewString.Append("tore.X_Task](T1.[X_Task.TaskID], T1.[X_Task.TaskName], T1.[X_Task.WorkTypeID], T");
            viewString.Append("1.[X_Task.WorkCompanyID], T1.[X_Task.WorkContactID], T1.[X_Task.GraphDataGroupID");
            viewString.Append("], T1.[X_Task.GraphDataID], T1.[X_Task.DefaultPriority], T1.[X_Task.EstimatedDur");
            viewString.Append("ation], T1.[X_Task.EstimatedDurationUnitID], T1.[X_Task.EstimatedCompletion], T1");
            viewString.Append(".[X_Task.EstimatedCompletionUnitID], T1.[X_Task.EstimatedLabourCosts], T1.[X_Tas");
            viewString.Append("k.EstimatedCapitalCosts], T1.[X_Task.EstimatedValue], T1.[X_Task.EstimatedIntang");
            viewString.Append("ibleValue], T1.[X_Task.EstimatedRevenue], T1.[X_Task.PerformanceMetricParameterI");
            viewString.Append("D], T1.[X_Task.PerformanceMetricQuantity], T1.[X_Task.Comment], T1.[X_Task.Versi");
            viewString.Append("on], T1.[X_Task.VersionAntecedentID], T1.[X_Task.VersionCertainty], T1.[X_Task.V");
            viewString.Append("ersionWorkflowInstanceID], T1.[X_Task.VersionUpdatedBy], T1.[X_Task.VersionDelet");
            viewString.Append("edBy], T1.[X_Task.VersionOwnerContactID], T1.[X_Task.VersionOwnerCompanyID], T1.");
            viewString.Append("[X_Task.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.TaskID AS [");
            viewString.Append("X_Task.TaskID], \r\n            T.TaskName AS [X_Task.TaskName], \r\n            T.W");
            viewString.Append("orkTypeID AS [X_Task.WorkTypeID], \r\n            T.WorkCompanyID AS [X_Task.WorkC");
            viewString.Append("ompanyID], \r\n            T.WorkContactID AS [X_Task.WorkContactID], \r\n          ");
            viewString.Append("  T.GraphDataGroupID AS [X_Task.GraphDataGroupID], \r\n            T.GraphDataID A");
            viewString.Append("S [X_Task.GraphDataID], \r\n            T.DefaultPriority AS [X_Task.DefaultPriori");
            viewString.Append("ty], \r\n            T.EstimatedDuration AS [X_Task.EstimatedDuration], \r\n        ");
            viewString.Append("    T.EstimatedDurationUnitID AS [X_Task.EstimatedDurationUnitID], \r\n           ");
            viewString.Append(" T.EstimatedCompletion AS [X_Task.EstimatedCompletion], \r\n            T.Estimate");
            viewString.Append("dCompletionUnitID AS [X_Task.EstimatedCompletionUnitID], \r\n            T.Estimat");
            viewString.Append("edLabourCosts AS [X_Task.EstimatedLabourCosts], \r\n            T.EstimatedCapital");
            viewString.Append("Costs AS [X_Task.EstimatedCapitalCosts], \r\n            T.EstimatedValue AS [X_Ta");
            viewString.Append("sk.EstimatedValue], \r\n            T.EstimatedIntangibleValue AS [X_Task.Estimate");
            viewString.Append("dIntangibleValue], \r\n            T.EstimatedRevenue AS [X_Task.EstimatedRevenue]");
            viewString.Append(", \r\n            T.PerformanceMetricParameterID AS [X_Task.PerformanceMetricParam");
            viewString.Append("eterID], \r\n            T.PerformanceMetricQuantity AS [X_Task.PerformanceMetricQ");
            viewString.Append("uantity], \r\n            T.Comment AS [X_Task.Comment], \r\n            T.Version A");
            viewString.Append("S [X_Task.Version], \r\n            T.VersionAntecedentID AS [X_Task.VersionAntece");
            viewString.Append("dentID], \r\n            T.VersionCertainty AS [X_Task.VersionCertainty], \r\n      ");
            viewString.Append("      T.VersionWorkflowInstanceID AS [X_Task.VersionWorkflowInstanceID], \r\n     ");
            viewString.Append("       T.VersionUpdatedBy AS [X_Task.VersionUpdatedBy], \r\n            T.VersionD");
            viewString.Append("eletedBy AS [X_Task.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS ");
            viewString.Append("[X_Task.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [X_Task");
            viewString.Append(".VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [X_Task.VersionUpdate");
            viewString.Append("d], \r\n            True AS _from0\r\n        FROM NKDC.Tasks AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_Task", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_TaskData
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView236()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_TaskData", "\r\n    SELECT VALUE -- Constructing X_TaskData\r\n        [NKD.Module.BusinessObject" +
                    "s.Store.X_TaskData](T1.[X_TaskData.TaskDataID], T1.[X_TaskData.ParentTaskDataID]" +
                    ", T1.[X_TaskData.TableType], T1.[X_TaskData.ReferenceID], T1.[X_TaskData.TaskID]" +
                    ", T1.[X_TaskData.Version], T1.[X_TaskData.VersionAntecedentID], T1.[X_TaskData.V" +
                    "ersionCertainty], T1.[X_TaskData.VersionWorkflowInstanceID], T1.[X_TaskData.Vers" +
                    "ionUpdatedBy], T1.[X_TaskData.VersionDeletedBy], T1.[X_TaskData.VersionOwnerCont" +
                    "actID], T1.[X_TaskData.VersionOwnerCompanyID], T1.[X_TaskData.VersionUpdated])\r\n" +
                    "    FROM (\r\n        SELECT \r\n            T.TaskDataID AS [X_TaskData.TaskDataID]" +
                    ", \r\n            T.ParentTaskDataID AS [X_TaskData.ParentTaskDataID], \r\n         " +
                    "   T.TableType AS [X_TaskData.TableType], \r\n            T.ReferenceID AS [X_Task" +
                    "Data.ReferenceID], \r\n            T.TaskID AS [X_TaskData.TaskID], \r\n            " +
                    "T.Version AS [X_TaskData.Version], \r\n            T.VersionAntecedentID AS [X_Tas" +
                    "kData.VersionAntecedentID], \r\n            T.VersionCertainty AS [X_TaskData.Vers" +
                    "ionCertainty], \r\n            T.VersionWorkflowInstanceID AS [X_TaskData.VersionW" +
                    "orkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_TaskData.VersionUpdat" +
                    "edBy], \r\n            T.VersionDeletedBy AS [X_TaskData.VersionDeletedBy], \r\n    " +
                    "        T.VersionOwnerContactID AS [X_TaskData.VersionOwnerContactID], \r\n       " +
                    "     T.VersionOwnerCompanyID AS [X_TaskData.VersionOwnerCompanyID], \r\n          " +
                    "  T.VersionUpdated AS [X_TaskData.VersionUpdated], \r\n            True AS _from0\r" +
                    "\n        FROM NKDC.TaskDatas AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_TaskRelation
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView237()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_TaskRelation", "\r\n    SELECT VALUE -- Constructing X_TaskRelation\r\n        [NKD.Module.BusinessOb" +
                    "jects.Store.X_TaskRelation](T1.[X_TaskRelation.TaskRelationID], T1.[X_TaskRelati" +
                    "on.OriginalTaskID], T1.[X_TaskRelation.RelatedTaskID], T1.[X_TaskRelation.Relati" +
                    "onTypeID], T1.[X_TaskRelation.Related], T1.[X_TaskRelation.Sequence], T1.[X_Task" +
                    "Relation.Version], T1.[X_TaskRelation.VersionAntecedentID], T1.[X_TaskRelation.V" +
                    "ersionCertainty], T1.[X_TaskRelation.VersionWorkflowInstanceID], T1.[X_TaskRelat" +
                    "ion.VersionUpdatedBy], T1.[X_TaskRelation.VersionDeletedBy], T1.[X_TaskRelation." +
                    "VersionOwnerContactID], T1.[X_TaskRelation.VersionOwnerCompanyID], T1.[X_TaskRel" +
                    "ation.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.TaskRelationI" +
                    "D AS [X_TaskRelation.TaskRelationID], \r\n            T.OriginalTaskID AS [X_TaskR" +
                    "elation.OriginalTaskID], \r\n            T.RelatedTaskID AS [X_TaskRelation.Relate" +
                    "dTaskID], \r\n            T.RelationTypeID AS [X_TaskRelation.RelationTypeID], \r\n " +
                    "           T.Related AS [X_TaskRelation.Related], \r\n            T.Sequence AS [X" +
                    "_TaskRelation.Sequence], \r\n            T.Version AS [X_TaskRelation.Version], \r\n" +
                    "            T.VersionAntecedentID AS [X_TaskRelation.VersionAntecedentID], \r\n   " +
                    "         T.VersionCertainty AS [X_TaskRelation.VersionCertainty], \r\n            " +
                    "T.VersionWorkflowInstanceID AS [X_TaskRelation.VersionWorkflowInstanceID], \r\n   " +
                    "         T.VersionUpdatedBy AS [X_TaskRelation.VersionUpdatedBy], \r\n            " +
                    "T.VersionDeletedBy AS [X_TaskRelation.VersionDeletedBy], \r\n            T.Version" +
                    "OwnerContactID AS [X_TaskRelation.VersionOwnerContactID], \r\n            T.Versio" +
                    "nOwnerCompanyID AS [X_TaskRelation.VersionOwnerCompanyID], \r\n            T.Versi" +
                    "onUpdated AS [X_TaskRelation.VersionUpdated], \r\n            True AS _from0\r\n    " +
                    "    FROM NKDC.TaskRelations AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_Tenement
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView238()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2105);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_Tenement\r\n        [NKD.Module.BusinessObjec");
            viewString.Append("ts.Store.X_Tenement](T1.[X_Tenement.TenementID], T1.[X_Tenement.TenementName], T");
            viewString.Append("1.[X_Tenement.TenementNumber], T1.[X_Tenement.TenementDevelopmentPhase], T1.[X_T");
            viewString.Append("enement.CountryID], T1.[X_Tenement.TenementBoundaryProvinceID], T1.[X_Tenement.O");
            viewString.Append("wnerCompanyID], T1.[X_Tenement.ApprovedByContactID], T1.[X_Tenement.ValidFrom], ");
            viewString.Append("T1.[X_Tenement.Expiry], T1.[X_Tenement.Version], T1.[X_Tenement.VersionAnteceden");
            viewString.Append("tID], T1.[X_Tenement.VersionCertainty], T1.[X_Tenement.VersionWorkflowInstanceID");
            viewString.Append("], T1.[X_Tenement.VersionUpdatedBy], T1.[X_Tenement.VersionDeletedBy], T1.[X_Ten");
            viewString.Append("ement.VersionOwnerContactID], T1.[X_Tenement.VersionOwnerCompanyID], T1.[X_Tenem");
            viewString.Append("ent.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.TenementID AS [");
            viewString.Append("X_Tenement.TenementID], \r\n            T.TenementName AS [X_Tenement.TenementName");
            viewString.Append("], \r\n            T.TenementNumber AS [X_Tenement.TenementNumber], \r\n            ");
            viewString.Append("T.TenementDevelopmentPhase AS [X_Tenement.TenementDevelopmentPhase], \r\n         ");
            viewString.Append("   T.CountryID AS [X_Tenement.CountryID], \r\n            T.TenementBoundaryProvin");
            viewString.Append("ceID AS [X_Tenement.TenementBoundaryProvinceID], \r\n            T.OwnerCompanyID ");
            viewString.Append("AS [X_Tenement.OwnerCompanyID], \r\n            T.ApprovedByContactID AS [X_Teneme");
            viewString.Append("nt.ApprovedByContactID], \r\n            T.ValidFrom AS [X_Tenement.ValidFrom], \r\n");
            viewString.Append("            T.Expiry AS [X_Tenement.Expiry], \r\n            T.Version AS [X_Tenem");
            viewString.Append("ent.Version], \r\n            T.VersionAntecedentID AS [X_Tenement.VersionAntecede");
            viewString.Append("ntID], \r\n            T.VersionCertainty AS [X_Tenement.VersionCertainty], \r\n    ");
            viewString.Append("        T.VersionWorkflowInstanceID AS [X_Tenement.VersionWorkflowInstanceID], \r");
            viewString.Append("\n            T.VersionUpdatedBy AS [X_Tenement.VersionUpdatedBy], \r\n            ");
            viewString.Append("T.VersionDeletedBy AS [X_Tenement.VersionDeletedBy], \r\n            T.VersionOwne");
            viewString.Append("rContactID AS [X_Tenement.VersionOwnerContactID], \r\n            T.VersionOwnerCo");
            viewString.Append("mpanyID AS [X_Tenement.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS");
            viewString.Append(" [X_Tenement.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.Te");
            viewString.Append("nements AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_Tenement", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_TenementCommodity
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView239()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_TenementCommodity", "\r\n    SELECT VALUE -- Constructing X_TenementCommodity\r\n        [NKD.Module.Busin" +
                    "essObjects.Store.X_TenementCommodity](T1.[X_TenementCommodity.TenementCommodityI" +
                    "D], T1.[X_TenementCommodity.TenementID], T1.[X_TenementCommodity.CommodityID], T" +
                    "1.[X_TenementCommodity.Version], T1.[X_TenementCommodity.VersionAntecedentID], T" +
                    "1.[X_TenementCommodity.VersionCertainty], T1.[X_TenementCommodity.VersionWorkflo" +
                    "wInstanceID], T1.[X_TenementCommodity.VersionUpdatedBy], T1.[X_TenementCommodity" +
                    ".VersionDeletedBy], T1.[X_TenementCommodity.VersionOwnerContactID], T1.[X_Teneme" +
                    "ntCommodity.VersionOwnerCompanyID], T1.[X_TenementCommodity.VersionUpdated])\r\n  " +
                    "  FROM (\r\n        SELECT \r\n            T.TenementCommodityID AS [X_TenementCommo" +
                    "dity.TenementCommodityID], \r\n            T.TenementID AS [X_TenementCommodity.Te" +
                    "nementID], \r\n            T.CommodityID AS [X_TenementCommodity.CommodityID], \r\n " +
                    "           T.Version AS [X_TenementCommodity.Version], \r\n            T.VersionAn" +
                    "tecedentID AS [X_TenementCommodity.VersionAntecedentID], \r\n            T.Version" +
                    "Certainty AS [X_TenementCommodity.VersionCertainty], \r\n            T.VersionWork" +
                    "flowInstanceID AS [X_TenementCommodity.VersionWorkflowInstanceID], \r\n           " +
                    " T.VersionUpdatedBy AS [X_TenementCommodity.VersionUpdatedBy], \r\n            T.V" +
                    "ersionDeletedBy AS [X_TenementCommodity.VersionDeletedBy], \r\n            T.Versi" +
                    "onOwnerContactID AS [X_TenementCommodity.VersionOwnerContactID], \r\n            T" +
                    ".VersionOwnerCompanyID AS [X_TenementCommodity.VersionOwnerCompanyID], \r\n       " +
                    "     T.VersionUpdated AS [X_TenementCommodity.VersionUpdated], \r\n            Tru" +
                    "e AS _from0\r\n        FROM NKDC.TenementCommodities AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_TenementProvince
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView240()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_TenementProvince", "\r\n    SELECT VALUE -- Constructing X_TenementProvince\r\n        [NKD.Module.Busine" +
                    "ssObjects.Store.X_TenementProvince](T1.[X_TenementProvince.TenementProvinceID], " +
                    "T1.[X_TenementProvince.TenementID], T1.[X_TenementProvince.ProvinceID], T1.[X_Te" +
                    "nementProvince.Version], T1.[X_TenementProvince.VersionAntecedentID], T1.[X_Tene" +
                    "mentProvince.VersionCertainty], T1.[X_TenementProvince.VersionWorkflowInstanceID" +
                    "], T1.[X_TenementProvince.VersionUpdatedBy], T1.[X_TenementProvince.VersionDelet" +
                    "edBy], T1.[X_TenementProvince.VersionOwnerContactID], T1.[X_TenementProvince.Ver" +
                    "sionOwnerCompanyID], T1.[X_TenementProvince.VersionUpdated])\r\n    FROM (\r\n      " +
                    "  SELECT \r\n            T.TenementProvinceID AS [X_TenementProvince.TenementProvi" +
                    "nceID], \r\n            T.TenementID AS [X_TenementProvince.TenementID], \r\n       " +
                    "     T.ProvinceID AS [X_TenementProvince.ProvinceID], \r\n            T.Version AS" +
                    " [X_TenementProvince.Version], \r\n            T.VersionAntecedentID AS [X_Tenemen" +
                    "tProvince.VersionAntecedentID], \r\n            T.VersionCertainty AS [X_TenementP" +
                    "rovince.VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [X_Tenem" +
                    "entProvince.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_T" +
                    "enementProvince.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_Teneme" +
                    "ntProvince.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [X_Teneme" +
                    "ntProvince.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [X_T" +
                    "enementProvince.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [X_Ten" +
                    "ementProvince.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.T" +
                    "enementProvinces AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_TenementRelation
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView241()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_TenementRelation", "\r\n    SELECT VALUE -- Constructing X_TenementRelation\r\n        [NKD.Module.Busine" +
                    "ssObjects.Store.X_TenementRelation](T1.[X_TenementRelation.TenementRelationID], " +
                    "T1.[X_TenementRelation.TenementID], T1.[X_TenementRelation.ParentTenementID], T1" +
                    ".[X_TenementRelation.Version], T1.[X_TenementRelation.VersionAntecedentID], T1.[" +
                    "X_TenementRelation.VersionCertainty], T1.[X_TenementRelation.VersionWorkflowInst" +
                    "anceID], T1.[X_TenementRelation.VersionUpdatedBy], T1.[X_TenementRelation.Versio" +
                    "nDeletedBy], T1.[X_TenementRelation.VersionOwnerContactID], T1.[X_TenementRelati" +
                    "on.VersionOwnerCompanyID], T1.[X_TenementRelation.VersionUpdated])\r\n    FROM (\r\n" +
                    "        SELECT \r\n            T.TenementRelationID AS [X_TenementRelation.Tenemen" +
                    "tRelationID], \r\n            T.TenementID AS [X_TenementRelation.TenementID], \r\n " +
                    "           T.ParentTenementID AS [X_TenementRelation.ParentTenementID], \r\n      " +
                    "      T.Version AS [X_TenementRelation.Version], \r\n            T.VersionAntecede" +
                    "ntID AS [X_TenementRelation.VersionAntecedentID], \r\n            T.VersionCertain" +
                    "ty AS [X_TenementRelation.VersionCertainty], \r\n            T.VersionWorkflowInst" +
                    "anceID AS [X_TenementRelation.VersionWorkflowInstanceID], \r\n            T.Versio" +
                    "nUpdatedBy AS [X_TenementRelation.VersionUpdatedBy], \r\n            T.VersionDele" +
                    "tedBy AS [X_TenementRelation.VersionDeletedBy], \r\n            T.VersionOwnerCont" +
                    "actID AS [X_TenementRelation.VersionOwnerContactID], \r\n            T.VersionOwne" +
                    "rCompanyID AS [X_TenementRelation.VersionOwnerCompanyID], \r\n            T.Versio" +
                    "nUpdated AS [X_TenementRelation.VersionUpdated], \r\n            True AS _from0\r\n " +
                    "       FROM NKDC.TenementRelations AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_UsageAudit
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView242()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_UsageAudit", "\r\n    SELECT VALUE -- Constructing X_UsageAudit\r\n        [NKD.Module.BusinessObje" +
                    "cts.Store.X_UsageAudit](T1.[X_UsageAudit.UsageAuditID], T1.[X_UsageAudit.UsageID" +
                    "], T1.[X_UsageAudit.UsageAuditTypeID], T1.[X_UsageAudit.EntitySystemType], T1.[X" +
                    "_UsageAudit.EntityID], T1.[X_UsageAudit.Action], T1.[X_UsageAudit.Audited], T1.[" +
                    "X_UsageAudit.ContactID], T1.[X_UsageAudit.Version], T1.[X_UsageAudit.VersionAnte" +
                    "cedentID], T1.[X_UsageAudit.VersionCertainty], T1.[X_UsageAudit.VersionWorkflowI" +
                    "nstanceID], T1.[X_UsageAudit.VersionUpdatedBy], T1.[X_UsageAudit.VersionDeletedB" +
                    "y], T1.[X_UsageAudit.VersionOwnerContactID], T1.[X_UsageAudit.VersionOwnerCompan" +
                    "yID], T1.[X_UsageAudit.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n          " +
                    "  T.UsageAuditID AS [X_UsageAudit.UsageAuditID], \r\n            T.UsageID AS [X_U" +
                    "sageAudit.UsageID], \r\n            T.UsageAuditTypeID AS [X_UsageAudit.UsageAudit" +
                    "TypeID], \r\n            T.EntitySystemType AS [X_UsageAudit.EntitySystemType], \r\n" +
                    "            T.EntityID AS [X_UsageAudit.EntityID], \r\n            T.Action AS [X_" +
                    "UsageAudit.Action], \r\n            T.Audited AS [X_UsageAudit.Audited], \r\n       " +
                    "     T.ContactID AS [X_UsageAudit.ContactID], \r\n            T.Version AS [X_Usag" +
                    "eAudit.Version], \r\n            T.VersionAntecedentID AS [X_UsageAudit.VersionAnt" +
                    "ecedentID], \r\n            T.VersionCertainty AS [X_UsageAudit.VersionCertainty]," +
                    " \r\n            T.VersionWorkflowInstanceID AS [X_UsageAudit.VersionWorkflowInsta" +
                    "nceID], \r\n            T.VersionUpdatedBy AS [X_UsageAudit.VersionUpdatedBy], \r\n " +
                    "           T.VersionDeletedBy AS [X_UsageAudit.VersionDeletedBy], \r\n            " +
                    "T.VersionOwnerContactID AS [X_UsageAudit.VersionOwnerContactID], \r\n            T" +
                    ".VersionOwnerCompanyID AS [X_UsageAudit.VersionOwnerCompanyID], \r\n            T." +
                    "VersionUpdated AS [X_UsageAudit.VersionUpdated], \r\n            True AS _from0\r\n " +
                    "       FROM NKDC.UsageAuditViews AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_WaterFlow
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView243()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2478);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_WaterFlow\r\n        [NKD.Module.BusinessObje");
            viewString.Append("cts.Store.X_WaterFlow](T1.[X_WaterFlow.WaterFlowID], T1.[X_WaterFlow.HeaderID], ");
            viewString.Append("T1.[X_WaterFlow.TestDepth], T1.[X_WaterFlow.TestDate], T1.[X_WaterFlow.SampleTyp");
            viewString.Append("eID], T1.[X_WaterFlow.SampleNumber], T1.[X_WaterFlow.FlowTestTypeID], T1.[X_Wate");
            viewString.Append("rFlow.FlowHeight], T1.[X_WaterFlow.FlowRate], T1.[X_WaterFlow.Ph], T1.[X_WaterFl");
            viewString.Append("ow.TotalDissolvedSolids], T1.[X_WaterFlow.ElectricalConductivity], T1.[X_WaterFl");
            viewString.Append("ow.Temperature], T1.[X_WaterFlow.Pressure], T1.[X_WaterFlow.Comment], T1.[X_Wate");
            viewString.Append("rFlow.Version], T1.[X_WaterFlow.VersionAntecedentID], T1.[X_WaterFlow.VersionCer");
            viewString.Append("tainty], T1.[X_WaterFlow.VersionWorkflowInstanceID], T1.[X_WaterFlow.VersionUpda");
            viewString.Append("tedBy], T1.[X_WaterFlow.VersionDeletedBy], T1.[X_WaterFlow.VersionOwnerContactID");
            viewString.Append("], T1.[X_WaterFlow.VersionOwnerCompanyID], T1.[X_WaterFlow.VersionUpdated])\r\n   ");
            viewString.Append(" FROM (\r\n        SELECT \r\n            T.WaterFlowID AS [X_WaterFlow.WaterFlowID]");
            viewString.Append(", \r\n            T.HeaderID AS [X_WaterFlow.HeaderID], \r\n            T.TestDepth ");
            viewString.Append("AS [X_WaterFlow.TestDepth], \r\n            T.TestDate AS [X_WaterFlow.TestDate], ");
            viewString.Append("\r\n            T.SampleTypeID AS [X_WaterFlow.SampleTypeID], \r\n            T.Samp");
            viewString.Append("leNumber AS [X_WaterFlow.SampleNumber], \r\n            T.FlowTestTypeID AS [X_Wat");
            viewString.Append("erFlow.FlowTestTypeID], \r\n            T.FlowHeight AS [X_WaterFlow.FlowHeight], ");
            viewString.Append("\r\n            T.FlowRate AS [X_WaterFlow.FlowRate], \r\n            T.Ph AS [X_Wat");
            viewString.Append("erFlow.Ph], \r\n            T.TotalDissolvedSolids AS [X_WaterFlow.TotalDissolvedS");
            viewString.Append("olids], \r\n            T.ElectricalConductivity AS [X_WaterFlow.ElectricalConduct");
            viewString.Append("ivity], \r\n            T.Temperature AS [X_WaterFlow.Temperature], \r\n            ");
            viewString.Append("T.Pressure AS [X_WaterFlow.Pressure], \r\n            T.Comment AS [X_WaterFlow.Co");
            viewString.Append("mment], \r\n            T.Version AS [X_WaterFlow.Version], \r\n            T.Versio");
            viewString.Append("nAntecedentID AS [X_WaterFlow.VersionAntecedentID], \r\n            T.VersionCerta");
            viewString.Append("inty AS [X_WaterFlow.VersionCertainty], \r\n            T.VersionWorkflowInstanceI");
            viewString.Append("D AS [X_WaterFlow.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy A");
            viewString.Append("S [X_WaterFlow.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_WaterFl");
            viewString.Append("ow.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [X_WaterFlow.Vers");
            viewString.Append("ionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [X_WaterFlow.Versio");
            viewString.Append("nOwnerCompanyID], \r\n            T.VersionUpdated AS [X_WaterFlow.VersionUpdated]");
            viewString.Append(", \r\n            True AS _from0\r\n        FROM NKDC.WaterFlows AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_WaterFlow", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_LithologyAdjective
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView244()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_LithologyAdjective", "\r\n    SELECT VALUE -- Constructing X_LithologyAdjective\r\n        [NKD.Module.Busi" +
                    "nessObjects.Store.X_LithologyAdjective](T1.[X_LithologyAdjective.LithologyAdject" +
                    "iveID], T1.[X_LithologyAdjective.LithologyID], T1.[X_LithologyAdjective.Adjectiv" +
                    "eID], T1.[X_LithologyAdjective.Sequence], T1.[X_LithologyAdjective.Version], T1." +
                    "[X_LithologyAdjective.VersionAntecedentID], T1.[X_LithologyAdjective.VersionCert" +
                    "ainty], T1.[X_LithologyAdjective.VersionWorkflowInstanceID], T1.[X_LithologyAdje" +
                    "ctive.VersionUpdatedBy], T1.[X_LithologyAdjective.VersionDeletedBy], T1.[X_Litho" +
                    "logyAdjective.VersionOwnerContactID], T1.[X_LithologyAdjective.VersionOwnerCompa" +
                    "nyID], T1.[X_LithologyAdjective.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n " +
                    "           T.LithologyAdjectiveID AS [X_LithologyAdjective.LithologyAdjectiveID]" +
                    ", \r\n            T.LithologyID AS [X_LithologyAdjective.LithologyID], \r\n         " +
                    "   T.AdjectiveID AS [X_LithologyAdjective.AdjectiveID], \r\n            T.Sequence" +
                    " AS [X_LithologyAdjective.Sequence], \r\n            T.Version AS [X_LithologyAdje" +
                    "ctive.Version], \r\n            T.VersionAntecedentID AS [X_LithologyAdjective.Ver" +
                    "sionAntecedentID], \r\n            T.VersionCertainty AS [X_LithologyAdjective.Ver" +
                    "sionCertainty], \r\n            T.VersionWorkflowInstanceID AS [X_LithologyAdjecti" +
                    "ve.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_LithologyA" +
                    "djective.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_LithologyAdje" +
                    "ctive.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [X_LithologyAd" +
                    "jective.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [X_Lith" +
                    "ologyAdjective.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [X_Lith" +
                    "ologyAdjective.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC." +
                    "LithologyAdjectives AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_LithologySedimentaryFeature
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView245()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2113);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_LithologySedimentaryFeature\r\n        [NKD.M");
            viewString.Append("odule.BusinessObjects.Store.X_LithologySedimentaryFeature](T1.[X_LithologySedime");
            viewString.Append("ntaryFeature.LithologySedimentaryFeatureID], T1.[X_LithologySedimentaryFeature.L");
            viewString.Append("ithologyID], T1.[X_LithologySedimentaryFeature.SedimentaryFeatureID], T1.[X_Lith");
            viewString.Append("ologySedimentaryFeature.Sequence], T1.[X_LithologySedimentaryFeature.Version], T");
            viewString.Append("1.[X_LithologySedimentaryFeature.VersionAntecedentID], T1.[X_LithologySedimentar");
            viewString.Append("yFeature.VersionCertainty], T1.[X_LithologySedimentaryFeature.VersionWorkflowIns");
            viewString.Append("tanceID], T1.[X_LithologySedimentaryFeature.VersionUpdatedBy], T1.[X_LithologySe");
            viewString.Append("dimentaryFeature.VersionDeletedBy], T1.[X_LithologySedimentaryFeature.VersionOwn");
            viewString.Append("erContactID], T1.[X_LithologySedimentaryFeature.VersionOwnerCompanyID], T1.[X_Li");
            viewString.Append("thologySedimentaryFeature.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n       ");
            viewString.Append("     T.LithologySedimentaryFeatureID AS [X_LithologySedimentaryFeature.Lithology");
            viewString.Append("SedimentaryFeatureID], \r\n            T.LithologyID AS [X_LithologySedimentaryFea");
            viewString.Append("ture.LithologyID], \r\n            T.SedimentaryFeatureID AS [X_LithologySedimenta");
            viewString.Append("ryFeature.SedimentaryFeatureID], \r\n            T.Sequence AS [X_LithologySedimen");
            viewString.Append("taryFeature.Sequence], \r\n            T.Version AS [X_LithologySedimentaryFeature");
            viewString.Append(".Version], \r\n            T.VersionAntecedentID AS [X_LithologySedimentaryFeature");
            viewString.Append(".VersionAntecedentID], \r\n            T.VersionCertainty AS [X_LithologySedimenta");
            viewString.Append("ryFeature.VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [X_Lit");
            viewString.Append("hologySedimentaryFeature.VersionWorkflowInstanceID], \r\n            T.VersionUpda");
            viewString.Append("tedBy AS [X_LithologySedimentaryFeature.VersionUpdatedBy], \r\n            T.Versi");
            viewString.Append("onDeletedBy AS [X_LithologySedimentaryFeature.VersionDeletedBy], \r\n            T");
            viewString.Append(".VersionOwnerContactID AS [X_LithologySedimentaryFeature.VersionOwnerContactID],");
            viewString.Append(" \r\n            T.VersionOwnerCompanyID AS [X_LithologySedimentaryFeature.Version");
            viewString.Append("OwnerCompanyID], \r\n            T.VersionUpdated AS [X_LithologySedimentaryFeatur");
            viewString.Append("e.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.LithologySedi");
            viewString.Append("mentaryFeatures AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_LithologySedimentaryFeature", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_HeaderHolePurpose
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView246()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_HeaderHolePurpose", "\r\n    SELECT VALUE -- Constructing X_HeaderHolePurpose\r\n        [NKD.Module.Busin" +
                    "essObjects.Store.X_HeaderHolePurpose](T1.[X_HeaderHolePurpose.HeaderHolePurposeI" +
                    "D], T1.[X_HeaderHolePurpose.HeaderID], T1.[X_HeaderHolePurpose.HolePurposeID], T" +
                    "1.[X_HeaderHolePurpose.Sequence], T1.[X_HeaderHolePurpose.Version], T1.[X_Header" +
                    "HolePurpose.VersionAntecedentID], T1.[X_HeaderHolePurpose.VersionCertainty], T1." +
                    "[X_HeaderHolePurpose.VersionWorkflowInstanceID], T1.[X_HeaderHolePurpose.Version" +
                    "UpdatedBy], T1.[X_HeaderHolePurpose.VersionDeletedBy], T1.[X_HeaderHolePurpose.V" +
                    "ersionOwnerContactID], T1.[X_HeaderHolePurpose.VersionOwnerCompanyID], T1.[X_Hea" +
                    "derHolePurpose.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.Head" +
                    "erHolePurposeID AS [X_HeaderHolePurpose.HeaderHolePurposeID], \r\n            T.He" +
                    "aderID AS [X_HeaderHolePurpose.HeaderID], \r\n            T.HolePurposeID AS [X_He" +
                    "aderHolePurpose.HolePurposeID], \r\n            T.Sequence AS [X_HeaderHolePurpose" +
                    ".Sequence], \r\n            T.Version AS [X_HeaderHolePurpose.Version], \r\n        " +
                    "    T.VersionAntecedentID AS [X_HeaderHolePurpose.VersionAntecedentID], \r\n      " +
                    "      T.VersionCertainty AS [X_HeaderHolePurpose.VersionCertainty], \r\n          " +
                    "  T.VersionWorkflowInstanceID AS [X_HeaderHolePurpose.VersionWorkflowInstanceID]" +
                    ", \r\n            T.VersionUpdatedBy AS [X_HeaderHolePurpose.VersionUpdatedBy], \r\n" +
                    "            T.VersionDeletedBy AS [X_HeaderHolePurpose.VersionDeletedBy], \r\n    " +
                    "        T.VersionOwnerContactID AS [X_HeaderHolePurpose.VersionOwnerContactID], " +
                    "\r\n            T.VersionOwnerCompanyID AS [X_HeaderHolePurpose.VersionOwnerCompan" +
                    "yID], \r\n            T.VersionUpdated AS [X_HeaderHolePurpose.VersionUpdated], \r\n" +
                    "            True AS _from0\r\n        FROM NKDC.HeaderHolePurposes AS T\r\n    ) AS " +
                    "T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_LithologyRelation
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView247()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_LithologyRelation", "\r\n    SELECT VALUE -- Constructing X_LithologyRelation\r\n        [NKD.Module.Busin" +
                    "essObjects.Store.X_LithologyRelation](T1.[X_LithologyRelation.LithologyRelationI" +
                    "D], T1.[X_LithologyRelation.OriginalLithologyID], T1.[X_LithologyRelation.Relate" +
                    "dLithologyID], T1.[X_LithologyRelation.RelationTypeID], T1.[X_LithologyRelation." +
                    "Related], T1.[X_LithologyRelation.Sequence], T1.[X_LithologyRelation.Version], T" +
                    "1.[X_LithologyRelation.VersionAntecedentID], T1.[X_LithologyRelation.VersionCert" +
                    "ainty], T1.[X_LithologyRelation.VersionWorkflowInstanceID], T1.[X_LithologyRelat" +
                    "ion.VersionUpdatedBy], T1.[X_LithologyRelation.VersionDeletedBy], T1.[X_Litholog" +
                    "yRelation.VersionOwnerContactID], T1.[X_LithologyRelation.VersionOwnerCompanyID]" +
                    ", T1.[X_LithologyRelation.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n       " +
                    "     T.LithologyRelationID AS [X_LithologyRelation.LithologyRelationID], \r\n     " +
                    "       T.OriginalLithologyID AS [X_LithologyRelation.OriginalLithologyID], \r\n   " +
                    "         T.RelatedLithologyID AS [X_LithologyRelation.RelatedLithologyID], \r\n   " +
                    "         T.RelationTypeID AS [X_LithologyRelation.RelationTypeID], \r\n           " +
                    " T.Related AS [X_LithologyRelation.Related], \r\n            T.Sequence AS [X_Lith" +
                    "ologyRelation.Sequence], \r\n            T.Version AS [X_LithologyRelation.Version" +
                    "], \r\n            T.VersionAntecedentID AS [X_LithologyRelation.VersionAntecedent" +
                    "ID], \r\n            T.VersionCertainty AS [X_LithologyRelation.VersionCertainty]," +
                    " \r\n            T.VersionWorkflowInstanceID AS [X_LithologyRelation.VersionWorkfl" +
                    "owInstanceID], \r\n            T.VersionUpdatedBy AS [X_LithologyRelation.VersionU" +
                    "pdatedBy], \r\n            T.VersionDeletedBy AS [X_LithologyRelation.VersionDelet" +
                    "edBy], \r\n            T.VersionOwnerContactID AS [X_LithologyRelation.VersionOwne" +
                    "rContactID], \r\n            T.VersionOwnerCompanyID AS [X_LithologyRelation.Versi" +
                    "onOwnerCompanyID], \r\n            T.VersionUpdated AS [X_LithologyRelation.Versio" +
                    "nUpdated], \r\n            True AS _from0\r\n        FROM NKDC.LithologyRelations AS" +
                    " T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_FileDataWorkType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView248()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_FileDataWorkType", "\r\n    SELECT VALUE -- Constructing X_FileDataWorkType\r\n        [NKD.Module.Busine" +
                    "ssObjects.Store.X_FileDataWorkType](T1.[X_FileDataWorkType.FileDataWorkTypeID], " +
                    "T1.[X_FileDataWorkType.FileDataID], T1.[X_FileDataWorkType.WorkTypeID], T1.[X_Fi" +
                    "leDataWorkType.ProcessName], T1.[X_FileDataWorkType.Sequence], T1.[X_FileDataWor" +
                    "kType.Context], T1.[X_FileDataWorkType.Version], T1.[X_FileDataWorkType.VersionA" +
                    "ntecedentID], T1.[X_FileDataWorkType.VersionCertainty], T1.[X_FileDataWorkType.V" +
                    "ersionWorkflowInstanceID], T1.[X_FileDataWorkType.VersionUpdatedBy], T1.[X_FileD" +
                    "ataWorkType.VersionDeletedBy], T1.[X_FileDataWorkType.VersionOwnerContactID], T1" +
                    ".[X_FileDataWorkType.VersionOwnerCompanyID], T1.[X_FileDataWorkType.VersionUpdat" +
                    "ed])\r\n    FROM (\r\n        SELECT \r\n            T.FileDataWorkTypeID AS [X_FileDa" +
                    "taWorkType.FileDataWorkTypeID], \r\n            T.FileDataID AS [X_FileDataWorkTyp" +
                    "e.FileDataID], \r\n            T.WorkTypeID AS [X_FileDataWorkType.WorkTypeID], \r\n" +
                    "            T.ProcessName AS [X_FileDataWorkType.ProcessName], \r\n            T.S" +
                    "equence AS [X_FileDataWorkType.Sequence], \r\n            T.Context AS [X_FileData" +
                    "WorkType.Context], \r\n            T.Version AS [X_FileDataWorkType.Version], \r\n  " +
                    "          T.VersionAntecedentID AS [X_FileDataWorkType.VersionAntecedentID], \r\n " +
                    "           T.VersionCertainty AS [X_FileDataWorkType.VersionCertainty], \r\n      " +
                    "      T.VersionWorkflowInstanceID AS [X_FileDataWorkType.VersionWorkflowInstance" +
                    "ID], \r\n            T.VersionUpdatedBy AS [X_FileDataWorkType.VersionUpdatedBy], " +
                    "\r\n            T.VersionDeletedBy AS [X_FileDataWorkType.VersionDeletedBy], \r\n   " +
                    "         T.VersionOwnerContactID AS [X_FileDataWorkType.VersionOwnerContactID], " +
                    "\r\n            T.VersionOwnerCompanyID AS [X_FileDataWorkType.VersionOwnerCompany" +
                    "ID], \r\n            T.VersionUpdated AS [X_FileDataWorkType.VersionUpdated], \r\n  " +
                    "          True AS _from0\r\n        FROM NKDC.FileDataWorkTypes AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_DictionaryWorkflowType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView249()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_DictionaryWorkflowType", "\r\n    SELECT VALUE -- Constructing E_DictionaryWorkflowType\r\n        [NKD.Module." +
                    "BusinessObjects.Store.E_DictionaryWorkflowType](T1.[E_DictionaryWorkflowType.Wor" +
                    "kflowTypeID], T1.[E_DictionaryWorkflowType.StandardWorkflowTypeName], T1.[E_Dict" +
                    "ionaryWorkflowType.CustomWorkflowTypeName], T1.[E_DictionaryWorkflowType.Descrip" +
                    "tion], T1.[E_DictionaryWorkflowType.Version], T1.[E_DictionaryWorkflowType.Versi" +
                    "onAntecedentID], T1.[E_DictionaryWorkflowType.VersionCertainty], T1.[E_Dictionar" +
                    "yWorkflowType.VersionWorkflowInstanceID], T1.[E_DictionaryWorkflowType.VersionUp" +
                    "datedBy], T1.[E_DictionaryWorkflowType.VersionDeletedBy], T1.[E_DictionaryWorkfl" +
                    "owType.VersionOwnerContactID], T1.[E_DictionaryWorkflowType.VersionOwnerCompanyI" +
                    "D], T1.[E_DictionaryWorkflowType.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n" +
                    "            T.WorkflowTypeID AS [E_DictionaryWorkflowType.WorkflowTypeID], \r\n   " +
                    "         T.StandardWorkflowTypeName AS [E_DictionaryWorkflowType.StandardWorkflo" +
                    "wTypeName], \r\n            T.CustomWorkflowTypeName AS [E_DictionaryWorkflowType." +
                    "CustomWorkflowTypeName], \r\n            T.Description AS [E_DictionaryWorkflowTyp" +
                    "e.Description], \r\n            T.Version AS [E_DictionaryWorkflowType.Version], \r" +
                    "\n            T.VersionAntecedentID AS [E_DictionaryWorkflowType.VersionAnteceden" +
                    "tID], \r\n            T.VersionCertainty AS [E_DictionaryWorkflowType.VersionCerta" +
                    "inty], \r\n            T.VersionWorkflowInstanceID AS [E_DictionaryWorkflowType.Ve" +
                    "rsionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [E_DictionaryWorkf" +
                    "lowType.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [E_DictionaryWork" +
                    "flowType.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [E_Dictiona" +
                    "ryWorkflowType.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS " +
                    "[E_DictionaryWorkflowType.VersionOwnerCompanyID], \r\n            T.VersionUpdated" +
                    " AS [E_DictionaryWorkflowType.VersionUpdated], \r\n            True AS _from0\r\n   " +
                    "     FROM NKDC.DictionaryWorkflowTypes AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_Workflow
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView250()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_Workflow", "\r\n    SELECT VALUE -- Constructing E_Workflow\r\n        [NKD.Module.BusinessObject" +
                    "s.Store.E_Workflow](T1.[E_Workflow.WorkflowID], T1.[E_Workflow.WorkflowName], T1" +
                    ".[E_Workflow.WorkflowTypeID], T1.[E_Workflow.ApplicationID], T1.[E_Workflow.XAML" +
                    "], T1.[E_Workflow.DLL], T1.[E_Workflow.FullName], T1.[E_Workflow.Version], T1.[E" +
                    "_Workflow.VersionAntecedentID], T1.[E_Workflow.VersionCertainty], T1.[E_Workflow" +
                    ".VersionWorkflowInstanceID], T1.[E_Workflow.VersionUpdatedBy], T1.[E_Workflow.Ve" +
                    "rsionDeletedBy], T1.[E_Workflow.VersionOwnerContactID], T1.[E_Workflow.VersionOw" +
                    "nerCompanyID], T1.[E_Workflow.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n   " +
                    "         T.WorkflowID AS [E_Workflow.WorkflowID], \r\n            T.WorkflowName A" +
                    "S [E_Workflow.WorkflowName], \r\n            T.WorkflowTypeID AS [E_Workflow.Workf" +
                    "lowTypeID], \r\n            T.ApplicationID AS [E_Workflow.ApplicationID], \r\n     " +
                    "       T.XAML AS [E_Workflow.XAML], \r\n            T.DLL AS [E_Workflow.DLL], \r\n " +
                    "           T.FullName AS [E_Workflow.FullName], \r\n            T.Version AS [E_Wo" +
                    "rkflow.Version], \r\n            T.VersionAntecedentID AS [E_Workflow.VersionAntec" +
                    "edentID], \r\n            T.VersionCertainty AS [E_Workflow.VersionCertainty], \r\n " +
                    "           T.VersionWorkflowInstanceID AS [E_Workflow.VersionWorkflowInstanceID]" +
                    ", \r\n            T.VersionUpdatedBy AS [E_Workflow.VersionUpdatedBy], \r\n         " +
                    "   T.VersionDeletedBy AS [E_Workflow.VersionDeletedBy], \r\n            T.VersionO" +
                    "wnerContactID AS [E_Workflow.VersionOwnerContactID], \r\n            T.VersionOwne" +
                    "rCompanyID AS [E_Workflow.VersionOwnerCompanyID], \r\n            T.VersionUpdated" +
                    " AS [E_Workflow.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC" +
                    ".Workflows AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_AssayGroupSubsample
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView251()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3270);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_AssayGroupSubsample\r\n        [NKD.Module.Bu");
            viewString.Append("sinessObjects.Store.X_AssayGroupSubsample](T1.[X_AssayGroupSubsample.AssayGroupS");
            viewString.Append("ubsampleID], T1.[X_AssayGroupSubsample.AssayGroupID], T1.[X_AssayGroupSubsample.");
            viewString.Append("AssayGroupWorkflowProcedureID], T1.[X_AssayGroupSubsample.Sequence], T1.[X_Assay");
            viewString.Append("GroupSubsample.LabSubsampleName], T1.[X_AssayGroupSubsample.SampleAntecedentID],");
            viewString.Append(" T1.[X_AssayGroupSubsample.FromDepth], T1.[X_AssayGroupSubsample.ToDepth], T1.[X");
            viewString.Append("_AssayGroupSubsample.AgitationMethodID], T1.[X_AssayGroupSubsample.DurationProce");
            viewString.Append("dureSeconds], T1.[X_AssayGroupSubsample.DurationTotalSeconds], T1.[X_AssayGroupS");
            viewString.Append("ubsample.RackBlock], T1.[X_AssayGroupSubsample.RackPosition], T1.[X_AssayGroupSu");
            viewString.Append("bsample.SubsampledBy], T1.[X_AssayGroupSubsample.Subsampled], T1.[X_AssayGroupSu");
            viewString.Append("bsample.Comment], T1.[X_AssayGroupSubsample.Version], T1.[X_AssayGroupSubsample.");
            viewString.Append("VersionAntecedentID], T1.[X_AssayGroupSubsample.VersionCertainty], T1.[X_AssayGr");
            viewString.Append("oupSubsample.VersionWorkflowInstanceID], T1.[X_AssayGroupSubsample.VersionUpdate");
            viewString.Append("dBy], T1.[X_AssayGroupSubsample.VersionDeletedBy], T1.[X_AssayGroupSubsample.Ver");
            viewString.Append("sionOwnerContactID], T1.[X_AssayGroupSubsample.VersionOwnerCompanyID], T1.[X_Ass");
            viewString.Append("ayGroupSubsample.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.As");
            viewString.Append("sayGroupSubsampleID AS [X_AssayGroupSubsample.AssayGroupSubsampleID], \r\n        ");
            viewString.Append("    T.AssayGroupID AS [X_AssayGroupSubsample.AssayGroupID], \r\n            T.Assa");
            viewString.Append("yGroupWorkflowProcedureID AS [X_AssayGroupSubsample.AssayGroupWorkflowProcedureI");
            viewString.Append("D], \r\n            T.Sequence AS [X_AssayGroupSubsample.Sequence], \r\n            ");
            viewString.Append("T.LabSubsampleName AS [X_AssayGroupSubsample.LabSubsampleName], \r\n            T.");
            viewString.Append("SampleAntecedentID AS [X_AssayGroupSubsample.SampleAntecedentID], \r\n            ");
            viewString.Append("T.FromDepth AS [X_AssayGroupSubsample.FromDepth], \r\n            T.ToDepth AS [X_");
            viewString.Append("AssayGroupSubsample.ToDepth], \r\n            T.AgitationMethodID AS [X_AssayGroup");
            viewString.Append("Subsample.AgitationMethodID], \r\n            T.DurationProcedureSeconds AS [X_Ass");
            viewString.Append("ayGroupSubsample.DurationProcedureSeconds], \r\n            T.DurationTotalSeconds");
            viewString.Append(" AS [X_AssayGroupSubsample.DurationTotalSeconds], \r\n            T.RackBlock AS [");
            viewString.Append("X_AssayGroupSubsample.RackBlock], \r\n            T.RackPosition AS [X_AssayGroupS");
            viewString.Append("ubsample.RackPosition], \r\n            T.SubsampledBy AS [X_AssayGroupSubsample.S");
            viewString.Append("ubsampledBy], \r\n            T.Subsampled AS [X_AssayGroupSubsample.Subsampled], ");
            viewString.Append("\r\n            T.Comment AS [X_AssayGroupSubsample.Comment], \r\n            T.Vers");
            viewString.Append("ion AS [X_AssayGroupSubsample.Version], \r\n            T.VersionAntecedentID AS [");
            viewString.Append("X_AssayGroupSubsample.VersionAntecedentID], \r\n            T.VersionCertainty AS ");
            viewString.Append("[X_AssayGroupSubsample.VersionCertainty], \r\n            T.VersionWorkflowInstanc");
            viewString.Append("eID AS [X_AssayGroupSubsample.VersionWorkflowInstanceID], \r\n            T.Versio");
            viewString.Append("nUpdatedBy AS [X_AssayGroupSubsample.VersionUpdatedBy], \r\n            T.VersionD");
            viewString.Append("eletedBy AS [X_AssayGroupSubsample.VersionDeletedBy], \r\n            T.VersionOwn");
            viewString.Append("erContactID AS [X_AssayGroupSubsample.VersionOwnerContactID], \r\n            T.Ve");
            viewString.Append("rsionOwnerCompanyID AS [X_AssayGroupSubsample.VersionOwnerCompanyID], \r\n        ");
            viewString.Append("    T.VersionUpdated AS [X_AssayGroupSubsample.VersionUpdated], \r\n            Tr");
            viewString.Append("ue AS _from0\r\n        FROM NKDC.AssayGroupSubsamples AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_AssayGroupSubsample", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_AssayGroupSubsampleChemical
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView252()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2104);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_AssayGroupSubsampleChemical\r\n        [NKD.M");
            viewString.Append("odule.BusinessObjects.Store.X_AssayGroupSubsampleChemical](T1.[X_AssayGroupSubsa");
            viewString.Append("mpleChemical.AssayGroupSubsampleChemicalID], T1.[X_AssayGroupSubsampleChemical.A");
            viewString.Append("ssayGroupSubsampleID], T1.[X_AssayGroupSubsampleChemical.ChemicalID], T1.[X_Assa");
            viewString.Append("yGroupSubsampleChemical.Moles], T1.[X_AssayGroupSubsampleChemical.Version], T1.[");
            viewString.Append("X_AssayGroupSubsampleChemical.VersionAntecedentID], T1.[X_AssayGroupSubsampleChe");
            viewString.Append("mical.VersionCertainty], T1.[X_AssayGroupSubsampleChemical.VersionWorkflowInstan");
            viewString.Append("ceID], T1.[X_AssayGroupSubsampleChemical.VersionUpdatedBy], T1.[X_AssayGroupSubs");
            viewString.Append("ampleChemical.VersionDeletedBy], T1.[X_AssayGroupSubsampleChemical.VersionOwnerC");
            viewString.Append("ontactID], T1.[X_AssayGroupSubsampleChemical.VersionOwnerCompanyID], T1.[X_Assay");
            viewString.Append("GroupSubsampleChemical.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n          ");
            viewString.Append("  T.AssayGroupSubsampleChemicalID AS [X_AssayGroupSubsampleChemical.AssayGroupSu");
            viewString.Append("bsampleChemicalID], \r\n            T.AssayGroupSubsampleID AS [X_AssayGroupSubsam");
            viewString.Append("pleChemical.AssayGroupSubsampleID], \r\n            T.ChemicalID AS [X_AssayGroupS");
            viewString.Append("ubsampleChemical.ChemicalID], \r\n            T.Moles AS [X_AssayGroupSubsampleChe");
            viewString.Append("mical.Moles], \r\n            T.Version AS [X_AssayGroupSubsampleChemical.Version]");
            viewString.Append(", \r\n            T.VersionAntecedentID AS [X_AssayGroupSubsampleChemical.VersionA");
            viewString.Append("ntecedentID], \r\n            T.VersionCertainty AS [X_AssayGroupSubsampleChemical");
            viewString.Append(".VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [X_AssayGroupSu");
            viewString.Append("bsampleChemical.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS ");
            viewString.Append("[X_AssayGroupSubsampleChemical.VersionUpdatedBy], \r\n            T.VersionDeleted");
            viewString.Append("By AS [X_AssayGroupSubsampleChemical.VersionDeletedBy], \r\n            T.VersionO");
            viewString.Append("wnerContactID AS [X_AssayGroupSubsampleChemical.VersionOwnerContactID], \r\n      ");
            viewString.Append("      T.VersionOwnerCompanyID AS [X_AssayGroupSubsampleChemical.VersionOwnerComp");
            viewString.Append("anyID], \r\n            T.VersionUpdated AS [X_AssayGroupSubsampleChemical.Version");
            viewString.Append("Updated], \r\n            True AS _from0\r\n        FROM NKDC.AssayGroupSubsampleChe");
            viewString.Append("micals AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_AssayGroupSubsampleChemical", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_AssayGroupSubsampleEquipment
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView253()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_AssayGroupSubsampleEquipment", "\r\n    SELECT VALUE -- Constructing X_AssayGroupSubsampleEquipment\r\n        [NKD.M" +
                    "odule.BusinessObjects.Store.X_AssayGroupSubsampleEquipment](T1.[X_AssayGroupSubs" +
                    "ampleEquipment.AssayGroupSubsampleEquipmentID], T1.[X_AssayGroupSubsampleEquipme" +
                    "nt.AssayGroupSubsampleID], T1.[X_AssayGroupSubsampleEquipment.AssetID], T1.[X_As" +
                    "sayGroupSubsampleEquipment.Version], T1.[X_AssayGroupSubsampleEquipment.VersionA" +
                    "ntecedentID], T1.[X_AssayGroupSubsampleEquipment.VersionCertainty], T1.[X_AssayG" +
                    "roupSubsampleEquipment.VersionWorkflowInstanceID], T1.[X_AssayGroupSubsampleEqui" +
                    "pment.VersionUpdatedBy], T1.[X_AssayGroupSubsampleEquipment.VersionDeletedBy], T" +
                    "1.[X_AssayGroupSubsampleEquipment.VersionOwnerContactID], T1.[X_AssayGroupSubsam" +
                    "pleEquipment.VersionOwnerCompanyID], T1.[X_AssayGroupSubsampleEquipment.VersionU" +
                    "pdated])\r\n    FROM (\r\n        SELECT \r\n            T.AssayGroupSubsampleEquipmen" +
                    "tID AS [X_AssayGroupSubsampleEquipment.AssayGroupSubsampleEquipmentID], \r\n      " +
                    "      T.AssayGroupSubsampleID AS [X_AssayGroupSubsampleEquipment.AssayGroupSubsa" +
                    "mpleID], \r\n            T.AssetID AS [X_AssayGroupSubsampleEquipment.AssetID], \r\n" +
                    "            T.Version AS [X_AssayGroupSubsampleEquipment.Version], \r\n           " +
                    " T.VersionAntecedentID AS [X_AssayGroupSubsampleEquipment.VersionAntecedentID], " +
                    "\r\n            T.VersionCertainty AS [X_AssayGroupSubsampleEquipment.VersionCerta" +
                    "inty], \r\n            T.VersionWorkflowInstanceID AS [X_AssayGroupSubsampleEquipm" +
                    "ent.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_AssayGrou" +
                    "pSubsampleEquipment.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_As" +
                    "sayGroupSubsampleEquipment.VersionDeletedBy], \r\n            T.VersionOwnerContac" +
                    "tID AS [X_AssayGroupSubsampleEquipment.VersionOwnerContactID], \r\n            T.V" +
                    "ersionOwnerCompanyID AS [X_AssayGroupSubsampleEquipment.VersionOwnerCompanyID], " +
                    "\r\n            T.VersionUpdated AS [X_AssayGroupSubsampleEquipment.VersionUpdated" +
                    "], \r\n            True AS _from0\r\n        FROM NKDC.AssayGroupSubsampleEquipments" +
                    " AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_AssayGroupSubsamplePrecondition
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView254()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2919);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_AssayGroupSubsamplePrecondition\r\n        [N");
            viewString.Append("KD.Module.BusinessObjects.Store.X_AssayGroupSubsamplePrecondition](T1.[X_AssayGr");
            viewString.Append("oupSubsamplePrecondition.AssayGroupSubsamplePreconditionID], T1.[X_AssayGroupSub");
            viewString.Append("samplePrecondition.AssayGroupSubsampleID], T1.[X_AssayGroupSubsamplePrecondition");
            viewString.Append(".AssayPreconditionTypeID], T1.[X_AssayGroupSubsamplePrecondition.PreconditionNam");
            viewString.Append("e], T1.[X_AssayGroupSubsamplePrecondition.PreconditionParameterID], T1.[X_AssayG");
            viewString.Append("roupSubsamplePrecondition.Precondition], T1.[X_AssayGroupSubsamplePrecondition.P");
            viewString.Append("reconditionMinimum], T1.[X_AssayGroupSubsamplePrecondition.PreconditionMaximum],");
            viewString.Append(" T1.[X_AssayGroupSubsamplePrecondition.Version], T1.[X_AssayGroupSubsamplePrecon");
            viewString.Append("dition.VersionAntecedentID], T1.[X_AssayGroupSubsamplePrecondition.VersionCertai");
            viewString.Append("nty], T1.[X_AssayGroupSubsamplePrecondition.VersionWorkflowInstanceID], T1.[X_As");
            viewString.Append("sayGroupSubsamplePrecondition.VersionUpdatedBy], T1.[X_AssayGroupSubsamplePrecon");
            viewString.Append("dition.VersionDeletedBy], T1.[X_AssayGroupSubsamplePrecondition.VersionOwnerCont");
            viewString.Append("actID], T1.[X_AssayGroupSubsamplePrecondition.VersionOwnerCompanyID], T1.[X_Assa");
            viewString.Append("yGroupSubsamplePrecondition.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n     ");
            viewString.Append("       T.AssayGroupSubsamplePreconditionID AS [X_AssayGroupSubsamplePrecondition");
            viewString.Append(".AssayGroupSubsamplePreconditionID], \r\n            T.AssayGroupSubsampleID AS [X");
            viewString.Append("_AssayGroupSubsamplePrecondition.AssayGroupSubsampleID], \r\n            T.AssayPr");
            viewString.Append("econditionTypeID AS [X_AssayGroupSubsamplePrecondition.AssayPreconditionTypeID],");
            viewString.Append(" \r\n            T.PreconditionName AS [X_AssayGroupSubsamplePrecondition.Precondi");
            viewString.Append("tionName], \r\n            T.PreconditionParameterID AS [X_AssayGroupSubsamplePrec");
            viewString.Append("ondition.PreconditionParameterID], \r\n            T.Precondition AS [X_AssayGroup");
            viewString.Append("SubsamplePrecondition.Precondition], \r\n            T.PreconditionMinimum AS [X_A");
            viewString.Append("ssayGroupSubsamplePrecondition.PreconditionMinimum], \r\n            T.Preconditio");
            viewString.Append("nMaximum AS [X_AssayGroupSubsamplePrecondition.PreconditionMaximum], \r\n         ");
            viewString.Append("   T.Version AS [X_AssayGroupSubsamplePrecondition.Version], \r\n            T.Ver");
            viewString.Append("sionAntecedentID AS [X_AssayGroupSubsamplePrecondition.VersionAntecedentID], \r\n ");
            viewString.Append("           T.VersionCertainty AS [X_AssayGroupSubsamplePrecondition.VersionCerta");
            viewString.Append("inty], \r\n            T.VersionWorkflowInstanceID AS [X_AssayGroupSubsamplePrecon");
            viewString.Append("dition.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_AssayG");
            viewString.Append("roupSubsamplePrecondition.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS");
            viewString.Append(" [X_AssayGroupSubsamplePrecondition.VersionDeletedBy], \r\n            T.VersionOw");
            viewString.Append("nerContactID AS [X_AssayGroupSubsamplePrecondition.VersionOwnerContactID], \r\n   ");
            viewString.Append("         T.VersionOwnerCompanyID AS [X_AssayGroupSubsamplePrecondition.VersionOw");
            viewString.Append("nerCompanyID], \r\n            T.VersionUpdated AS [X_AssayGroupSubsamplePrecondit");
            viewString.Append("ion.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.AssayGroupS");
            viewString.Append("ubsamplePreconditions AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_AssayGroupSubsamplePrecondition", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_AssayGroupSubsampleRelation
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView255()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2137);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_AssayGroupSubsampleRelation\r\n        [NKD.M");
            viewString.Append("odule.BusinessObjects.Store.X_AssayGroupSubsampleRelation](T1.[X_AssayGroupSubsa");
            viewString.Append("mpleRelation.AssayGroupSubsampleRelationID], T1.[X_AssayGroupSubsampleRelation.S");
            viewString.Append("ourceSubsampleID], T1.[X_AssayGroupSubsampleRelation.DestinationSubsampleID], T1");
            viewString.Append(".[X_AssayGroupSubsampleRelation.Sequence], T1.[X_AssayGroupSubsampleRelation.Ver");
            viewString.Append("sion], T1.[X_AssayGroupSubsampleRelation.VersionAntecedentID], T1.[X_AssayGroupS");
            viewString.Append("ubsampleRelation.VersionCertainty], T1.[X_AssayGroupSubsampleRelation.VersionWor");
            viewString.Append("kflowInstanceID], T1.[X_AssayGroupSubsampleRelation.VersionUpdatedBy], T1.[X_Ass");
            viewString.Append("ayGroupSubsampleRelation.VersionDeletedBy], T1.[X_AssayGroupSubsampleRelation.Ve");
            viewString.Append("rsionOwnerContactID], T1.[X_AssayGroupSubsampleRelation.VersionOwnerCompanyID], ");
            viewString.Append("T1.[X_AssayGroupSubsampleRelation.VersionUpdated])\r\n    FROM (\r\n        SELECT \r");
            viewString.Append("\n            T.AssayGroupSubsampleRelationID AS [X_AssayGroupSubsampleRelation.A");
            viewString.Append("ssayGroupSubsampleRelationID], \r\n            T.SourceSubsampleID AS [X_AssayGrou");
            viewString.Append("pSubsampleRelation.SourceSubsampleID], \r\n            T.DestinationSubsampleID AS");
            viewString.Append(" [X_AssayGroupSubsampleRelation.DestinationSubsampleID], \r\n            T.Sequenc");
            viewString.Append("e AS [X_AssayGroupSubsampleRelation.Sequence], \r\n            T.Version AS [X_Ass");
            viewString.Append("ayGroupSubsampleRelation.Version], \r\n            T.VersionAntecedentID AS [X_Ass");
            viewString.Append("ayGroupSubsampleRelation.VersionAntecedentID], \r\n            T.VersionCertainty ");
            viewString.Append("AS [X_AssayGroupSubsampleRelation.VersionCertainty], \r\n            T.VersionWork");
            viewString.Append("flowInstanceID AS [X_AssayGroupSubsampleRelation.VersionWorkflowInstanceID], \r\n ");
            viewString.Append("           T.VersionUpdatedBy AS [X_AssayGroupSubsampleRelation.VersionUpdatedBy");
            viewString.Append("], \r\n            T.VersionDeletedBy AS [X_AssayGroupSubsampleRelation.VersionDel");
            viewString.Append("etedBy], \r\n            T.VersionOwnerContactID AS [X_AssayGroupSubsampleRelation");
            viewString.Append(".VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [X_AssayGroupS");
            viewString.Append("ubsampleRelation.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [X_As");
            viewString.Append("sayGroupSubsampleRelation.VersionUpdated], \r\n            True AS _from0\r\n       ");
            viewString.Append(" FROM NKDC.AssayGroupSubsampleRelations AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_AssayGroupSubsampleRelation", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_AssayGroupTestEquipment
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView256()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_AssayGroupTestEquipment", "\r\n    SELECT VALUE -- Constructing X_AssayGroupTestEquipment\r\n        [NKD.Module" +
                    ".BusinessObjects.Store.X_AssayGroupTestEquipment](T1.[X_AssayGroupTestEquipment." +
                    "AssayGroupTestEquipmentID], T1.[X_AssayGroupTestEquipment.AssayGroupTestID], T1." +
                    "[X_AssayGroupTestEquipment.AssetID], T1.[X_AssayGroupTestEquipment.Version], T1." +
                    "[X_AssayGroupTestEquipment.VersionAntecedentID], T1.[X_AssayGroupTestEquipment.V" +
                    "ersionCertainty], T1.[X_AssayGroupTestEquipment.VersionWorkflowInstanceID], T1.[" +
                    "X_AssayGroupTestEquipment.VersionUpdatedBy], T1.[X_AssayGroupTestEquipment.Versi" +
                    "onDeletedBy], T1.[X_AssayGroupTestEquipment.VersionOwnerContactID], T1.[X_AssayG" +
                    "roupTestEquipment.VersionOwnerCompanyID], T1.[X_AssayGroupTestEquipment.VersionU" +
                    "pdated])\r\n    FROM (\r\n        SELECT \r\n            T.AssayGroupTestEquipmentID A" +
                    "S [X_AssayGroupTestEquipment.AssayGroupTestEquipmentID], \r\n            T.AssayGr" +
                    "oupTestID AS [X_AssayGroupTestEquipment.AssayGroupTestID], \r\n            T.Asset" +
                    "ID AS [X_AssayGroupTestEquipment.AssetID], \r\n            T.Version AS [X_AssayGr" +
                    "oupTestEquipment.Version], \r\n            T.VersionAntecedentID AS [X_AssayGroupT" +
                    "estEquipment.VersionAntecedentID], \r\n            T.VersionCertainty AS [X_AssayG" +
                    "roupTestEquipment.VersionCertainty], \r\n            T.VersionWorkflowInstanceID A" +
                    "S [X_AssayGroupTestEquipment.VersionWorkflowInstanceID], \r\n            T.Version" +
                    "UpdatedBy AS [X_AssayGroupTestEquipment.VersionUpdatedBy], \r\n            T.Versi" +
                    "onDeletedBy AS [X_AssayGroupTestEquipment.VersionDeletedBy], \r\n            T.Ver" +
                    "sionOwnerContactID AS [X_AssayGroupTestEquipment.VersionOwnerContactID], \r\n     " +
                    "       T.VersionOwnerCompanyID AS [X_AssayGroupTestEquipment.VersionOwnerCompany" +
                    "ID], \r\n            T.VersionUpdated AS [X_AssayGroupTestEquipment.VersionUpdated" +
                    "], \r\n            True AS _from0\r\n        FROM NKDC.AssayGroupTestEquipments AS T" +
                    "\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_AssayGroupWorkflow
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView257()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_AssayGroupWorkflow", "\r\n    SELECT VALUE -- Constructing X_AssayGroupWorkflow\r\n        [NKD.Module.Busi" +
                    "nessObjects.Store.X_AssayGroupWorkflow](T1.[X_AssayGroupWorkflow.AssayGroupWorkf" +
                    "lowID], T1.[X_AssayGroupWorkflow.AssayGroupID], T1.[X_AssayGroupWorkflow.Workflo" +
                    "wName], T1.[X_AssayGroupWorkflow.WorkflowID], T1.[X_AssayGroupWorkflow.Version]," +
                    " T1.[X_AssayGroupWorkflow.VersionAntecedentID], T1.[X_AssayGroupWorkflow.Version" +
                    "Certainty], T1.[X_AssayGroupWorkflow.VersionWorkflowInstanceID], T1.[X_AssayGrou" +
                    "pWorkflow.VersionUpdatedBy], T1.[X_AssayGroupWorkflow.VersionDeletedBy], T1.[X_A" +
                    "ssayGroupWorkflow.VersionOwnerContactID], T1.[X_AssayGroupWorkflow.VersionOwnerC" +
                    "ompanyID], T1.[X_AssayGroupWorkflow.VersionUpdated])\r\n    FROM (\r\n        SELECT" +
                    " \r\n            T.AssayGroupWorkflowID AS [X_AssayGroupWorkflow.AssayGroupWorkflo" +
                    "wID], \r\n            T.AssayGroupID AS [X_AssayGroupWorkflow.AssayGroupID], \r\n   " +
                    "         T.WorkflowName AS [X_AssayGroupWorkflow.WorkflowName], \r\n            T." +
                    "WorkflowID AS [X_AssayGroupWorkflow.WorkflowID], \r\n            T.Version AS [X_A" +
                    "ssayGroupWorkflow.Version], \r\n            T.VersionAntecedentID AS [X_AssayGroup" +
                    "Workflow.VersionAntecedentID], \r\n            T.VersionCertainty AS [X_AssayGroup" +
                    "Workflow.VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [X_Assa" +
                    "yGroupWorkflow.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [" +
                    "X_AssayGroupWorkflow.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_A" +
                    "ssayGroupWorkflow.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [X" +
                    "_AssayGroupWorkflow.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyI" +
                    "D AS [X_AssayGroupWorkflow.VersionOwnerCompanyID], \r\n            T.VersionUpdate" +
                    "d AS [X_AssayGroupWorkflow.VersionUpdated], \r\n            True AS _from0\r\n      " +
                    "  FROM NKDC.AssayGroupWorkflows AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_AssayGroupWorkflowProcedure
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView258()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2294);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_AssayGroupWorkflowProcedure\r\n        [NKD.M");
            viewString.Append("odule.BusinessObjects.Store.X_AssayGroupWorkflowProcedure](T1.[X_AssayGroupWorkf");
            viewString.Append("lowProcedure.AssayGroupWorkflowProcedureID], T1.[X_AssayGroupWorkflowProcedure.A");
            viewString.Append("ssayGroupWorkflowID], T1.[X_AssayGroupWorkflowProcedure.WorkflowStateName], T1.[");
            viewString.Append("X_AssayGroupWorkflowProcedure.AssayProcedureProtocolID], T1.[X_AssayGroupWorkflo");
            viewString.Append("wProcedure.Sequence], T1.[X_AssayGroupWorkflowProcedure.Version], T1.[X_AssayGro");
            viewString.Append("upWorkflowProcedure.VersionAntecedentID], T1.[X_AssayGroupWorkflowProcedure.Vers");
            viewString.Append("ionCertainty], T1.[X_AssayGroupWorkflowProcedure.VersionWorkflowInstanceID], T1.");
            viewString.Append("[X_AssayGroupWorkflowProcedure.VersionUpdatedBy], T1.[X_AssayGroupWorkflowProced");
            viewString.Append("ure.VersionDeletedBy], T1.[X_AssayGroupWorkflowProcedure.VersionOwnerContactID],");
            viewString.Append(" T1.[X_AssayGroupWorkflowProcedure.VersionOwnerCompanyID], T1.[X_AssayGroupWorkf");
            viewString.Append("lowProcedure.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.AssayG");
            viewString.Append("roupWorkflowProcedureID AS [X_AssayGroupWorkflowProcedure.AssayGroupWorkflowProc");
            viewString.Append("edureID], \r\n            T.AssayGroupWorkflowID AS [X_AssayGroupWorkflowProcedure");
            viewString.Append(".AssayGroupWorkflowID], \r\n            T.WorkflowStateName AS [X_AssayGroupWorkfl");
            viewString.Append("owProcedure.WorkflowStateName], \r\n            T.AssayProcedureProtocolID AS [X_A");
            viewString.Append("ssayGroupWorkflowProcedure.AssayProcedureProtocolID], \r\n            T.Sequence A");
            viewString.Append("S [X_AssayGroupWorkflowProcedure.Sequence], \r\n            T.Version AS [X_AssayG");
            viewString.Append("roupWorkflowProcedure.Version], \r\n            T.VersionAntecedentID AS [X_AssayG");
            viewString.Append("roupWorkflowProcedure.VersionAntecedentID], \r\n            T.VersionCertainty AS ");
            viewString.Append("[X_AssayGroupWorkflowProcedure.VersionCertainty], \r\n            T.VersionWorkflo");
            viewString.Append("wInstanceID AS [X_AssayGroupWorkflowProcedure.VersionWorkflowInstanceID], \r\n    ");
            viewString.Append("        T.VersionUpdatedBy AS [X_AssayGroupWorkflowProcedure.VersionUpdatedBy], ");
            viewString.Append("\r\n            T.VersionDeletedBy AS [X_AssayGroupWorkflowProcedure.VersionDelete");
            viewString.Append("dBy], \r\n            T.VersionOwnerContactID AS [X_AssayGroupWorkflowProcedure.Ve");
            viewString.Append("rsionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [X_AssayGroupWork");
            viewString.Append("flowProcedure.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [X_Assay");
            viewString.Append("GroupWorkflowProcedure.VersionUpdated], \r\n            True AS _from0\r\n        FR");
            viewString.Append("OM NKDC.AssayGroupWorkflowProcedures AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_AssayGroupWorkflowProcedure", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_AssayProcedure
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView259()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_AssayProcedure", "\r\n    SELECT VALUE -- Constructing X_AssayProcedure\r\n        [NKD.Module.Business" +
                    "Objects.Store.X_AssayProcedure](T1.[X_AssayProcedure.AssayProcedureID], T1.[X_As" +
                    "sayProcedure.AssayProcedureTypeID], T1.[X_AssayProcedure.AssayProcedureName], T1" +
                    ".[X_AssayProcedure.Version], T1.[X_AssayProcedure.VersionAntecedentID], T1.[X_As" +
                    "sayProcedure.VersionCertainty], T1.[X_AssayProcedure.VersionWorkflowInstanceID]," +
                    " T1.[X_AssayProcedure.VersionUpdatedBy], T1.[X_AssayProcedure.VersionDeletedBy]," +
                    " T1.[X_AssayProcedure.VersionOwnerContactID], T1.[X_AssayProcedure.VersionOwnerC" +
                    "ompanyID], T1.[X_AssayProcedure.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n " +
                    "           T.AssayProcedureID AS [X_AssayProcedure.AssayProcedureID], \r\n        " +
                    "    T.AssayProcedureTypeID AS [X_AssayProcedure.AssayProcedureTypeID], \r\n       " +
                    "     T.AssayProcedureName AS [X_AssayProcedure.AssayProcedureName], \r\n          " +
                    "  T.Version AS [X_AssayProcedure.Version], \r\n            T.VersionAntecedentID A" +
                    "S [X_AssayProcedure.VersionAntecedentID], \r\n            T.VersionCertainty AS [X" +
                    "_AssayProcedure.VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS " +
                    "[X_AssayProcedure.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy A" +
                    "S [X_AssayProcedure.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_As" +
                    "sayProcedure.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [X_Assa" +
                    "yProcedure.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [X_A" +
                    "ssayProcedure.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [X_Assay" +
                    "Procedure.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.Assay" +
                    "Procedures AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_AssayProcedureProtocol
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView260()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2355);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_AssayProcedureProtocol\r\n        [NKD.Module");
            viewString.Append(".BusinessObjects.Store.X_AssayProcedureProtocol](T1.[X_AssayProcedureProtocol.As");
            viewString.Append("sayProcedureProtocolID], T1.[X_AssayProcedureProtocol.AssayProcedureProtocolName");
            viewString.Append("], T1.[X_AssayProcedureProtocol.AssayProcedureID], T1.[X_AssayProcedureProtocol.");
            viewString.Append("AssayProcedureComplianceID], T1.[X_AssayProcedureProtocol.AssayProcedureMethodTy");
            viewString.Append("peID], T1.[X_AssayProcedureProtocol.AssayProcedureTechniqueID], T1.[X_AssayProce");
            viewString.Append("dureProtocol.Version], T1.[X_AssayProcedureProtocol.VersionAntecedentID], T1.[X_");
            viewString.Append("AssayProcedureProtocol.VersionCertainty], T1.[X_AssayProcedureProtocol.VersionWo");
            viewString.Append("rkflowInstanceID], T1.[X_AssayProcedureProtocol.VersionUpdatedBy], T1.[X_AssayPr");
            viewString.Append("ocedureProtocol.VersionDeletedBy], T1.[X_AssayProcedureProtocol.VersionOwnerCont");
            viewString.Append("actID], T1.[X_AssayProcedureProtocol.VersionOwnerCompanyID], T1.[X_AssayProcedur");
            viewString.Append("eProtocol.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.AssayProc");
            viewString.Append("edureProtocolID AS [X_AssayProcedureProtocol.AssayProcedureProtocolID], \r\n      ");
            viewString.Append("      T.AssayProcedureProtocolName AS [X_AssayProcedureProtocol.AssayProcedurePr");
            viewString.Append("otocolName], \r\n            T.AssayProcedureID AS [X_AssayProcedureProtocol.Assay");
            viewString.Append("ProcedureID], \r\n            T.AssayProcedureComplianceID AS [X_AssayProcedurePro");
            viewString.Append("tocol.AssayProcedureComplianceID], \r\n            T.AssayProcedureMethodTypeID AS");
            viewString.Append(" [X_AssayProcedureProtocol.AssayProcedureMethodTypeID], \r\n            T.AssayPro");
            viewString.Append("cedureTechniqueID AS [X_AssayProcedureProtocol.AssayProcedureTechniqueID], \r\n   ");
            viewString.Append("         T.Version AS [X_AssayProcedureProtocol.Version], \r\n            T.Versio");
            viewString.Append("nAntecedentID AS [X_AssayProcedureProtocol.VersionAntecedentID], \r\n            T");
            viewString.Append(".VersionCertainty AS [X_AssayProcedureProtocol.VersionCertainty], \r\n            ");
            viewString.Append("T.VersionWorkflowInstanceID AS [X_AssayProcedureProtocol.VersionWorkflowInstance");
            viewString.Append("ID], \r\n            T.VersionUpdatedBy AS [X_AssayProcedureProtocol.VersionUpdate");
            viewString.Append("dBy], \r\n            T.VersionDeletedBy AS [X_AssayProcedureProtocol.VersionDelet");
            viewString.Append("edBy], \r\n            T.VersionOwnerContactID AS [X_AssayProcedureProtocol.Versio");
            viewString.Append("nOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [X_AssayProcedureProt");
            viewString.Append("ocol.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [X_AssayProcedure");
            viewString.Append("Protocol.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.AssayP");
            viewString.Append("rocedureProtocols AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_AssayProcedureProtocol", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_AssayProcedureProtocolEquipment
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView261()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2118);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_AssayProcedureProtocolEquipment\r\n        [N");
            viewString.Append("KD.Module.BusinessObjects.Store.X_AssayProcedureProtocolEquipment](T1.[X_AssayPr");
            viewString.Append("ocedureProtocolEquipment.AssayProcedureProtocolEquipmentID], T1.[X_AssayProcedur");
            viewString.Append("eProtocolEquipment.AssayProcedureProtocolID], T1.[X_AssayProcedureProtocolEquipm");
            viewString.Append("ent.ModelID], T1.[X_AssayProcedureProtocolEquipment.Version], T1.[X_AssayProcedu");
            viewString.Append("reProtocolEquipment.VersionAntecedentID], T1.[X_AssayProcedureProtocolEquipment.");
            viewString.Append("VersionCertainty], T1.[X_AssayProcedureProtocolEquipment.VersionWorkflowInstance");
            viewString.Append("ID], T1.[X_AssayProcedureProtocolEquipment.VersionUpdatedBy], T1.[X_AssayProcedu");
            viewString.Append("reProtocolEquipment.VersionDeletedBy], T1.[X_AssayProcedureProtocolEquipment.Ver");
            viewString.Append("sionOwnerContactID], T1.[X_AssayProcedureProtocolEquipment.VersionOwnerCompanyID");
            viewString.Append("], T1.[X_AssayProcedureProtocolEquipment.VersionUpdated])\r\n    FROM (\r\n        S");
            viewString.Append("ELECT \r\n            T.AssayProcedureProtocolEquipmentID AS [X_AssayProcedureProt");
            viewString.Append("ocolEquipment.AssayProcedureProtocolEquipmentID], \r\n            T.AssayProcedure");
            viewString.Append("ProtocolID AS [X_AssayProcedureProtocolEquipment.AssayProcedureProtocolID], \r\n  ");
            viewString.Append("          T.ModelID AS [X_AssayProcedureProtocolEquipment.ModelID], \r\n          ");
            viewString.Append("  T.Version AS [X_AssayProcedureProtocolEquipment.Version], \r\n            T.Vers");
            viewString.Append("ionAntecedentID AS [X_AssayProcedureProtocolEquipment.VersionAntecedentID], \r\n  ");
            viewString.Append("          T.VersionCertainty AS [X_AssayProcedureProtocolEquipment.VersionCertai");
            viewString.Append("nty], \r\n            T.VersionWorkflowInstanceID AS [X_AssayProcedureProtocolEqui");
            viewString.Append("pment.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_AssayPr");
            viewString.Append("ocedureProtocolEquipment.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS ");
            viewString.Append("[X_AssayProcedureProtocolEquipment.VersionDeletedBy], \r\n            T.VersionOwn");
            viewString.Append("erContactID AS [X_AssayProcedureProtocolEquipment.VersionOwnerContactID], \r\n    ");
            viewString.Append("        T.VersionOwnerCompanyID AS [X_AssayProcedureProtocolEquipment.VersionOwn");
            viewString.Append("erCompanyID], \r\n            T.VersionUpdated AS [X_AssayProcedureProtocolEquipme");
            viewString.Append("nt.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.AssayProcedu");
            viewString.Append("reProtocolEquipments AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_AssayProcedureProtocolEquipment", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryAgitationMethod
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView262()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3021);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryAgitationMethod\r\n        [NKD.Mod");
            viewString.Append("ule.BusinessObjects.Store.X_DictionaryAgitationMethod](T1.[X_DictionaryAgitation");
            viewString.Append("Method.AgitationMethodID], T1.[X_DictionaryAgitationMethod.StandardAgitationMeth");
            viewString.Append("odName], T1.[X_DictionaryAgitationMethod.CoalAgitationMethodName], T1.[X_Diction");
            viewString.Append("aryAgitationMethod.GoldAgitationMethodName], T1.[X_DictionaryAgitationMethod.Cus");
            viewString.Append("tomAgitationMethodName], T1.[X_DictionaryAgitationMethod.UnitID], T1.[X_Dictiona");
            viewString.Append("ryAgitationMethod.AgitatedUnits], T1.[X_DictionaryAgitationMethod.Description], ");
            viewString.Append("T1.[X_DictionaryAgitationMethod.FullDescription], T1.[X_DictionaryAgitationMetho");
            viewString.Append("d.Thumbnail], T1.[X_DictionaryAgitationMethod.OriginalFileDataID], T1.[X_Diction");
            viewString.Append("aryAgitationMethod.Version], T1.[X_DictionaryAgitationMethod.VersionAntecedentID");
            viewString.Append("], T1.[X_DictionaryAgitationMethod.VersionCertainty], T1.[X_DictionaryAgitationM");
            viewString.Append("ethod.VersionWorkflowInstanceID], T1.[X_DictionaryAgitationMethod.VersionUpdated");
            viewString.Append("By], T1.[X_DictionaryAgitationMethod.VersionDeletedBy], T1.[X_DictionaryAgitatio");
            viewString.Append("nMethod.VersionOwnerContactID], T1.[X_DictionaryAgitationMethod.VersionOwnerComp");
            viewString.Append("anyID], T1.[X_DictionaryAgitationMethod.VersionUpdated])\r\n    FROM (\r\n        SE");
            viewString.Append("LECT \r\n            T.AgitationMethodID AS [X_DictionaryAgitationMethod.Agitation");
            viewString.Append("MethodID], \r\n            T.StandardAgitationMethodName AS [X_DictionaryAgitation");
            viewString.Append("Method.StandardAgitationMethodName], \r\n            T.CoalAgitationMethodName AS ");
            viewString.Append("[X_DictionaryAgitationMethod.CoalAgitationMethodName], \r\n            T.GoldAgita");
            viewString.Append("tionMethodName AS [X_DictionaryAgitationMethod.GoldAgitationMethodName], \r\n     ");
            viewString.Append("       T.CustomAgitationMethodName AS [X_DictionaryAgitationMethod.CustomAgitati");
            viewString.Append("onMethodName], \r\n            T.UnitID AS [X_DictionaryAgitationMethod.UnitID], \r");
            viewString.Append("\n            T.AgitatedUnits AS [X_DictionaryAgitationMethod.AgitatedUnits], \r\n ");
            viewString.Append("           T.Description AS [X_DictionaryAgitationMethod.Description], \r\n       ");
            viewString.Append("     T.FullDescription AS [X_DictionaryAgitationMethod.FullDescription], \r\n     ");
            viewString.Append("       T.Thumbnail AS [X_DictionaryAgitationMethod.Thumbnail], \r\n            T.O");
            viewString.Append("riginalFileDataID AS [X_DictionaryAgitationMethod.OriginalFileDataID], \r\n       ");
            viewString.Append("     T.Version AS [X_DictionaryAgitationMethod.Version], \r\n            T.Version");
            viewString.Append("AntecedentID AS [X_DictionaryAgitationMethod.VersionAntecedentID], \r\n           ");
            viewString.Append(" T.VersionCertainty AS [X_DictionaryAgitationMethod.VersionCertainty], \r\n       ");
            viewString.Append("     T.VersionWorkflowInstanceID AS [X_DictionaryAgitationMethod.VersionWorkflow");
            viewString.Append("InstanceID], \r\n            T.VersionUpdatedBy AS [X_DictionaryAgitationMethod.Ve");
            viewString.Append("rsionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_DictionaryAgitationMetho");
            viewString.Append("d.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [X_DictionaryAgita");
            viewString.Append("tionMethod.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [X_D");
            viewString.Append("ictionaryAgitationMethod.VersionOwnerCompanyID], \r\n            T.VersionUpdated ");
            viewString.Append("AS [X_DictionaryAgitationMethod.VersionUpdated], \r\n            True AS _from0\r\n ");
            viewString.Append("       FROM NKDC.DictionaryAgitationMethods AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryAgitationMethod", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryAssayProcedureMethod
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView263()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3060);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryAssayProcedureMethod\r\n        [NK");
            viewString.Append("D.Module.BusinessObjects.Store.X_DictionaryAssayProcedureMethod](T1.[X_Dictionar");
            viewString.Append("yAssayProcedureMethod.AssayProcedureMethodID], T1.[X_DictionaryAssayProcedureMet");
            viewString.Append("hod.StandardAssayProcedureMethodName], T1.[X_DictionaryAssayProcedureMethod.Coal");
            viewString.Append("AssayProcedureMethodName], T1.[X_DictionaryAssayProcedureMethod.GoldAssayProcedu");
            viewString.Append("reMethodName], T1.[X_DictionaryAssayProcedureMethod.CustomAssayProcedureMethodNa");
            viewString.Append("me], T1.[X_DictionaryAssayProcedureMethod.Description], T1.[X_DictionaryAssayPro");
            viewString.Append("cedureMethod.FullDescription], T1.[X_DictionaryAssayProcedureMethod.Thumbnail], ");
            viewString.Append("T1.[X_DictionaryAssayProcedureMethod.OriginalFileDataID], T1.[X_DictionaryAssayP");
            viewString.Append("rocedureMethod.Version], T1.[X_DictionaryAssayProcedureMethod.VersionAntecedentI");
            viewString.Append("D], T1.[X_DictionaryAssayProcedureMethod.VersionCertainty], T1.[X_DictionaryAssa");
            viewString.Append("yProcedureMethod.VersionWorkflowInstanceID], T1.[X_DictionaryAssayProcedureMetho");
            viewString.Append("d.VersionUpdatedBy], T1.[X_DictionaryAssayProcedureMethod.VersionDeletedBy], T1.");
            viewString.Append("[X_DictionaryAssayProcedureMethod.VersionOwnerContactID], T1.[X_DictionaryAssayP");
            viewString.Append("rocedureMethod.VersionOwnerCompanyID], T1.[X_DictionaryAssayProcedureMethod.Vers");
            viewString.Append("ionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.AssayProcedureMethodID ");
            viewString.Append("AS [X_DictionaryAssayProcedureMethod.AssayProcedureMethodID], \r\n            T.St");
            viewString.Append("andardAssayProcedureMethodName AS [X_DictionaryAssayProcedureMethod.StandardAssa");
            viewString.Append("yProcedureMethodName], \r\n            T.CoalAssayProcedureMethodName AS [X_Dictio");
            viewString.Append("naryAssayProcedureMethod.CoalAssayProcedureMethodName], \r\n            T.GoldAssa");
            viewString.Append("yProcedureMethodName AS [X_DictionaryAssayProcedureMethod.GoldAssayProcedureMeth");
            viewString.Append("odName], \r\n            T.CustomAssayProcedureMethodName AS [X_DictionaryAssayPro");
            viewString.Append("cedureMethod.CustomAssayProcedureMethodName], \r\n            T.Description AS [X_");
            viewString.Append("DictionaryAssayProcedureMethod.Description], \r\n            T.FullDescription AS ");
            viewString.Append("[X_DictionaryAssayProcedureMethod.FullDescription], \r\n            T.Thumbnail AS");
            viewString.Append(" [X_DictionaryAssayProcedureMethod.Thumbnail], \r\n            T.OriginalFileDataI");
            viewString.Append("D AS [X_DictionaryAssayProcedureMethod.OriginalFileDataID], \r\n            T.Vers");
            viewString.Append("ion AS [X_DictionaryAssayProcedureMethod.Version], \r\n            T.VersionAntece");
            viewString.Append("dentID AS [X_DictionaryAssayProcedureMethod.VersionAntecedentID], \r\n            ");
            viewString.Append("T.VersionCertainty AS [X_DictionaryAssayProcedureMethod.VersionCertainty], \r\n   ");
            viewString.Append("         T.VersionWorkflowInstanceID AS [X_DictionaryAssayProcedureMethod.Versio");
            viewString.Append("nWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_DictionaryAssayProc");
            viewString.Append("edureMethod.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_Dictionary");
            viewString.Append("AssayProcedureMethod.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS");
            viewString.Append(" [X_DictionaryAssayProcedureMethod.VersionOwnerContactID], \r\n            T.Versi");
            viewString.Append("onOwnerCompanyID AS [X_DictionaryAssayProcedureMethod.VersionOwnerCompanyID], \r\n");
            viewString.Append("            T.VersionUpdated AS [X_DictionaryAssayProcedureMethod.VersionUpdated");
            viewString.Append("], \r\n            True AS _from0\r\n        FROM NKDC.DictionaryAssayProcedureMetho");
            viewString.Append("ds AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryAssayProcedureMethod", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryAssayProcedureTechnique
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView264()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3222);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryAssayProcedureTechnique\r\n        ");
            viewString.Append("[NKD.Module.BusinessObjects.Store.X_DictionaryAssayProcedureTechnique](T1.[X_Dic");
            viewString.Append("tionaryAssayProcedureTechnique.AssayProcedureTechniqueID], T1.[X_DictionaryAssay");
            viewString.Append("ProcedureTechnique.StandardAssayProcedureTechniqueName], T1.[X_DictionaryAssayPr");
            viewString.Append("ocedureTechnique.CoalAssayProcedureTechniqueName], T1.[X_DictionaryAssayProcedur");
            viewString.Append("eTechnique.GoldAssayProcedureTechniqueName], T1.[X_DictionaryAssayProcedureTechn");
            viewString.Append("ique.CustomAssayProcedureTechniqueName], T1.[X_DictionaryAssayProcedureTechnique");
            viewString.Append(".Description], T1.[X_DictionaryAssayProcedureTechnique.FullDescription], T1.[X_D");
            viewString.Append("ictionaryAssayProcedureTechnique.Thumbnail], T1.[X_DictionaryAssayProcedureTechn");
            viewString.Append("ique.OriginalFileDataID], T1.[X_DictionaryAssayProcedureTechnique.Version], T1.[");
            viewString.Append("X_DictionaryAssayProcedureTechnique.VersionAntecedentID], T1.[X_DictionaryAssayP");
            viewString.Append("rocedureTechnique.VersionCertainty], T1.[X_DictionaryAssayProcedureTechnique.Ver");
            viewString.Append("sionWorkflowInstanceID], T1.[X_DictionaryAssayProcedureTechnique.VersionUpdatedB");
            viewString.Append("y], T1.[X_DictionaryAssayProcedureTechnique.VersionDeletedBy], T1.[X_DictionaryA");
            viewString.Append("ssayProcedureTechnique.VersionOwnerContactID], T1.[X_DictionaryAssayProcedureTec");
            viewString.Append("hnique.VersionOwnerCompanyID], T1.[X_DictionaryAssayProcedureTechnique.VersionUp");
            viewString.Append("dated])\r\n    FROM (\r\n        SELECT \r\n            T.AssayProcedureTechniqueID AS");
            viewString.Append(" [X_DictionaryAssayProcedureTechnique.AssayProcedureTechniqueID], \r\n            ");
            viewString.Append("T.StandardAssayProcedureTechniqueName AS [X_DictionaryAssayProcedureTechnique.St");
            viewString.Append("andardAssayProcedureTechniqueName], \r\n            T.CoalAssayProcedureTechniqueN");
            viewString.Append("ame AS [X_DictionaryAssayProcedureTechnique.CoalAssayProcedureTechniqueName], \r\n");
            viewString.Append("            T.GoldAssayProcedureTechniqueName AS [X_DictionaryAssayProcedureTech");
            viewString.Append("nique.GoldAssayProcedureTechniqueName], \r\n            T.CustomAssayProcedureTech");
            viewString.Append("niqueName AS [X_DictionaryAssayProcedureTechnique.CustomAssayProcedureTechniqueN");
            viewString.Append("ame], \r\n            T.Description AS [X_DictionaryAssayProcedureTechnique.Descri");
            viewString.Append("ption], \r\n            T.FullDescription AS [X_DictionaryAssayProcedureTechnique.");
            viewString.Append("FullDescription], \r\n            T.Thumbnail AS [X_DictionaryAssayProcedureTechni");
            viewString.Append("que.Thumbnail], \r\n            T.OriginalFileDataID AS [X_DictionaryAssayProcedur");
            viewString.Append("eTechnique.OriginalFileDataID], \r\n            T.Version AS [X_DictionaryAssayPro");
            viewString.Append("cedureTechnique.Version], \r\n            T.VersionAntecedentID AS [X_DictionaryAs");
            viewString.Append("sayProcedureTechnique.VersionAntecedentID], \r\n            T.VersionCertainty AS ");
            viewString.Append("[X_DictionaryAssayProcedureTechnique.VersionCertainty], \r\n            T.VersionW");
            viewString.Append("orkflowInstanceID AS [X_DictionaryAssayProcedureTechnique.VersionWorkflowInstanc");
            viewString.Append("eID], \r\n            T.VersionUpdatedBy AS [X_DictionaryAssayProcedureTechnique.V");
            viewString.Append("ersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_DictionaryAssayProcedur");
            viewString.Append("eTechnique.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [X_Dictio");
            viewString.Append("naryAssayProcedureTechnique.VersionOwnerContactID], \r\n            T.VersionOwner");
            viewString.Append("CompanyID AS [X_DictionaryAssayProcedureTechnique.VersionOwnerCompanyID], \r\n    ");
            viewString.Append("        T.VersionUpdated AS [X_DictionaryAssayProcedureTechnique.VersionUpdated]");
            viewString.Append(", \r\n            True AS _from0\r\n        FROM NKDC.DictionaryAssayProcedureTechni");
            viewString.Append("ques AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryAssayProcedureTechnique", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryAssayProcedureType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView265()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2952);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryAssayProcedureType\r\n        [NKD.");
            viewString.Append("Module.BusinessObjects.Store.X_DictionaryAssayProcedureType](T1.[X_DictionaryAss");
            viewString.Append("ayProcedureType.AssayProcedureTypeID], T1.[X_DictionaryAssayProcedureType.Standa");
            viewString.Append("rdAssayProcedureTypeName], T1.[X_DictionaryAssayProcedureType.CoalAssayProcedure");
            viewString.Append("TypeName], T1.[X_DictionaryAssayProcedureType.GoldAssayProcedureTypeName], T1.[X");
            viewString.Append("_DictionaryAssayProcedureType.CustomAssayProcedureTypeName], T1.[X_DictionaryAss");
            viewString.Append("ayProcedureType.Description], T1.[X_DictionaryAssayProcedureType.FullDescription");
            viewString.Append("], T1.[X_DictionaryAssayProcedureType.Thumbnail], T1.[X_DictionaryAssayProcedure");
            viewString.Append("Type.OriginalFileDataID], T1.[X_DictionaryAssayProcedureType.Version], T1.[X_Dic");
            viewString.Append("tionaryAssayProcedureType.VersionAntecedentID], T1.[X_DictionaryAssayProcedureTy");
            viewString.Append("pe.VersionCertainty], T1.[X_DictionaryAssayProcedureType.VersionWorkflowInstance");
            viewString.Append("ID], T1.[X_DictionaryAssayProcedureType.VersionUpdatedBy], T1.[X_DictionaryAssay");
            viewString.Append("ProcedureType.VersionDeletedBy], T1.[X_DictionaryAssayProcedureType.VersionOwner");
            viewString.Append("ContactID], T1.[X_DictionaryAssayProcedureType.VersionOwnerCompanyID], T1.[X_Dic");
            viewString.Append("tionaryAssayProcedureType.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n       ");
            viewString.Append("     T.AssayProcedureTypeID AS [X_DictionaryAssayProcedureType.AssayProcedureTyp");
            viewString.Append("eID], \r\n            T.StandardAssayProcedureTypeName AS [X_DictionaryAssayProced");
            viewString.Append("ureType.StandardAssayProcedureTypeName], \r\n            T.CoalAssayProcedureTypeN");
            viewString.Append("ame AS [X_DictionaryAssayProcedureType.CoalAssayProcedureTypeName], \r\n          ");
            viewString.Append("  T.GoldAssayProcedureTypeName AS [X_DictionaryAssayProcedureType.GoldAssayProce");
            viewString.Append("dureTypeName], \r\n            T.CustomAssayProcedureTypeName AS [X_DictionaryAssa");
            viewString.Append("yProcedureType.CustomAssayProcedureTypeName], \r\n            T.Description AS [X_");
            viewString.Append("DictionaryAssayProcedureType.Description], \r\n            T.FullDescription AS [X");
            viewString.Append("_DictionaryAssayProcedureType.FullDescription], \r\n            T.Thumbnail AS [X_");
            viewString.Append("DictionaryAssayProcedureType.Thumbnail], \r\n            T.OriginalFileDataID AS [");
            viewString.Append("X_DictionaryAssayProcedureType.OriginalFileDataID], \r\n            T.Version AS [");
            viewString.Append("X_DictionaryAssayProcedureType.Version], \r\n            T.VersionAntecedentID AS ");
            viewString.Append("[X_DictionaryAssayProcedureType.VersionAntecedentID], \r\n            T.VersionCer");
            viewString.Append("tainty AS [X_DictionaryAssayProcedureType.VersionCertainty], \r\n            T.Ver");
            viewString.Append("sionWorkflowInstanceID AS [X_DictionaryAssayProcedureType.VersionWorkflowInstanc");
            viewString.Append("eID], \r\n            T.VersionUpdatedBy AS [X_DictionaryAssayProcedureType.Versio");
            viewString.Append("nUpdatedBy], \r\n            T.VersionDeletedBy AS [X_DictionaryAssayProcedureType");
            viewString.Append(".VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [X_DictionaryAssayP");
            viewString.Append("rocedureType.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [X");
            viewString.Append("_DictionaryAssayProcedureType.VersionOwnerCompanyID], \r\n            T.VersionUpd");
            viewString.Append("ated AS [X_DictionaryAssayProcedureType.VersionUpdated], \r\n            True AS _");
            viewString.Append("from0\r\n        FROM NKDC.DictionaryAssayProcedureTypes AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryAssayProcedureType", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryAssayTechnique
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView266()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2736);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryAssayTechnique\r\n        [NKD.Modu");
            viewString.Append("le.BusinessObjects.Store.X_DictionaryAssayTechnique](T1.[X_DictionaryAssayTechni");
            viewString.Append("que.AssayTechniqueID], T1.[X_DictionaryAssayTechnique.StandardAssayTechniqueName");
            viewString.Append("], T1.[X_DictionaryAssayTechnique.CoalAssayTechniqueName], T1.[X_DictionaryAssay");
            viewString.Append("Technique.GoldAssayTechniqueName], T1.[X_DictionaryAssayTechnique.CustomAssayTec");
            viewString.Append("hniqueName], T1.[X_DictionaryAssayTechnique.Description], T1.[X_DictionaryAssayT");
            viewString.Append("echnique.FullDescription], T1.[X_DictionaryAssayTechnique.Thumbnail], T1.[X_Dict");
            viewString.Append("ionaryAssayTechnique.OriginalFileDataID], T1.[X_DictionaryAssayTechnique.Version");
            viewString.Append("], T1.[X_DictionaryAssayTechnique.VersionAntecedentID], T1.[X_DictionaryAssayTec");
            viewString.Append("hnique.VersionCertainty], T1.[X_DictionaryAssayTechnique.VersionWorkflowInstance");
            viewString.Append("ID], T1.[X_DictionaryAssayTechnique.VersionUpdatedBy], T1.[X_DictionaryAssayTech");
            viewString.Append("nique.VersionDeletedBy], T1.[X_DictionaryAssayTechnique.VersionOwnerContactID], ");
            viewString.Append("T1.[X_DictionaryAssayTechnique.VersionOwnerCompanyID], T1.[X_DictionaryAssayTech");
            viewString.Append("nique.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.AssayTechniqu");
            viewString.Append("eID AS [X_DictionaryAssayTechnique.AssayTechniqueID], \r\n            T.StandardAs");
            viewString.Append("sayTechniqueName AS [X_DictionaryAssayTechnique.StandardAssayTechniqueName], \r\n ");
            viewString.Append("           T.CoalAssayTechniqueName AS [X_DictionaryAssayTechnique.CoalAssayTech");
            viewString.Append("niqueName], \r\n            T.GoldAssayTechniqueName AS [X_DictionaryAssayTechniqu");
            viewString.Append("e.GoldAssayTechniqueName], \r\n            T.CustomAssayTechniqueName AS [X_Dictio");
            viewString.Append("naryAssayTechnique.CustomAssayTechniqueName], \r\n            T.Description AS [X_");
            viewString.Append("DictionaryAssayTechnique.Description], \r\n            T.FullDescription AS [X_Dic");
            viewString.Append("tionaryAssayTechnique.FullDescription], \r\n            T.Thumbnail AS [X_Dictiona");
            viewString.Append("ryAssayTechnique.Thumbnail], \r\n            T.OriginalFileDataID AS [X_Dictionary");
            viewString.Append("AssayTechnique.OriginalFileDataID], \r\n            T.Version AS [X_DictionaryAssa");
            viewString.Append("yTechnique.Version], \r\n            T.VersionAntecedentID AS [X_DictionaryAssayTe");
            viewString.Append("chnique.VersionAntecedentID], \r\n            T.VersionCertainty AS [X_DictionaryA");
            viewString.Append("ssayTechnique.VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [X");
            viewString.Append("_DictionaryAssayTechnique.VersionWorkflowInstanceID], \r\n            T.VersionUpd");
            viewString.Append("atedBy AS [X_DictionaryAssayTechnique.VersionUpdatedBy], \r\n            T.Version");
            viewString.Append("DeletedBy AS [X_DictionaryAssayTechnique.VersionDeletedBy], \r\n            T.Vers");
            viewString.Append("ionOwnerContactID AS [X_DictionaryAssayTechnique.VersionOwnerContactID], \r\n     ");
            viewString.Append("       T.VersionOwnerCompanyID AS [X_DictionaryAssayTechnique.VersionOwnerCompan");
            viewString.Append("yID], \r\n            T.VersionUpdated AS [X_DictionaryAssayTechnique.VersionUpdat");
            viewString.Append("ed], \r\n            True AS _from0\r\n        FROM NKDC.DictionaryAssayTechniques A");
            viewString.Append("S T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryAssayTechnique", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryChemical
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView267()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2412);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryChemical\r\n        [NKD.Module.Bus");
            viewString.Append("inessObjects.Store.X_DictionaryChemical](T1.[X_DictionaryChemical.ChemicalID], T");
            viewString.Append("1.[X_DictionaryChemical.StandardChemicalName], T1.[X_DictionaryChemical.CoalChem");
            viewString.Append("icalName], T1.[X_DictionaryChemical.GoldChemicalName], T1.[X_DictionaryChemical.");
            viewString.Append("CustomChemicalName], T1.[X_DictionaryChemical.Description], T1.[X_DictionaryChem");
            viewString.Append("ical.FullDescription], T1.[X_DictionaryChemical.Thumbnail], T1.[X_DictionaryChem");
            viewString.Append("ical.OriginalFileDataID], T1.[X_DictionaryChemical.Version], T1.[X_DictionaryChe");
            viewString.Append("mical.VersionAntecedentID], T1.[X_DictionaryChemical.VersionCertainty], T1.[X_Di");
            viewString.Append("ctionaryChemical.VersionWorkflowInstanceID], T1.[X_DictionaryChemical.VersionUpd");
            viewString.Append("atedBy], T1.[X_DictionaryChemical.VersionDeletedBy], T1.[X_DictionaryChemical.Ve");
            viewString.Append("rsionOwnerContactID], T1.[X_DictionaryChemical.VersionOwnerCompanyID], T1.[X_Dic");
            viewString.Append("tionaryChemical.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.Che");
            viewString.Append("micalID AS [X_DictionaryChemical.ChemicalID], \r\n            T.StandardChemicalNa");
            viewString.Append("me AS [X_DictionaryChemical.StandardChemicalName], \r\n            T.CoalChemicalN");
            viewString.Append("ame AS [X_DictionaryChemical.CoalChemicalName], \r\n            T.GoldChemicalName");
            viewString.Append(" AS [X_DictionaryChemical.GoldChemicalName], \r\n            T.CustomChemicalName ");
            viewString.Append("AS [X_DictionaryChemical.CustomChemicalName], \r\n            T.Description AS [X_");
            viewString.Append("DictionaryChemical.Description], \r\n            T.FullDescription AS [X_Dictionar");
            viewString.Append("yChemical.FullDescription], \r\n            T.Thumbnail AS [X_DictionaryChemical.T");
            viewString.Append("humbnail], \r\n            T.OriginalFileDataID AS [X_DictionaryChemical.OriginalF");
            viewString.Append("ileDataID], \r\n            T.Version AS [X_DictionaryChemical.Version], \r\n       ");
            viewString.Append("     T.VersionAntecedentID AS [X_DictionaryChemical.VersionAntecedentID], \r\n    ");
            viewString.Append("        T.VersionCertainty AS [X_DictionaryChemical.VersionCertainty], \r\n       ");
            viewString.Append("     T.VersionWorkflowInstanceID AS [X_DictionaryChemical.VersionWorkflowInstanc");
            viewString.Append("eID], \r\n            T.VersionUpdatedBy AS [X_DictionaryChemical.VersionUpdatedBy");
            viewString.Append("], \r\n            T.VersionDeletedBy AS [X_DictionaryChemical.VersionDeletedBy], ");
            viewString.Append("\r\n            T.VersionOwnerContactID AS [X_DictionaryChemical.VersionOwnerConta");
            viewString.Append("ctID], \r\n            T.VersionOwnerCompanyID AS [X_DictionaryChemical.VersionOwn");
            viewString.Append("erCompanyID], \r\n            T.VersionUpdated AS [X_DictionaryChemical.VersionUpd");
            viewString.Append("ated], \r\n            True AS _from0\r\n        FROM NKDC.DictionaryChemicals AS T\r");
            viewString.Append("\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryChemical", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_AssayProcedureProtocolPrecondition
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView268()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2661);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_AssayProcedureProtocolPrecondition\r\n       ");
            viewString.Append(" [NKD.Module.BusinessObjects.Store.X_AssayProcedureProtocolPrecondition](T1.[X_A");
            viewString.Append("ssayProcedureProtocolPrecondition.AssayProcedureProtocolPreconditionID], T1.[X_A");
            viewString.Append("ssayProcedureProtocolPrecondition.AssayProcedureProtocolID], T1.[X_AssayProcedur");
            viewString.Append("eProtocolPrecondition.AssayPreconditionTypeID], T1.[X_AssayProcedureProtocolPrec");
            viewString.Append("ondition.PreconditionName], T1.[X_AssayProcedureProtocolPrecondition.UnitID], T1");
            viewString.Append(".[X_AssayProcedureProtocolPrecondition.Sequence], T1.[X_AssayProcedureProtocolPr");
            viewString.Append("econdition.Version], T1.[X_AssayProcedureProtocolPrecondition.VersionAntecedentI");
            viewString.Append("D], T1.[X_AssayProcedureProtocolPrecondition.VersionCertainty], T1.[X_AssayProce");
            viewString.Append("dureProtocolPrecondition.VersionWorkflowInstanceID], T1.[X_AssayProcedureProtoco");
            viewString.Append("lPrecondition.VersionUpdatedBy], T1.[X_AssayProcedureProtocolPrecondition.Versio");
            viewString.Append("nDeletedBy], T1.[X_AssayProcedureProtocolPrecondition.VersionOwnerContactID], T1");
            viewString.Append(".[X_AssayProcedureProtocolPrecondition.VersionOwnerCompanyID], T1.[X_AssayProced");
            viewString.Append("ureProtocolPrecondition.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n         ");
            viewString.Append("   T.AssayProcedureProtocolPreconditionID AS [X_AssayProcedureProtocolPreconditi");
            viewString.Append("on.AssayProcedureProtocolPreconditionID], \r\n            T.AssayProcedureProtocol");
            viewString.Append("ID AS [X_AssayProcedureProtocolPrecondition.AssayProcedureProtocolID], \r\n       ");
            viewString.Append("     T.AssayPreconditionTypeID AS [X_AssayProcedureProtocolPrecondition.AssayPre");
            viewString.Append("conditionTypeID], \r\n            T.PreconditionName AS [X_AssayProcedureProtocolP");
            viewString.Append("recondition.PreconditionName], \r\n            T.UnitID AS [X_AssayProcedureProtoc");
            viewString.Append("olPrecondition.UnitID], \r\n            T.Sequence AS [X_AssayProcedureProtocolPre");
            viewString.Append("condition.Sequence], \r\n            T.Version AS [X_AssayProcedureProtocolPrecond");
            viewString.Append("ition.Version], \r\n            T.VersionAntecedentID AS [X_AssayProcedureProtocol");
            viewString.Append("Precondition.VersionAntecedentID], \r\n            T.VersionCertainty AS [X_AssayP");
            viewString.Append("rocedureProtocolPrecondition.VersionCertainty], \r\n            T.VersionWorkflowI");
            viewString.Append("nstanceID AS [X_AssayProcedureProtocolPrecondition.VersionWorkflowInstanceID], \r");
            viewString.Append("\n            T.VersionUpdatedBy AS [X_AssayProcedureProtocolPrecondition.Version");
            viewString.Append("UpdatedBy], \r\n            T.VersionDeletedBy AS [X_AssayProcedureProtocolPrecond");
            viewString.Append("ition.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [X_AssayProced");
            viewString.Append("ureProtocolPrecondition.VersionOwnerContactID], \r\n            T.VersionOwnerComp");
            viewString.Append("anyID AS [X_AssayProcedureProtocolPrecondition.VersionOwnerCompanyID], \r\n       ");
            viewString.Append("     T.VersionUpdated AS [X_AssayProcedureProtocolPrecondition.VersionUpdated], ");
            viewString.Append("\r\n            True AS _from0\r\n        FROM NKDC.AssayProcedureProtocolPreconditi");
            viewString.Append("ons AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_AssayProcedureProtocolPrecondition", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_AssayWorkflowProcedureProtocol
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView269()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2366);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_AssayWorkflowProcedureProtocol\r\n        [NK");
            viewString.Append("D.Module.BusinessObjects.Store.X_AssayWorkflowProcedureProtocol](T1.[X_AssayWork");
            viewString.Append("flowProcedureProtocol.AssayWorkflowProcedureProtocolID], T1.[X_AssayWorkflowProc");
            viewString.Append("edureProtocol.WorkflowID], T1.[X_AssayWorkflowProcedureProtocol.WorkflowStateNam");
            viewString.Append("e], T1.[X_AssayWorkflowProcedureProtocol.AssayProcedureProtocolID], T1.[X_AssayW");
            viewString.Append("orkflowProcedureProtocol.Sequence], T1.[X_AssayWorkflowProcedureProtocol.Version");
            viewString.Append("], T1.[X_AssayWorkflowProcedureProtocol.VersionAntecedentID], T1.[X_AssayWorkflo");
            viewString.Append("wProcedureProtocol.VersionCertainty], T1.[X_AssayWorkflowProcedureProtocol.Versi");
            viewString.Append("onWorkflowInstanceID], T1.[X_AssayWorkflowProcedureProtocol.VersionUpdatedBy], T");
            viewString.Append("1.[X_AssayWorkflowProcedureProtocol.VersionDeletedBy], T1.[X_AssayWorkflowProced");
            viewString.Append("ureProtocol.VersionOwnerContactID], T1.[X_AssayWorkflowProcedureProtocol.Version");
            viewString.Append("OwnerCompanyID], T1.[X_AssayWorkflowProcedureProtocol.VersionUpdated])\r\n    FROM");
            viewString.Append(" (\r\n        SELECT \r\n            T.AssayWorkflowProcedureProtocolID AS [X_AssayW");
            viewString.Append("orkflowProcedureProtocol.AssayWorkflowProcedureProtocolID], \r\n            T.Work");
            viewString.Append("flowID AS [X_AssayWorkflowProcedureProtocol.WorkflowID], \r\n            T.Workflo");
            viewString.Append("wStateName AS [X_AssayWorkflowProcedureProtocol.WorkflowStateName], \r\n          ");
            viewString.Append("  T.AssayProcedureProtocolID AS [X_AssayWorkflowProcedureProtocol.AssayProcedure");
            viewString.Append("ProtocolID], \r\n            T.Sequence AS [X_AssayWorkflowProcedureProtocol.Seque");
            viewString.Append("nce], \r\n            T.Version AS [X_AssayWorkflowProcedureProtocol.Version], \r\n ");
            viewString.Append("           T.VersionAntecedentID AS [X_AssayWorkflowProcedureProtocol.VersionAnt");
            viewString.Append("ecedentID], \r\n            T.VersionCertainty AS [X_AssayWorkflowProcedureProtoco");
            viewString.Append("l.VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [X_AssayWorkfl");
            viewString.Append("owProcedureProtocol.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy");
            viewString.Append(" AS [X_AssayWorkflowProcedureProtocol.VersionUpdatedBy], \r\n            T.Version");
            viewString.Append("DeletedBy AS [X_AssayWorkflowProcedureProtocol.VersionDeletedBy], \r\n            ");
            viewString.Append("T.VersionOwnerContactID AS [X_AssayWorkflowProcedureProtocol.VersionOwnerContact");
            viewString.Append("ID], \r\n            T.VersionOwnerCompanyID AS [X_AssayWorkflowProcedureProtocol.");
            viewString.Append("VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [X_AssayWorkflowProced");
            viewString.Append("ureProtocol.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.Ass");
            viewString.Append("ayWorkflowProcedureProtocols AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_AssayWorkflowProcedureProtocol", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryAssayPreconditionType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView270()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3114);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryAssayPreconditionType\r\n        [N");
            viewString.Append("KD.Module.BusinessObjects.Store.X_DictionaryAssayPreconditionType](T1.[X_Diction");
            viewString.Append("aryAssayPreconditionType.AssayPreconditionTypeID], T1.[X_DictionaryAssayPrecondi");
            viewString.Append("tionType.StandardAssayPreconditionTypeName], T1.[X_DictionaryAssayPreconditionTy");
            viewString.Append("pe.CoalAssayPreconditionTypeName], T1.[X_DictionaryAssayPreconditionType.GoldAss");
            viewString.Append("ayPreconditionTypeName], T1.[X_DictionaryAssayPreconditionType.CustomAssayPrecon");
            viewString.Append("ditionTypeName], T1.[X_DictionaryAssayPreconditionType.Description], T1.[X_Dicti");
            viewString.Append("onaryAssayPreconditionType.FullDescription], T1.[X_DictionaryAssayPreconditionTy");
            viewString.Append("pe.Thumbnail], T1.[X_DictionaryAssayPreconditionType.OriginalFileDataID], T1.[X_");
            viewString.Append("DictionaryAssayPreconditionType.Version], T1.[X_DictionaryAssayPreconditionType.");
            viewString.Append("VersionAntecedentID], T1.[X_DictionaryAssayPreconditionType.VersionCertainty], T");
            viewString.Append("1.[X_DictionaryAssayPreconditionType.VersionWorkflowInstanceID], T1.[X_Dictionar");
            viewString.Append("yAssayPreconditionType.VersionUpdatedBy], T1.[X_DictionaryAssayPreconditionType.");
            viewString.Append("VersionDeletedBy], T1.[X_DictionaryAssayPreconditionType.VersionOwnerContactID],");
            viewString.Append(" T1.[X_DictionaryAssayPreconditionType.VersionOwnerCompanyID], T1.[X_DictionaryA");
            viewString.Append("ssayPreconditionType.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            ");
            viewString.Append("T.AssayPreconditionTypeID AS [X_DictionaryAssayPreconditionType.AssayPreconditio");
            viewString.Append("nTypeID], \r\n            T.StandardAssayPreconditionTypeName AS [X_DictionaryAssa");
            viewString.Append("yPreconditionType.StandardAssayPreconditionTypeName], \r\n            T.CoalAssayP");
            viewString.Append("reconditionTypeName AS [X_DictionaryAssayPreconditionType.CoalAssayPreconditionT");
            viewString.Append("ypeName], \r\n            T.GoldAssayPreconditionTypeName AS [X_DictionaryAssayPre");
            viewString.Append("conditionType.GoldAssayPreconditionTypeName], \r\n            T.CustomAssayPrecond");
            viewString.Append("itionTypeName AS [X_DictionaryAssayPreconditionType.CustomAssayPreconditionTypeN");
            viewString.Append("ame], \r\n            T.Description AS [X_DictionaryAssayPreconditionType.Descript");
            viewString.Append("ion], \r\n            T.FullDescription AS [X_DictionaryAssayPreconditionType.Full");
            viewString.Append("Description], \r\n            T.Thumbnail AS [X_DictionaryAssayPreconditionType.Th");
            viewString.Append("umbnail], \r\n            T.OriginalFileDataID AS [X_DictionaryAssayPreconditionTy");
            viewString.Append("pe.OriginalFileDataID], \r\n            T.Version AS [X_DictionaryAssayPreconditio");
            viewString.Append("nType.Version], \r\n            T.VersionAntecedentID AS [X_DictionaryAssayPrecond");
            viewString.Append("itionType.VersionAntecedentID], \r\n            T.VersionCertainty AS [X_Dictionar");
            viewString.Append("yAssayPreconditionType.VersionCertainty], \r\n            T.VersionWorkflowInstanc");
            viewString.Append("eID AS [X_DictionaryAssayPreconditionType.VersionWorkflowInstanceID], \r\n        ");
            viewString.Append("    T.VersionUpdatedBy AS [X_DictionaryAssayPreconditionType.VersionUpdatedBy], ");
            viewString.Append("\r\n            T.VersionDeletedBy AS [X_DictionaryAssayPreconditionType.VersionDe");
            viewString.Append("letedBy], \r\n            T.VersionOwnerContactID AS [X_DictionaryAssayPreconditio");
            viewString.Append("nType.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [X_Dictio");
            viewString.Append("naryAssayPreconditionType.VersionOwnerCompanyID], \r\n            T.VersionUpdated");
            viewString.Append(" AS [X_DictionaryAssayPreconditionType.VersionUpdated], \r\n            True AS _f");
            viewString.Append("rom0\r\n        FROM NKDC.DictionaryAssayPreconditionTypes AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryAssayPreconditionType", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_ApplicationPaymentProvider
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView271()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3168);
            viewString.Append("\r\n    SELECT VALUE -- Constructing E_ApplicationPaymentProvider\r\n        [NKD.Mo");
            viewString.Append("dule.BusinessObjects.Store.E_ApplicationPaymentProvider](T1.[E_ApplicationPaymen");
            viewString.Append("tProvider.ApplicationPaymentProviderID], T1.[E_ApplicationPaymentProvider.Applic");
            viewString.Append("ationID], T1.[E_ApplicationPaymentProvider.ApplicationPaymentProviderName], T1.[");
            viewString.Append("E_ApplicationPaymentProvider.CompanyID], T1.[E_ApplicationPaymentProvider.Enviro");
            viewString.Append("nment], T1.[E_ApplicationPaymentProvider.MerchantID], T1.[E_ApplicationPaymentPr");
            viewString.Append("ovider.ClientKeyPrivate], T1.[E_ApplicationPaymentProvider.ClientKeyPublic], T1.");
            viewString.Append("[E_ApplicationPaymentProvider.ServerKeyPrivate], T1.[E_ApplicationPaymentProvide");
            viewString.Append("r.ServerKeyPublic], T1.[E_ApplicationPaymentProvider.ReturnURL], T1.[E_Applicati");
            viewString.Append("onPaymentProvider.ResponsibleContactID], T1.[E_ApplicationPaymentProvider.Versio");
            viewString.Append("n], T1.[E_ApplicationPaymentProvider.VersionAntecedentID], T1.[E_ApplicationPaym");
            viewString.Append("entProvider.VersionCertainty], T1.[E_ApplicationPaymentProvider.VersionWorkflowI");
            viewString.Append("nstanceID], T1.[E_ApplicationPaymentProvider.VersionUpdatedBy], T1.[E_Applicatio");
            viewString.Append("nPaymentProvider.VersionDeletedBy], T1.[E_ApplicationPaymentProvider.VersionOwne");
            viewString.Append("rContactID], T1.[E_ApplicationPaymentProvider.VersionOwnerCompanyID], T1.[E_Appl");
            viewString.Append("icationPaymentProvider.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n          ");
            viewString.Append("  T.ApplicationPaymentProviderID AS [E_ApplicationPaymentProvider.ApplicationPay");
            viewString.Append("mentProviderID], \r\n            T.ApplicationID AS [E_ApplicationPaymentProvider.");
            viewString.Append("ApplicationID], \r\n            T.ApplicationPaymentProviderName AS [E_Application");
            viewString.Append("PaymentProvider.ApplicationPaymentProviderName], \r\n            T.CompanyID AS [E");
            viewString.Append("_ApplicationPaymentProvider.CompanyID], \r\n            T.Environment AS [E_Applic");
            viewString.Append("ationPaymentProvider.Environment], \r\n            T.MerchantID AS [E_ApplicationP");
            viewString.Append("aymentProvider.MerchantID], \r\n            T.ClientKeyPrivate AS [E_ApplicationPa");
            viewString.Append("ymentProvider.ClientKeyPrivate], \r\n            T.ClientKeyPublic AS [E_Applicati");
            viewString.Append("onPaymentProvider.ClientKeyPublic], \r\n            T.ServerKeyPrivate AS [E_Appli");
            viewString.Append("cationPaymentProvider.ServerKeyPrivate], \r\n            T.ServerKeyPublic AS [E_A");
            viewString.Append("pplicationPaymentProvider.ServerKeyPublic], \r\n            T.ReturnURL AS [E_Appl");
            viewString.Append("icationPaymentProvider.ReturnURL], \r\n            T.ResponsibleContactID AS [E_Ap");
            viewString.Append("plicationPaymentProvider.ResponsibleContactID], \r\n            T.Version AS [E_Ap");
            viewString.Append("plicationPaymentProvider.Version], \r\n            T.VersionAntecedentID AS [E_App");
            viewString.Append("licationPaymentProvider.VersionAntecedentID], \r\n            T.VersionCertainty A");
            viewString.Append("S [E_ApplicationPaymentProvider.VersionCertainty], \r\n            T.VersionWorkfl");
            viewString.Append("owInstanceID AS [E_ApplicationPaymentProvider.VersionWorkflowInstanceID], \r\n    ");
            viewString.Append("        T.VersionUpdatedBy AS [E_ApplicationPaymentProvider.VersionUpdatedBy], \r");
            viewString.Append("\n            T.VersionDeletedBy AS [E_ApplicationPaymentProvider.VersionDeletedB");
            viewString.Append("y], \r\n            T.VersionOwnerContactID AS [E_ApplicationPaymentProvider.Versi");
            viewString.Append("onOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [E_ApplicationPaymen");
            viewString.Append("tProvider.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [E_Applicati");
            viewString.Append("onPaymentProvider.VersionUpdated], \r\n            True AS _from0\r\n        FROM NK");
            viewString.Append("DC.ApplicationPaymentProviders AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_ApplicationPaymentProvider", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_ApplicationPaymentProviderCurrency
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView272()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2581);
            viewString.Append("\r\n    SELECT VALUE -- Constructing E_ApplicationPaymentProviderCurrency\r\n       ");
            viewString.Append(" [NKD.Module.BusinessObjects.Store.E_ApplicationPaymentProviderCurrency](T1.[E_A");
            viewString.Append("pplicationPaymentProviderCurrency.ApplicationPaymentProviderCurrencyID], T1.[E_A");
            viewString.Append("pplicationPaymentProviderCurrency.ApplicationPaymentProviderID], T1.[E_Applicati");
            viewString.Append("onPaymentProviderCurrency.CurrencyID], T1.[E_ApplicationPaymentProviderCurrency.");
            viewString.Append("PaymentProviderCurrencyCode], T1.[E_ApplicationPaymentProviderCurrency.IsMultipl");
            viewString.Append("ierAccepted], T1.[E_ApplicationPaymentProviderCurrency.Version], T1.[E_Applicati");
            viewString.Append("onPaymentProviderCurrency.VersionAntecedentID], T1.[E_ApplicationPaymentProvider");
            viewString.Append("Currency.VersionCertainty], T1.[E_ApplicationPaymentProviderCurrency.VersionWork");
            viewString.Append("flowInstanceID], T1.[E_ApplicationPaymentProviderCurrency.VersionUpdatedBy], T1.");
            viewString.Append("[E_ApplicationPaymentProviderCurrency.VersionDeletedBy], T1.[E_ApplicationPaymen");
            viewString.Append("tProviderCurrency.VersionOwnerContactID], T1.[E_ApplicationPaymentProviderCurren");
            viewString.Append("cy.VersionOwnerCompanyID], T1.[E_ApplicationPaymentProviderCurrency.VersionUpdat");
            viewString.Append("ed])\r\n    FROM (\r\n        SELECT \r\n            T.ApplicationPaymentProviderCurre");
            viewString.Append("ncyID AS [E_ApplicationPaymentProviderCurrency.ApplicationPaymentProviderCurrenc");
            viewString.Append("yID], \r\n            T.ApplicationPaymentProviderID AS [E_ApplicationPaymentProvi");
            viewString.Append("derCurrency.ApplicationPaymentProviderID], \r\n            T.CurrencyID AS [E_Appl");
            viewString.Append("icationPaymentProviderCurrency.CurrencyID], \r\n            T.PaymentProviderCurre");
            viewString.Append("ncyCode AS [E_ApplicationPaymentProviderCurrency.PaymentProviderCurrencyCode], \r");
            viewString.Append("\n            T.IsMultiplierAccepted AS [E_ApplicationPaymentProviderCurrency.IsM");
            viewString.Append("ultiplierAccepted], \r\n            T.Version AS [E_ApplicationPaymentProviderCurr");
            viewString.Append("ency.Version], \r\n            T.VersionAntecedentID AS [E_ApplicationPaymentProvi");
            viewString.Append("derCurrency.VersionAntecedentID], \r\n            T.VersionCertainty AS [E_Applica");
            viewString.Append("tionPaymentProviderCurrency.VersionCertainty], \r\n            T.VersionWorkflowIn");
            viewString.Append("stanceID AS [E_ApplicationPaymentProviderCurrency.VersionWorkflowInstanceID], \r\n");
            viewString.Append("            T.VersionUpdatedBy AS [E_ApplicationPaymentProviderCurrency.VersionU");
            viewString.Append("pdatedBy], \r\n            T.VersionDeletedBy AS [E_ApplicationPaymentProviderCurr");
            viewString.Append("ency.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [E_ApplicationP");
            viewString.Append("aymentProviderCurrency.VersionOwnerContactID], \r\n            T.VersionOwnerCompa");
            viewString.Append("nyID AS [E_ApplicationPaymentProviderCurrency.VersionOwnerCompanyID], \r\n        ");
            viewString.Append("    T.VersionUpdated AS [E_ApplicationPaymentProviderCurrency.VersionUpdated], \r");
            viewString.Append("\n            True AS _from0\r\n        FROM NKDC.ApplicationPaymentProviderCurrenc");
            viewString.Append("ies AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_ApplicationPaymentProviderCurrency", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_ApplicationPaymentProviderProduct
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView273()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3105);
            viewString.Append("\r\n    SELECT VALUE -- Constructing E_ApplicationPaymentProviderProduct\r\n        ");
            viewString.Append("[NKD.Module.BusinessObjects.Store.E_ApplicationPaymentProviderProduct](T1.[E_App");
            viewString.Append("licationPaymentProviderProduct.ApplicationPaymentProviderProductID], T1.[E_Appli");
            viewString.Append("cationPaymentProviderProduct.ApplicationPaymentProviderID], T1.[E_ApplicationPay");
            viewString.Append("mentProviderProduct.PaymentProviderProductName], T1.[E_ApplicationPaymentProvide");
            viewString.Append("rProduct.ProductUnitID], T1.[E_ApplicationPaymentProviderProduct.PaymentProvider");
            viewString.Append("UnitName], T1.[E_ApplicationPaymentProviderProduct.IsRecurring], T1.[E_Applicati");
            viewString.Append("onPaymentProviderProduct.UnitDefault], T1.[E_ApplicationPaymentProviderProduct.U");
            viewString.Append("nitMaximum], T1.[E_ApplicationPaymentProviderProduct.UnitMinimum], T1.[E_Applica");
            viewString.Append("tionPaymentProviderProduct.Version], T1.[E_ApplicationPaymentProviderProduct.Ver");
            viewString.Append("sionAntecedentID], T1.[E_ApplicationPaymentProviderProduct.VersionCertainty], T1");
            viewString.Append(".[E_ApplicationPaymentProviderProduct.VersionWorkflowInstanceID], T1.[E_Applicat");
            viewString.Append("ionPaymentProviderProduct.VersionUpdatedBy], T1.[E_ApplicationPaymentProviderPro");
            viewString.Append("duct.VersionDeletedBy], T1.[E_ApplicationPaymentProviderProduct.VersionOwnerCont");
            viewString.Append("actID], T1.[E_ApplicationPaymentProviderProduct.VersionOwnerCompanyID], T1.[E_Ap");
            viewString.Append("plicationPaymentProviderProduct.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n ");
            viewString.Append("           T.ApplicationPaymentProviderProductID AS [E_ApplicationPaymentProvide");
            viewString.Append("rProduct.ApplicationPaymentProviderProductID], \r\n            T.ApplicationPaymen");
            viewString.Append("tProviderID AS [E_ApplicationPaymentProviderProduct.ApplicationPaymentProviderID");
            viewString.Append("], \r\n            T.PaymentProviderProductName AS [E_ApplicationPaymentProviderPr");
            viewString.Append("oduct.PaymentProviderProductName], \r\n            T.ProductUnitID AS [E_Applicati");
            viewString.Append("onPaymentProviderProduct.ProductUnitID], \r\n            T.PaymentProviderUnitName");
            viewString.Append(" AS [E_ApplicationPaymentProviderProduct.PaymentProviderUnitName], \r\n           ");
            viewString.Append(" T.IsRecurring AS [E_ApplicationPaymentProviderProduct.IsRecurring], \r\n         ");
            viewString.Append("   T.UnitDefault AS [E_ApplicationPaymentProviderProduct.UnitDefault], \r\n       ");
            viewString.Append("     T.UnitMaximum AS [E_ApplicationPaymentProviderProduct.UnitMaximum], \r\n     ");
            viewString.Append("       T.UnitMinimum AS [E_ApplicationPaymentProviderProduct.UnitMinimum], \r\n   ");
            viewString.Append("         T.Version AS [E_ApplicationPaymentProviderProduct.Version], \r\n         ");
            viewString.Append("   T.VersionAntecedentID AS [E_ApplicationPaymentProviderProduct.VersionAntecede");
            viewString.Append("ntID], \r\n            T.VersionCertainty AS [E_ApplicationPaymentProviderProduct.");
            viewString.Append("VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [E_ApplicationPa");
            viewString.Append("ymentProviderProduct.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedB");
            viewString.Append("y AS [E_ApplicationPaymentProviderProduct.VersionUpdatedBy], \r\n            T.Ver");
            viewString.Append("sionDeletedBy AS [E_ApplicationPaymentProviderProduct.VersionDeletedBy], \r\n     ");
            viewString.Append("       T.VersionOwnerContactID AS [E_ApplicationPaymentProviderProduct.VersionOw");
            viewString.Append("nerContactID], \r\n            T.VersionOwnerCompanyID AS [E_ApplicationPaymentPro");
            viewString.Append("viderProduct.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [E_Applic");
            viewString.Append("ationPaymentProviderProduct.VersionUpdated], \r\n            True AS _from0\r\n     ");
            viewString.Append("   FROM NKDC.ApplicationPaymentProviderProducts AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_ApplicationPaymentProviderProduct", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_ApplicationPaymentProviderProductModel
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView274()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2957);
            viewString.Append("\r\n    SELECT VALUE -- Constructing E_ApplicationPaymentProviderProductModel\r\n   ");
            viewString.Append("     [NKD.Module.BusinessObjects.Store.E_ApplicationPaymentProviderProductModel]");
            viewString.Append("(T1.[E_ApplicationPaymentProviderProductModel.ApplicationPaymentProviderProductM");
            viewString.Append("odelID], T1.[E_ApplicationPaymentProviderProductModel.ApplicationPaymentProvider");
            viewString.Append("ProductID], T1.[E_ApplicationPaymentProviderProductModel.ModelID], T1.[E_Applica");
            viewString.Append("tionPaymentProviderProductModel.SupplierModelID], T1.[E_ApplicationPaymentProvid");
            viewString.Append("erProductModel.UnitDefault], T1.[E_ApplicationPaymentProviderProductModel.UnitMa");
            viewString.Append("ximum], T1.[E_ApplicationPaymentProviderProductModel.UnitMinimum], T1.[E_Applica");
            viewString.Append("tionPaymentProviderProductModel.Version], T1.[E_ApplicationPaymentProviderProduc");
            viewString.Append("tModel.VersionAntecedentID], T1.[E_ApplicationPaymentProviderProductModel.Versio");
            viewString.Append("nCertainty], T1.[E_ApplicationPaymentProviderProductModel.VersionWorkflowInstanc");
            viewString.Append("eID], T1.[E_ApplicationPaymentProviderProductModel.VersionUpdatedBy], T1.[E_Appl");
            viewString.Append("icationPaymentProviderProductModel.VersionDeletedBy], T1.[E_ApplicationPaymentPr");
            viewString.Append("oviderProductModel.VersionOwnerContactID], T1.[E_ApplicationPaymentProviderProdu");
            viewString.Append("ctModel.VersionOwnerCompanyID], T1.[E_ApplicationPaymentProviderProductModel.Ver");
            viewString.Append("sionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.ApplicationPaymentProv");
            viewString.Append("iderProductModelID AS [E_ApplicationPaymentProviderProductModel.ApplicationPayme");
            viewString.Append("ntProviderProductModelID], \r\n            T.ApplicationPaymentProviderProductID A");
            viewString.Append("S [E_ApplicationPaymentProviderProductModel.ApplicationPaymentProviderProductID]");
            viewString.Append(", \r\n            T.ModelID AS [E_ApplicationPaymentProviderProductModel.ModelID],");
            viewString.Append(" \r\n            T.SupplierModelID AS [E_ApplicationPaymentProviderProductModel.Su");
            viewString.Append("pplierModelID], \r\n            T.UnitDefault AS [E_ApplicationPaymentProviderProd");
            viewString.Append("uctModel.UnitDefault], \r\n            T.UnitMaximum AS [E_ApplicationPaymentProvi");
            viewString.Append("derProductModel.UnitMaximum], \r\n            T.UnitMinimum AS [E_ApplicationPayme");
            viewString.Append("ntProviderProductModel.UnitMinimum], \r\n            T.Version AS [E_ApplicationPa");
            viewString.Append("ymentProviderProductModel.Version], \r\n            T.VersionAntecedentID AS [E_Ap");
            viewString.Append("plicationPaymentProviderProductModel.VersionAntecedentID], \r\n            T.Versi");
            viewString.Append("onCertainty AS [E_ApplicationPaymentProviderProductModel.VersionCertainty], \r\n  ");
            viewString.Append("          T.VersionWorkflowInstanceID AS [E_ApplicationPaymentProviderProductMod");
            viewString.Append("el.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [E_Applicatio");
            viewString.Append("nPaymentProviderProductModel.VersionUpdatedBy], \r\n            T.VersionDeletedBy");
            viewString.Append(" AS [E_ApplicationPaymentProviderProductModel.VersionDeletedBy], \r\n            T");
            viewString.Append(".VersionOwnerContactID AS [E_ApplicationPaymentProviderProductModel.VersionOwner");
            viewString.Append("ContactID], \r\n            T.VersionOwnerCompanyID AS [E_ApplicationPaymentProvid");
            viewString.Append("erProductModel.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [E_Appl");
            viewString.Append("icationPaymentProviderProductModel.VersionUpdated], \r\n            True AS _from0");
            viewString.Append("\r\n        FROM NKDC.ApplicationPaymentProviderProductModels AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_ApplicationPaymentProviderProductModel", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_ApplicationPaymentProviderProductPart
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView275()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2760);
            viewString.Append("\r\n    SELECT VALUE -- Constructing E_ApplicationPaymentProviderProductPart\r\n    ");
            viewString.Append("    [NKD.Module.BusinessObjects.Store.E_ApplicationPaymentProviderProductPart](T");
            viewString.Append("1.[E_ApplicationPaymentProviderProductPart.ApplicationPaymentProviderProductPart");
            viewString.Append("ID], T1.[E_ApplicationPaymentProviderProductPart.ApplicationPaymentProviderProdu");
            viewString.Append("ctID], T1.[E_ApplicationPaymentProviderProductPart.PartID], T1.[E_ApplicationPay");
            viewString.Append("mentProviderProductPart.UnitDefault], T1.[E_ApplicationPaymentProviderProductPar");
            viewString.Append("t.UnitMaximum], T1.[E_ApplicationPaymentProviderProductPart.UnitMinimum], T1.[E_");
            viewString.Append("ApplicationPaymentProviderProductPart.Version], T1.[E_ApplicationPaymentProvider");
            viewString.Append("ProductPart.VersionAntecedentID], T1.[E_ApplicationPaymentProviderProductPart.Ve");
            viewString.Append("rsionCertainty], T1.[E_ApplicationPaymentProviderProductPart.VersionWorkflowInst");
            viewString.Append("anceID], T1.[E_ApplicationPaymentProviderProductPart.VersionUpdatedBy], T1.[E_Ap");
            viewString.Append("plicationPaymentProviderProductPart.VersionDeletedBy], T1.[E_ApplicationPaymentP");
            viewString.Append("roviderProductPart.VersionOwnerContactID], T1.[E_ApplicationPaymentProviderProdu");
            viewString.Append("ctPart.VersionOwnerCompanyID], T1.[E_ApplicationPaymentProviderProductPart.Versi");
            viewString.Append("onUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.ApplicationPaymentProvid");
            viewString.Append("erProductPartID AS [E_ApplicationPaymentProviderProductPart.ApplicationPaymentPr");
            viewString.Append("oviderProductPartID], \r\n            T.ApplicationPaymentProviderProductID AS [E_");
            viewString.Append("ApplicationPaymentProviderProductPart.ApplicationPaymentProviderProductID], \r\n  ");
            viewString.Append("          T.PartID AS [E_ApplicationPaymentProviderProductPart.PartID], \r\n      ");
            viewString.Append("      T.UnitDefault AS [E_ApplicationPaymentProviderProductPart.UnitDefault], \r\n");
            viewString.Append("            T.UnitMaximum AS [E_ApplicationPaymentProviderProductPart.UnitMaximu");
            viewString.Append("m], \r\n            T.UnitMinimum AS [E_ApplicationPaymentProviderProductPart.Unit");
            viewString.Append("Minimum], \r\n            T.Version AS [E_ApplicationPaymentProviderProductPart.Ve");
            viewString.Append("rsion], \r\n            T.VersionAntecedentID AS [E_ApplicationPaymentProviderProd");
            viewString.Append("uctPart.VersionAntecedentID], \r\n            T.VersionCertainty AS [E_Application");
            viewString.Append("PaymentProviderProductPart.VersionCertainty], \r\n            T.VersionWorkflowIns");
            viewString.Append("tanceID AS [E_ApplicationPaymentProviderProductPart.VersionWorkflowInstanceID], ");
            viewString.Append("\r\n            T.VersionUpdatedBy AS [E_ApplicationPaymentProviderProductPart.Ver");
            viewString.Append("sionUpdatedBy], \r\n            T.VersionDeletedBy AS [E_ApplicationPaymentProvide");
            viewString.Append("rProductPart.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [E_Appl");
            viewString.Append("icationPaymentProviderProductPart.VersionOwnerContactID], \r\n            T.Versio");
            viewString.Append("nOwnerCompanyID AS [E_ApplicationPaymentProviderProductPart.VersionOwnerCompanyI");
            viewString.Append("D], \r\n            T.VersionUpdated AS [E_ApplicationPaymentProviderProductPart.V");
            viewString.Append("ersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.ApplicationPayme");
            viewString.Append("ntProviderProductParts AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_ApplicationPaymentProviderProductPart", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_ApplicationRoute
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView276()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2355);
            viewString.Append("\r\n    SELECT VALUE -- Constructing E_ApplicationRoute\r\n        [NKD.Module.Busin");
            viewString.Append("essObjects.Store.E_ApplicationRoute](T1.[E_ApplicationRoute.ApplicationRouteID],");
            viewString.Append(" T1.[E_ApplicationRoute.ApplicationID], T1.[E_ApplicationRoute.RouteTypeID], T1.");
            viewString.Append("[E_ApplicationRoute.Sequence], T1.[E_ApplicationRoute.RouteName], T1.[E_Applicat");
            viewString.Append("ionRoute.RouteURL], T1.[E_ApplicationRoute.RouteMask], T1.[E_ApplicationRoute.Re");
            viewString.Append("directURL], T1.[E_ApplicationRoute.IsExternal], T1.[E_ApplicationRoute.IsCapturi");
            viewString.Append("ngStatistic], T1.[E_ApplicationRoute.Version], T1.[E_ApplicationRoute.VersionAnt");
            viewString.Append("ecedentID], T1.[E_ApplicationRoute.VersionCertainty], T1.[E_ApplicationRoute.Ver");
            viewString.Append("sionWorkflowInstanceID], T1.[E_ApplicationRoute.VersionUpdatedBy], T1.[E_Applica");
            viewString.Append("tionRoute.VersionDeletedBy], T1.[E_ApplicationRoute.VersionOwnerContactID], T1.[");
            viewString.Append("E_ApplicationRoute.VersionOwnerCompanyID], T1.[E_ApplicationRoute.VersionUpdated");
            viewString.Append("])\r\n    FROM (\r\n        SELECT \r\n            T.ApplicationRouteID AS [E_Applicat");
            viewString.Append("ionRoute.ApplicationRouteID], \r\n            T.ApplicationID AS [E_ApplicationRou");
            viewString.Append("te.ApplicationID], \r\n            T.RouteTypeID AS [E_ApplicationRoute.RouteTypeI");
            viewString.Append("D], \r\n            T.Sequence AS [E_ApplicationRoute.Sequence], \r\n            T.R");
            viewString.Append("outeName AS [E_ApplicationRoute.RouteName], \r\n            T.RouteURL AS [E_Appli");
            viewString.Append("cationRoute.RouteURL], \r\n            T.RouteMask AS [E_ApplicationRoute.RouteMas");
            viewString.Append("k], \r\n            T.RedirectURL AS [E_ApplicationRoute.RedirectURL], \r\n         ");
            viewString.Append("   T.IsExternal AS [E_ApplicationRoute.IsExternal], \r\n            T.IsCapturingS");
            viewString.Append("tatistic AS [E_ApplicationRoute.IsCapturingStatistic], \r\n            T.Version A");
            viewString.Append("S [E_ApplicationRoute.Version], \r\n            T.VersionAntecedentID AS [E_Applic");
            viewString.Append("ationRoute.VersionAntecedentID], \r\n            T.VersionCertainty AS [E_Applicat");
            viewString.Append("ionRoute.VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [E_Appl");
            viewString.Append("icationRoute.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [E_");
            viewString.Append("ApplicationRoute.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [E_Appli");
            viewString.Append("cationRoute.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [E_Appli");
            viewString.Append("cationRoute.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [E_");
            viewString.Append("ApplicationRoute.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [E_Ap");
            viewString.Append("plicationRoute.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.");
            viewString.Append("ApplicationRoutes AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_ApplicationRoute", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_ApplicationRouteData
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView277()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2403);
            viewString.Append("\r\n    SELECT VALUE -- Constructing E_ApplicationRouteData\r\n        [NKD.Module.B");
            viewString.Append("usinessObjects.Store.E_ApplicationRouteData](T1.[E_ApplicationRouteData.Applicat");
            viewString.Append("ionRouteDataID], T1.[E_ApplicationRouteData.ApplicationRouteID], T1.[E_Applicati");
            viewString.Append("onRouteData.TableType], T1.[E_ApplicationRouteData.ReferenceID], T1.[E_Applicati");
            viewString.Append("onRouteData.ReferenceName], T1.[E_ApplicationRouteData.Ticks], T1.[E_Application");
            viewString.Append("RouteData.ValidFrom], T1.[E_ApplicationRouteData.ValidUntil], T1.[E_ApplicationR");
            viewString.Append("outeData.Comment], T1.[E_ApplicationRouteData.Version], T1.[E_ApplicationRouteDa");
            viewString.Append("ta.VersionAntecedentID], T1.[E_ApplicationRouteData.VersionCertainty], T1.[E_App");
            viewString.Append("licationRouteData.VersionWorkflowInstanceID], T1.[E_ApplicationRouteData.Version");
            viewString.Append("UpdatedBy], T1.[E_ApplicationRouteData.VersionDeletedBy], T1.[E_ApplicationRoute");
            viewString.Append("Data.VersionOwnerContactID], T1.[E_ApplicationRouteData.VersionOwnerCompanyID], ");
            viewString.Append("T1.[E_ApplicationRouteData.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n      ");
            viewString.Append("      T.ApplicationRouteDataID AS [E_ApplicationRouteData.ApplicationRouteDataID");
            viewString.Append("], \r\n            T.ApplicationRouteID AS [E_ApplicationRouteData.ApplicationRout");
            viewString.Append("eID], \r\n            T.TableType AS [E_ApplicationRouteData.TableType], \r\n       ");
            viewString.Append("     T.ReferenceID AS [E_ApplicationRouteData.ReferenceID], \r\n            T.Refe");
            viewString.Append("renceName AS [E_ApplicationRouteData.ReferenceName], \r\n            T.Ticks AS [E");
            viewString.Append("_ApplicationRouteData.Ticks], \r\n            T.ValidFrom AS [E_ApplicationRouteDa");
            viewString.Append("ta.ValidFrom], \r\n            T.ValidUntil AS [E_ApplicationRouteData.ValidUntil]");
            viewString.Append(", \r\n            T.Comment AS [E_ApplicationRouteData.Comment], \r\n            T.V");
            viewString.Append("ersion AS [E_ApplicationRouteData.Version], \r\n            T.VersionAntecedentID ");
            viewString.Append("AS [E_ApplicationRouteData.VersionAntecedentID], \r\n            T.VersionCertaint");
            viewString.Append("y AS [E_ApplicationRouteData.VersionCertainty], \r\n            T.VersionWorkflowI");
            viewString.Append("nstanceID AS [E_ApplicationRouteData.VersionWorkflowInstanceID], \r\n            T");
            viewString.Append(".VersionUpdatedBy AS [E_ApplicationRouteData.VersionUpdatedBy], \r\n            T.");
            viewString.Append("VersionDeletedBy AS [E_ApplicationRouteData.VersionDeletedBy], \r\n            T.V");
            viewString.Append("ersionOwnerContactID AS [E_ApplicationRouteData.VersionOwnerContactID], \r\n      ");
            viewString.Append("      T.VersionOwnerCompanyID AS [E_ApplicationRouteData.VersionOwnerCompanyID],");
            viewString.Append(" \r\n            T.VersionUpdated AS [E_ApplicationRouteData.VersionUpdated], \r\n  ");
            viewString.Append("          True AS _from0\r\n        FROM NKDC.ApplicationRouteDatas AS T\r\n    ) AS");
            viewString.Append(" T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_ApplicationRouteData", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_ApplicationRouteParameter
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView278()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2097);
            viewString.Append("\r\n    SELECT VALUE -- Constructing E_ApplicationRouteParameter\r\n        [NKD.Mod");
            viewString.Append("ule.BusinessObjects.Store.E_ApplicationRouteParameter](T1.[E_ApplicationRoutePar");
            viewString.Append("ameter.ApplicationRouteParameterID], T1.[E_ApplicationRouteParameter.Application");
            viewString.Append("RouteID], T1.[E_ApplicationRouteParameter.RouteParameterName], T1.[E_Application");
            viewString.Append("RouteParameter.RouteParameterValue], T1.[E_ApplicationRouteParameter.Version], T");
            viewString.Append("1.[E_ApplicationRouteParameter.VersionAntecedentID], T1.[E_ApplicationRouteParam");
            viewString.Append("eter.VersionCertainty], T1.[E_ApplicationRouteParameter.VersionWorkflowInstanceI");
            viewString.Append("D], T1.[E_ApplicationRouteParameter.VersionUpdatedBy], T1.[E_ApplicationRoutePar");
            viewString.Append("ameter.VersionDeletedBy], T1.[E_ApplicationRouteParameter.VersionOwnerContactID]");
            viewString.Append(", T1.[E_ApplicationRouteParameter.VersionOwnerCompanyID], T1.[E_ApplicationRoute");
            viewString.Append("Parameter.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.Applicati");
            viewString.Append("onRouteParameterID AS [E_ApplicationRouteParameter.ApplicationRouteParameterID],");
            viewString.Append(" \r\n            T.ApplicationRouteID AS [E_ApplicationRouteParameter.ApplicationR");
            viewString.Append("outeID], \r\n            T.RouteParameterName AS [E_ApplicationRouteParameter.Rout");
            viewString.Append("eParameterName], \r\n            T.RouteParameterValue AS [E_ApplicationRouteParam");
            viewString.Append("eter.RouteParameterValue], \r\n            T.Version AS [E_ApplicationRouteParamet");
            viewString.Append("er.Version], \r\n            T.VersionAntecedentID AS [E_ApplicationRouteParameter");
            viewString.Append(".VersionAntecedentID], \r\n            T.VersionCertainty AS [E_ApplicationRoutePa");
            viewString.Append("rameter.VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [E_Appli");
            viewString.Append("cationRouteParameter.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedB");
            viewString.Append("y AS [E_ApplicationRouteParameter.VersionUpdatedBy], \r\n            T.VersionDele");
            viewString.Append("tedBy AS [E_ApplicationRouteParameter.VersionDeletedBy], \r\n            T.Version");
            viewString.Append("OwnerContactID AS [E_ApplicationRouteParameter.VersionOwnerContactID], \r\n       ");
            viewString.Append("     T.VersionOwnerCompanyID AS [E_ApplicationRouteParameter.VersionOwnerCompany");
            viewString.Append("ID], \r\n            T.VersionUpdated AS [E_ApplicationRouteParameter.VersionUpdat");
            viewString.Append("ed], \r\n            True AS _from0\r\n        FROM NKDC.ApplicationRouteParameters ");
            viewString.Append("AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_ApplicationRouteParameter", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_AssetData
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView279()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2718);
            viewString.Append("\r\n    SELECT VALUE -- Constructing E_AssetData\r\n        [NKD.Module.BusinessObje");
            viewString.Append("cts.Store.E_AssetData](T1.[E_AssetData.AssetDataID], T1.[E_AssetData.AssetID], T");
            viewString.Append("1.[E_AssetData.TableType], T1.[E_AssetData.ReferenceID], T1.[E_AssetData.Referen");
            viewString.Append("ceName], T1.[E_AssetData.AvailabilityID], T1.[E_AssetData.IsFixed], T1.[E_AssetD");
            viewString.Append("ata.CoverageProvinceID], T1.[E_AssetData.CurrentLocationID], T1.[E_AssetData.Tic");
            viewString.Append("kUnitID], T1.[E_AssetData.Ticks], T1.[E_AssetData.TicksOffset], T1.[E_AssetData.");
            viewString.Append("TicksResolution], T1.[E_AssetData.ValidFrom], T1.[E_AssetData.ValidUntil], T1.[E");
            viewString.Append("_AssetData.Culture], T1.[E_AssetData.Weight], T1.[E_AssetData.Comment], T1.[E_As");
            viewString.Append("setData.Version], T1.[E_AssetData.VersionAntecedentID], T1.[E_AssetData.VersionC");
            viewString.Append("ertainty], T1.[E_AssetData.VersionWorkflowInstanceID], T1.[E_AssetData.VersionUp");
            viewString.Append("datedBy], T1.[E_AssetData.VersionDeletedBy], T1.[E_AssetData.VersionOwnerContact");
            viewString.Append("ID], T1.[E_AssetData.VersionOwnerCompanyID], T1.[E_AssetData.VersionUpdated])\r\n ");
            viewString.Append("   FROM (\r\n        SELECT \r\n            T.AssetDataID AS [E_AssetData.AssetDataI");
            viewString.Append("D], \r\n            T.AssetID AS [E_AssetData.AssetID], \r\n            T.TableType ");
            viewString.Append("AS [E_AssetData.TableType], \r\n            T.ReferenceID AS [E_AssetData.Referenc");
            viewString.Append("eID], \r\n            T.ReferenceName AS [E_AssetData.ReferenceName], \r\n          ");
            viewString.Append("  T.AvailabilityID AS [E_AssetData.AvailabilityID], \r\n            T.IsFixed AS [");
            viewString.Append("E_AssetData.IsFixed], \r\n            T.CoverageProvinceID AS [E_AssetData.Coverag");
            viewString.Append("eProvinceID], \r\n            T.CurrentLocationID AS [E_AssetData.CurrentLocationI");
            viewString.Append("D], \r\n            T.TickUnitID AS [E_AssetData.TickUnitID], \r\n            T.Tick");
            viewString.Append("s AS [E_AssetData.Ticks], \r\n            T.TicksOffset AS [E_AssetData.TicksOffse");
            viewString.Append("t], \r\n            T.TicksResolution AS [E_AssetData.TicksResolution], \r\n        ");
            viewString.Append("    T.ValidFrom AS [E_AssetData.ValidFrom], \r\n            T.ValidUntil AS [E_Ass");
            viewString.Append("etData.ValidUntil], \r\n            T.Culture AS [E_AssetData.Culture], \r\n        ");
            viewString.Append("    T.Weight AS [E_AssetData.Weight], \r\n            T.Comment AS [E_AssetData.Co");
            viewString.Append("mment], \r\n            T.Version AS [E_AssetData.Version], \r\n            T.Versio");
            viewString.Append("nAntecedentID AS [E_AssetData.VersionAntecedentID], \r\n            T.VersionCerta");
            viewString.Append("inty AS [E_AssetData.VersionCertainty], \r\n            T.VersionWorkflowInstanceI");
            viewString.Append("D AS [E_AssetData.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy A");
            viewString.Append("S [E_AssetData.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [E_AssetDa");
            viewString.Append("ta.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [E_AssetData.Vers");
            viewString.Append("ionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [E_AssetData.Versio");
            viewString.Append("nOwnerCompanyID], \r\n            T.VersionUpdated AS [E_AssetData.VersionUpdated]");
            viewString.Append(", \r\n            True AS _from0\r\n        FROM NKDC.AssetDatas AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_AssetData", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_AssetProduction
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView280()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2819);
            viewString.Append("\r\n    SELECT VALUE -- Constructing E_AssetProduction\r\n        [NKD.Module.Busine");
            viewString.Append("ssObjects.Store.E_AssetProduction](T1.[E_AssetProduction.AssetProductionID], T1.");
            viewString.Append("[E_AssetProduction.AssetID], T1.[E_AssetProduction.ProductionParameterID], T1.[E");
            viewString.Append("_AssetProduction.ProRataUnits], T1.[E_AssetProduction.ProRataCost], T1.[E_AssetP");
            viewString.Append("roduction.EstimatedProRataValue], T1.[E_AssetProduction.ProRataUnitMinimum], T1.");
            viewString.Append("[E_AssetProduction.ProRataUnitMaximum], T1.[E_AssetProduction.ProRataUnitOptimum");
            viewString.Append("], T1.[E_AssetProduction.AssetProductionGroupID], T1.[E_AssetProduction.Weight],");
            viewString.Append(" T1.[E_AssetProduction.Variance], T1.[E_AssetProduction.Correction], T1.[E_Asset");
            viewString.Append("Production.Comment], T1.[E_AssetProduction.Version], T1.[E_AssetProduction.Versi");
            viewString.Append("onAntecedentID], T1.[E_AssetProduction.VersionCertainty], T1.[E_AssetProduction.");
            viewString.Append("VersionWorkflowInstanceID], T1.[E_AssetProduction.VersionUpdatedBy], T1.[E_Asset");
            viewString.Append("Production.VersionDeletedBy], T1.[E_AssetProduction.VersionOwnerContactID], T1.[");
            viewString.Append("E_AssetProduction.VersionOwnerCompanyID], T1.[E_AssetProduction.VersionUpdated])");
            viewString.Append("\r\n    FROM (\r\n        SELECT \r\n            T.AssetProductionID AS [E_AssetProduc");
            viewString.Append("tion.AssetProductionID], \r\n            T.AssetID AS [E_AssetProduction.AssetID],");
            viewString.Append(" \r\n            T.ProductionParameterID AS [E_AssetProduction.ProductionParameter");
            viewString.Append("ID], \r\n            T.ProRataUnits AS [E_AssetProduction.ProRataUnits], \r\n       ");
            viewString.Append("     T.ProRataCost AS [E_AssetProduction.ProRataCost], \r\n            T.Estimated");
            viewString.Append("ProRataValue AS [E_AssetProduction.EstimatedProRataValue], \r\n            T.ProRa");
            viewString.Append("taUnitMinimum AS [E_AssetProduction.ProRataUnitMinimum], \r\n            T.ProRata");
            viewString.Append("UnitMaximum AS [E_AssetProduction.ProRataUnitMaximum], \r\n            T.ProRataUn");
            viewString.Append("itOptimum AS [E_AssetProduction.ProRataUnitOptimum], \r\n            T.AssetProduc");
            viewString.Append("tionGroupID AS [E_AssetProduction.AssetProductionGroupID], \r\n            T.Weigh");
            viewString.Append("t AS [E_AssetProduction.Weight], \r\n            T.Variance AS [E_AssetProduction.");
            viewString.Append("Variance], \r\n            T.Correction AS [E_AssetProduction.Correction], \r\n     ");
            viewString.Append("       T.Comment AS [E_AssetProduction.Comment], \r\n            T.Version AS [E_A");
            viewString.Append("ssetProduction.Version], \r\n            T.VersionAntecedentID AS [E_AssetProducti");
            viewString.Append("on.VersionAntecedentID], \r\n            T.VersionCertainty AS [E_AssetProduction.");
            viewString.Append("VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [E_AssetProducti");
            viewString.Append("on.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [E_AssetProdu");
            viewString.Append("ction.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [E_AssetProduction.");
            viewString.Append("VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [E_AssetProduction.V");
            viewString.Append("ersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [E_AssetProducti");
            viewString.Append("on.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [E_AssetProduction.");
            viewString.Append("VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.AssetProduction");
            viewString.Append("s AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_AssetProduction", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_ContactCreditCard
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView281()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2819);
            viewString.Append("\r\n    SELECT VALUE -- Constructing E_ContactCreditCard\r\n        [NKD.Module.Busi");
            viewString.Append("nessObjects.Store.E_ContactCreditCard](T1.[E_ContactCreditCard.ContactCreditCard");
            viewString.Append("ID], T1.[E_ContactCreditCard.ContactID], T1.[E_ContactCreditCard.ApplicationPaym");
            viewString.Append("entProviderContactID], T1.[E_ContactCreditCard.ApplicationPaymentProviderToken],");
            viewString.Append(" T1.[E_ContactCreditCard.CreditCardName], T1.[E_ContactCreditCard.Sequence], T1.");
            viewString.Append("[E_ContactCreditCard.CreditCardType], T1.[E_ContactCreditCard.CreditCard], T1.[E");
            viewString.Append("_ContactCreditCard.CreditCardMasked], T1.[E_ContactCreditCard.Expiry], T1.[E_Con");
            viewString.Append("tactCreditCard.Valid], T1.[E_ContactCreditCard.CVV], T1.[E_ContactCreditCard.Def");
            viewString.Append("aultCurrencyID], T1.[E_ContactCreditCard.Version], T1.[E_ContactCreditCard.Versi");
            viewString.Append("onAntecedentID], T1.[E_ContactCreditCard.VersionCertainty], T1.[E_ContactCreditC");
            viewString.Append("ard.VersionWorkflowInstanceID], T1.[E_ContactCreditCard.VersionUpdatedBy], T1.[E");
            viewString.Append("_ContactCreditCard.VersionDeletedBy], T1.[E_ContactCreditCard.VersionOwnerContac");
            viewString.Append("tID], T1.[E_ContactCreditCard.VersionOwnerCompanyID], T1.[E_ContactCreditCard.Ve");
            viewString.Append("rsionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.ContactCreditCardID A");
            viewString.Append("S [E_ContactCreditCard.ContactCreditCardID], \r\n            T.ContactID AS [E_Con");
            viewString.Append("tactCreditCard.ContactID], \r\n            T.ApplicationPaymentProviderContactID A");
            viewString.Append("S [E_ContactCreditCard.ApplicationPaymentProviderContactID], \r\n            T.App");
            viewString.Append("licationPaymentProviderToken AS [E_ContactCreditCard.ApplicationPaymentProviderT");
            viewString.Append("oken], \r\n            T.CreditCardName AS [E_ContactCreditCard.CreditCardName], \r");
            viewString.Append("\n            T.Sequence AS [E_ContactCreditCard.Sequence], \r\n            T.Credi");
            viewString.Append("tCardType AS [E_ContactCreditCard.CreditCardType], \r\n            T.CreditCard AS");
            viewString.Append(" [E_ContactCreditCard.CreditCard], \r\n            T.CreditCardMasked AS [E_Contac");
            viewString.Append("tCreditCard.CreditCardMasked], \r\n            T.Expiry AS [E_ContactCreditCard.Ex");
            viewString.Append("piry], \r\n            T.Valid AS [E_ContactCreditCard.Valid], \r\n            T.CVV");
            viewString.Append(" AS [E_ContactCreditCard.CVV], \r\n            T.DefaultCurrencyID AS [E_ContactCr");
            viewString.Append("editCard.DefaultCurrencyID], \r\n            T.Version AS [E_ContactCreditCard.Ver");
            viewString.Append("sion], \r\n            T.VersionAntecedentID AS [E_ContactCreditCard.VersionAntece");
            viewString.Append("dentID], \r\n            T.VersionCertainty AS [E_ContactCreditCard.VersionCertain");
            viewString.Append("ty], \r\n            T.VersionWorkflowInstanceID AS [E_ContactCreditCard.VersionWo");
            viewString.Append("rkflowInstanceID], \r\n            T.VersionUpdatedBy AS [E_ContactCreditCard.Vers");
            viewString.Append("ionUpdatedBy], \r\n            T.VersionDeletedBy AS [E_ContactCreditCard.VersionD");
            viewString.Append("eletedBy], \r\n            T.VersionOwnerContactID AS [E_ContactCreditCard.Version");
            viewString.Append("OwnerContactID], \r\n            T.VersionOwnerCompanyID AS [E_ContactCreditCard.V");
            viewString.Append("ersionOwnerCompanyID], \r\n            T.VersionUpdated AS [E_ContactCreditCard.Ve");
            viewString.Append("rsionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.ContactCreditCard");
            viewString.Append("s AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_ContactCreditCard", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_DictionaryAccountType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView282()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2302);
            viewString.Append("\r\n    SELECT VALUE -- Constructing E_DictionaryAccountType\r\n        [NKD.Module.");
            viewString.Append("BusinessObjects.Store.E_DictionaryAccountType](T1.[E_DictionaryAccountType.Accou");
            viewString.Append("ntTypeID], T1.[E_DictionaryAccountType.StandardAccountTypeName], T1.[E_Dictionar");
            viewString.Append("yAccountType.CustomAccountTypeName], T1.[E_DictionaryAccountType.Description], T");
            viewString.Append("1.[E_DictionaryAccountType.FullDescription], T1.[E_DictionaryAccountType.Thumbna");
            viewString.Append("il], T1.[E_DictionaryAccountType.OriginalFileDataID], T1.[E_DictionaryAccountTyp");
            viewString.Append("e.Version], T1.[E_DictionaryAccountType.VersionAntecedentID], T1.[E_DictionaryAc");
            viewString.Append("countType.VersionCertainty], T1.[E_DictionaryAccountType.VersionWorkflowInstance");
            viewString.Append("ID], T1.[E_DictionaryAccountType.VersionUpdatedBy], T1.[E_DictionaryAccountType.");
            viewString.Append("VersionDeletedBy], T1.[E_DictionaryAccountType.VersionOwnerContactID], T1.[E_Dic");
            viewString.Append("tionaryAccountType.VersionOwnerCompanyID], T1.[E_DictionaryAccountType.VersionUp");
            viewString.Append("dated])\r\n    FROM (\r\n        SELECT \r\n            T.AccountTypeID AS [E_Dictiona");
            viewString.Append("ryAccountType.AccountTypeID], \r\n            T.StandardAccountTypeName AS [E_Dict");
            viewString.Append("ionaryAccountType.StandardAccountTypeName], \r\n            T.CustomAccountTypeNam");
            viewString.Append("e AS [E_DictionaryAccountType.CustomAccountTypeName], \r\n            T.Descriptio");
            viewString.Append("n AS [E_DictionaryAccountType.Description], \r\n            T.FullDescription AS [");
            viewString.Append("E_DictionaryAccountType.FullDescription], \r\n            T.Thumbnail AS [E_Dictio");
            viewString.Append("naryAccountType.Thumbnail], \r\n            T.OriginalFileDataID AS [E_DictionaryA");
            viewString.Append("ccountType.OriginalFileDataID], \r\n            T.Version AS [E_DictionaryAccountT");
            viewString.Append("ype.Version], \r\n            T.VersionAntecedentID AS [E_DictionaryAccountType.Ve");
            viewString.Append("rsionAntecedentID], \r\n            T.VersionCertainty AS [E_DictionaryAccountType");
            viewString.Append(".VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [E_DictionaryAc");
            viewString.Append("countType.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [E_Dic");
            viewString.Append("tionaryAccountType.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [E_Dic");
            viewString.Append("tionaryAccountType.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [");
            viewString.Append("E_DictionaryAccountType.VersionOwnerContactID], \r\n            T.VersionOwnerComp");
            viewString.Append("anyID AS [E_DictionaryAccountType.VersionOwnerCompanyID], \r\n            T.Versio");
            viewString.Append("nUpdated AS [E_DictionaryAccountType.VersionUpdated], \r\n            True AS _fro");
            viewString.Append("m0\r\n        FROM NKDC.DictionaryAccountTypes AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_DictionaryAccountType", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_DictionaryOrderStatus
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView283()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2301);
            viewString.Append("\r\n    SELECT VALUE -- Constructing E_DictionaryOrderStatus\r\n        [NKD.Module.");
            viewString.Append("BusinessObjects.Store.E_DictionaryOrderStatus](T1.[E_DictionaryOrderStatus.Order");
            viewString.Append("StatusID], T1.[E_DictionaryOrderStatus.StandardOrderStatusName], T1.[E_Dictionar");
            viewString.Append("yOrderStatus.CustomOrderStatusName], T1.[E_DictionaryOrderStatus.Description], T");
            viewString.Append("1.[E_DictionaryOrderStatus.FullDescription], T1.[E_DictionaryOrderStatus.Thumbna");
            viewString.Append("il], T1.[E_DictionaryOrderStatus.OriginalFileDataID], T1.[E_DictionaryOrderStatu");
            viewString.Append("s.Version], T1.[E_DictionaryOrderStatus.VersionAntecedentID], T1.[E_DictionaryOr");
            viewString.Append("derStatus.VersionCertainty], T1.[E_DictionaryOrderStatus.VersionWorkflowInstance");
            viewString.Append("ID], T1.[E_DictionaryOrderStatus.VersionUpdatedBy], T1.[E_DictionaryOrderStatus.");
            viewString.Append("VersionDeletedBy], T1.[E_DictionaryOrderStatus.VersionOwnerContactID], T1.[E_Dic");
            viewString.Append("tionaryOrderStatus.VersionOwnerCompanyID], T1.[E_DictionaryOrderStatus.VersionUp");
            viewString.Append("dated])\r\n    FROM (\r\n        SELECT \r\n            T.OrderStatusID AS [E_Dictiona");
            viewString.Append("ryOrderStatus.OrderStatusID], \r\n            T.StandardOrderStatusName AS [E_Dict");
            viewString.Append("ionaryOrderStatus.StandardOrderStatusName], \r\n            T.CustomOrderStatusNam");
            viewString.Append("e AS [E_DictionaryOrderStatus.CustomOrderStatusName], \r\n            T.Descriptio");
            viewString.Append("n AS [E_DictionaryOrderStatus.Description], \r\n            T.FullDescription AS [");
            viewString.Append("E_DictionaryOrderStatus.FullDescription], \r\n            T.Thumbnail AS [E_Dictio");
            viewString.Append("naryOrderStatus.Thumbnail], \r\n            T.OriginalFileDataID AS [E_DictionaryO");
            viewString.Append("rderStatus.OriginalFileDataID], \r\n            T.Version AS [E_DictionaryOrderSta");
            viewString.Append("tus.Version], \r\n            T.VersionAntecedentID AS [E_DictionaryOrderStatus.Ve");
            viewString.Append("rsionAntecedentID], \r\n            T.VersionCertainty AS [E_DictionaryOrderStatus");
            viewString.Append(".VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [E_DictionaryOr");
            viewString.Append("derStatus.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [E_Dic");
            viewString.Append("tionaryOrderStatus.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [E_Dic");
            viewString.Append("tionaryOrderStatus.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [");
            viewString.Append("E_DictionaryOrderStatus.VersionOwnerContactID], \r\n            T.VersionOwnerComp");
            viewString.Append("anyID AS [E_DictionaryOrderStatus.VersionOwnerCompanyID], \r\n            T.Versio");
            viewString.Append("nUpdated AS [E_DictionaryOrderStatus.VersionUpdated], \r\n            True AS _fro");
            viewString.Append("m0\r\n        FROM NKDC.DictionaryOrderStatus AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_DictionaryOrderStatus", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_DictionaryRouteType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView284()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2214);
            viewString.Append("\r\n    SELECT VALUE -- Constructing E_DictionaryRouteType\r\n        [NKD.Module.Bu");
            viewString.Append("sinessObjects.Store.E_DictionaryRouteType](T1.[E_DictionaryRouteType.RouteTypeID");
            viewString.Append("], T1.[E_DictionaryRouteType.StandardRouteTypeName], T1.[E_DictionaryRouteType.C");
            viewString.Append("ustomRouteTypeName], T1.[E_DictionaryRouteType.Description], T1.[E_DictionaryRou");
            viewString.Append("teType.FullDescription], T1.[E_DictionaryRouteType.Thumbnail], T1.[E_DictionaryR");
            viewString.Append("outeType.OriginalFileDataID], T1.[E_DictionaryRouteType.Version], T1.[E_Dictiona");
            viewString.Append("ryRouteType.VersionAntecedentID], T1.[E_DictionaryRouteType.VersionCertainty], T");
            viewString.Append("1.[E_DictionaryRouteType.VersionWorkflowInstanceID], T1.[E_DictionaryRouteType.V");
            viewString.Append("ersionUpdatedBy], T1.[E_DictionaryRouteType.VersionDeletedBy], T1.[E_DictionaryR");
            viewString.Append("outeType.VersionOwnerContactID], T1.[E_DictionaryRouteType.VersionOwnerCompanyID");
            viewString.Append("], T1.[E_DictionaryRouteType.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n    ");
            viewString.Append("        T.RouteTypeID AS [E_DictionaryRouteType.RouteTypeID], \r\n            T.St");
            viewString.Append("andardRouteTypeName AS [E_DictionaryRouteType.StandardRouteTypeName], \r\n        ");
            viewString.Append("    T.CustomRouteTypeName AS [E_DictionaryRouteType.CustomRouteTypeName], \r\n    ");
            viewString.Append("        T.Description AS [E_DictionaryRouteType.Description], \r\n            T.Fu");
            viewString.Append("llDescription AS [E_DictionaryRouteType.FullDescription], \r\n            T.Thumbn");
            viewString.Append("ail AS [E_DictionaryRouteType.Thumbnail], \r\n            T.OriginalFileDataID AS ");
            viewString.Append("[E_DictionaryRouteType.OriginalFileDataID], \r\n            T.Version AS [E_Dictio");
            viewString.Append("naryRouteType.Version], \r\n            T.VersionAntecedentID AS [E_DictionaryRout");
            viewString.Append("eType.VersionAntecedentID], \r\n            T.VersionCertainty AS [E_DictionaryRou");
            viewString.Append("teType.VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [E_Dictio");
            viewString.Append("naryRouteType.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [E");
            viewString.Append("_DictionaryRouteType.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [E_D");
            viewString.Append("ictionaryRouteType.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [");
            viewString.Append("E_DictionaryRouteType.VersionOwnerContactID], \r\n            T.VersionOwnerCompan");
            viewString.Append("yID AS [E_DictionaryRouteType.VersionOwnerCompanyID], \r\n            T.VersionUpd");
            viewString.Append("ated AS [E_DictionaryRouteType.VersionUpdated], \r\n            True AS _from0\r\n  ");
            viewString.Append("      FROM NKDC.DictionaryRouteTypes AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_DictionaryRouteType", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_Download
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView285()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2434);
            viewString.Append("\r\n    SELECT VALUE -- Constructing E_Download\r\n        [NKD.Module.BusinessObjec");
            viewString.Append("ts.Store.E_Download](T1.[E_Download.DownloadID], T1.[E_Download.FileDataID], T1.");
            viewString.Append("[E_Download.FileAllocated], T1.[E_Download.FileChecksum], T1.[E_Download.FilterC");
            viewString.Append("ompanyID], T1.[E_Download.FilterContactID], T1.[E_Download.FilterServerID], T1.[");
            viewString.Append("E_Download.FilterApplicationID], T1.[E_Download.FilterClientIP], T1.[E_Download.");
            viewString.Append("LicenseID], T1.[E_Download.LicenseAssetID], T1.[E_Download.RemainingDownloads], ");
            viewString.Append("T1.[E_Download.ValidFrom], T1.[E_Download.ValidUntil], T1.[E_Download.Version], ");
            viewString.Append("T1.[E_Download.VersionAntecedentID], T1.[E_Download.VersionCertainty], T1.[E_Dow");
            viewString.Append("nload.VersionWorkflowInstanceID], T1.[E_Download.VersionUpdatedBy], T1.[E_Downlo");
            viewString.Append("ad.VersionDeletedBy], T1.[E_Download.VersionOwnerContactID], T1.[E_Download.Vers");
            viewString.Append("ionOwnerCompanyID], T1.[E_Download.VersionUpdated])\r\n    FROM (\r\n        SELECT ");
            viewString.Append("\r\n            T.DownloadID AS [E_Download.DownloadID], \r\n            T.FileDataI");
            viewString.Append("D AS [E_Download.FileDataID], \r\n            T.FileAllocated AS [E_Download.FileA");
            viewString.Append("llocated], \r\n            T.FileChecksum AS [E_Download.FileChecksum], \r\n        ");
            viewString.Append("    T.FilterCompanyID AS [E_Download.FilterCompanyID], \r\n            T.FilterCon");
            viewString.Append("tactID AS [E_Download.FilterContactID], \r\n            T.FilterServerID AS [E_Dow");
            viewString.Append("nload.FilterServerID], \r\n            T.FilterApplicationID AS [E_Download.Filter");
            viewString.Append("ApplicationID], \r\n            T.FilterClientIP AS [E_Download.FilterClientIP], \r");
            viewString.Append("\n            T.LicenseID AS [E_Download.LicenseID], \r\n            T.LicenseAsset");
            viewString.Append("ID AS [E_Download.LicenseAssetID], \r\n            T.RemainingDownloads AS [E_Down");
            viewString.Append("load.RemainingDownloads], \r\n            T.ValidFrom AS [E_Download.ValidFrom], \r");
            viewString.Append("\n            T.ValidUntil AS [E_Download.ValidUntil], \r\n            T.Version AS");
            viewString.Append(" [E_Download.Version], \r\n            T.VersionAntecedentID AS [E_Download.Versio");
            viewString.Append("nAntecedentID], \r\n            T.VersionCertainty AS [E_Download.VersionCertainty");
            viewString.Append("], \r\n            T.VersionWorkflowInstanceID AS [E_Download.VersionWorkflowInsta");
            viewString.Append("nceID], \r\n            T.VersionUpdatedBy AS [E_Download.VersionUpdatedBy], \r\n   ");
            viewString.Append("         T.VersionDeletedBy AS [E_Download.VersionDeletedBy], \r\n            T.Ve");
            viewString.Append("rsionOwnerContactID AS [E_Download.VersionOwnerContactID], \r\n            T.Versi");
            viewString.Append("onOwnerCompanyID AS [E_Download.VersionOwnerCompanyID], \r\n            T.VersionU");
            viewString.Append("pdated AS [E_Download.VersionUpdated], \r\n            True AS _from0\r\n        FRO");
            viewString.Append("M NKDC.Downloads AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_Download", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_Problem
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView286()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3501);
            viewString.Append("\r\n    SELECT VALUE -- Constructing E_Problem\r\n        [NKD.Module.BusinessObject");
            viewString.Append("s.Store.E_Problem](T1.[E_Problem.ProblemID], T1.[E_Problem.ProblemName], T1.[E_P");
            viewString.Append("roblem.OptimiseForParameterID], T1.[E_Problem.ProduceForParameterID], T1.[E_Prob");
            viewString.Append("lem.OptimumMin], T1.[E_Problem.OptimumMax], T1.[E_Problem.ProductionMin], T1.[E_");
            viewString.Append("Problem.ProductionMax], T1.[E_Problem.Complexity], T1.[E_Problem.IterationsMax],");
            viewString.Append(" T1.[E_Problem.SolutionETA], T1.[E_Problem.LiveUpdateClient], T1.[E_Problem.Live");
            viewString.Append("UpdateServer], T1.[E_Problem.UniversalPriority], T1.[E_Problem.LastThreadID], T1");
            viewString.Append(".[E_Problem.LastServerID], T1.[E_Problem.IsThreadAlive], T1.[E_Problem.ProblemCo");
            viewString.Append("mpleted], T1.[E_Problem.ProblemTerminated], T1.[E_Problem.ExecutedFromLocationID");
            viewString.Append("], T1.[E_Problem.DefaultTickUnitID], T1.[E_Problem.DefaultTicks], T1.[E_Problem.");
            viewString.Append("DefaultTicksOffset], T1.[E_Problem.DefaultTicksResolution], T1.[E_Problem.Defaul");
            viewString.Append("tCulture], T1.[E_Problem.Version], T1.[E_Problem.VersionAntecedentID], T1.[E_Pro");
            viewString.Append("blem.VersionCertainty], T1.[E_Problem.VersionWorkflowInstanceID], T1.[E_Problem.");
            viewString.Append("VersionUpdatedBy], T1.[E_Problem.VersionDeletedBy], T1.[E_Problem.VersionOwnerCo");
            viewString.Append("ntactID], T1.[E_Problem.VersionOwnerCompanyID], T1.[E_Problem.VersionUpdated])\r\n");
            viewString.Append("    FROM (\r\n        SELECT \r\n            T.ProblemID AS [E_Problem.ProblemID], \r");
            viewString.Append("\n            T.ProblemName AS [E_Problem.ProblemName], \r\n            T.OptimiseF");
            viewString.Append("orParameterID AS [E_Problem.OptimiseForParameterID], \r\n            T.ProduceForP");
            viewString.Append("arameterID AS [E_Problem.ProduceForParameterID], \r\n            T.OptimumMin AS [");
            viewString.Append("E_Problem.OptimumMin], \r\n            T.OptimumMax AS [E_Problem.OptimumMax], \r\n ");
            viewString.Append("           T.ProductionMin AS [E_Problem.ProductionMin], \r\n            T.Product");
            viewString.Append("ionMax AS [E_Problem.ProductionMax], \r\n            T.Complexity AS [E_Problem.Co");
            viewString.Append("mplexity], \r\n            T.IterationsMax AS [E_Problem.IterationsMax], \r\n       ");
            viewString.Append("     T.SolutionETA AS [E_Problem.SolutionETA], \r\n            T.LiveUpdateClient ");
            viewString.Append("AS [E_Problem.LiveUpdateClient], \r\n            T.LiveUpdateServer AS [E_Problem.");
            viewString.Append("LiveUpdateServer], \r\n            T.UniversalPriority AS [E_Problem.UniversalPrio");
            viewString.Append("rity], \r\n            T.LastThreadID AS [E_Problem.LastThreadID], \r\n            T");
            viewString.Append(".LastServerID AS [E_Problem.LastServerID], \r\n            T.IsThreadAlive AS [E_P");
            viewString.Append("roblem.IsThreadAlive], \r\n            T.ProblemCompleted AS [E_Problem.ProblemCom");
            viewString.Append("pleted], \r\n            T.ProblemTerminated AS [E_Problem.ProblemTerminated], \r\n ");
            viewString.Append("           T.ExecutedFromLocationID AS [E_Problem.ExecutedFromLocationID], \r\n   ");
            viewString.Append("         T.DefaultTickUnitID AS [E_Problem.DefaultTickUnitID], \r\n            T.D");
            viewString.Append("efaultTicks AS [E_Problem.DefaultTicks], \r\n            T.DefaultTicksOffset AS [");
            viewString.Append("E_Problem.DefaultTicksOffset], \r\n            T.DefaultTicksResolution AS [E_Prob");
            viewString.Append("lem.DefaultTicksResolution], \r\n            T.DefaultCulture AS [E_Problem.Defaul");
            viewString.Append("tCulture], \r\n            T.Version AS [E_Problem.Version], \r\n            T.Versi");
            viewString.Append("onAntecedentID AS [E_Problem.VersionAntecedentID], \r\n            T.VersionCertai");
            viewString.Append("nty AS [E_Problem.VersionCertainty], \r\n            T.VersionWorkflowInstanceID A");
            viewString.Append("S [E_Problem.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [E_");
            viewString.Append("Problem.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [E_Problem.Versio");
            viewString.Append("nDeletedBy], \r\n            T.VersionOwnerContactID AS [E_Problem.VersionOwnerCon");
            viewString.Append("tactID], \r\n            T.VersionOwnerCompanyID AS [E_Problem.VersionOwnerCompany");
            viewString.Append("ID], \r\n            T.VersionUpdated AS [E_Problem.VersionUpdated], \r\n           ");
            viewString.Append(" True AS _from0\r\n        FROM NKDC.Problems AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_Problem", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_ProblemAssetData
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView287()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_ProblemAssetData", "\r\n    SELECT VALUE -- Constructing E_ProblemAssetData\r\n        [NKD.Module.Busine" +
                    "ssObjects.Store.E_ProblemAssetData](T1.[E_ProblemAssetData.ProblemAssetDataID], " +
                    "T1.[E_ProblemAssetData.ProblemID], T1.[E_ProblemAssetData.AssetDataID], T1.[E_Pr" +
                    "oblemAssetData.Version], T1.[E_ProblemAssetData.VersionAntecedentID], T1.[E_Prob" +
                    "lemAssetData.VersionCertainty], T1.[E_ProblemAssetData.VersionWorkflowInstanceID" +
                    "], T1.[E_ProblemAssetData.VersionUpdatedBy], T1.[E_ProblemAssetData.VersionDelet" +
                    "edBy], T1.[E_ProblemAssetData.VersionOwnerContactID], T1.[E_ProblemAssetData.Ver" +
                    "sionOwnerCompanyID], T1.[E_ProblemAssetData.VersionUpdated])\r\n    FROM (\r\n      " +
                    "  SELECT \r\n            T.ProblemAssetDataID AS [E_ProblemAssetData.ProblemAssetD" +
                    "ataID], \r\n            T.ProblemID AS [E_ProblemAssetData.ProblemID], \r\n         " +
                    "   T.AssetDataID AS [E_ProblemAssetData.AssetDataID], \r\n            T.Version AS" +
                    " [E_ProblemAssetData.Version], \r\n            T.VersionAntecedentID AS [E_Problem" +
                    "AssetData.VersionAntecedentID], \r\n            T.VersionCertainty AS [E_ProblemAs" +
                    "setData.VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [E_Probl" +
                    "emAssetData.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [E_P" +
                    "roblemAssetData.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [E_Proble" +
                    "mAssetData.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [E_Proble" +
                    "mAssetData.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [E_P" +
                    "roblemAssetData.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [E_Pro" +
                    "blemAssetData.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.P" +
                    "roblemAssetDatas AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_ProblemRequirement
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView288()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_ProblemRequirement", "\r\n    SELECT VALUE -- Constructing E_ProblemRequirement\r\n        [NKD.Module.Busi" +
                    "nessObjects.Store.E_ProblemRequirement](T1.[E_ProblemRequirement.ProblemRequirem" +
                    "entID], T1.[E_ProblemRequirement.ProblemID], T1.[E_ProblemRequirement.ProblemReq" +
                    "uirementName], T1.[E_ProblemRequirement.Complexity], T1.[E_ProblemRequirement.It" +
                    "erationsMax], T1.[E_ProblemRequirement.Version], T1.[E_ProblemRequirement.Versio" +
                    "nAntecedentID], T1.[E_ProblemRequirement.VersionCertainty], T1.[E_ProblemRequire" +
                    "ment.VersionWorkflowInstanceID], T1.[E_ProblemRequirement.VersionUpdatedBy], T1." +
                    "[E_ProblemRequirement.VersionDeletedBy], T1.[E_ProblemRequirement.VersionOwnerCo" +
                    "ntactID], T1.[E_ProblemRequirement.VersionOwnerCompanyID], T1.[E_ProblemRequirem" +
                    "ent.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.ProblemRequirem" +
                    "entID AS [E_ProblemRequirement.ProblemRequirementID], \r\n            T.ProblemID " +
                    "AS [E_ProblemRequirement.ProblemID], \r\n            T.ProblemRequirementName AS [" +
                    "E_ProblemRequirement.ProblemRequirementName], \r\n            T.Complexity AS [E_P" +
                    "roblemRequirement.Complexity], \r\n            T.IterationsMax AS [E_ProblemRequir" +
                    "ement.IterationsMax], \r\n            T.Version AS [E_ProblemRequirement.Version]," +
                    " \r\n            T.VersionAntecedentID AS [E_ProblemRequirement.VersionAntecedentI" +
                    "D], \r\n            T.VersionCertainty AS [E_ProblemRequirement.VersionCertainty]," +
                    " \r\n            T.VersionWorkflowInstanceID AS [E_ProblemRequirement.VersionWorkf" +
                    "lowInstanceID], \r\n            T.VersionUpdatedBy AS [E_ProblemRequirement.Versio" +
                    "nUpdatedBy], \r\n            T.VersionDeletedBy AS [E_ProblemRequirement.VersionDe" +
                    "letedBy], \r\n            T.VersionOwnerContactID AS [E_ProblemRequirement.Version" +
                    "OwnerContactID], \r\n            T.VersionOwnerCompanyID AS [E_ProblemRequirement." +
                    "VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [E_ProblemRequirement." +
                    "VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.ProblemRequirem" +
                    "ents AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_ProblemRequirementAssetData
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView289()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3401);
            viewString.Append("\r\n    SELECT VALUE -- Constructing E_ProblemRequirementAssetData\r\n        [NKD.M");
            viewString.Append("odule.BusinessObjects.Store.E_ProblemRequirementAssetData](T1.[E_ProblemRequirem");
            viewString.Append("entAssetData.ProblemRequirementAssetDataID], T1.[E_ProblemRequirementAssetData.P");
            viewString.Append("roblemRequirementID], T1.[E_ProblemRequirementAssetData.AssetDataID], T1.[E_Prob");
            viewString.Append("lemRequirementAssetData.SuggestedAvailabilityID], T1.[E_ProblemRequirementAssetD");
            viewString.Append("ata.SuggestedProvinceID], T1.[E_ProblemRequirementAssetData.SuggestedLocationID]");
            viewString.Append(", T1.[E_ProblemRequirementAssetData.TickUnitID], T1.[E_ProblemRequirementAssetDa");
            viewString.Append("ta.Ticks], T1.[E_ProblemRequirementAssetData.TicksOffset], T1.[E_ProblemRequirem");
            viewString.Append("entAssetData.TicksResolution], T1.[E_ProblemRequirementAssetData.ValidFrom], T1.");
            viewString.Append("[E_ProblemRequirementAssetData.ValidUntil], T1.[E_ProblemRequirementAssetData.Cu");
            viewString.Append("lture], T1.[E_ProblemRequirementAssetData.Weight], T1.[E_ProblemRequirementAsset");
            viewString.Append("Data.Version], T1.[E_ProblemRequirementAssetData.VersionAntecedentID], T1.[E_Pro");
            viewString.Append("blemRequirementAssetData.VersionCertainty], T1.[E_ProblemRequirementAssetData.Ve");
            viewString.Append("rsionWorkflowInstanceID], T1.[E_ProblemRequirementAssetData.VersionUpdatedBy], T");
            viewString.Append("1.[E_ProblemRequirementAssetData.VersionDeletedBy], T1.[E_ProblemRequirementAsse");
            viewString.Append("tData.VersionOwnerContactID], T1.[E_ProblemRequirementAssetData.VersionOwnerComp");
            viewString.Append("anyID], T1.[E_ProblemRequirementAssetData.VersionUpdated])\r\n    FROM (\r\n        ");
            viewString.Append("SELECT \r\n            T.ProblemRequirementAssetDataID AS [E_ProblemRequirementAss");
            viewString.Append("etData.ProblemRequirementAssetDataID], \r\n            T.ProblemRequirementID AS [");
            viewString.Append("E_ProblemRequirementAssetData.ProblemRequirementID], \r\n            T.AssetDataID");
            viewString.Append(" AS [E_ProblemRequirementAssetData.AssetDataID], \r\n            T.SuggestedAvaila");
            viewString.Append("bilityID AS [E_ProblemRequirementAssetData.SuggestedAvailabilityID], \r\n         ");
            viewString.Append("   T.SuggestedProvinceID AS [E_ProblemRequirementAssetData.SuggestedProvinceID],");
            viewString.Append(" \r\n            T.SuggestedLocationID AS [E_ProblemRequirementAssetData.Suggested");
            viewString.Append("LocationID], \r\n            T.TickUnitID AS [E_ProblemRequirementAssetData.TickUn");
            viewString.Append("itID], \r\n            T.Ticks AS [E_ProblemRequirementAssetData.Ticks], \r\n       ");
            viewString.Append("     T.TicksOffset AS [E_ProblemRequirementAssetData.TicksOffset], \r\n           ");
            viewString.Append(" T.TicksResolution AS [E_ProblemRequirementAssetData.TicksResolution], \r\n       ");
            viewString.Append("     T.ValidFrom AS [E_ProblemRequirementAssetData.ValidFrom], \r\n            T.V");
            viewString.Append("alidUntil AS [E_ProblemRequirementAssetData.ValidUntil], \r\n            T.Culture");
            viewString.Append(" AS [E_ProblemRequirementAssetData.Culture], \r\n            T.Weight AS [E_Proble");
            viewString.Append("mRequirementAssetData.Weight], \r\n            T.Version AS [E_ProblemRequirementA");
            viewString.Append("ssetData.Version], \r\n            T.VersionAntecedentID AS [E_ProblemRequirementA");
            viewString.Append("ssetData.VersionAntecedentID], \r\n            T.VersionCertainty AS [E_ProblemReq");
            viewString.Append("uirementAssetData.VersionCertainty], \r\n            T.VersionWorkflowInstanceID A");
            viewString.Append("S [E_ProblemRequirementAssetData.VersionWorkflowInstanceID], \r\n            T.Ver");
            viewString.Append("sionUpdatedBy AS [E_ProblemRequirementAssetData.VersionUpdatedBy], \r\n           ");
            viewString.Append(" T.VersionDeletedBy AS [E_ProblemRequirementAssetData.VersionDeletedBy], \r\n     ");
            viewString.Append("       T.VersionOwnerContactID AS [E_ProblemRequirementAssetData.VersionOwnerCon");
            viewString.Append("tactID], \r\n            T.VersionOwnerCompanyID AS [E_ProblemRequirementAssetData");
            viewString.Append(".VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [E_ProblemRequirement");
            viewString.Append("AssetData.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.Probl");
            viewString.Append("emRequirementAssetDatas AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_ProblemRequirementAssetData", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_ProblemSolution
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView290()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_ProblemSolution", "\r\n    SELECT VALUE -- Constructing E_ProblemSolution\r\n        [NKD.Module.Busines" +
                    "sObjects.Store.E_ProblemSolution](T1.[E_ProblemSolution.ProblemSolutionID], T1.[" +
                    "E_ProblemSolution.ProblemID], T1.[E_ProblemSolution.CostOptimum], T1.[E_ProblemS" +
                    "olution.Confidence], T1.[E_ProblemSolution.Iterations], T1.[E_ProblemSolution.Ve" +
                    "rsion], T1.[E_ProblemSolution.VersionAntecedentID], T1.[E_ProblemSolution.Versio" +
                    "nCertainty], T1.[E_ProblemSolution.VersionWorkflowInstanceID], T1.[E_ProblemSolu" +
                    "tion.VersionUpdatedBy], T1.[E_ProblemSolution.VersionDeletedBy], T1.[E_ProblemSo" +
                    "lution.VersionOwnerContactID], T1.[E_ProblemSolution.VersionOwnerCompanyID], T1." +
                    "[E_ProblemSolution.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T." +
                    "ProblemSolutionID AS [E_ProblemSolution.ProblemSolutionID], \r\n            T.Prob" +
                    "lemID AS [E_ProblemSolution.ProblemID], \r\n            T.CostOptimum AS [E_Proble" +
                    "mSolution.CostOptimum], \r\n            T.Confidence AS [E_ProblemSolution.Confide" +
                    "nce], \r\n            T.Iterations AS [E_ProblemSolution.Iterations], \r\n          " +
                    "  T.Version AS [E_ProblemSolution.Version], \r\n            T.VersionAntecedentID " +
                    "AS [E_ProblemSolution.VersionAntecedentID], \r\n            T.VersionCertainty AS " +
                    "[E_ProblemSolution.VersionCertainty], \r\n            T.VersionWorkflowInstanceID " +
                    "AS [E_ProblemSolution.VersionWorkflowInstanceID], \r\n            T.VersionUpdated" +
                    "By AS [E_ProblemSolution.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS " +
                    "[E_ProblemSolution.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [" +
                    "E_ProblemSolution.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID " +
                    "AS [E_ProblemSolution.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS " +
                    "[E_ProblemSolution.VersionUpdated], \r\n            True AS _from0\r\n        FROM N" +
                    "KDC.ProblemSolutions AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_ProblemSolutionAssetDataAllocation
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView291()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2877);
            viewString.Append("\r\n    SELECT VALUE -- Constructing E_ProblemSolutionAssetDataAllocation\r\n       ");
            viewString.Append(" [NKD.Module.BusinessObjects.Store.E_ProblemSolutionAssetDataAllocation](T1.[E_P");
            viewString.Append("roblemSolutionAssetDataAllocation.ProblemSolutionAssetDataAllocationID], T1.[E_P");
            viewString.Append("roblemSolutionAssetDataAllocation.ProblemSolutionID], T1.[E_ProblemSolutionAsset");
            viewString.Append("DataAllocation.AssetDataID], T1.[E_ProblemSolutionAssetDataAllocation.Weight], T");
            viewString.Append("1.[E_ProblemSolutionAssetDataAllocation.WindowCost], T1.[E_ProblemSolutionAssetD");
            viewString.Append("ataAllocation.WindowValue], T1.[E_ProblemSolutionAssetDataAllocation.WindowMetri");
            viewString.Append("c], T1.[E_ProblemSolutionAssetDataAllocation.AllocationID], T1.[E_ProblemSolutio");
            viewString.Append("nAssetDataAllocation.Version], T1.[E_ProblemSolutionAssetDataAllocation.VersionA");
            viewString.Append("ntecedentID], T1.[E_ProblemSolutionAssetDataAllocation.VersionCertainty], T1.[E_");
            viewString.Append("ProblemSolutionAssetDataAllocation.VersionWorkflowInstanceID], T1.[E_ProblemSolu");
            viewString.Append("tionAssetDataAllocation.VersionUpdatedBy], T1.[E_ProblemSolutionAssetDataAllocat");
            viewString.Append("ion.VersionDeletedBy], T1.[E_ProblemSolutionAssetDataAllocation.VersionOwnerCont");
            viewString.Append("actID], T1.[E_ProblemSolutionAssetDataAllocation.VersionOwnerCompanyID], T1.[E_P");
            viewString.Append("roblemSolutionAssetDataAllocation.VersionUpdated])\r\n    FROM (\r\n        SELECT \r");
            viewString.Append("\n            T.ProblemSolutionAssetDataAllocationID AS [E_ProblemSolutionAssetDa");
            viewString.Append("taAllocation.ProblemSolutionAssetDataAllocationID], \r\n            T.ProblemSolut");
            viewString.Append("ionID AS [E_ProblemSolutionAssetDataAllocation.ProblemSolutionID], \r\n           ");
            viewString.Append(" T.AssetDataID AS [E_ProblemSolutionAssetDataAllocation.AssetDataID], \r\n        ");
            viewString.Append("    T.Weight AS [E_ProblemSolutionAssetDataAllocation.Weight], \r\n            T.W");
            viewString.Append("indowCost AS [E_ProblemSolutionAssetDataAllocation.WindowCost], \r\n            T.");
            viewString.Append("WindowValue AS [E_ProblemSolutionAssetDataAllocation.WindowValue], \r\n           ");
            viewString.Append(" T.WindowMetric AS [E_ProblemSolutionAssetDataAllocation.WindowMetric], \r\n      ");
            viewString.Append("      T.AllocationID AS [E_ProblemSolutionAssetDataAllocation.AllocationID], \r\n ");
            viewString.Append("           T.Version AS [E_ProblemSolutionAssetDataAllocation.Version], \r\n      ");
            viewString.Append("      T.VersionAntecedentID AS [E_ProblemSolutionAssetDataAllocation.VersionAnte");
            viewString.Append("cedentID], \r\n            T.VersionCertainty AS [E_ProblemSolutionAssetDataAlloca");
            viewString.Append("tion.VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [E_ProblemS");
            viewString.Append("olutionAssetDataAllocation.VersionWorkflowInstanceID], \r\n            T.VersionUp");
            viewString.Append("datedBy AS [E_ProblemSolutionAssetDataAllocation.VersionUpdatedBy], \r\n          ");
            viewString.Append("  T.VersionDeletedBy AS [E_ProblemSolutionAssetDataAllocation.VersionDeletedBy],");
            viewString.Append(" \r\n            T.VersionOwnerContactID AS [E_ProblemSolutionAssetDataAllocation.");
            viewString.Append("VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [E_ProblemSolut");
            viewString.Append("ionAssetDataAllocation.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS");
            viewString.Append(" [E_ProblemSolutionAssetDataAllocation.VersionUpdated], \r\n            True AS _f");
            viewString.Append("rom0\r\n        FROM NKDC.ProblemSolutionAssetDataAllocations AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_ProblemSolutionAssetDataAllocation", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_SupplierModelContract
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView292()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2347);
            viewString.Append("\r\n    SELECT VALUE -- Constructing E_SupplierModelContract\r\n        [NKD.Module.");
            viewString.Append("BusinessObjects.Store.E_SupplierModelContract](T1.[E_SupplierModelContract.Suppl");
            viewString.Append("ierModelContractID], T1.[E_SupplierModelContract.SupplierModelID], T1.[E_Supplie");
            viewString.Append("rModelContract.ContractID], T1.[E_SupplierModelContract.RequiredFrom], T1.[E_Sup");
            viewString.Append("plierModelContract.IsIntendedForDistributor], T1.[E_SupplierModelContract.IsInte");
            viewString.Append("ndedForEndUser], T1.[E_SupplierModelContract.IsIntendedForSupplier], T1.[E_Suppl");
            viewString.Append("ierModelContract.Version], T1.[E_SupplierModelContract.VersionAntecedentID], T1.");
            viewString.Append("[E_SupplierModelContract.VersionCertainty], T1.[E_SupplierModelContract.VersionW");
            viewString.Append("orkflowInstanceID], T1.[E_SupplierModelContract.VersionUpdatedBy], T1.[E_Supplie");
            viewString.Append("rModelContract.VersionDeletedBy], T1.[E_SupplierModelContract.VersionOwnerContac");
            viewString.Append("tID], T1.[E_SupplierModelContract.VersionOwnerCompanyID], T1.[E_SupplierModelCon");
            viewString.Append("tract.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.SupplierModel");
            viewString.Append("ContractID AS [E_SupplierModelContract.SupplierModelContractID], \r\n            T");
            viewString.Append(".SupplierModelID AS [E_SupplierModelContract.SupplierModelID], \r\n            T.C");
            viewString.Append("ontractID AS [E_SupplierModelContract.ContractID], \r\n            T.RequiredFrom ");
            viewString.Append("AS [E_SupplierModelContract.RequiredFrom], \r\n            T.IsIntendedForDistribu");
            viewString.Append("tor AS [E_SupplierModelContract.IsIntendedForDistributor], \r\n            T.IsInt");
            viewString.Append("endedForEndUser AS [E_SupplierModelContract.IsIntendedForEndUser], \r\n           ");
            viewString.Append(" T.IsIntendedForSupplier AS [E_SupplierModelContract.IsIntendedForSupplier], \r\n ");
            viewString.Append("           T.Version AS [E_SupplierModelContract.Version], \r\n            T.Versi");
            viewString.Append("onAntecedentID AS [E_SupplierModelContract.VersionAntecedentID], \r\n            T");
            viewString.Append(".VersionCertainty AS [E_SupplierModelContract.VersionCertainty], \r\n            T");
            viewString.Append(".VersionWorkflowInstanceID AS [E_SupplierModelContract.VersionWorkflowInstanceID");
            viewString.Append("], \r\n            T.VersionUpdatedBy AS [E_SupplierModelContract.VersionUpdatedBy");
            viewString.Append("], \r\n            T.VersionDeletedBy AS [E_SupplierModelContract.VersionDeletedBy");
            viewString.Append("], \r\n            T.VersionOwnerContactID AS [E_SupplierModelContract.VersionOwne");
            viewString.Append("rContactID], \r\n            T.VersionOwnerCompanyID AS [E_SupplierModelContract.V");
            viewString.Append("ersionOwnerCompanyID], \r\n            T.VersionUpdated AS [E_SupplierModelContrac");
            viewString.Append("t.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.SupplierModel");
            viewString.Append("Contracts AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_SupplierModelContract", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_SupplierPartContract
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView293()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2306);
            viewString.Append("\r\n    SELECT VALUE -- Constructing E_SupplierPartContract\r\n        [NKD.Module.B");
            viewString.Append("usinessObjects.Store.E_SupplierPartContract](T1.[E_SupplierPartContract.Supplier");
            viewString.Append("PartContractID], T1.[E_SupplierPartContract.SupplierPartID], T1.[E_SupplierPartC");
            viewString.Append("ontract.ContractID], T1.[E_SupplierPartContract.RequiredFrom], T1.[E_SupplierPar");
            viewString.Append("tContract.IsIntendedForDistributor], T1.[E_SupplierPartContract.IsIntendedForEnd");
            viewString.Append("User], T1.[E_SupplierPartContract.IsIntendedForSupplier], T1.[E_SupplierPartCont");
            viewString.Append("ract.Version], T1.[E_SupplierPartContract.VersionAntecedentID], T1.[E_SupplierPa");
            viewString.Append("rtContract.VersionCertainty], T1.[E_SupplierPartContract.VersionWorkflowInstance");
            viewString.Append("ID], T1.[E_SupplierPartContract.VersionUpdatedBy], T1.[E_SupplierPartContract.Ve");
            viewString.Append("rsionDeletedBy], T1.[E_SupplierPartContract.VersionOwnerContactID], T1.[E_Suppli");
            viewString.Append("erPartContract.VersionOwnerCompanyID], T1.[E_SupplierPartContract.VersionUpdated");
            viewString.Append("])\r\n    FROM (\r\n        SELECT \r\n            T.SupplierPartContractID AS [E_Supp");
            viewString.Append("lierPartContract.SupplierPartContractID], \r\n            T.SupplierPartID AS [E_S");
            viewString.Append("upplierPartContract.SupplierPartID], \r\n            T.ContractID AS [E_SupplierPa");
            viewString.Append("rtContract.ContractID], \r\n            T.RequiredFrom AS [E_SupplierPartContract.");
            viewString.Append("RequiredFrom], \r\n            T.IsIntendedForDistributor AS [E_SupplierPartContra");
            viewString.Append("ct.IsIntendedForDistributor], \r\n            T.IsIntendedForEndUser AS [E_Supplie");
            viewString.Append("rPartContract.IsIntendedForEndUser], \r\n            T.IsIntendedForSupplier AS [E");
            viewString.Append("_SupplierPartContract.IsIntendedForSupplier], \r\n            T.Version AS [E_Supp");
            viewString.Append("lierPartContract.Version], \r\n            T.VersionAntecedentID AS [E_SupplierPar");
            viewString.Append("tContract.VersionAntecedentID], \r\n            T.VersionCertainty AS [E_SupplierP");
            viewString.Append("artContract.VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [E_S");
            viewString.Append("upplierPartContract.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy");
            viewString.Append(" AS [E_SupplierPartContract.VersionUpdatedBy], \r\n            T.VersionDeletedBy ");
            viewString.Append("AS [E_SupplierPartContract.VersionDeletedBy], \r\n            T.VersionOwnerContac");
            viewString.Append("tID AS [E_SupplierPartContract.VersionOwnerContactID], \r\n            T.VersionOw");
            viewString.Append("nerCompanyID AS [E_SupplierPartContract.VersionOwnerCompanyID], \r\n            T.");
            viewString.Append("VersionUpdated AS [E_SupplierPartContract.VersionUpdated], \r\n            True AS");
            viewString.Append(" _from0\r\n        FROM NKDC.SupplierPartContracts AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_SupplierPartContract", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_SupplyContractCondition
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView294()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2351);
            viewString.Append("\r\n    SELECT VALUE -- Constructing E_SupplyContractCondition\r\n        [NKD.Modul");
            viewString.Append("e.BusinessObjects.Store.E_SupplyContractCondition](T1.[E_SupplyContractCondition");
            viewString.Append(".SupplyContractConditionID], T1.[E_SupplyContractCondition.SupplyID], T1.[E_Supp");
            viewString.Append("lyContractCondition.ContractID], T1.[E_SupplyContractCondition.ContractCondition");
            viewString.Append("ID], T1.[E_SupplyContractCondition.AgreedForCompanyID], T1.[E_SupplyContractCond");
            viewString.Append("ition.AgreedByContactID], T1.[E_SupplyContractCondition.Agreed], T1.[E_SupplyCon");
            viewString.Append("tractCondition.Version], T1.[E_SupplyContractCondition.VersionAntecedentID], T1.");
            viewString.Append("[E_SupplyContractCondition.VersionCertainty], T1.[E_SupplyContractCondition.Vers");
            viewString.Append("ionWorkflowInstanceID], T1.[E_SupplyContractCondition.VersionUpdatedBy], T1.[E_S");
            viewString.Append("upplyContractCondition.VersionDeletedBy], T1.[E_SupplyContractCondition.VersionO");
            viewString.Append("wnerContactID], T1.[E_SupplyContractCondition.VersionOwnerCompanyID], T1.[E_Supp");
            viewString.Append("lyContractCondition.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T");
            viewString.Append(".SupplyContractConditionID AS [E_SupplyContractCondition.SupplyContractCondition");
            viewString.Append("ID], \r\n            T.SupplyID AS [E_SupplyContractCondition.SupplyID], \r\n       ");
            viewString.Append("     T.ContractID AS [E_SupplyContractCondition.ContractID], \r\n            T.Con");
            viewString.Append("tractConditionID AS [E_SupplyContractCondition.ContractConditionID], \r\n         ");
            viewString.Append("   T.AgreedForCompanyID AS [E_SupplyContractCondition.AgreedForCompanyID], \r\n   ");
            viewString.Append("         T.AgreedByContactID AS [E_SupplyContractCondition.AgreedByContactID], \r");
            viewString.Append("\n            T.Agreed AS [E_SupplyContractCondition.Agreed], \r\n            T.Ver");
            viewString.Append("sion AS [E_SupplyContractCondition.Version], \r\n            T.VersionAntecedentID");
            viewString.Append(" AS [E_SupplyContractCondition.VersionAntecedentID], \r\n            T.VersionCert");
            viewString.Append("ainty AS [E_SupplyContractCondition.VersionCertainty], \r\n            T.VersionWo");
            viewString.Append("rkflowInstanceID AS [E_SupplyContractCondition.VersionWorkflowInstanceID], \r\n   ");
            viewString.Append("         T.VersionUpdatedBy AS [E_SupplyContractCondition.VersionUpdatedBy], \r\n ");
            viewString.Append("           T.VersionDeletedBy AS [E_SupplyContractCondition.VersionDeletedBy], \r");
            viewString.Append("\n            T.VersionOwnerContactID AS [E_SupplyContractCondition.VersionOwnerC");
            viewString.Append("ontactID], \r\n            T.VersionOwnerCompanyID AS [E_SupplyContractCondition.V");
            viewString.Append("ersionOwnerCompanyID], \r\n            T.VersionUpdated AS [E_SupplyContractCondit");
            viewString.Append("ion.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.SupplyContr");
            viewString.Append("actConditions AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_SupplyContractCondition", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_Communication
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView295()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(4158);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_Communication\r\n        [NKD.Module.Business");
            viewString.Append("Objects.Store.X_Communication](T1.[X_Communication.CommunicationID], T1.[X_Commu");
            viewString.Append("nication.CommunicationName], T1.[X_Communication.CommunicationMobile], T1.[X_Com");
            viewString.Append("munication.CommunicationEmail], T1.[X_Communication.CommunicationContactID], T1.");
            viewString.Append("[X_Communication.CommunicationCompanyID], T1.[X_Communication.StatusWorkTypeID],");
            viewString.Append(" T1.[X_Communication.RegardingWorkTypeID], T1.[X_Communication.RegardingTableTyp");
            viewString.Append("e], T1.[X_Communication.RegardingReferenceID], T1.[X_Communication.RegardingComp");
            viewString.Append("anyID], T1.[X_Communication.RegardingContactID], T1.[X_Communication.RegardingFi");
            viewString.Append("leDataID], T1.[X_Communication.RegardingProjectID], T1.[X_Communication.Regardin");
            viewString.Append("gExperienceID], T1.[X_Communication.RegardingDescription], T1.[X_Communication.O");
            viewString.Append("penedBy], T1.[X_Communication.AssignedBy], T1.[X_Communication.MaintainedBy], T1");
            viewString.Append(".[X_Communication.ClosedBy], T1.[X_Communication.EstimatedClosure], T1.[X_Commun");
            viewString.Append("ication.EstimatedDurationHours], T1.[X_Communication.EstimatedRevenue], T1.[X_Co");
            viewString.Append("mmunication.EstimatedCost], T1.[X_Communication.Probability], T1.[X_Communicatio");
            viewString.Append("n.Comment], T1.[X_Communication.Version], T1.[X_Communication.VersionAntecedentI");
            viewString.Append("D], T1.[X_Communication.VersionCertainty], T1.[X_Communication.VersionWorkflowIn");
            viewString.Append("stanceID], T1.[X_Communication.VersionUpdatedBy], T1.[X_Communication.VersionDel");
            viewString.Append("etedBy], T1.[X_Communication.VersionOwnerContactID], T1.[X_Communication.Version");
            viewString.Append("OwnerCompanyID], T1.[X_Communication.VersionUpdated])\r\n    FROM (\r\n        SELEC");
            viewString.Append("T \r\n            T.CommunicationID AS [X_Communication.CommunicationID], \r\n      ");
            viewString.Append("      T.CommunicationName AS [X_Communication.CommunicationName], \r\n            ");
            viewString.Append("T.CommunicationMobile AS [X_Communication.CommunicationMobile], \r\n            T.");
            viewString.Append("CommunicationEmail AS [X_Communication.CommunicationEmail], \r\n            T.Comm");
            viewString.Append("unicationContactID AS [X_Communication.CommunicationContactID], \r\n            T.");
            viewString.Append("CommunicationCompanyID AS [X_Communication.CommunicationCompanyID], \r\n          ");
            viewString.Append("  T.StatusWorkTypeID AS [X_Communication.StatusWorkTypeID], \r\n            T.Rega");
            viewString.Append("rdingWorkTypeID AS [X_Communication.RegardingWorkTypeID], \r\n            T.Regard");
            viewString.Append("ingTableType AS [X_Communication.RegardingTableType], \r\n            T.RegardingR");
            viewString.Append("eferenceID AS [X_Communication.RegardingReferenceID], \r\n            T.RegardingC");
            viewString.Append("ompanyID AS [X_Communication.RegardingCompanyID], \r\n            T.RegardingConta");
            viewString.Append("ctID AS [X_Communication.RegardingContactID], \r\n            T.RegardingFileDataI");
            viewString.Append("D AS [X_Communication.RegardingFileDataID], \r\n            T.RegardingProjectID A");
            viewString.Append("S [X_Communication.RegardingProjectID], \r\n            T.RegardingExperienceID AS");
            viewString.Append(" [X_Communication.RegardingExperienceID], \r\n            T.RegardingDescription A");
            viewString.Append("S [X_Communication.RegardingDescription], \r\n            T.OpenedBy AS [X_Communi");
            viewString.Append("cation.OpenedBy], \r\n            T.AssignedBy AS [X_Communication.AssignedBy], \r\n");
            viewString.Append("            T.MaintainedBy AS [X_Communication.MaintainedBy], \r\n            T.Cl");
            viewString.Append("osedBy AS [X_Communication.ClosedBy], \r\n            T.EstimatedClosure AS [X_Com");
            viewString.Append("munication.EstimatedClosure], \r\n            T.EstimatedDurationHours AS [X_Commu");
            viewString.Append("nication.EstimatedDurationHours], \r\n            T.EstimatedRevenue AS [X_Communi");
            viewString.Append("cation.EstimatedRevenue], \r\n            T.EstimatedCost AS [X_Communication.Esti");
            viewString.Append("matedCost], \r\n            T.Probability AS [X_Communication.Probability], \r\n    ");
            viewString.Append("        T.Comment AS [X_Communication.Comment], \r\n            T.Version AS [X_Co");
            viewString.Append("mmunication.Version], \r\n            T.VersionAntecedentID AS [X_Communication.Ve");
            viewString.Append("rsionAntecedentID], \r\n            T.VersionCertainty AS [X_Communication.Version");
            viewString.Append("Certainty], \r\n            T.VersionWorkflowInstanceID AS [X_Communication.Versio");
            viewString.Append("nWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_Communication.Versi");
            viewString.Append("onUpdatedBy], \r\n            T.VersionDeletedBy AS [X_Communication.VersionDelete");
            viewString.Append("dBy], \r\n            T.VersionOwnerContactID AS [X_Communication.VersionOwnerCont");
            viewString.Append("actID], \r\n            T.VersionOwnerCompanyID AS [X_Communication.VersionOwnerCo");
            viewString.Append("mpanyID], \r\n            T.VersionUpdated AS [X_Communication.VersionUpdated], \r\n");
            viewString.Append("            True AS _from0\r\n        FROM NKDC.Communications AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_Communication", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_DictionaryAddressType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView296()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2302);
            viewString.Append("\r\n    SELECT VALUE -- Constructing E_DictionaryAddressType\r\n        [NKD.Module.");
            viewString.Append("BusinessObjects.Store.E_DictionaryAddressType](T1.[E_DictionaryAddressType.Addre");
            viewString.Append("ssTypeID], T1.[E_DictionaryAddressType.StandardAddressTypeName], T1.[E_Dictionar");
            viewString.Append("yAddressType.CustomAddressTypeName], T1.[E_DictionaryAddressType.Description], T");
            viewString.Append("1.[E_DictionaryAddressType.FullDescription], T1.[E_DictionaryAddressType.Thumbna");
            viewString.Append("il], T1.[E_DictionaryAddressType.OriginalFileDataID], T1.[E_DictionaryAddressTyp");
            viewString.Append("e.Version], T1.[E_DictionaryAddressType.VersionAntecedentID], T1.[E_DictionaryAd");
            viewString.Append("dressType.VersionCertainty], T1.[E_DictionaryAddressType.VersionWorkflowInstance");
            viewString.Append("ID], T1.[E_DictionaryAddressType.VersionUpdatedBy], T1.[E_DictionaryAddressType.");
            viewString.Append("VersionDeletedBy], T1.[E_DictionaryAddressType.VersionOwnerContactID], T1.[E_Dic");
            viewString.Append("tionaryAddressType.VersionOwnerCompanyID], T1.[E_DictionaryAddressType.VersionUp");
            viewString.Append("dated])\r\n    FROM (\r\n        SELECT \r\n            T.AddressTypeID AS [E_Dictiona");
            viewString.Append("ryAddressType.AddressTypeID], \r\n            T.StandardAddressTypeName AS [E_Dict");
            viewString.Append("ionaryAddressType.StandardAddressTypeName], \r\n            T.CustomAddressTypeNam");
            viewString.Append("e AS [E_DictionaryAddressType.CustomAddressTypeName], \r\n            T.Descriptio");
            viewString.Append("n AS [E_DictionaryAddressType.Description], \r\n            T.FullDescription AS [");
            viewString.Append("E_DictionaryAddressType.FullDescription], \r\n            T.Thumbnail AS [E_Dictio");
            viewString.Append("naryAddressType.Thumbnail], \r\n            T.OriginalFileDataID AS [E_DictionaryA");
            viewString.Append("ddressType.OriginalFileDataID], \r\n            T.Version AS [E_DictionaryAddressT");
            viewString.Append("ype.Version], \r\n            T.VersionAntecedentID AS [E_DictionaryAddressType.Ve");
            viewString.Append("rsionAntecedentID], \r\n            T.VersionCertainty AS [E_DictionaryAddressType");
            viewString.Append(".VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [E_DictionaryAd");
            viewString.Append("dressType.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [E_Dic");
            viewString.Append("tionaryAddressType.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [E_Dic");
            viewString.Append("tionaryAddressType.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [");
            viewString.Append("E_DictionaryAddressType.VersionOwnerContactID], \r\n            T.VersionOwnerComp");
            viewString.Append("anyID AS [E_DictionaryAddressType.VersionOwnerCompanyID], \r\n            T.Versio");
            viewString.Append("nUpdated AS [E_DictionaryAddressType.VersionUpdated], \r\n            True AS _fro");
            viewString.Append("m0\r\n        FROM NKDC.DictionaryAddressTypes AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_DictionaryAddressType", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_ApplicationPaymentProviderContact
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView297()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2634);
            viewString.Append("\r\n    SELECT VALUE -- Constructing E_ApplicationPaymentProviderContact\r\n        ");
            viewString.Append("[NKD.Module.BusinessObjects.Store.E_ApplicationPaymentProviderContact](T1.[E_App");
            viewString.Append("licationPaymentProviderContact.ApplicationPaymentProviderContactID], T1.[E_Appli");
            viewString.Append("cationPaymentProviderContact.ApplicationPaymentProviderID], T1.[E_ApplicationPay");
            viewString.Append("mentProviderContact.ContactID], T1.[E_ApplicationPaymentProviderContact.Customer");
            viewString.Append("Reference], T1.[E_ApplicationPaymentProviderContact.UserDataType], T1.[E_Applica");
            viewString.Append("tionPaymentProviderContact.SystemDataType], T1.[E_ApplicationPaymentProviderCont");
            viewString.Append("act.Version], T1.[E_ApplicationPaymentProviderContact.VersionAntecedentID], T1.[");
            viewString.Append("E_ApplicationPaymentProviderContact.VersionCertainty], T1.[E_ApplicationPaymentP");
            viewString.Append("roviderContact.VersionWorkflowInstanceID], T1.[E_ApplicationPaymentProviderConta");
            viewString.Append("ct.VersionUpdatedBy], T1.[E_ApplicationPaymentProviderContact.VersionDeletedBy],");
            viewString.Append(" T1.[E_ApplicationPaymentProviderContact.VersionOwnerContactID], T1.[E_Applicati");
            viewString.Append("onPaymentProviderContact.VersionOwnerCompanyID], T1.[E_ApplicationPaymentProvide");
            viewString.Append("rContact.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.Applicatio");
            viewString.Append("nPaymentProviderContactID AS [E_ApplicationPaymentProviderContact.ApplicationPay");
            viewString.Append("mentProviderContactID], \r\n            T.ApplicationPaymentProviderID AS [E_Appli");
            viewString.Append("cationPaymentProviderContact.ApplicationPaymentProviderID], \r\n            T.Cont");
            viewString.Append("actID AS [E_ApplicationPaymentProviderContact.ContactID], \r\n            T.Custom");
            viewString.Append("erReference AS [E_ApplicationPaymentProviderContact.CustomerReference], \r\n      ");
            viewString.Append("      T.UserDataType AS [E_ApplicationPaymentProviderContact.UserDataType], \r\n  ");
            viewString.Append("          T.SystemDataType AS [E_ApplicationPaymentProviderContact.SystemDataTyp");
            viewString.Append("e], \r\n            T.Version AS [E_ApplicationPaymentProviderContact.Version], \r\n");
            viewString.Append("            T.VersionAntecedentID AS [E_ApplicationPaymentProviderContact.Versio");
            viewString.Append("nAntecedentID], \r\n            T.VersionCertainty AS [E_ApplicationPaymentProvide");
            viewString.Append("rContact.VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [E_Appl");
            viewString.Append("icationPaymentProviderContact.VersionWorkflowInstanceID], \r\n            T.Versio");
            viewString.Append("nUpdatedBy AS [E_ApplicationPaymentProviderContact.VersionUpdatedBy], \r\n        ");
            viewString.Append("    T.VersionDeletedBy AS [E_ApplicationPaymentProviderContact.VersionDeletedBy]");
            viewString.Append(", \r\n            T.VersionOwnerContactID AS [E_ApplicationPaymentProviderContact.");
            viewString.Append("VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [E_ApplicationP");
            viewString.Append("aymentProviderContact.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS ");
            viewString.Append("[E_ApplicationPaymentProviderContact.VersionUpdated], \r\n            True AS _fro");
            viewString.Append("m0\r\n        FROM NKDC.ApplicationPaymentProviderContacts AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_ApplicationPaymentProviderContact", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_PaymentInvoice
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView298()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_PaymentInvoice", "\r\n    SELECT VALUE -- Constructing E_PaymentInvoice\r\n        [NKD.Module.Business" +
                    "Objects.Store.E_PaymentInvoice](T1.[E_PaymentInvoice.PaymentInvoiceID], T1.[E_Pa" +
                    "ymentInvoice.PaymentID], T1.[E_PaymentInvoice.InvoiceID], T1.[E_PaymentInvoice.I" +
                    "sFinalPaymentInvoice], T1.[E_PaymentInvoice.Version], T1.[E_PaymentInvoice.Versi" +
                    "onAntecedentID], T1.[E_PaymentInvoice.VersionCertainty], T1.[E_PaymentInvoice.Ve" +
                    "rsionWorkflowInstanceID], T1.[E_PaymentInvoice.VersionUpdatedBy], T1.[E_PaymentI" +
                    "nvoice.VersionDeletedBy], T1.[E_PaymentInvoice.VersionOwnerContactID], T1.[E_Pay" +
                    "mentInvoice.VersionOwnerCompanyID], T1.[E_PaymentInvoice.VersionUpdated])\r\n    F" +
                    "ROM (\r\n        SELECT \r\n            T.PaymentInvoiceID AS [E_PaymentInvoice.Paym" +
                    "entInvoiceID], \r\n            T.PaymentID AS [E_PaymentInvoice.PaymentID], \r\n    " +
                    "        T.InvoiceID AS [E_PaymentInvoice.InvoiceID], \r\n            T.IsFinalPaym" +
                    "entInvoice AS [E_PaymentInvoice.IsFinalPaymentInvoice], \r\n            T.Version " +
                    "AS [E_PaymentInvoice.Version], \r\n            T.VersionAntecedentID AS [E_Payment" +
                    "Invoice.VersionAntecedentID], \r\n            T.VersionCertainty AS [E_PaymentInvo" +
                    "ice.VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [E_PaymentIn" +
                    "voice.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [E_Payment" +
                    "Invoice.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [E_PaymentInvoice" +
                    ".VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [E_PaymentInvoice.V" +
                    "ersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [E_PaymentInvoic" +
                    "e.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [E_PaymentInvoice.Ve" +
                    "rsionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.PaymentInvoices A" +
                    "S T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_TwoStepAuthenticationData
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView299()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3771);
            viewString.Append("\r\n    SELECT VALUE -- Constructing E_TwoStepAuthenticationData\r\n        [NKD.Mod");
            viewString.Append("ule.BusinessObjects.Store.E_TwoStepAuthenticationData](T1.[E_TwoStepAuthenticati");
            viewString.Append("onData.TwoStepAuthenticationDataID], T1.[E_TwoStepAuthenticationData.Sequence], ");
            viewString.Append("T1.[E_TwoStepAuthenticationData.TableType], T1.[E_TwoStepAuthenticationData.Refe");
            viewString.Append("renceID], T1.[E_TwoStepAuthenticationData.ReferenceName], T1.[E_TwoStepAuthentic");
            viewString.Append("ationData.ContactID], T1.[E_TwoStepAuthenticationData.Mobile], T1.[E_TwoStepAuth");
            viewString.Append("enticationData.VerificationCode], T1.[E_TwoStepAuthenticationData.Sent], T1.[E_T");
            viewString.Append("woStepAuthenticationData.ServerReceipt], T1.[E_TwoStepAuthenticationData.IsServe");
            viewString.Append("rValid], T1.[E_TwoStepAuthenticationData.AcceptRepliesUntil], T1.[E_TwoStepAuthe");
            viewString.Append("nticationData.Verified], T1.[E_TwoStepAuthenticationData.VerifiedURLHost], T1.[E");
            viewString.Append("_TwoStepAuthenticationData.VerifiedURLQueryString], T1.[E_TwoStepAuthenticationD");
            viewString.Append("ata.RequestedByIP], T1.[E_TwoStepAuthenticationData.ContactReceipt], T1.[E_TwoSt");
            viewString.Append("epAuthenticationData.ContactAccepted], T1.[E_TwoStepAuthenticationData.Version],");
            viewString.Append(" T1.[E_TwoStepAuthenticationData.VersionAntecedentID], T1.[E_TwoStepAuthenticati");
            viewString.Append("onData.VersionCertainty], T1.[E_TwoStepAuthenticationData.VersionWorkflowInstanc");
            viewString.Append("eID], T1.[E_TwoStepAuthenticationData.VersionUpdatedBy], T1.[E_TwoStepAuthentica");
            viewString.Append("tionData.VersionDeletedBy], T1.[E_TwoStepAuthenticationData.VersionOwnerContactI");
            viewString.Append("D], T1.[E_TwoStepAuthenticationData.VersionOwnerCompanyID], T1.[E_TwoStepAuthent");
            viewString.Append("icationData.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.TwoStep");
            viewString.Append("AuthenticationDataID AS [E_TwoStepAuthenticationData.TwoStepAuthenticationDataID");
            viewString.Append("], \r\n            T.Sequence AS [E_TwoStepAuthenticationData.Sequence], \r\n       ");
            viewString.Append("     T.TableType AS [E_TwoStepAuthenticationData.TableType], \r\n            T.Ref");
            viewString.Append("erenceID AS [E_TwoStepAuthenticationData.ReferenceID], \r\n            T.Reference");
            viewString.Append("Name AS [E_TwoStepAuthenticationData.ReferenceName], \r\n            T.ContactID A");
            viewString.Append("S [E_TwoStepAuthenticationData.ContactID], \r\n            T.Mobile AS [E_TwoStepA");
            viewString.Append("uthenticationData.Mobile], \r\n            T.VerificationCode AS [E_TwoStepAuthent");
            viewString.Append("icationData.VerificationCode], \r\n            T.Sent AS [E_TwoStepAuthenticationD");
            viewString.Append("ata.Sent], \r\n            T.ServerReceipt AS [E_TwoStepAuthenticationData.ServerR");
            viewString.Append("eceipt], \r\n            T.IsServerValid AS [E_TwoStepAuthenticationData.IsServerV");
            viewString.Append("alid], \r\n            T.AcceptRepliesUntil AS [E_TwoStepAuthenticationData.Accept");
            viewString.Append("RepliesUntil], \r\n            T.Verified AS [E_TwoStepAuthenticationData.Verified");
            viewString.Append("], \r\n            T.VerifiedURLHost AS [E_TwoStepAuthenticationData.VerifiedURLHo");
            viewString.Append("st], \r\n            T.VerifiedURLQueryString AS [E_TwoStepAuthenticationData.Veri");
            viewString.Append("fiedURLQueryString], \r\n            T.RequestedByIP AS [E_TwoStepAuthenticationDa");
            viewString.Append("ta.RequestedByIP], \r\n            T.ContactReceipt AS [E_TwoStepAuthenticationDat");
            viewString.Append("a.ContactReceipt], \r\n            T.ContactAccepted AS [E_TwoStepAuthenticationDa");
            viewString.Append("ta.ContactAccepted], \r\n            T.Version AS [E_TwoStepAuthenticationData.Ver");
            viewString.Append("sion], \r\n            T.VersionAntecedentID AS [E_TwoStepAuthenticationData.Versi");
            viewString.Append("onAntecedentID], \r\n            T.VersionCertainty AS [E_TwoStepAuthenticationDat");
            viewString.Append("a.VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [E_TwoStepAuth");
            viewString.Append("enticationData.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [");
            viewString.Append("E_TwoStepAuthenticationData.VersionUpdatedBy], \r\n            T.VersionDeletedBy ");
            viewString.Append("AS [E_TwoStepAuthenticationData.VersionDeletedBy], \r\n            T.VersionOwnerC");
            viewString.Append("ontactID AS [E_TwoStepAuthenticationData.VersionOwnerContactID], \r\n            T");
            viewString.Append(".VersionOwnerCompanyID AS [E_TwoStepAuthenticationData.VersionOwnerCompanyID], \r");
            viewString.Append("\n            T.VersionUpdated AS [E_TwoStepAuthenticationData.VersionUpdated], \r");
            viewString.Append("\n            True AS _from0\r\n        FROM NKDC.TwoStepAuthenticationDatas AS T\r\n");
            viewString.Append("    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_TwoStepAuthenticationData", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_Affiliate
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView300()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_Affiliate", "\r\n    SELECT VALUE -- Constructing E_Affiliate\r\n        [NKD.Module.BusinessObjec" +
                    "ts.Store.E_Affiliate](T1.[E_Affiliate.AffiliateID], T1.[E_Affiliate.ParentContac" +
                    "tID], T1.[E_Affiliate.AffiliateContactID], T1.[E_Affiliate.AffiliateTypeID], T1." +
                    "[E_Affiliate.InitialIP], T1.[E_Affiliate.Version], T1.[E_Affiliate.VersionAntece" +
                    "dentID], T1.[E_Affiliate.VersionCertainty], T1.[E_Affiliate.VersionWorkflowInsta" +
                    "nceID], T1.[E_Affiliate.VersionUpdatedBy], T1.[E_Affiliate.VersionDeletedBy], T1" +
                    ".[E_Affiliate.VersionOwnerContactID], T1.[E_Affiliate.VersionOwnerCompanyID], T1" +
                    ".[E_Affiliate.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.Affil" +
                    "iateID AS [E_Affiliate.AffiliateID], \r\n            T.ParentContactID AS [E_Affil" +
                    "iate.ParentContactID], \r\n            T.AffiliateContactID AS [E_Affiliate.Affili" +
                    "ateContactID], \r\n            T.AffiliateTypeID AS [E_Affiliate.AffiliateTypeID]," +
                    " \r\n            T.InitialIP AS [E_Affiliate.InitialIP], \r\n            T.Version A" +
                    "S [E_Affiliate.Version], \r\n            T.VersionAntecedentID AS [E_Affiliate.Ver" +
                    "sionAntecedentID], \r\n            T.VersionCertainty AS [E_Affiliate.VersionCerta" +
                    "inty], \r\n            T.VersionWorkflowInstanceID AS [E_Affiliate.VersionWorkflow" +
                    "InstanceID], \r\n            T.VersionUpdatedBy AS [E_Affiliate.VersionUpdatedBy]," +
                    " \r\n            T.VersionDeletedBy AS [E_Affiliate.VersionDeletedBy], \r\n         " +
                    "   T.VersionOwnerContactID AS [E_Affiliate.VersionOwnerContactID], \r\n           " +
                    " T.VersionOwnerCompanyID AS [E_Affiliate.VersionOwnerCompanyID], \r\n            T" +
                    ".VersionUpdated AS [E_Affiliate.VersionUpdated], \r\n            True AS _from0\r\n " +
                    "       FROM NKDC.Affiliates AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_DictionaryAffiliateType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView301()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2485);
            viewString.Append("\r\n    SELECT VALUE -- Constructing E_DictionaryAffiliateType\r\n        [NKD.Modul");
            viewString.Append("e.BusinessObjects.Store.E_DictionaryAffiliateType](T1.[E_DictionaryAffiliateType");
            viewString.Append(".AffiliateTypeID], T1.[E_DictionaryAffiliateType.StandardAffiliateTypeName], T1.");
            viewString.Append("[E_DictionaryAffiliateType.CustomAffiliateTypeName], T1.[E_DictionaryAffiliateTy");
            viewString.Append("pe.Rate], T1.[E_DictionaryAffiliateType.Description], T1.[E_DictionaryAffiliateT");
            viewString.Append("ype.FullDescription], T1.[E_DictionaryAffiliateType.Thumbnail], T1.[E_Dictionary");
            viewString.Append("AffiliateType.OriginalFileDataID], T1.[E_DictionaryAffiliateType.Version], T1.[E");
            viewString.Append("_DictionaryAffiliateType.VersionAntecedentID], T1.[E_DictionaryAffiliateType.Ver");
            viewString.Append("sionCertainty], T1.[E_DictionaryAffiliateType.VersionWorkflowInstanceID], T1.[E_");
            viewString.Append("DictionaryAffiliateType.VersionUpdatedBy], T1.[E_DictionaryAffiliateType.Version");
            viewString.Append("DeletedBy], T1.[E_DictionaryAffiliateType.VersionOwnerContactID], T1.[E_Dictiona");
            viewString.Append("ryAffiliateType.VersionOwnerCompanyID], T1.[E_DictionaryAffiliateType.VersionUpd");
            viewString.Append("ated])\r\n    FROM (\r\n        SELECT \r\n            T.AffiliateTypeID AS [E_Diction");
            viewString.Append("aryAffiliateType.AffiliateTypeID], \r\n            T.StandardAffiliateTypeName AS ");
            viewString.Append("[E_DictionaryAffiliateType.StandardAffiliateTypeName], \r\n            T.CustomAff");
            viewString.Append("iliateTypeName AS [E_DictionaryAffiliateType.CustomAffiliateTypeName], \r\n       ");
            viewString.Append("     T.Rate AS [E_DictionaryAffiliateType.Rate], \r\n            T.Description AS ");
            viewString.Append("[E_DictionaryAffiliateType.Description], \r\n            T.FullDescription AS [E_D");
            viewString.Append("ictionaryAffiliateType.FullDescription], \r\n            T.Thumbnail AS [E_Diction");
            viewString.Append("aryAffiliateType.Thumbnail], \r\n            T.OriginalFileDataID AS [E_Dictionary");
            viewString.Append("AffiliateType.OriginalFileDataID], \r\n            T.Version AS [E_DictionaryAffil");
            viewString.Append("iateType.Version], \r\n            T.VersionAntecedentID AS [E_DictionaryAffiliate");
            viewString.Append("Type.VersionAntecedentID], \r\n            T.VersionCertainty AS [E_DictionaryAffi");
            viewString.Append("liateType.VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [E_Dic");
            viewString.Append("tionaryAffiliateType.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedB");
            viewString.Append("y AS [E_DictionaryAffiliateType.VersionUpdatedBy], \r\n            T.VersionDelete");
            viewString.Append("dBy AS [E_DictionaryAffiliateType.VersionDeletedBy], \r\n            T.VersionOwne");
            viewString.Append("rContactID AS [E_DictionaryAffiliateType.VersionOwnerContactID], \r\n            T");
            viewString.Append(".VersionOwnerCompanyID AS [E_DictionaryAffiliateType.VersionOwnerCompanyID], \r\n ");
            viewString.Append("           T.VersionUpdated AS [E_DictionaryAffiliateType.VersionUpdated], \r\n   ");
            viewString.Append("         True AS _from0\r\n        FROM NKDC.DictionaryAffiliateTypes AS T\r\n    ) ");
            viewString.Append("AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_DictionaryAffiliateType", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_CommunicationEmail
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView302()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_CommunicationEmail", "\r\n    SELECT VALUE -- Constructing E_CommunicationEmail\r\n        [NKD.Module.Busi" +
                    "nessObjects.Store.E_CommunicationEmail](T1.[E_CommunicationEmail.CommunicationEm" +
                    "ailID], T1.[E_CommunicationEmail.CommunicationID], T1.[E_CommunicationEmail.Comm" +
                    "unicationEmail], T1.[E_CommunicationEmail.ContactID], T1.[E_CommunicationEmail.V" +
                    "ersion], T1.[E_CommunicationEmail.VersionAntecedentID], T1.[E_CommunicationEmail" +
                    ".VersionCertainty], T1.[E_CommunicationEmail.VersionWorkflowInstanceID], T1.[E_C" +
                    "ommunicationEmail.VersionUpdatedBy], T1.[E_CommunicationEmail.VersionDeletedBy]," +
                    " T1.[E_CommunicationEmail.VersionOwnerContactID], T1.[E_CommunicationEmail.Versi" +
                    "onOwnerCompanyID], T1.[E_CommunicationEmail.VersionUpdated])\r\n    FROM (\r\n      " +
                    "  SELECT \r\n            T.CommunicationEmailID AS [E_CommunicationEmail.Communica" +
                    "tionEmailID], \r\n            T.CommunicationID AS [E_CommunicationEmail.Communica" +
                    "tionID], \r\n            T.CommunicationEmail AS [E_CommunicationEmail.Communicati" +
                    "onEmail], \r\n            T.ContactID AS [E_CommunicationEmail.ContactID], \r\n     " +
                    "       T.Version AS [E_CommunicationEmail.Version], \r\n            T.VersionAntec" +
                    "edentID AS [E_CommunicationEmail.VersionAntecedentID], \r\n            T.VersionCe" +
                    "rtainty AS [E_CommunicationEmail.VersionCertainty], \r\n            T.VersionWorkf" +
                    "lowInstanceID AS [E_CommunicationEmail.VersionWorkflowInstanceID], \r\n           " +
                    " T.VersionUpdatedBy AS [E_CommunicationEmail.VersionUpdatedBy], \r\n            T." +
                    "VersionDeletedBy AS [E_CommunicationEmail.VersionDeletedBy], \r\n            T.Ver" +
                    "sionOwnerContactID AS [E_CommunicationEmail.VersionOwnerContactID], \r\n          " +
                    "  T.VersionOwnerCompanyID AS [E_CommunicationEmail.VersionOwnerCompanyID], \r\n   " +
                    "         T.VersionUpdated AS [E_CommunicationEmail.VersionUpdated], \r\n          " +
                    "  True AS _from0\r\n        FROM NKDC.CommunicationEmails AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_CommunicationRegardingData
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView303()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2197);
            viewString.Append("\r\n    SELECT VALUE -- Constructing E_CommunicationRegardingData\r\n        [NKD.Mo");
            viewString.Append("dule.BusinessObjects.Store.E_CommunicationRegardingData](T1.[E_CommunicationRega");
            viewString.Append("rdingData.CommunicationRegardingDataID], T1.[E_CommunicationRegardingData.Commun");
            viewString.Append("icationID], T1.[E_CommunicationRegardingData.TableType], T1.[E_CommunicationRega");
            viewString.Append("rdingData.ReferenceID], T1.[E_CommunicationRegardingData.ReferenceName], T1.[E_C");
            viewString.Append("ommunicationRegardingData.Version], T1.[E_CommunicationRegardingData.VersionAnte");
            viewString.Append("cedentID], T1.[E_CommunicationRegardingData.VersionCertainty], T1.[E_Communicati");
            viewString.Append("onRegardingData.VersionWorkflowInstanceID], T1.[E_CommunicationRegardingData.Ver");
            viewString.Append("sionUpdatedBy], T1.[E_CommunicationRegardingData.VersionDeletedBy], T1.[E_Commun");
            viewString.Append("icationRegardingData.VersionOwnerContactID], T1.[E_CommunicationRegardingData.Ve");
            viewString.Append("rsionOwnerCompanyID], T1.[E_CommunicationRegardingData.VersionUpdated])\r\n    FRO");
            viewString.Append("M (\r\n        SELECT \r\n            T.CommunicationRegardingDataID AS [E_Communica");
            viewString.Append("tionRegardingData.CommunicationRegardingDataID], \r\n            T.CommunicationID");
            viewString.Append(" AS [E_CommunicationRegardingData.CommunicationID], \r\n            T.TableType AS");
            viewString.Append(" [E_CommunicationRegardingData.TableType], \r\n            T.ReferenceID AS [E_Com");
            viewString.Append("municationRegardingData.ReferenceID], \r\n            T.ReferenceName AS [E_Commun");
            viewString.Append("icationRegardingData.ReferenceName], \r\n            T.Version AS [E_Communication");
            viewString.Append("RegardingData.Version], \r\n            T.VersionAntecedentID AS [E_CommunicationR");
            viewString.Append("egardingData.VersionAntecedentID], \r\n            T.VersionCertainty AS [E_Commun");
            viewString.Append("icationRegardingData.VersionCertainty], \r\n            T.VersionWorkflowInstanceI");
            viewString.Append("D AS [E_CommunicationRegardingData.VersionWorkflowInstanceID], \r\n            T.V");
            viewString.Append("ersionUpdatedBy AS [E_CommunicationRegardingData.VersionUpdatedBy], \r\n          ");
            viewString.Append("  T.VersionDeletedBy AS [E_CommunicationRegardingData.VersionDeletedBy], \r\n     ");
            viewString.Append("       T.VersionOwnerContactID AS [E_CommunicationRegardingData.VersionOwnerCont");
            viewString.Append("actID], \r\n            T.VersionOwnerCompanyID AS [E_CommunicationRegardingData.V");
            viewString.Append("ersionOwnerCompanyID], \r\n            T.VersionUpdated AS [E_CommunicationRegardi");
            viewString.Append("ngData.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.Communic");
            viewString.Append("ationRegardingDatas AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_CommunicationRegardingData", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.Q_DictionaryAssetStatus
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView304()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.Q_DictionaryAssetStatus", "\r\n    SELECT VALUE -- Constructing Q_DictionaryAssetStatus\r\n        [NKD.Module.B" +
                    "usinessObjects.Store.Q_DictionaryAssetStatus](T1.[Q_DictionaryAssetStatus.AssetS" +
                    "tatusID], T1.[Q_DictionaryAssetStatus.StandardAssetStatusName], T1.[Q_Dictionary" +
                    "AssetStatus.CustomAssetStatusName], T1.[Q_DictionaryAssetStatus.Description], T1" +
                    ".[Q_DictionaryAssetStatus.Version], T1.[Q_DictionaryAssetStatus.VersionAnteceden" +
                    "tID], T1.[Q_DictionaryAssetStatus.VersionCertainty], T1.[Q_DictionaryAssetStatus" +
                    ".VersionWorkflowInstanceID], T1.[Q_DictionaryAssetStatus.VersionUpdatedBy], T1.[" +
                    "Q_DictionaryAssetStatus.VersionDeletedBy], T1.[Q_DictionaryAssetStatus.VersionOw" +
                    "nerContactID], T1.[Q_DictionaryAssetStatus.VersionOwnerCompanyID], T1.[Q_Diction" +
                    "aryAssetStatus.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.Asse" +
                    "tStatusID AS [Q_DictionaryAssetStatus.AssetStatusID], \r\n            T.StandardAs" +
                    "setStatusName AS [Q_DictionaryAssetStatus.StandardAssetStatusName], \r\n          " +
                    "  T.CustomAssetStatusName AS [Q_DictionaryAssetStatus.CustomAssetStatusName], \r\n" +
                    "            T.Description AS [Q_DictionaryAssetStatus.Description], \r\n          " +
                    "  T.Version AS [Q_DictionaryAssetStatus.Version], \r\n            T.VersionAnteced" +
                    "entID AS [Q_DictionaryAssetStatus.VersionAntecedentID], \r\n            T.VersionC" +
                    "ertainty AS [Q_DictionaryAssetStatus.VersionCertainty], \r\n            T.VersionW" +
                    "orkflowInstanceID AS [Q_DictionaryAssetStatus.VersionWorkflowInstanceID], \r\n    " +
                    "        T.VersionUpdatedBy AS [Q_DictionaryAssetStatus.VersionUpdatedBy], \r\n    " +
                    "        T.VersionDeletedBy AS [Q_DictionaryAssetStatus.VersionDeletedBy], \r\n    " +
                    "        T.VersionOwnerContactID AS [Q_DictionaryAssetStatus.VersionOwnerContactI" +
                    "D], \r\n            T.VersionOwnerCompanyID AS [Q_DictionaryAssetStatus.VersionOwn" +
                    "erCompanyID], \r\n            T.VersionUpdated AS [Q_DictionaryAssetStatus.Version" +
                    "Updated], \r\n            True AS _from0\r\n        FROM NKDC.DictionaryAssetStatus " +
                    "AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.T_DictionaryUsageAuditType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView305()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2253);
            viewString.Append("\r\n    SELECT VALUE -- Constructing T_DictionaryUsageAuditType\r\n        [NKD.Modu");
            viewString.Append("le.BusinessObjects.Store.T_DictionaryUsageAuditType](T1.[T_DictionaryUsageAuditT");
            viewString.Append("ype.UsageAuditTypeID], T1.[T_DictionaryUsageAuditType.UsageAuditTypeName], T1.[T");
            viewString.Append("_DictionaryUsageAuditType.Description], T1.[T_DictionaryUsageAuditType.FullDescr");
            viewString.Append("iption], T1.[T_DictionaryUsageAuditType.Thumbnail], T1.[T_DictionaryUsageAuditTy");
            viewString.Append("pe.OriginalFileDataID], T1.[T_DictionaryUsageAuditType.Version], T1.[T_Dictionar");
            viewString.Append("yUsageAuditType.VersionAntecedentID], T1.[T_DictionaryUsageAuditType.VersionCert");
            viewString.Append("ainty], T1.[T_DictionaryUsageAuditType.VersionWorkflowInstanceID], T1.[T_Diction");
            viewString.Append("aryUsageAuditType.VersionUpdatedBy], T1.[T_DictionaryUsageAuditType.VersionDelet");
            viewString.Append("edBy], T1.[T_DictionaryUsageAuditType.VersionOwnerContactID], T1.[T_DictionaryUs");
            viewString.Append("ageAuditType.VersionOwnerCompanyID], T1.[T_DictionaryUsageAuditType.VersionUpdat");
            viewString.Append("ed])\r\n    FROM (\r\n        SELECT \r\n            T.UsageAuditTypeID AS [T_Dictiona");
            viewString.Append("ryUsageAuditType.UsageAuditTypeID], \r\n            T.UsageAuditTypeName AS [T_Dic");
            viewString.Append("tionaryUsageAuditType.UsageAuditTypeName], \r\n            T.Description AS [T_Dic");
            viewString.Append("tionaryUsageAuditType.Description], \r\n            T.FullDescription AS [T_Dictio");
            viewString.Append("naryUsageAuditType.FullDescription], \r\n            T.Thumbnail AS [T_DictionaryU");
            viewString.Append("sageAuditType.Thumbnail], \r\n            T.OriginalFileDataID AS [T_DictionaryUsa");
            viewString.Append("geAuditType.OriginalFileDataID], \r\n            T.Version AS [T_DictionaryUsageAu");
            viewString.Append("ditType.Version], \r\n            T.VersionAntecedentID AS [T_DictionaryUsageAudit");
            viewString.Append("Type.VersionAntecedentID], \r\n            T.VersionCertainty AS [T_DictionaryUsag");
            viewString.Append("eAuditType.VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [T_Di");
            viewString.Append("ctionaryUsageAuditType.VersionWorkflowInstanceID], \r\n            T.VersionUpdate");
            viewString.Append("dBy AS [T_DictionaryUsageAuditType.VersionUpdatedBy], \r\n            T.VersionDel");
            viewString.Append("etedBy AS [T_DictionaryUsageAuditType.VersionDeletedBy], \r\n            T.Version");
            viewString.Append("OwnerContactID AS [T_DictionaryUsageAuditType.VersionOwnerContactID], \r\n        ");
            viewString.Append("    T.VersionOwnerCompanyID AS [T_DictionaryUsageAuditType.VersionOwnerCompanyID");
            viewString.Append("], \r\n            T.VersionUpdated AS [T_DictionaryUsageAuditType.VersionUpdated]");
            viewString.Append(", \r\n            True AS _from0\r\n        FROM NKDC.DictionaryUsageAuditTypes AS T");
            viewString.Append("\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.T_DictionaryUsageAuditType", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_GraphData
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView306()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_GraphData", "\r\n    SELECT VALUE -- Constructing E_GraphData\r\n        [NKD.Module.BusinessObjec" +
                    "ts.Store.E_GraphData](T1.[E_GraphData.GraphDataID], T1.[E_GraphData.GraphName], " +
                    "T1.[E_GraphData.WorkflowTypeID], T1.[E_GraphData.TableType], T1.[E_GraphData.Ref" +
                    "erenceID], T1.[E_GraphData.GraphData], T1.[E_GraphData.ReferenceName], T1.[E_Gra" +
                    "phData.Comment], T1.[E_GraphData.CreatedBy], T1.[E_GraphData.Created], T1.[E_Gra" +
                    "phData.Version], T1.[E_GraphData.VersionAntecedentID], T1.[E_GraphData.VersionCe" +
                    "rtainty], T1.[E_GraphData.VersionWorkflowInstanceID], T1.[E_GraphData.VersionUpd" +
                    "atedBy], T1.[E_GraphData.VersionDeletedBy], T1.[E_GraphData.VersionOwnerContactI" +
                    "D], T1.[E_GraphData.VersionOwnerCompanyID], T1.[E_GraphData.VersionUpdated])\r\n  " +
                    "  FROM (\r\n        SELECT \r\n            T.GraphDataID AS [E_GraphData.GraphDataID" +
                    "], \r\n            T.GraphName AS [E_GraphData.GraphName], \r\n            T.Workflo" +
                    "wTypeID AS [E_GraphData.WorkflowTypeID], \r\n            T.TableType AS [E_GraphDa" +
                    "ta.TableType], \r\n            T.ReferenceID AS [E_GraphData.ReferenceID], \r\n     " +
                    "       T.GraphContent AS [E_GraphData.GraphData], \r\n            T.ReferenceName " +
                    "AS [E_GraphData.ReferenceName], \r\n            T.Comment AS [E_GraphData.Comment]" +
                    ", \r\n            T.CreatedBy AS [E_GraphData.CreatedBy], \r\n            T.Created " +
                    "AS [E_GraphData.Created], \r\n            T.Version AS [E_GraphData.Version], \r\n  " +
                    "          T.VersionAntecedentID AS [E_GraphData.VersionAntecedentID], \r\n        " +
                    "    T.VersionCertainty AS [E_GraphData.VersionCertainty], \r\n            T.Versio" +
                    "nWorkflowInstanceID AS [E_GraphData.VersionWorkflowInstanceID], \r\n            T." +
                    "VersionUpdatedBy AS [E_GraphData.VersionUpdatedBy], \r\n            T.VersionDelet" +
                    "edBy AS [E_GraphData.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS" +
                    " [E_GraphData.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [" +
                    "E_GraphData.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [E_GraphDa" +
                    "ta.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.GraphData AS" +
                    " T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_GraphDataRelation
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView307()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2196);
            viewString.Append("\r\n    SELECT VALUE -- Constructing E_GraphDataRelation\r\n        [NKD.Module.Busi");
            viewString.Append("nessObjects.Store.E_GraphDataRelation](T1.[E_GraphDataRelation.GraphDataRelation");
            viewString.Append("ID], T1.[E_GraphDataRelation.GraphDataGroupID], T1.[E_GraphDataRelation.FromGrap");
            viewString.Append("hDataID], T1.[E_GraphDataRelation.ToGraphDataID], T1.[E_GraphDataRelation.Weight");
            viewString.Append("], T1.[E_GraphDataRelation.RelationTypeID], T1.[E_GraphDataRelation.Related], T1");
            viewString.Append(".[E_GraphDataRelation.Sequence], T1.[E_GraphDataRelation.Version], T1.[E_GraphDa");
            viewString.Append("taRelation.VersionAntecedentID], T1.[E_GraphDataRelation.VersionCertainty], T1.[");
            viewString.Append("E_GraphDataRelation.VersionWorkflowInstanceID], T1.[E_GraphDataRelation.VersionU");
            viewString.Append("pdatedBy], T1.[E_GraphDataRelation.VersionDeletedBy], T1.[E_GraphDataRelation.Ve");
            viewString.Append("rsionOwnerContactID], T1.[E_GraphDataRelation.VersionOwnerCompanyID], T1.[E_Grap");
            viewString.Append("hDataRelation.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.Graph");
            viewString.Append("DataRelationID AS [E_GraphDataRelation.GraphDataRelationID], \r\n            T.Gra");
            viewString.Append("phDataGroupID AS [E_GraphDataRelation.GraphDataGroupID], \r\n            T.FromGra");
            viewString.Append("phDataID AS [E_GraphDataRelation.FromGraphDataID], \r\n            T.ToGraphDataID");
            viewString.Append(" AS [E_GraphDataRelation.ToGraphDataID], \r\n            T.Weight AS [E_GraphDataR");
            viewString.Append("elation.Weight], \r\n            T.RelationTypeID AS [E_GraphDataRelation.Relation");
            viewString.Append("TypeID], \r\n            T.Related AS [E_GraphDataRelation.Related], \r\n           ");
            viewString.Append(" T.Sequence AS [E_GraphDataRelation.Sequence], \r\n            T.Version AS [E_Gra");
            viewString.Append("phDataRelation.Version], \r\n            T.VersionAntecedentID AS [E_GraphDataRela");
            viewString.Append("tion.VersionAntecedentID], \r\n            T.VersionCertainty AS [E_GraphDataRelat");
            viewString.Append("ion.VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [E_GraphData");
            viewString.Append("Relation.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [E_Grap");
            viewString.Append("hDataRelation.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [E_GraphDat");
            viewString.Append("aRelation.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [E_GraphDa");
            viewString.Append("taRelation.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [E_G");
            viewString.Append("raphDataRelation.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [E_Gr");
            viewString.Append("aphDataRelation.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC");
            viewString.Append(".GraphDataRelation AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_GraphDataRelation", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_DictionaryLinestringType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView308()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2434);
            viewString.Append("\r\n    SELECT VALUE -- Constructing E_DictionaryLinestringType\r\n        [NKD.Modu");
            viewString.Append("le.BusinessObjects.Store.E_DictionaryLinestringType](T1.[E_DictionaryLinestringT");
            viewString.Append("ype.LinestringTypeID], T1.[E_DictionaryLinestringType.StandardLinestringTypeName");
            viewString.Append("], T1.[E_DictionaryLinestringType.CustomLinestringTypeName], T1.[E_DictionaryLin");
            viewString.Append("estringType.Description], T1.[E_DictionaryLinestringType.FullDescription], T1.[E");
            viewString.Append("_DictionaryLinestringType.Thumbnail], T1.[E_DictionaryLinestringType.OriginalFil");
            viewString.Append("eDataID], T1.[E_DictionaryLinestringType.Version], T1.[E_DictionaryLinestringTyp");
            viewString.Append("e.VersionAntecedentID], T1.[E_DictionaryLinestringType.VersionCertainty], T1.[E_");
            viewString.Append("DictionaryLinestringType.VersionWorkflowInstanceID], T1.[E_DictionaryLinestringT");
            viewString.Append("ype.VersionUpdatedBy], T1.[E_DictionaryLinestringType.VersionDeletedBy], T1.[E_D");
            viewString.Append("ictionaryLinestringType.VersionOwnerContactID], T1.[E_DictionaryLinestringType.V");
            viewString.Append("ersionOwnerCompanyID], T1.[E_DictionaryLinestringType.VersionUpdated])\r\n    FROM");
            viewString.Append(" (\r\n        SELECT \r\n            T.LinestringTypeID AS [E_DictionaryLinestringTy");
            viewString.Append("pe.LinestringTypeID], \r\n            T.StandardLinestringTypeName AS [E_Dictionar");
            viewString.Append("yLinestringType.StandardLinestringTypeName], \r\n            T.CustomLinestringTyp");
            viewString.Append("eName AS [E_DictionaryLinestringType.CustomLinestringTypeName], \r\n            T.");
            viewString.Append("Description AS [E_DictionaryLinestringType.Description], \r\n            T.FullDes");
            viewString.Append("cription AS [E_DictionaryLinestringType.FullDescription], \r\n            T.Thumbn");
            viewString.Append("ail AS [E_DictionaryLinestringType.Thumbnail], \r\n            T.OriginalFileDataI");
            viewString.Append("D AS [E_DictionaryLinestringType.OriginalFileDataID], \r\n            T.Version AS");
            viewString.Append(" [E_DictionaryLinestringType.Version], \r\n            T.VersionAntecedentID AS [E");
            viewString.Append("_DictionaryLinestringType.VersionAntecedentID], \r\n            T.VersionCertainty");
            viewString.Append(" AS [E_DictionaryLinestringType.VersionCertainty], \r\n            T.VersionWorkfl");
            viewString.Append("owInstanceID AS [E_DictionaryLinestringType.VersionWorkflowInstanceID], \r\n      ");
            viewString.Append("      T.VersionUpdatedBy AS [E_DictionaryLinestringType.VersionUpdatedBy], \r\n   ");
            viewString.Append("         T.VersionDeletedBy AS [E_DictionaryLinestringType.VersionDeletedBy], \r\n");
            viewString.Append("            T.VersionOwnerContactID AS [E_DictionaryLinestringType.VersionOwnerC");
            viewString.Append("ontactID], \r\n            T.VersionOwnerCompanyID AS [E_DictionaryLinestringType.");
            viewString.Append("VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [E_DictionaryLinestrin");
            viewString.Append("gType.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.Dictionar");
            viewString.Append("yLinestringTypes AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_DictionaryLinestringType", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_DictionaryProjectType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView309()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2178);
            viewString.Append("\r\n    SELECT VALUE -- Constructing E_DictionaryProjectType\r\n        [NKD.Module.");
            viewString.Append("BusinessObjects.Store.E_DictionaryProjectType](T1.[E_DictionaryProjectType.Proje");
            viewString.Append("ctTypeID], T1.[E_DictionaryProjectType.ProjectTypeName], T1.[E_DictionaryProject");
            viewString.Append("Type.ProjectTypeDescription], T1.[E_DictionaryProjectType.FullDescription], T1.[");
            viewString.Append("E_DictionaryProjectType.Thumbnail], T1.[E_DictionaryProjectType.OriginalFileData");
            viewString.Append("ID], T1.[E_DictionaryProjectType.Version], T1.[E_DictionaryProjectType.VersionAn");
            viewString.Append("tecedentID], T1.[E_DictionaryProjectType.VersionCertainty], T1.[E_DictionaryProj");
            viewString.Append("ectType.VersionProjectflowInstanceID], T1.[E_DictionaryProjectType.VersionUpdate");
            viewString.Append("dBy], T1.[E_DictionaryProjectType.VersionDeletedBy], T1.[E_DictionaryProjectType");
            viewString.Append(".VersionOwnerContactID], T1.[E_DictionaryProjectType.VersionOwnerCompanyID], T1.");
            viewString.Append("[E_DictionaryProjectType.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n        ");
            viewString.Append("    T.ProjectTypeID AS [E_DictionaryProjectType.ProjectTypeID], \r\n            T.");
            viewString.Append("ProjectTypeName AS [E_DictionaryProjectType.ProjectTypeName], \r\n            T.Pr");
            viewString.Append("ojectTypeDescription AS [E_DictionaryProjectType.ProjectTypeDescription], \r\n    ");
            viewString.Append("        T.FullDescription AS [E_DictionaryProjectType.FullDescription], \r\n      ");
            viewString.Append("      T.Thumbnail AS [E_DictionaryProjectType.Thumbnail], \r\n            T.Origin");
            viewString.Append("alFileDataID AS [E_DictionaryProjectType.OriginalFileDataID], \r\n            T.Ve");
            viewString.Append("rsion AS [E_DictionaryProjectType.Version], \r\n            T.VersionAntecedentID ");
            viewString.Append("AS [E_DictionaryProjectType.VersionAntecedentID], \r\n            T.VersionCertain");
            viewString.Append("ty AS [E_DictionaryProjectType.VersionCertainty], \r\n            T.VersionProject");
            viewString.Append("flowInstanceID AS [E_DictionaryProjectType.VersionProjectflowInstanceID], \r\n    ");
            viewString.Append("        T.VersionUpdatedBy AS [E_DictionaryProjectType.VersionUpdatedBy], \r\n    ");
            viewString.Append("        T.VersionDeletedBy AS [E_DictionaryProjectType.VersionDeletedBy], \r\n    ");
            viewString.Append("        T.VersionOwnerContactID AS [E_DictionaryProjectType.VersionOwnerContactI");
            viewString.Append("D], \r\n            T.VersionOwnerCompanyID AS [E_DictionaryProjectType.VersionOwn");
            viewString.Append("erCompanyID], \r\n            T.VersionUpdated AS [E_DictionaryProjectType.Version");
            viewString.Append("Updated], \r\n            True AS _from0\r\n        FROM NKDC.DictionaryProjectTypes");
            viewString.Append(" AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_DictionaryProjectType", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_Linestring
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView310()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2112);
            viewString.Append("\r\n    SELECT VALUE -- Constructing E_Linestring\r\n        [NKD.Module.BusinessObj");
            viewString.Append("ects.Store.E_Linestring](T1.[E_Linestring.LinestringID], T1.[E_Linestring.Linest");
            viewString.Append("ringTypeID], T1.[E_Linestring.DefaultLinestringName], T1.[E_Linestring.Linestrin");
            viewString.Append("gCode], T1.[E_Linestring.LinestringGeography], T1.[E_Linestring.DefaultCulture],");
            viewString.Append(" T1.[E_Linestring.OwnerCompanyID], T1.[E_Linestring.ResponsibleContactID], T1.[E");
            viewString.Append("_Linestring.Comment], T1.[E_Linestring.Version], T1.[E_Linestring.VersionAnteced");
            viewString.Append("entID], T1.[E_Linestring.VersionCertainty], T1.[E_Linestring.VersionWorkflowInst");
            viewString.Append("anceID], T1.[E_Linestring.VersionUpdatedBy], T1.[E_Linestring.VersionDeletedBy],");
            viewString.Append(" T1.[E_Linestring.VersionOwnerContactID], T1.[E_Linestring.VersionOwnerCompanyID");
            viewString.Append("], T1.[E_Linestring.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T");
            viewString.Append(".LinestringID AS [E_Linestring.LinestringID], \r\n            T.LinestringTypeID A");
            viewString.Append("S [E_Linestring.LinestringTypeID], \r\n            T.DefaultLinestringName AS [E_L");
            viewString.Append("inestring.DefaultLinestringName], \r\n            T.LinestringCode AS [E_Linestrin");
            viewString.Append("g.LinestringCode], \r\n            T.LinestringGeography AS [E_Linestring.Linestri");
            viewString.Append("ngGeography], \r\n            T.DefaultCulture AS [E_Linestring.DefaultCulture], \r");
            viewString.Append("\n            T.OwnerCompanyID AS [E_Linestring.OwnerCompanyID], \r\n            T.");
            viewString.Append("ResponsibleContactID AS [E_Linestring.ResponsibleContactID], \r\n            T.Com");
            viewString.Append("ment AS [E_Linestring.Comment], \r\n            T.Version AS [E_Linestring.Version");
            viewString.Append("], \r\n            T.VersionAntecedentID AS [E_Linestring.VersionAntecedentID], \r\n");
            viewString.Append("            T.VersionCertainty AS [E_Linestring.VersionCertainty], \r\n           ");
            viewString.Append(" T.VersionWorkflowInstanceID AS [E_Linestring.VersionWorkflowInstanceID], \r\n    ");
            viewString.Append("        T.VersionUpdatedBy AS [E_Linestring.VersionUpdatedBy], \r\n            T.V");
            viewString.Append("ersionDeletedBy AS [E_Linestring.VersionDeletedBy], \r\n            T.VersionOwner");
            viewString.Append("ContactID AS [E_Linestring.VersionOwnerContactID], \r\n            T.VersionOwnerC");
            viewString.Append("ompanyID AS [E_Linestring.VersionOwnerCompanyID], \r\n            T.VersionUpdated");
            viewString.Append(" AS [E_Linestring.VersionUpdated], \r\n            True AS _from0\r\n        FROM NK");
            viewString.Append("DC.Linestrings AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_Linestring", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_ProjectOffer
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView311()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2498);
            viewString.Append("\r\n    SELECT VALUE -- Constructing E_ProjectOffer\r\n        [NKD.Module.BusinessO");
            viewString.Append("bjects.Store.E_ProjectOffer](T1.[E_ProjectOffer.ProjectOfferID], T1.[E_ProjectOf");
            viewString.Append("fer.ProjectID], T1.[E_ProjectOffer.OfferDescription], T1.[E_ProjectOffer.OfferCo");
            viewString.Append("ntactID], T1.[E_ProjectOffer.Offered], T1.[E_ProjectOffer.OriginalAmount], T1.[E");
            viewString.Append("_ProjectOffer.Amount], T1.[E_ProjectOffer.AmountPaid], T1.[E_ProjectOffer.Expire");
            viewString.Append("s], T1.[E_ProjectOffer.Expired], T1.[E_ProjectOffer.Realises], T1.[E_ProjectOffe");
            viewString.Append("r.Realised], T1.[E_ProjectOffer.Approved], T1.[E_ProjectOffer.ApprovedBy], T1.[E");
            viewString.Append("_ProjectOffer.Version], T1.[E_ProjectOffer.VersionAntecedentID], T1.[E_ProjectOf");
            viewString.Append("fer.VersionCertainty], T1.[E_ProjectOffer.VersionWorkflowInstanceID], T1.[E_Proj");
            viewString.Append("ectOffer.VersionUpdatedBy], T1.[E_ProjectOffer.VersionDeletedBy], T1.[E_ProjectO");
            viewString.Append("ffer.VersionOwnerContactID], T1.[E_ProjectOffer.VersionOwnerCompanyID], T1.[E_Pr");
            viewString.Append("ojectOffer.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.ProjectO");
            viewString.Append("fferID AS [E_ProjectOffer.ProjectOfferID], \r\n            T.ProjectID AS [E_Proje");
            viewString.Append("ctOffer.ProjectID], \r\n            T.OfferDescription AS [E_ProjectOffer.OfferDes");
            viewString.Append("cription], \r\n            T.OfferContactID AS [E_ProjectOffer.OfferContactID], \r\n");
            viewString.Append("            T.Offered AS [E_ProjectOffer.Offered], \r\n            T.OriginalAmoun");
            viewString.Append("t AS [E_ProjectOffer.OriginalAmount], \r\n            T.Amount AS [E_ProjectOffer.");
            viewString.Append("Amount], \r\n            T.AmountPaid AS [E_ProjectOffer.AmountPaid], \r\n          ");
            viewString.Append("  T.Expires AS [E_ProjectOffer.Expires], \r\n            T.Expired AS [E_ProjectOf");
            viewString.Append("fer.Expired], \r\n            T.Realises AS [E_ProjectOffer.Realises], \r\n         ");
            viewString.Append("   T.Realised AS [E_ProjectOffer.Realised], \r\n            T.Approved AS [E_Proje");
            viewString.Append("ctOffer.Approved], \r\n            T.ApprovedBy AS [E_ProjectOffer.ApprovedBy], \r\n");
            viewString.Append("            T.Version AS [E_ProjectOffer.Version], \r\n            T.VersionAntece");
            viewString.Append("dentID AS [E_ProjectOffer.VersionAntecedentID], \r\n            T.VersionCertainty");
            viewString.Append(" AS [E_ProjectOffer.VersionCertainty], \r\n            T.VersionWorkflowInstanceID");
            viewString.Append(" AS [E_ProjectOffer.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy");
            viewString.Append(" AS [E_ProjectOffer.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [E_Pr");
            viewString.Append("ojectOffer.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [E_Projec");
            viewString.Append("tOffer.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [E_Proje");
            viewString.Append("ctOffer.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [E_ProjectOffe");
            viewString.Append("r.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.ProjectOffers");
            viewString.Append(" AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_ProjectOffer", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_ProjectPledge
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView312()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3333);
            viewString.Append("\r\n    SELECT VALUE -- Constructing E_ProjectPledge\r\n        [NKD.Module.Business");
            viewString.Append("Objects.Store.E_ProjectPledge](T1.[E_ProjectPledge.ProjectPledgeID], T1.[E_Proje");
            viewString.Append("ctPledge.ProjectID], T1.[E_ProjectPledge.ParentProjectPledgeID], T1.[E_ProjectPl");
            viewString.Append("edge.PledgeContactID], T1.[E_ProjectPledge.Pledged], T1.[E_ProjectPledge.Origina");
            viewString.Append("lAmount], T1.[E_ProjectPledge.CurrencyID], T1.[E_ProjectPledge.DepositAmount], T");
            viewString.Append("1.[E_ProjectPledge.DepositPaid], T1.[E_ProjectPledge.AcceptedProjectOfferID], T1");
            viewString.Append(".[E_ProjectPledge.AcceptedProjectOffer], T1.[E_ProjectPledge.QuorumOverseenBy], ");
            viewString.Append("T1.[E_ProjectPledge.QuorumNegotiated], T1.[E_ProjectPledge.Amount], T1.[E_Projec");
            viewString.Append("tPledge.AmountPaid], T1.[E_ProjectPledge.Expires], T1.[E_ProjectPledge.Expired],");
            viewString.Append(" T1.[E_ProjectPledge.Realises], T1.[E_ProjectPledge.Realised], T1.[E_ProjectPled");
            viewString.Append("ge.Approved], T1.[E_ProjectPledge.ApprovedBy], T1.[E_ProjectPledge.Version], T1.");
            viewString.Append("[E_ProjectPledge.VersionAntecedentID], T1.[E_ProjectPledge.VersionCertainty], T1");
            viewString.Append(".[E_ProjectPledge.VersionWorkflowInstanceID], T1.[E_ProjectPledge.VersionUpdated");
            viewString.Append("By], T1.[E_ProjectPledge.VersionDeletedBy], T1.[E_ProjectPledge.VersionOwnerCont");
            viewString.Append("actID], T1.[E_ProjectPledge.VersionOwnerCompanyID], T1.[E_ProjectPledge.VersionU");
            viewString.Append("pdated])\r\n    FROM (\r\n        SELECT \r\n            T.ProjectPledgeID AS [E_Proje");
            viewString.Append("ctPledge.ProjectPledgeID], \r\n            T.ProjectID AS [E_ProjectPledge.Project");
            viewString.Append("ID], \r\n            T.ParentProjectPledgeID AS [E_ProjectPledge.ParentProjectPled");
            viewString.Append("geID], \r\n            T.PledgeContactID AS [E_ProjectPledge.PledgeContactID], \r\n ");
            viewString.Append("           T.Pledged AS [E_ProjectPledge.Pledged], \r\n            T.OriginalAmoun");
            viewString.Append("t AS [E_ProjectPledge.OriginalAmount], \r\n            T.CurrencyID AS [E_ProjectP");
            viewString.Append("ledge.CurrencyID], \r\n            T.DepositAmount AS [E_ProjectPledge.DepositAmou");
            viewString.Append("nt], \r\n            T.DepositPaid AS [E_ProjectPledge.DepositPaid], \r\n           ");
            viewString.Append(" T.AcceptedProjectOfferID AS [E_ProjectPledge.AcceptedProjectOfferID], \r\n       ");
            viewString.Append("     T.AcceptedProjectOffer AS [E_ProjectPledge.AcceptedProjectOffer], \r\n       ");
            viewString.Append("     T.QuorumOverseenBy AS [E_ProjectPledge.QuorumOverseenBy], \r\n            T.Q");
            viewString.Append("uorumNegotiated AS [E_ProjectPledge.QuorumNegotiated], \r\n            T.Amount AS");
            viewString.Append(" [E_ProjectPledge.Amount], \r\n            T.AmountPaid AS [E_ProjectPledge.Amount");
            viewString.Append("Paid], \r\n            T.Expires AS [E_ProjectPledge.Expires], \r\n            T.Exp");
            viewString.Append("ired AS [E_ProjectPledge.Expired], \r\n            T.Realises AS [E_ProjectPledge.");
            viewString.Append("Realises], \r\n            T.Realised AS [E_ProjectPledge.Realised], \r\n           ");
            viewString.Append(" T.Approved AS [E_ProjectPledge.Approved], \r\n            T.ApprovedBy AS [E_Proj");
            viewString.Append("ectPledge.ApprovedBy], \r\n            T.Version AS [E_ProjectPledge.Version], \r\n ");
            viewString.Append("           T.VersionAntecedentID AS [E_ProjectPledge.VersionAntecedentID], \r\n   ");
            viewString.Append("         T.VersionCertainty AS [E_ProjectPledge.VersionCertainty], \r\n           ");
            viewString.Append(" T.VersionWorkflowInstanceID AS [E_ProjectPledge.VersionWorkflowInstanceID], \r\n ");
            viewString.Append("           T.VersionUpdatedBy AS [E_ProjectPledge.VersionUpdatedBy], \r\n         ");
            viewString.Append("   T.VersionDeletedBy AS [E_ProjectPledge.VersionDeletedBy], \r\n            T.Ver");
            viewString.Append("sionOwnerContactID AS [E_ProjectPledge.VersionOwnerContactID], \r\n            T.V");
            viewString.Append("ersionOwnerCompanyID AS [E_ProjectPledge.VersionOwnerCompanyID], \r\n            T");
            viewString.Append(".VersionUpdated AS [E_ProjectPledge.VersionUpdated], \r\n            True AS _from");
            viewString.Append("0\r\n        FROM NKDC.ProjectPledges AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_ProjectPledge", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_ProjectPledgeAddendum
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView313()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2218);
            viewString.Append("\r\n    SELECT VALUE -- Constructing E_ProjectPledgeAddendum\r\n        [NKD.Module.");
            viewString.Append("BusinessObjects.Store.E_ProjectPledgeAddendum](T1.[E_ProjectPledgeAddendum.Proje");
            viewString.Append("ctPledgeAddendumID], T1.[E_ProjectPledgeAddendum.ProjectPledgeID], T1.[E_Project");
            viewString.Append("PledgeAddendum.Addendum], T1.[E_ProjectPledgeAddendum.Reviewed], T1.[E_ProjectPl");
            viewString.Append("edgeAddendum.ReviewedBy], T1.[E_ProjectPledgeAddendum.Approved], T1.[E_ProjectPl");
            viewString.Append("edgeAddendum.ApprovedBy], T1.[E_ProjectPledgeAddendum.Version], T1.[E_ProjectPle");
            viewString.Append("dgeAddendum.VersionAntecedentID], T1.[E_ProjectPledgeAddendum.VersionCertainty],");
            viewString.Append(" T1.[E_ProjectPledgeAddendum.VersionWorkflowInstanceID], T1.[E_ProjectPledgeAdde");
            viewString.Append("ndum.VersionUpdatedBy], T1.[E_ProjectPledgeAddendum.VersionDeletedBy], T1.[E_Pro");
            viewString.Append("jectPledgeAddendum.VersionOwnerContactID], T1.[E_ProjectPledgeAddendum.VersionOw");
            viewString.Append("nerCompanyID], T1.[E_ProjectPledgeAddendum.VersionUpdated])\r\n    FROM (\r\n       ");
            viewString.Append(" SELECT \r\n            T.ProjectPledgeAddendumID AS [E_ProjectPledgeAddendum.Proj");
            viewString.Append("ectPledgeAddendumID], \r\n            T.ProjectPledgeID AS [E_ProjectPledgeAddendu");
            viewString.Append("m.ProjectPledgeID], \r\n            T.Addendum AS [E_ProjectPledgeAddendum.Addendu");
            viewString.Append("m], \r\n            T.Reviewed AS [E_ProjectPledgeAddendum.Reviewed], \r\n          ");
            viewString.Append("  T.ReviewedBy AS [E_ProjectPledgeAddendum.ReviewedBy], \r\n            T.Approved");
            viewString.Append(" AS [E_ProjectPledgeAddendum.Approved], \r\n            T.ApprovedBy AS [E_Project");
            viewString.Append("PledgeAddendum.ApprovedBy], \r\n            T.Version AS [E_ProjectPledgeAddendum.");
            viewString.Append("Version], \r\n            T.VersionAntecedentID AS [E_ProjectPledgeAddendum.Versio");
            viewString.Append("nAntecedentID], \r\n            T.VersionCertainty AS [E_ProjectPledgeAddendum.Ver");
            viewString.Append("sionCertainty], \r\n            T.VersionWorkflowInstanceID AS [E_ProjectPledgeAdd");
            viewString.Append("endum.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [E_Project");
            viewString.Append("PledgeAddendum.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [E_Project");
            viewString.Append("PledgeAddendum.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [E_Pr");
            viewString.Append("ojectPledgeAddendum.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyI");
            viewString.Append("D AS [E_ProjectPledgeAddendum.VersionOwnerCompanyID], \r\n            T.VersionUpd");
            viewString.Append("ated AS [E_ProjectPledgeAddendum.VersionUpdated], \r\n            True AS _from0\r\n");
            viewString.Append("        FROM NKDC.ProjectPledgeAddendums AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_ProjectPledgeAddendum", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_DataData
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView314()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_DataData", "\r\n    SELECT VALUE -- Constructing E_DataData\r\n        [NKD.Module.BusinessObject" +
                    "s.Store.E_DataData](T1.[E_DataData.DataDataID], T1.[E_DataData.ParentTableType]," +
                    " T1.[E_DataData.ParentReferenceID], T1.[E_DataData.ChildTableType], T1.[E_DataDa" +
                    "ta.ChildReferenceID], T1.[E_DataData.IsCircular], T1.[E_DataData.CreatedBy], T1." +
                    "[E_DataData.Created], T1.[E_DataData.Version], T1.[E_DataData.VersionAntecedentI" +
                    "D], T1.[E_DataData.VersionCertainty], T1.[E_DataData.VersionWorkflowInstanceID]," +
                    " T1.[E_DataData.VersionUpdatedBy], T1.[E_DataData.VersionDeletedBy], T1.[E_DataD" +
                    "ata.VersionOwnerContactID], T1.[E_DataData.VersionOwnerCompanyID], T1.[E_DataDat" +
                    "a.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.DataDataID AS [E_" +
                    "DataData.DataDataID], \r\n            T.ParentTableType AS [E_DataData.ParentTable" +
                    "Type], \r\n            T.ParentReferenceID AS [E_DataData.ParentReferenceID], \r\n  " +
                    "          T.ChildTableType AS [E_DataData.ChildTableType], \r\n            T.Child" +
                    "ReferenceID AS [E_DataData.ChildReferenceID], \r\n            T.IsCircular AS [E_D" +
                    "ataData.IsCircular], \r\n            T.CreatedBy AS [E_DataData.CreatedBy], \r\n    " +
                    "        T.Created AS [E_DataData.Created], \r\n            T.Version AS [E_DataDat" +
                    "a.Version], \r\n            T.VersionAntecedentID AS [E_DataData.VersionAntecedent" +
                    "ID], \r\n            T.VersionCertainty AS [E_DataData.VersionCertainty], \r\n      " +
                    "      T.VersionWorkflowInstanceID AS [E_DataData.VersionWorkflowInstanceID], \r\n " +
                    "           T.VersionUpdatedBy AS [E_DataData.VersionUpdatedBy], \r\n            T." +
                    "VersionDeletedBy AS [E_DataData.VersionDeletedBy], \r\n            T.VersionOwnerC" +
                    "ontactID AS [E_DataData.VersionOwnerContactID], \r\n            T.VersionOwnerComp" +
                    "anyID AS [E_DataData.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [" +
                    "E_DataData.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.Data" +
                    "Datas AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_GraphDataFileData
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView315()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_GraphDataFileData", "\r\n    SELECT VALUE -- Constructing E_GraphDataFileData\r\n        [NKD.Module.Busin" +
                    "essObjects.Store.E_GraphDataFileData](T1.[E_GraphDataFileData.GraphDataFileDataI" +
                    "D], T1.[E_GraphDataFileData.GraphDataID], T1.[E_GraphDataFileData.FileDataID], T" +
                    "1.[E_GraphDataFileData.Version], T1.[E_GraphDataFileData.VersionAntecedentID], T" +
                    "1.[E_GraphDataFileData.VersionCertainty], T1.[E_GraphDataFileData.VersionWorkflo" +
                    "wInstanceID], T1.[E_GraphDataFileData.VersionUpdatedBy], T1.[E_GraphDataFileData" +
                    ".VersionDeletedBy], T1.[E_GraphDataFileData.VersionOwnerContactID], T1.[E_GraphD" +
                    "ataFileData.VersionOwnerCompanyID], T1.[E_GraphDataFileData.VersionUpdated])\r\n  " +
                    "  FROM (\r\n        SELECT \r\n            T.GraphDataFileDataID AS [E_GraphDataFile" +
                    "Data.GraphDataFileDataID], \r\n            T.GraphDataID AS [E_GraphDataFileData.G" +
                    "raphDataID], \r\n            T.FileDataID AS [E_GraphDataFileData.FileDataID], \r\n " +
                    "           T.Version AS [E_GraphDataFileData.Version], \r\n            T.VersionAn" +
                    "tecedentID AS [E_GraphDataFileData.VersionAntecedentID], \r\n            T.Version" +
                    "Certainty AS [E_GraphDataFileData.VersionCertainty], \r\n            T.VersionWork" +
                    "flowInstanceID AS [E_GraphDataFileData.VersionWorkflowInstanceID], \r\n           " +
                    " T.VersionUpdatedBy AS [E_GraphDataFileData.VersionUpdatedBy], \r\n            T.V" +
                    "ersionDeletedBy AS [E_GraphDataFileData.VersionDeletedBy], \r\n            T.Versi" +
                    "onOwnerContactID AS [E_GraphDataFileData.VersionOwnerContactID], \r\n            T" +
                    ".VersionOwnerCompanyID AS [E_GraphDataFileData.VersionOwnerCompanyID], \r\n       " +
                    "     T.VersionUpdated AS [E_GraphDataFileData.VersionUpdated], \r\n            Tru" +
                    "e AS _from0\r\n        FROM NKDC.GraphDataFileDatas AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_GraphDataLocation
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView316()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_GraphDataLocation", "\r\n    SELECT VALUE -- Constructing E_GraphDataLocation\r\n        [NKD.Module.Busin" +
                    "essObjects.Store.E_GraphDataLocation](T1.[E_GraphDataLocation.GraphDataLocationI" +
                    "D], T1.[E_GraphDataLocation.GraphDataID], T1.[E_GraphDataLocation.LocationID], T" +
                    "1.[E_GraphDataLocation.Version], T1.[E_GraphDataLocation.VersionAntecedentID], T" +
                    "1.[E_GraphDataLocation.VersionCertainty], T1.[E_GraphDataLocation.VersionWorkflo" +
                    "wInstanceID], T1.[E_GraphDataLocation.VersionUpdatedBy], T1.[E_GraphDataLocation" +
                    ".VersionDeletedBy], T1.[E_GraphDataLocation.VersionOwnerContactID], T1.[E_GraphD" +
                    "ataLocation.VersionOwnerCompanyID], T1.[E_GraphDataLocation.VersionUpdated])\r\n  " +
                    "  FROM (\r\n        SELECT \r\n            T.GraphDataLocationID AS [E_GraphDataLoca" +
                    "tion.GraphDataLocationID], \r\n            T.GraphDataID AS [E_GraphDataLocation.G" +
                    "raphDataID], \r\n            T.LocationID AS [E_GraphDataLocation.LocationID], \r\n " +
                    "           T.Version AS [E_GraphDataLocation.Version], \r\n            T.VersionAn" +
                    "tecedentID AS [E_GraphDataLocation.VersionAntecedentID], \r\n            T.Version" +
                    "Certainty AS [E_GraphDataLocation.VersionCertainty], \r\n            T.VersionWork" +
                    "flowInstanceID AS [E_GraphDataLocation.VersionWorkflowInstanceID], \r\n           " +
                    " T.VersionUpdatedBy AS [E_GraphDataLocation.VersionUpdatedBy], \r\n            T.V" +
                    "ersionDeletedBy AS [E_GraphDataLocation.VersionDeletedBy], \r\n            T.Versi" +
                    "onOwnerContactID AS [E_GraphDataLocation.VersionOwnerContactID], \r\n            T" +
                    ".VersionOwnerCompanyID AS [E_GraphDataLocation.VersionOwnerCompanyID], \r\n       " +
                    "     T.VersionUpdated AS [E_GraphDataLocation.VersionUpdated], \r\n            Tru" +
                    "e AS _from0\r\n        FROM NKDC.GraphDataLocations AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_GraphDataGroup
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView317()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2627);
            viewString.Append("\r\n    SELECT VALUE -- Constructing E_GraphDataGroup\r\n        [NKD.Module.Busines");
            viewString.Append("sObjects.Store.E_GraphDataGroup](T1.[E_GraphDataGroup.GraphDataGroupID], T1.[E_G");
            viewString.Append("raphDataGroup.GraphDataGroupName], T1.[E_GraphDataGroup.StartGraphDataID], T1.[E");
            viewString.Append("_GraphDataGroup.StandardGraphDataGroupName], T1.[E_GraphDataGroup.CurrencyID], T");
            viewString.Append("1.[E_GraphDataGroup.PricePerUnit], T1.[E_GraphDataGroup.PriceUnitID], T1.[E_Grap");
            viewString.Append("hDataGroup.Comment], T1.[E_GraphDataGroup.CreatedBy], T1.[E_GraphDataGroup.Creat");
            viewString.Append("ed], T1.[E_GraphDataGroup.Description], T1.[E_GraphDataGroup.Thumbnail], T1.[E_G");
            viewString.Append("raphDataGroup.OriginalFileDataID], T1.[E_GraphDataGroup.Version], T1.[E_GraphDat");
            viewString.Append("aGroup.VersionAntecedentID], T1.[E_GraphDataGroup.VersionCertainty], T1.[E_Graph");
            viewString.Append("DataGroup.VersionWorkflowInstanceID], T1.[E_GraphDataGroup.VersionUpdatedBy], T1");
            viewString.Append(".[E_GraphDataGroup.VersionDeletedBy], T1.[E_GraphDataGroup.VersionOwnerContactID");
            viewString.Append("], T1.[E_GraphDataGroup.VersionOwnerCompanyID], T1.[E_GraphDataGroup.VersionUpda");
            viewString.Append("ted])\r\n    FROM (\r\n        SELECT \r\n            T.GraphDataGroupID AS [E_GraphDa");
            viewString.Append("taGroup.GraphDataGroupID], \r\n            T.GraphDataGroupName AS [E_GraphDataGro");
            viewString.Append("up.GraphDataGroupName], \r\n            T.StartGraphDataID AS [E_GraphDataGroup.St");
            viewString.Append("artGraphDataID], \r\n            T.StandardGraphDataGroupName AS [E_GraphDataGroup");
            viewString.Append(".StandardGraphDataGroupName], \r\n            T.CurrencyID AS [E_GraphDataGroup.Cu");
            viewString.Append("rrencyID], \r\n            T.PricePerUnit AS [E_GraphDataGroup.PricePerUnit], \r\n  ");
            viewString.Append("          T.PriceUnitID AS [E_GraphDataGroup.PriceUnitID], \r\n            T.Comme");
            viewString.Append("nt AS [E_GraphDataGroup.Comment], \r\n            T.CreatedBy AS [E_GraphDataGroup");
            viewString.Append(".CreatedBy], \r\n            T.Created AS [E_GraphDataGroup.Created], \r\n          ");
            viewString.Append("  T.Description AS [E_GraphDataGroup.Description], \r\n            T.Thumbnail AS ");
            viewString.Append("[E_GraphDataGroup.Thumbnail], \r\n            T.OriginalFileDataID AS [E_GraphData");
            viewString.Append("Group.OriginalFileDataID], \r\n            T.Version AS [E_GraphDataGroup.Version]");
            viewString.Append(", \r\n            T.VersionAntecedentID AS [E_GraphDataGroup.VersionAntecedentID],");
            viewString.Append(" \r\n            T.VersionCertainty AS [E_GraphDataGroup.VersionCertainty], \r\n    ");
            viewString.Append("        T.VersionWorkflowInstanceID AS [E_GraphDataGroup.VersionWorkflowInstance");
            viewString.Append("ID], \r\n            T.VersionUpdatedBy AS [E_GraphDataGroup.VersionUpdatedBy], \r\n");
            viewString.Append("            T.VersionDeletedBy AS [E_GraphDataGroup.VersionDeletedBy], \r\n       ");
            viewString.Append("     T.VersionOwnerContactID AS [E_GraphDataGroup.VersionOwnerContactID], \r\n    ");
            viewString.Append("        T.VersionOwnerCompanyID AS [E_GraphDataGroup.VersionOwnerCompanyID], \r\n ");
            viewString.Append("           T.VersionUpdated AS [E_GraphDataGroup.VersionUpdated], \r\n            ");
            viewString.Append("True AS _from0\r\n        FROM NKDC.GraphDataGroups AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_GraphDataGroup", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryAlterationJointType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView318()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3006);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryAlterationJointType\r\n        [NKD");
            viewString.Append(".Module.BusinessObjects.Store.X_DictionaryAlterationJointType](T1.[X_DictionaryA");
            viewString.Append("lterationJointType.AlterationJointTypeID], T1.[X_DictionaryAlterationJointType.S");
            viewString.Append("tandardAlterationJointTypeName], T1.[X_DictionaryAlterationJointType.CoalAlterat");
            viewString.Append("ionJointTypeName], T1.[X_DictionaryAlterationJointType.GoldAlterationJointTypeNa");
            viewString.Append("me], T1.[X_DictionaryAlterationJointType.CustomAlterationJointTypeName], T1.[X_D");
            viewString.Append("ictionaryAlterationJointType.Description], T1.[X_DictionaryAlterationJointType.F");
            viewString.Append("ullDescription], T1.[X_DictionaryAlterationJointType.Thumbnail], T1.[X_Dictionar");
            viewString.Append("yAlterationJointType.OriginalFileDataID], T1.[X_DictionaryAlterationJointType.Ve");
            viewString.Append("rsion], T1.[X_DictionaryAlterationJointType.VersionAntecedentID], T1.[X_Dictiona");
            viewString.Append("ryAlterationJointType.VersionCertainty], T1.[X_DictionaryAlterationJointType.Ver");
            viewString.Append("sionWorkflowInstanceID], T1.[X_DictionaryAlterationJointType.VersionUpdatedBy], ");
            viewString.Append("T1.[X_DictionaryAlterationJointType.VersionDeletedBy], T1.[X_DictionaryAlteratio");
            viewString.Append("nJointType.VersionOwnerContactID], T1.[X_DictionaryAlterationJointType.VersionOw");
            viewString.Append("nerCompanyID], T1.[X_DictionaryAlterationJointType.VersionUpdated])\r\n    FROM (\r");
            viewString.Append("\n        SELECT \r\n            T.AlterationJointTypeID AS [X_DictionaryAlteration");
            viewString.Append("JointType.AlterationJointTypeID], \r\n            T.StandardAlterationJointTypeNam");
            viewString.Append("e AS [X_DictionaryAlterationJointType.StandardAlterationJointTypeName], \r\n      ");
            viewString.Append("      T.CoalAlterationJointTypeName AS [X_DictionaryAlterationJointType.CoalAlte");
            viewString.Append("rationJointTypeName], \r\n            T.GoldAlterationJointTypeName AS [X_Dictiona");
            viewString.Append("ryAlterationJointType.GoldAlterationJointTypeName], \r\n            T.CustomAltera");
            viewString.Append("tionJointTypeName AS [X_DictionaryAlterationJointType.CustomAlterationJointTypeN");
            viewString.Append("ame], \r\n            T.Description AS [X_DictionaryAlterationJointType.Descriptio");
            viewString.Append("n], \r\n            T.FullDescription AS [X_DictionaryAlterationJointType.FullDesc");
            viewString.Append("ription], \r\n            T.Thumbnail AS [X_DictionaryAlterationJointType.Thumbnai");
            viewString.Append("l], \r\n            T.OriginalFileDataID AS [X_DictionaryAlterationJointType.Origi");
            viewString.Append("nalFileDataID], \r\n            T.Version AS [X_DictionaryAlterationJointType.Vers");
            viewString.Append("ion], \r\n            T.VersionAntecedentID AS [X_DictionaryAlterationJointType.Ve");
            viewString.Append("rsionAntecedentID], \r\n            T.VersionCertainty AS [X_DictionaryAlterationJ");
            viewString.Append("ointType.VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [X_Dict");
            viewString.Append("ionaryAlterationJointType.VersionWorkflowInstanceID], \r\n            T.VersionUpd");
            viewString.Append("atedBy AS [X_DictionaryAlterationJointType.VersionUpdatedBy], \r\n            T.Ve");
            viewString.Append("rsionDeletedBy AS [X_DictionaryAlterationJointType.VersionDeletedBy], \r\n        ");
            viewString.Append("    T.VersionOwnerContactID AS [X_DictionaryAlterationJointType.VersionOwnerCont");
            viewString.Append("actID], \r\n            T.VersionOwnerCompanyID AS [X_DictionaryAlterationJointTyp");
            viewString.Append("e.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [X_DictionaryAlterat");
            viewString.Append("ionJointType.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.Di");
            viewString.Append("ctionaryAlterationJointTypes AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryAlterationJointType", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryBedDevelopment
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView319()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2736);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryBedDevelopment\r\n        [NKD.Modu");
            viewString.Append("le.BusinessObjects.Store.X_DictionaryBedDevelopment](T1.[X_DictionaryBedDevelopm");
            viewString.Append("ent.BedDevelopmentID], T1.[X_DictionaryBedDevelopment.StandardBedDevelopmentName");
            viewString.Append("], T1.[X_DictionaryBedDevelopment.CoalBedDevelopmentName], T1.[X_DictionaryBedDe");
            viewString.Append("velopment.GoldBedDevelopmentName], T1.[X_DictionaryBedDevelopment.CustomBedDevel");
            viewString.Append("opmentName], T1.[X_DictionaryBedDevelopment.Description], T1.[X_DictionaryBedDev");
            viewString.Append("elopment.FullDescription], T1.[X_DictionaryBedDevelopment.Thumbnail], T1.[X_Dict");
            viewString.Append("ionaryBedDevelopment.OriginalFileDataID], T1.[X_DictionaryBedDevelopment.Version");
            viewString.Append("], T1.[X_DictionaryBedDevelopment.VersionAntecedentID], T1.[X_DictionaryBedDevel");
            viewString.Append("opment.VersionCertainty], T1.[X_DictionaryBedDevelopment.VersionWorkflowInstance");
            viewString.Append("ID], T1.[X_DictionaryBedDevelopment.VersionUpdatedBy], T1.[X_DictionaryBedDevelo");
            viewString.Append("pment.VersionDeletedBy], T1.[X_DictionaryBedDevelopment.VersionOwnerContactID], ");
            viewString.Append("T1.[X_DictionaryBedDevelopment.VersionOwnerCompanyID], T1.[X_DictionaryBedDevelo");
            viewString.Append("pment.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.BedDevelopmen");
            viewString.Append("tID AS [X_DictionaryBedDevelopment.BedDevelopmentID], \r\n            T.StandardBe");
            viewString.Append("dDevelopmentName AS [X_DictionaryBedDevelopment.StandardBedDevelopmentName], \r\n ");
            viewString.Append("           T.CoalBedDevelopmentName AS [X_DictionaryBedDevelopment.CoalBedDevelo");
            viewString.Append("pmentName], \r\n            T.GoldBedDevelopmentName AS [X_DictionaryBedDevelopmen");
            viewString.Append("t.GoldBedDevelopmentName], \r\n            T.CustomBedDevelopmentName AS [X_Dictio");
            viewString.Append("naryBedDevelopment.CustomBedDevelopmentName], \r\n            T.Description AS [X_");
            viewString.Append("DictionaryBedDevelopment.Description], \r\n            T.FullDescription AS [X_Dic");
            viewString.Append("tionaryBedDevelopment.FullDescription], \r\n            T.Thumbnail AS [X_Dictiona");
            viewString.Append("ryBedDevelopment.Thumbnail], \r\n            T.OriginalFileDataID AS [X_Dictionary");
            viewString.Append("BedDevelopment.OriginalFileDataID], \r\n            T.Version AS [X_DictionaryBedD");
            viewString.Append("evelopment.Version], \r\n            T.VersionAntecedentID AS [X_DictionaryBedDeve");
            viewString.Append("lopment.VersionAntecedentID], \r\n            T.VersionCertainty AS [X_DictionaryB");
            viewString.Append("edDevelopment.VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [X");
            viewString.Append("_DictionaryBedDevelopment.VersionWorkflowInstanceID], \r\n            T.VersionUpd");
            viewString.Append("atedBy AS [X_DictionaryBedDevelopment.VersionUpdatedBy], \r\n            T.Version");
            viewString.Append("DeletedBy AS [X_DictionaryBedDevelopment.VersionDeletedBy], \r\n            T.Vers");
            viewString.Append("ionOwnerContactID AS [X_DictionaryBedDevelopment.VersionOwnerContactID], \r\n     ");
            viewString.Append("       T.VersionOwnerCompanyID AS [X_DictionaryBedDevelopment.VersionOwnerCompan");
            viewString.Append("yID], \r\n            T.VersionUpdated AS [X_DictionaryBedDevelopment.VersionUpdat");
            viewString.Append("ed], \r\n            True AS _from0\r\n        FROM NKDC.DictionaryBedDevelopments A");
            viewString.Append("S T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryBedDevelopment", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryFriabilityType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView320()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2736);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryFriabilityType\r\n        [NKD.Modu");
            viewString.Append("le.BusinessObjects.Store.X_DictionaryFriabilityType](T1.[X_DictionaryFriabilityT");
            viewString.Append("ype.FriabilityTypeID], T1.[X_DictionaryFriabilityType.StandardFriabilityTypeName");
            viewString.Append("], T1.[X_DictionaryFriabilityType.CoalFriabilityTypeName], T1.[X_DictionaryFriab");
            viewString.Append("ilityType.GoldFriabilityTypeName], T1.[X_DictionaryFriabilityType.CustomFriabili");
            viewString.Append("tyTypeName], T1.[X_DictionaryFriabilityType.Description], T1.[X_DictionaryFriabi");
            viewString.Append("lityType.FullDescription], T1.[X_DictionaryFriabilityType.Thumbnail], T1.[X_Dict");
            viewString.Append("ionaryFriabilityType.OriginalFileDataID], T1.[X_DictionaryFriabilityType.Version");
            viewString.Append("], T1.[X_DictionaryFriabilityType.VersionAntecedentID], T1.[X_DictionaryFriabili");
            viewString.Append("tyType.VersionCertainty], T1.[X_DictionaryFriabilityType.VersionWorkflowInstance");
            viewString.Append("ID], T1.[X_DictionaryFriabilityType.VersionUpdatedBy], T1.[X_DictionaryFriabilit");
            viewString.Append("yType.VersionDeletedBy], T1.[X_DictionaryFriabilityType.VersionOwnerContactID], ");
            viewString.Append("T1.[X_DictionaryFriabilityType.VersionOwnerCompanyID], T1.[X_DictionaryFriabilit");
            viewString.Append("yType.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.FriabilityTyp");
            viewString.Append("eID AS [X_DictionaryFriabilityType.FriabilityTypeID], \r\n            T.StandardFr");
            viewString.Append("iabilityTypeName AS [X_DictionaryFriabilityType.StandardFriabilityTypeName], \r\n ");
            viewString.Append("           T.CoalFriabilityTypeName AS [X_DictionaryFriabilityType.CoalFriabilit");
            viewString.Append("yTypeName], \r\n            T.GoldFriabilityTypeName AS [X_DictionaryFriabilityTyp");
            viewString.Append("e.GoldFriabilityTypeName], \r\n            T.CustomFriabilityTypeName AS [X_Dictio");
            viewString.Append("naryFriabilityType.CustomFriabilityTypeName], \r\n            T.Description AS [X_");
            viewString.Append("DictionaryFriabilityType.Description], \r\n            T.FullDescription AS [X_Dic");
            viewString.Append("tionaryFriabilityType.FullDescription], \r\n            T.Thumbnail AS [X_Dictiona");
            viewString.Append("ryFriabilityType.Thumbnail], \r\n            T.OriginalFileDataID AS [X_Dictionary");
            viewString.Append("FriabilityType.OriginalFileDataID], \r\n            T.Version AS [X_DictionaryFria");
            viewString.Append("bilityType.Version], \r\n            T.VersionAntecedentID AS [X_DictionaryFriabil");
            viewString.Append("ityType.VersionAntecedentID], \r\n            T.VersionCertainty AS [X_DictionaryF");
            viewString.Append("riabilityType.VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [X");
            viewString.Append("_DictionaryFriabilityType.VersionWorkflowInstanceID], \r\n            T.VersionUpd");
            viewString.Append("atedBy AS [X_DictionaryFriabilityType.VersionUpdatedBy], \r\n            T.Version");
            viewString.Append("DeletedBy AS [X_DictionaryFriabilityType.VersionDeletedBy], \r\n            T.Vers");
            viewString.Append("ionOwnerContactID AS [X_DictionaryFriabilityType.VersionOwnerContactID], \r\n     ");
            viewString.Append("       T.VersionOwnerCompanyID AS [X_DictionaryFriabilityType.VersionOwnerCompan");
            viewString.Append("yID], \r\n            T.VersionUpdated AS [X_DictionaryFriabilityType.VersionUpdat");
            viewString.Append("ed], \r\n            True AS _from0\r\n        FROM NKDC.DictionaryFriabilityTypes A");
            viewString.Append("S T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryFriabilityType", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_DictionaryStructureSet
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView321()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2628);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_DictionaryStructureSet\r\n        [NKD.Module");
            viewString.Append(".BusinessObjects.Store.X_DictionaryStructureSet](T1.[X_DictionaryStructureSet.St");
            viewString.Append("ructureSetID], T1.[X_DictionaryStructureSet.StandardStructureSetName], T1.[X_Dic");
            viewString.Append("tionaryStructureSet.CoalStructureSetName], T1.[X_DictionaryStructureSet.GoldStru");
            viewString.Append("ctureSetName], T1.[X_DictionaryStructureSet.CustomStructureSetName], T1.[X_Dicti");
            viewString.Append("onaryStructureSet.Description], T1.[X_DictionaryStructureSet.FullDescription], T");
            viewString.Append("1.[X_DictionaryStructureSet.Thumbnail], T1.[X_DictionaryStructureSet.OriginalFil");
            viewString.Append("eDataID], T1.[X_DictionaryStructureSet.Version], T1.[X_DictionaryStructureSet.Ve");
            viewString.Append("rsionAntecedentID], T1.[X_DictionaryStructureSet.VersionCertainty], T1.[X_Dictio");
            viewString.Append("naryStructureSet.VersionWorkflowInstanceID], T1.[X_DictionaryStructureSet.Versio");
            viewString.Append("nUpdatedBy], T1.[X_DictionaryStructureSet.VersionDeletedBy], T1.[X_DictionaryStr");
            viewString.Append("uctureSet.VersionOwnerContactID], T1.[X_DictionaryStructureSet.VersionOwnerCompa");
            viewString.Append("nyID], T1.[X_DictionaryStructureSet.VersionUpdated])\r\n    FROM (\r\n        SELECT");
            viewString.Append(" \r\n            T.StructureSetID AS [X_DictionaryStructureSet.StructureSetID], \r\n");
            viewString.Append("            T.StandardStructureSetName AS [X_DictionaryStructureSet.StandardStru");
            viewString.Append("ctureSetName], \r\n            T.CoalStructureSetName AS [X_DictionaryStructureSet");
            viewString.Append(".CoalStructureSetName], \r\n            T.GoldStructureSetName AS [X_DictionaryStr");
            viewString.Append("uctureSet.GoldStructureSetName], \r\n            T.CustomStructureSetName AS [X_Di");
            viewString.Append("ctionaryStructureSet.CustomStructureSetName], \r\n            T.Description AS [X_");
            viewString.Append("DictionaryStructureSet.Description], \r\n            T.FullDescription AS [X_Dicti");
            viewString.Append("onaryStructureSet.FullDescription], \r\n            T.Thumbnail AS [X_DictionarySt");
            viewString.Append("ructureSet.Thumbnail], \r\n            T.OriginalFileDataID AS [X_DictionaryStruct");
            viewString.Append("ureSet.OriginalFileDataID], \r\n            T.Version AS [X_DictionaryStructureSet");
            viewString.Append(".Version], \r\n            T.VersionAntecedentID AS [X_DictionaryStructureSet.Vers");
            viewString.Append("ionAntecedentID], \r\n            T.VersionCertainty AS [X_DictionaryStructureSet.");
            viewString.Append("VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [X_DictionaryStr");
            viewString.Append("uctureSet.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_Dic");
            viewString.Append("tionaryStructureSet.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_Di");
            viewString.Append("ctionaryStructureSet.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS");
            viewString.Append(" [X_DictionaryStructureSet.VersionOwnerContactID], \r\n            T.VersionOwnerC");
            viewString.Append("ompanyID AS [X_DictionaryStructureSet.VersionOwnerCompanyID], \r\n            T.Ve");
            viewString.Append("rsionUpdated AS [X_DictionaryStructureSet.VersionUpdated], \r\n            True AS");
            viewString.Append(" _from0\r\n        FROM NKDC.DictionaryStructureSets AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_DictionaryStructureSet", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_Form
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView322()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_Form", "\r\n    SELECT VALUE -- Constructing E_Form\r\n        [NKD.Module.BusinessObjects.St" +
                    "ore.E_Form](T1.[E_Form.FormID], T1.[E_Form.FormName], T1.[E_Form.FormStructure]," +
                    " T1.[E_Form.FormStructureChecksum], T1.[E_Form.FormActions], T1.[E_Form.FormType" +
                    "], T1.[E_Form.TemplateMulti], T1.[E_Form.TemplateSingle], T1.[E_Form.Version], T" +
                    "1.[E_Form.VersionAntecedentID], T1.[E_Form.VersionCertainty], T1.[E_Form.Version" +
                    "WorkflowInstanceID], T1.[E_Form.VersionUpdatedBy], T1.[E_Form.VersionDeletedBy]," +
                    " T1.[E_Form.VersionOwnerContactID], T1.[E_Form.VersionOwnerCompanyID], T1.[E_For" +
                    "m.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.FormID AS [E_Form" +
                    ".FormID], \r\n            T.FormName AS [E_Form.FormName], \r\n            T.FormStr" +
                    "ucture AS [E_Form.FormStructure], \r\n            T.FormStructureChecksum AS [E_Fo" +
                    "rm.FormStructureChecksum], \r\n            T.FormActions AS [E_Form.FormActions], " +
                    "\r\n            T.FormType AS [E_Form.FormType], \r\n            T.TemplateMulti AS " +
                    "[E_Form.TemplateMulti], \r\n            T.TemplateSingle AS [E_Form.TemplateSingle" +
                    "], \r\n            T.Version AS [E_Form.Version], \r\n            T.VersionAnteceden" +
                    "tID AS [E_Form.VersionAntecedentID], \r\n            T.VersionCertainty AS [E_Form" +
                    ".VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [E_Form.Version" +
                    "WorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [E_Form.VersionUpdatedB" +
                    "y], \r\n            T.VersionDeletedBy AS [E_Form.VersionDeletedBy], \r\n           " +
                    " T.VersionOwnerContactID AS [E_Form.VersionOwnerContactID], \r\n            T.Vers" +
                    "ionOwnerCompanyID AS [E_Form.VersionOwnerCompanyID], \r\n            T.VersionUpda" +
                    "ted AS [E_Form.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC." +
                    "Forms AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_FormData
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView323()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_FormData", "\r\n    SELECT VALUE -- Constructing E_FormData\r\n        [NKD.Module.BusinessObject" +
                    "s.Store.E_FormData](T1.[E_FormData.FormDataID], T1.[E_FormData.FormID], T1.[E_Fo" +
                    "rmData.TableType], T1.[E_FormData.ReferenceID], T1.[E_FormData.FormOrigin], T1.[" +
                    "E_FormData.FormDestination], T1.[E_FormData.FormContent], T1.[E_FormData.Version" +
                    "], T1.[E_FormData.VersionAntecedentID], T1.[E_FormData.VersionCertainty], T1.[E_" +
                    "FormData.VersionWorkflowInstanceID], T1.[E_FormData.VersionUpdatedBy], T1.[E_For" +
                    "mData.VersionDeletedBy], T1.[E_FormData.VersionOwnerContactID], T1.[E_FormData.V" +
                    "ersionOwnerCompanyID], T1.[E_FormData.VersionUpdated])\r\n    FROM (\r\n        SELE" +
                    "CT \r\n            T.FormDataID AS [E_FormData.FormDataID], \r\n            T.FormID" +
                    " AS [E_FormData.FormID], \r\n            T.TableType AS [E_FormData.TableType], \r\n" +
                    "            T.ReferenceID AS [E_FormData.ReferenceID], \r\n            T.FormOrigi" +
                    "n AS [E_FormData.FormOrigin], \r\n            T.FormDestination AS [E_FormData.For" +
                    "mDestination], \r\n            T.FormContent AS [E_FormData.FormContent], \r\n      " +
                    "      T.Version AS [E_FormData.Version], \r\n            T.VersionAntecedentID AS " +
                    "[E_FormData.VersionAntecedentID], \r\n            T.VersionCertainty AS [E_FormDat" +
                    "a.VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [E_FormData.Ve" +
                    "rsionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [E_FormData.Versio" +
                    "nUpdatedBy], \r\n            T.VersionDeletedBy AS [E_FormData.VersionDeletedBy], " +
                    "\r\n            T.VersionOwnerContactID AS [E_FormData.VersionOwnerContactID], \r\n " +
                    "           T.VersionOwnerCompanyID AS [E_FormData.VersionOwnerCompanyID], \r\n    " +
                    "        T.VersionUpdated AS [E_FormData.VersionUpdated], \r\n            True AS _" +
                    "from0\r\n        FROM NKDC.FormDatas AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_GraphDataHistory
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView324()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_GraphDataHistory", "\r\n    SELECT VALUE -- Constructing E_GraphDataHistory\r\n        [NKD.Module.Busine" +
                    "ssObjects.Store.E_GraphDataHistory](T1.[E_GraphDataHistory.GraphDataHistoryID], " +
                    "T1.[E_GraphDataHistory.Session], T1.[E_GraphDataHistory.GraphDataID], T1.[E_Grap" +
                    "hDataHistory.Opened], T1.[E_GraphDataHistory.ContactID], T1.[E_GraphDataHistory." +
                    "Version], T1.[E_GraphDataHistory.VersionAntecedentID], T1.[E_GraphDataHistory.Ve" +
                    "rsionCertainty], T1.[E_GraphDataHistory.VersionWorkflowInstanceID], T1.[E_GraphD" +
                    "ataHistory.VersionUpdatedBy], T1.[E_GraphDataHistory.VersionDeletedBy], T1.[E_Gr" +
                    "aphDataHistory.VersionOwnerContactID], T1.[E_GraphDataHistory.VersionOwnerCompan" +
                    "yID], T1.[E_GraphDataHistory.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n    " +
                    "        T.GraphDataHistoryID AS [E_GraphDataHistory.GraphDataHistoryID], \r\n     " +
                    "       T.Session AS [E_GraphDataHistory.Session], \r\n            T.GraphDataID AS" +
                    " [E_GraphDataHistory.GraphDataID], \r\n            T.Opened AS [E_GraphDataHistory" +
                    ".Opened], \r\n            T.ContactID AS [E_GraphDataHistory.ContactID], \r\n       " +
                    "     T.Version AS [E_GraphDataHistory.Version], \r\n            T.VersionAnteceden" +
                    "tID AS [E_GraphDataHistory.VersionAntecedentID], \r\n            T.VersionCertaint" +
                    "y AS [E_GraphDataHistory.VersionCertainty], \r\n            T.VersionWorkflowInsta" +
                    "nceID AS [E_GraphDataHistory.VersionWorkflowInstanceID], \r\n            T.Version" +
                    "UpdatedBy AS [E_GraphDataHistory.VersionUpdatedBy], \r\n            T.VersionDelet" +
                    "edBy AS [E_GraphDataHistory.VersionDeletedBy], \r\n            T.VersionOwnerConta" +
                    "ctID AS [E_GraphDataHistory.VersionOwnerContactID], \r\n            T.VersionOwner" +
                    "CompanyID AS [E_GraphDataHistory.VersionOwnerCompanyID], \r\n            T.Version" +
                    "Updated AS [E_GraphDataHistory.VersionUpdated], \r\n            True AS _from0\r\n  " +
                    "      FROM NKDC.GraphDataHistories AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_Condition
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView325()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_Condition", "\r\n    SELECT VALUE -- Constructing E_Condition\r\n        [NKD.Module.BusinessObjec" +
                    "ts.Store.E_Condition](T1.[E_Condition.ConditionID], T1.[E_Condition.OverrideProj" +
                    "ectDataWithJsonCustomVars], T1.[E_Condition.JSON], T1.[E_Condition.Condition], T" +
                    "1.[E_Condition.Version], T1.[E_Condition.VersionAntecedentID], T1.[E_Condition.V" +
                    "ersionCertainty], T1.[E_Condition.VersionWorkflowInstanceID], T1.[E_Condition.Ve" +
                    "rsionUpdatedBy], T1.[E_Condition.VersionDeletedBy], T1.[E_Condition.VersionOwner" +
                    "ContactID], T1.[E_Condition.VersionOwnerCompanyID], T1.[E_Condition.VersionUpdat" +
                    "ed])\r\n    FROM (\r\n        SELECT \r\n            T.ConditionID AS [E_Condition.Con" +
                    "ditionID], \r\n            T.OverrideProjectDataWithJsonCustomVars AS [E_Condition" +
                    ".OverrideProjectDataWithJsonCustomVars], \r\n            T.JSON AS [E_Condition.JS" +
                    "ON], \r\n            T.Condition AS [E_Condition.Condition], \r\n            T.Versi" +
                    "on AS [E_Condition.Version], \r\n            T.VersionAntecedentID AS [E_Condition" +
                    ".VersionAntecedentID], \r\n            T.VersionCertainty AS [E_Condition.VersionC" +
                    "ertainty], \r\n            T.VersionWorkflowInstanceID AS [E_Condition.VersionWork" +
                    "flowInstanceID], \r\n            T.VersionUpdatedBy AS [E_Condition.VersionUpdated" +
                    "By], \r\n            T.VersionDeletedBy AS [E_Condition.VersionDeletedBy], \r\n     " +
                    "       T.VersionOwnerContactID AS [E_Condition.VersionOwnerContactID], \r\n       " +
                    "     T.VersionOwnerCompanyID AS [E_Condition.VersionOwnerCompanyID], \r\n         " +
                    "   T.VersionUpdated AS [E_Condition.VersionUpdated], \r\n            True AS _from" +
                    "0\r\n        FROM NKDC.Precondition AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_DictionaryTriggerType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView326()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2301);
            viewString.Append("\r\n    SELECT VALUE -- Constructing E_DictionaryTriggerType\r\n        [NKD.Module.");
            viewString.Append("BusinessObjects.Store.E_DictionaryTriggerType](T1.[E_DictionaryTriggerType.Trigg");
            viewString.Append("erTypeID], T1.[E_DictionaryTriggerType.StandardTriggerTypeName], T1.[E_Dictionar");
            viewString.Append("yTriggerType.CustomTriggerTypeName], T1.[E_DictionaryTriggerType.Description], T");
            viewString.Append("1.[E_DictionaryTriggerType.FullDescription], T1.[E_DictionaryTriggerType.Thumbna");
            viewString.Append("il], T1.[E_DictionaryTriggerType.OriginalFileDataID], T1.[E_DictionaryTriggerTyp");
            viewString.Append("e.Version], T1.[E_DictionaryTriggerType.VersionAntecedentID], T1.[E_DictionaryTr");
            viewString.Append("iggerType.VersionCertainty], T1.[E_DictionaryTriggerType.VersionWorkflowInstance");
            viewString.Append("ID], T1.[E_DictionaryTriggerType.VersionUpdatedBy], T1.[E_DictionaryTriggerType.");
            viewString.Append("VersionDeletedBy], T1.[E_DictionaryTriggerType.VersionOwnerContactID], T1.[E_Dic");
            viewString.Append("tionaryTriggerType.VersionOwnerCompanyID], T1.[E_DictionaryTriggerType.VersionUp");
            viewString.Append("dated])\r\n    FROM (\r\n        SELECT \r\n            T.TriggerTypeID AS [E_Dictiona");
            viewString.Append("ryTriggerType.TriggerTypeID], \r\n            T.StandardTriggerTypeName AS [E_Dict");
            viewString.Append("ionaryTriggerType.StandardTriggerTypeName], \r\n            T.CustomTriggerTypeNam");
            viewString.Append("e AS [E_DictionaryTriggerType.CustomTriggerTypeName], \r\n            T.Descriptio");
            viewString.Append("n AS [E_DictionaryTriggerType.Description], \r\n            T.FullDescription AS [");
            viewString.Append("E_DictionaryTriggerType.FullDescription], \r\n            T.Thumbnail AS [E_Dictio");
            viewString.Append("naryTriggerType.Thumbnail], \r\n            T.OriginalFileDataID AS [E_DictionaryT");
            viewString.Append("riggerType.OriginalFileDataID], \r\n            T.Version AS [E_DictionaryTriggerT");
            viewString.Append("ype.Version], \r\n            T.VersionAntecedentID AS [E_DictionaryTriggerType.Ve");
            viewString.Append("rsionAntecedentID], \r\n            T.VersionCertainty AS [E_DictionaryTriggerType");
            viewString.Append(".VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [E_DictionaryTr");
            viewString.Append("iggerType.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [E_Dic");
            viewString.Append("tionaryTriggerType.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [E_Dic");
            viewString.Append("tionaryTriggerType.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [");
            viewString.Append("E_DictionaryTriggerType.VersionOwnerContactID], \r\n            T.VersionOwnerComp");
            viewString.Append("anyID AS [E_DictionaryTriggerType.VersionOwnerCompanyID], \r\n            T.Versio");
            viewString.Append("nUpdated AS [E_DictionaryTriggerType.VersionUpdated], \r\n            True AS _fro");
            viewString.Append("m0\r\n        FROM NKDC.DictionaryTriggerType AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_DictionaryTriggerType", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_GraphDataRelationCondition
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView327()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2304);
            viewString.Append("\r\n    SELECT VALUE -- Constructing E_GraphDataRelationCondition\r\n        [NKD.Mo");
            viewString.Append("dule.BusinessObjects.Store.E_GraphDataRelationCondition](T1.[E_GraphDataRelation");
            viewString.Append("Condition.GraphDataRelationConditionID], T1.[E_GraphDataRelationCondition.GraphD");
            viewString.Append("ataRelationID], T1.[E_GraphDataRelationCondition.ConditionID], T1.[E_GraphDataRe");
            viewString.Append("lationCondition.Grouping], T1.[E_GraphDataRelationCondition.Sequence], T1.[E_Gra");
            viewString.Append("phDataRelationCondition.JoinedBy], T1.[E_GraphDataRelationCondition.Version], T1");
            viewString.Append(".[E_GraphDataRelationCondition.VersionAntecedentID], T1.[E_GraphDataRelationCond");
            viewString.Append("ition.VersionCertainty], T1.[E_GraphDataRelationCondition.VersionWorkflowInstanc");
            viewString.Append("eID], T1.[E_GraphDataRelationCondition.VersionUpdatedBy], T1.[E_GraphDataRelatio");
            viewString.Append("nCondition.VersionDeletedBy], T1.[E_GraphDataRelationCondition.VersionOwnerConta");
            viewString.Append("ctID], T1.[E_GraphDataRelationCondition.VersionOwnerCompanyID], T1.[E_GraphDataR");
            viewString.Append("elationCondition.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.Gr");
            viewString.Append("aphDataRelationConditionID AS [E_GraphDataRelationCondition.GraphDataRelationCon");
            viewString.Append("ditionID], \r\n            T.GraphDataRelationID AS [E_GraphDataRelationCondition.");
            viewString.Append("GraphDataRelationID], \r\n            T.ConditionID AS [E_GraphDataRelationConditi");
            viewString.Append("on.ConditionID], \r\n            T.Grouping AS [E_GraphDataRelationCondition.Group");
            viewString.Append("ing], \r\n            T.Sequence AS [E_GraphDataRelationCondition.Sequence], \r\n   ");
            viewString.Append("         T.JoinedBy AS [E_GraphDataRelationCondition.JoinedBy], \r\n            T.");
            viewString.Append("Version AS [E_GraphDataRelationCondition.Version], \r\n            T.VersionAntece");
            viewString.Append("dentID AS [E_GraphDataRelationCondition.VersionAntecedentID], \r\n            T.Ve");
            viewString.Append("rsionCertainty AS [E_GraphDataRelationCondition.VersionCertainty], \r\n           ");
            viewString.Append(" T.VersionWorkflowInstanceID AS [E_GraphDataRelationCondition.VersionWorkflowIns");
            viewString.Append("tanceID], \r\n            T.VersionUpdatedBy AS [E_GraphDataRelationCondition.Vers");
            viewString.Append("ionUpdatedBy], \r\n            T.VersionDeletedBy AS [E_GraphDataRelationCondition");
            viewString.Append(".VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [E_GraphDataRelatio");
            viewString.Append("nCondition.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [E_G");
            viewString.Append("raphDataRelationCondition.VersionOwnerCompanyID], \r\n            T.VersionUpdated");
            viewString.Append(" AS [E_GraphDataRelationCondition.VersionUpdated], \r\n            True AS _from0\r");
            viewString.Append("\n        FROM NKDC.GraphDataRelationConditions AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_GraphDataRelationCondition", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_ProjectData
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView328()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_ProjectData", "\r\n    SELECT VALUE -- Constructing E_ProjectData\r\n        [NKD.Module.BusinessObj" +
                    "ects.Store.E_ProjectData](T1.[E_ProjectData.ProjectDataID], T1.[E_ProjectData.Pr" +
                    "ojectDataTemplateID], T1.[E_ProjectData.ProjectID], T1.[E_ProjectData.ProjectPla" +
                    "nTaskResponseID], T1.[E_ProjectData.Value], T1.[E_ProjectData.NumericValue], T1." +
                    "[E_ProjectData.TextValue], T1.[E_ProjectData.Version], T1.[E_ProjectData.Version" +
                    "AntecedentID], T1.[E_ProjectData.VersionCertainty], T1.[E_ProjectData.VersionWor" +
                    "kflowInstanceID], T1.[E_ProjectData.VersionUpdatedBy], T1.[E_ProjectData.Version" +
                    "DeletedBy], T1.[E_ProjectData.VersionOwnerContactID], T1.[E_ProjectData.VersionO" +
                    "wnerCompanyID], T1.[E_ProjectData.VersionUpdated])\r\n    FROM (\r\n        SELECT \r" +
                    "\n            T.ProjectDataID AS [E_ProjectData.ProjectDataID], \r\n            T.P" +
                    "rojectDataTemplateID AS [E_ProjectData.ProjectDataTemplateID], \r\n            T.P" +
                    "rojectID AS [E_ProjectData.ProjectID], \r\n            T.ProjectPlanTaskResponseID" +
                    " AS [E_ProjectData.ProjectPlanTaskResponseID], \r\n            T.[Value] AS [E_Pro" +
                    "jectData.Value], \r\n            T.NumericValue AS [E_ProjectData.NumericValue], \r" +
                    "\n            T.TextValue AS [E_ProjectData.TextValue], \r\n            T.Version A" +
                    "S [E_ProjectData.Version], \r\n            T.VersionAntecedentID AS [E_ProjectData" +
                    ".VersionAntecedentID], \r\n            T.VersionCertainty AS [E_ProjectData.Versio" +
                    "nCertainty], \r\n            T.VersionWorkflowInstanceID AS [E_ProjectData.Version" +
                    "WorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [E_ProjectData.VersionU" +
                    "pdatedBy], \r\n            T.VersionDeletedBy AS [E_ProjectData.VersionDeletedBy]," +
                    " \r\n            T.VersionOwnerContactID AS [E_ProjectData.VersionOwnerContactID]," +
                    " \r\n            T.VersionOwnerCompanyID AS [E_ProjectData.VersionOwnerCompanyID]," +
                    " \r\n            T.VersionUpdated AS [E_ProjectData.VersionUpdated], \r\n           " +
                    " True AS _from0\r\n        FROM NKDC.ProjectDatas AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_ProjectDataTemplate
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView329()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3336);
            viewString.Append("\r\n    SELECT VALUE -- Constructing E_ProjectDataTemplate\r\n        [NKD.Module.Bu");
            viewString.Append("sinessObjects.Store.E_ProjectDataTemplate](T1.[E_ProjectDataTemplate.ProjectData");
            viewString.Append("TemplateID], T1.[E_ProjectDataTemplate.CommonName], T1.[E_ProjectDataTemplate.Un");
            viewString.Append("iqueID], T1.[E_ProjectDataTemplate.UniqueIDSystemDataType], T1.[E_ProjectDataTem");
            viewString.Append("plate.TemplateStructure], T1.[E_ProjectDataTemplate.TemplateStructureChecksum], ");
            viewString.Append("T1.[E_ProjectDataTemplate.TemplateActions], T1.[E_ProjectDataTemplate.TemplateTy");
            viewString.Append("pe], T1.[E_ProjectDataTemplate.TemplateMulti], T1.[E_ProjectDataTemplate.Templat");
            viewString.Append("eSingle], T1.[E_ProjectDataTemplate.FormID], T1.[E_ProjectDataTemplate.TableType");
            viewString.Append("], T1.[E_ProjectDataTemplate.ReferenceID], T1.[E_ProjectDataTemplate.UserDataTyp");
            viewString.Append("e], T1.[E_ProjectDataTemplate.SystemDataType], T1.[E_ProjectDataTemplate.IsReadO");
            viewString.Append("nly], T1.[E_ProjectDataTemplate.IsVisible], T1.[E_ProjectDataTemplate.Version], ");
            viewString.Append("T1.[E_ProjectDataTemplate.VersionAntecedentID], T1.[E_ProjectDataTemplate.Versio");
            viewString.Append("nCertainty], T1.[E_ProjectDataTemplate.VersionWorkflowInstanceID], T1.[E_Project");
            viewString.Append("DataTemplate.VersionUpdatedBy], T1.[E_ProjectDataTemplate.VersionDeletedBy], T1.");
            viewString.Append("[E_ProjectDataTemplate.VersionOwnerContactID], T1.[E_ProjectDataTemplate.Version");
            viewString.Append("OwnerCompanyID], T1.[E_ProjectDataTemplate.VersionUpdated])\r\n    FROM (\r\n       ");
            viewString.Append(" SELECT \r\n            T.ProjectDataTemplateID AS [E_ProjectDataTemplate.ProjectD");
            viewString.Append("ataTemplateID], \r\n            T.CommonName AS [E_ProjectDataTemplate.CommonName]");
            viewString.Append(", \r\n            T.UniqueID AS [E_ProjectDataTemplate.UniqueID], \r\n            T.");
            viewString.Append("UniqueIDSystemDataType AS [E_ProjectDataTemplate.UniqueIDSystemDataType], \r\n    ");
            viewString.Append("        T.TemplateStructure AS [E_ProjectDataTemplate.TemplateStructure], \r\n    ");
            viewString.Append("        T.TemplateStructureChecksum AS [E_ProjectDataTemplate.TemplateStructureC");
            viewString.Append("hecksum], \r\n            T.TemplateActions AS [E_ProjectDataTemplate.TemplateActi");
            viewString.Append("ons], \r\n            T.TemplateType AS [E_ProjectDataTemplate.TemplateType], \r\n  ");
            viewString.Append("          T.TemplateMulti AS [E_ProjectDataTemplate.TemplateMulti], \r\n          ");
            viewString.Append("  T.TemplateSingle AS [E_ProjectDataTemplate.TemplateSingle], \r\n            T.Fo");
            viewString.Append("rmID AS [E_ProjectDataTemplate.FormID], \r\n            T.TableType AS [E_ProjectD");
            viewString.Append("ataTemplate.TableType], \r\n            T.ReferenceID AS [E_ProjectDataTemplate.Re");
            viewString.Append("ferenceID], \r\n            T.UserDataType AS [E_ProjectDataTemplate.UserDataType]");
            viewString.Append(", \r\n            T.SystemDataType AS [E_ProjectDataTemplate.SystemDataType], \r\n  ");
            viewString.Append("          T.IsReadOnly AS [E_ProjectDataTemplate.IsReadOnly], \r\n            T.Is");
            viewString.Append("Visible AS [E_ProjectDataTemplate.IsVisible], \r\n            T.Version AS [E_Proj");
            viewString.Append("ectDataTemplate.Version], \r\n            T.VersionAntecedentID AS [E_ProjectDataT");
            viewString.Append("emplate.VersionAntecedentID], \r\n            T.VersionCertainty AS [E_ProjectData");
            viewString.Append("Template.VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [E_Proj");
            viewString.Append("ectDataTemplate.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS ");
            viewString.Append("[E_ProjectDataTemplate.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [E");
            viewString.Append("_ProjectDataTemplate.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS");
            viewString.Append(" [E_ProjectDataTemplate.VersionOwnerContactID], \r\n            T.VersionOwnerComp");
            viewString.Append("anyID AS [E_ProjectDataTemplate.VersionOwnerCompanyID], \r\n            T.VersionU");
            viewString.Append("pdated AS [E_ProjectDataTemplate.VersionUpdated], \r\n            True AS _from0\r\n");
            viewString.Append("        FROM NKDC.ProjectDataTemplates AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_ProjectDataTemplate", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_ProjectPlanTaskResponseEvent
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView330()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3279);
            viewString.Append("\r\n    SELECT VALUE -- Constructing E_ProjectPlanTaskResponseEvent\r\n        [NKD.");
            viewString.Append("Module.BusinessObjects.Store.E_ProjectPlanTaskResponseEvent](T1.[E_ProjectPlanTa");
            viewString.Append("skResponseEvent.ProjectPlanTaskResponseEventID], T1.[E_ProjectPlanTaskResponseEv");
            viewString.Append("ent.ProjectPlanTaskResponseID], T1.[E_ProjectPlanTaskResponseEvent.ProjectID], T");
            viewString.Append("1.[E_ProjectPlanTaskResponseEvent.TaskID], T1.[E_ProjectPlanTaskResponseEvent.Tr");
            viewString.Append("iggerGraphID], T1.[E_ProjectPlanTaskResponseEvent.OriginTriggerID], T1.[E_Projec");
            viewString.Append("tPlanTaskResponseEvent.DestinationTriggerID], T1.[E_ProjectPlanTaskResponseEvent");
            viewString.Append(".JsonCustomVars], T1.[E_ProjectPlanTaskResponseEvent.RunNext], T1.[E_ProjectPlan");
            viewString.Append("TaskResponseEvent.RunsLeft], T1.[E_ProjectPlanTaskResponseEvent.Executed], T1.[E");
            viewString.Append("_ProjectPlanTaskResponseEvent.Failed], T1.[E_ProjectPlanTaskResponseEvent.Reason");
            viewString.Append("], T1.[E_ProjectPlanTaskResponseEvent.Version], T1.[E_ProjectPlanTaskResponseEve");
            viewString.Append("nt.VersionAntecedentID], T1.[E_ProjectPlanTaskResponseEvent.VersionCertainty], T");
            viewString.Append("1.[E_ProjectPlanTaskResponseEvent.VersionWorkflowInstanceID], T1.[E_ProjectPlanT");
            viewString.Append("askResponseEvent.VersionUpdatedBy], T1.[E_ProjectPlanTaskResponseEvent.VersionDe");
            viewString.Append("letedBy], T1.[E_ProjectPlanTaskResponseEvent.VersionOwnerContactID], T1.[E_Proje");
            viewString.Append("ctPlanTaskResponseEvent.VersionOwnerCompanyID], T1.[E_ProjectPlanTaskResponseEve");
            viewString.Append("nt.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.ProjectPlanTaskR");
            viewString.Append("esponseEventID AS [E_ProjectPlanTaskResponseEvent.ProjectPlanTaskResponseEventID");
            viewString.Append("], \r\n            T.ProjectPlanTaskResponseID AS [E_ProjectPlanTaskResponseEvent.");
            viewString.Append("ProjectPlanTaskResponseID], \r\n            T.ProjectID AS [E_ProjectPlanTaskRespo");
            viewString.Append("nseEvent.ProjectID], \r\n            T.TaskID AS [E_ProjectPlanTaskResponseEvent.T");
            viewString.Append("askID], \r\n            T.TriggerGraphID AS [E_ProjectPlanTaskResponseEvent.Trigge");
            viewString.Append("rGraphID], \r\n            T.OriginTriggerID AS [E_ProjectPlanTaskResponseEvent.Or");
            viewString.Append("iginTriggerID], \r\n            T.DestinationTriggerID AS [E_ProjectPlanTaskRespon");
            viewString.Append("seEvent.DestinationTriggerID], \r\n            T.JsonCustomVars AS [E_ProjectPlanT");
            viewString.Append("askResponseEvent.JsonCustomVars], \r\n            T.RunNext AS [E_ProjectPlanTaskR");
            viewString.Append("esponseEvent.RunNext], \r\n            T.RunsLeft AS [E_ProjectPlanTaskResponseEve");
            viewString.Append("nt.RunsLeft], \r\n            T.Executed AS [E_ProjectPlanTaskResponseEvent.Execut");
            viewString.Append("ed], \r\n            T.Failed AS [E_ProjectPlanTaskResponseEvent.Failed], \r\n      ");
            viewString.Append("      T.Reason AS [E_ProjectPlanTaskResponseEvent.Reason], \r\n            T.Versi");
            viewString.Append("on AS [E_ProjectPlanTaskResponseEvent.Version], \r\n            T.VersionAnteceden");
            viewString.Append("tID AS [E_ProjectPlanTaskResponseEvent.VersionAntecedentID], \r\n            T.Ver");
            viewString.Append("sionCertainty AS [E_ProjectPlanTaskResponseEvent.VersionCertainty], \r\n          ");
            viewString.Append("  T.VersionWorkflowInstanceID AS [E_ProjectPlanTaskResponseEvent.VersionWorkflow");
            viewString.Append("InstanceID], \r\n            T.VersionUpdatedBy AS [E_ProjectPlanTaskResponseEvent");
            viewString.Append(".VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [E_ProjectPlanTaskRespon");
            viewString.Append("seEvent.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [E_ProjectPl");
            viewString.Append("anTaskResponseEvent.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyI");
            viewString.Append("D AS [E_ProjectPlanTaskResponseEvent.VersionOwnerCompanyID], \r\n            T.Ver");
            viewString.Append("sionUpdated AS [E_ProjectPlanTaskResponseEvent.VersionUpdated], \r\n            Tr");
            viewString.Append("ue AS _from0\r\n        FROM NKDC.ProjectPlanTaskResponseEvents AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_ProjectPlanTaskResponseEvent", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_Trigger
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView331()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3741);
            viewString.Append("\r\n    SELECT VALUE -- Constructing E_Trigger\r\n        [NKD.Module.BusinessObject");
            viewString.Append("s.Store.E_Trigger](T1.[E_Trigger.TriggerID], T1.[E_Trigger.CommonName], T1.[E_Tr");
            viewString.Append("igger.TriggerTypeID], T1.[E_Trigger.JsonMethod], T1.[E_Trigger.JsonProxyApplicat");
            viewString.Append("ionID], T1.[E_Trigger.JsonProxyContactID], T1.[E_Trigger.JsonProxyCompanyID], T1");
            viewString.Append(".[E_Trigger.JsonAuthorizedBy], T1.[E_Trigger.JsonUsername], T1.[E_Trigger.JsonPa");
            viewString.Append("ssword], T1.[E_Trigger.JsonPasswordType], T1.[E_Trigger.JSON], T1.[E_Trigger.Sys");
            viewString.Append("temMethod], T1.[E_Trigger.ConditionID], T1.[E_Trigger.ExternalURL], T1.[E_Trigge");
            viewString.Append("r.ExternalRequestMethod], T1.[E_Trigger.ExternalFormType], T1.[E_Trigger.PassThr");
            viewString.Append("ough], T1.[E_Trigger.DelaySeconds], T1.[E_Trigger.DelayDays], T1.[E_Trigger.Dela");
            viewString.Append("yWeeks], T1.[E_Trigger.DelayMonths], T1.[E_Trigger.DelayYears], T1.[E_Trigger.De");
            viewString.Append("layUntil], T1.[E_Trigger.RepeatAfterSeconds], T1.[E_Trigger.RepeatAfterMonths], ");
            viewString.Append("T1.[E_Trigger.RepeatWeekOfMonth], T1.[E_Trigger.RepeatDayOfWeeks], T1.[E_Trigger");
            viewString.Append(".Repeats], T1.[E_Trigger.Version], T1.[E_Trigger.VersionAntecedentID], T1.[E_Tri");
            viewString.Append("gger.VersionCertainty], T1.[E_Trigger.VersionWorkflowInstanceID], T1.[E_Trigger.");
            viewString.Append("VersionUpdatedBy], T1.[E_Trigger.VersionDeletedBy], T1.[E_Trigger.VersionOwnerCo");
            viewString.Append("ntactID], T1.[E_Trigger.VersionOwnerCompanyID], T1.[E_Trigger.VersionUpdated])\r\n");
            viewString.Append("    FROM (\r\n        SELECT \r\n            T.TriggerID AS [E_Trigger.TriggerID], \r");
            viewString.Append("\n            T.CommonName AS [E_Trigger.CommonName], \r\n            T.TriggerType");
            viewString.Append("ID AS [E_Trigger.TriggerTypeID], \r\n            T.JsonMethod AS [E_Trigger.JsonMe");
            viewString.Append("thod], \r\n            T.JsonProxyApplicationID AS [E_Trigger.JsonProxyApplication");
            viewString.Append("ID], \r\n            T.JsonProxyContactID AS [E_Trigger.JsonProxyContactID], \r\n   ");
            viewString.Append("         T.JsonProxyCompanyID AS [E_Trigger.JsonProxyCompanyID], \r\n            T");
            viewString.Append(".JsonAuthorizedBy AS [E_Trigger.JsonAuthorizedBy], \r\n            T.JsonUsername ");
            viewString.Append("AS [E_Trigger.JsonUsername], \r\n            T.JsonPassword AS [E_Trigger.JsonPass");
            viewString.Append("word], \r\n            T.JsonPasswordType AS [E_Trigger.JsonPasswordType], \r\n     ");
            viewString.Append("       T.JSON AS [E_Trigger.JSON], \r\n            T.SystemMethod AS [E_Trigger.Sy");
            viewString.Append("stemMethod], \r\n            T.ConditionID AS [E_Trigger.ConditionID], \r\n         ");
            viewString.Append("   T.ExternalURL AS [E_Trigger.ExternalURL], \r\n            T.ExternalRequestMeth");
            viewString.Append("od AS [E_Trigger.ExternalRequestMethod], \r\n            T.ExternalFormType AS [E_");
            viewString.Append("Trigger.ExternalFormType], \r\n            T.PassThrough AS [E_Trigger.PassThrough");
            viewString.Append("], \r\n            T.DelaySeconds AS [E_Trigger.DelaySeconds], \r\n            T.Del");
            viewString.Append("ayDays AS [E_Trigger.DelayDays], \r\n            T.DelayWeeks AS [E_Trigger.DelayW");
            viewString.Append("eeks], \r\n            T.DelayMonths AS [E_Trigger.DelayMonths], \r\n            T.D");
            viewString.Append("elayYears AS [E_Trigger.DelayYears], \r\n            T.DelayUntil AS [E_Trigger.De");
            viewString.Append("layUntil], \r\n            T.RepeatAfterSeconds AS [E_Trigger.RepeatAfterSeconds],");
            viewString.Append(" \r\n            T.RepeatAfterMonths AS [E_Trigger.RepeatAfterMonths], \r\n         ");
            viewString.Append("   T.RepeatWeekOfMonth AS [E_Trigger.RepeatWeekOfMonth], \r\n            T.RepeatD");
            viewString.Append("ayOfWeeks AS [E_Trigger.RepeatDayOfWeeks], \r\n            T.Repeats AS [E_Trigger");
            viewString.Append(".Repeats], \r\n            T.Version AS [E_Trigger.Version], \r\n            T.Versi");
            viewString.Append("onAntecedentID AS [E_Trigger.VersionAntecedentID], \r\n            T.VersionCertai");
            viewString.Append("nty AS [E_Trigger.VersionCertainty], \r\n            T.VersionWorkflowInstanceID A");
            viewString.Append("S [E_Trigger.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [E_");
            viewString.Append("Trigger.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [E_Trigger.Versio");
            viewString.Append("nDeletedBy], \r\n            T.VersionOwnerContactID AS [E_Trigger.VersionOwnerCon");
            viewString.Append("tactID], \r\n            T.VersionOwnerCompanyID AS [E_Trigger.VersionOwnerCompany");
            viewString.Append("ID], \r\n            T.VersionUpdated AS [E_Trigger.VersionUpdated], \r\n           ");
            viewString.Append(" True AS _from0\r\n        FROM NKDC.Triggers AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_Trigger", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_DictionaryRunStateType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView332()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2346);
            viewString.Append("\r\n    SELECT VALUE -- Constructing E_DictionaryRunStateType\r\n        [NKD.Module");
            viewString.Append(".BusinessObjects.Store.E_DictionaryRunStateType](T1.[E_DictionaryRunStateType.Ru");
            viewString.Append("nStateTypeID], T1.[E_DictionaryRunStateType.StandardRunStateTypeName], T1.[E_Dic");
            viewString.Append("tionaryRunStateType.CustomRunStateTypeName], T1.[E_DictionaryRunStateType.Descri");
            viewString.Append("ption], T1.[E_DictionaryRunStateType.FullDescription], T1.[E_DictionaryRunStateT");
            viewString.Append("ype.Thumbnail], T1.[E_DictionaryRunStateType.OriginalFileDataID], T1.[E_Dictiona");
            viewString.Append("ryRunStateType.Version], T1.[E_DictionaryRunStateType.VersionAntecedentID], T1.[");
            viewString.Append("E_DictionaryRunStateType.VersionCertainty], T1.[E_DictionaryRunStateType.Version");
            viewString.Append("WorkflowInstanceID], T1.[E_DictionaryRunStateType.VersionUpdatedBy], T1.[E_Dicti");
            viewString.Append("onaryRunStateType.VersionDeletedBy], T1.[E_DictionaryRunStateType.VersionOwnerCo");
            viewString.Append("ntactID], T1.[E_DictionaryRunStateType.VersionOwnerCompanyID], T1.[E_DictionaryR");
            viewString.Append("unStateType.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.RunStat");
            viewString.Append("eTypeID AS [E_DictionaryRunStateType.RunStateTypeID], \r\n            T.StandardRu");
            viewString.Append("nStateTypeName AS [E_DictionaryRunStateType.StandardRunStateTypeName], \r\n       ");
            viewString.Append("     T.CustomRunStateTypeName AS [E_DictionaryRunStateType.CustomRunStateTypeNam");
            viewString.Append("e], \r\n            T.Description AS [E_DictionaryRunStateType.Description], \r\n   ");
            viewString.Append("         T.FullDescription AS [E_DictionaryRunStateType.FullDescription], \r\n    ");
            viewString.Append("        T.Thumbnail AS [E_DictionaryRunStateType.Thumbnail], \r\n            T.Ori");
            viewString.Append("ginalFileDataID AS [E_DictionaryRunStateType.OriginalFileDataID], \r\n            ");
            viewString.Append("T.Version AS [E_DictionaryRunStateType.Version], \r\n            T.VersionAntecede");
            viewString.Append("ntID AS [E_DictionaryRunStateType.VersionAntecedentID], \r\n            T.VersionC");
            viewString.Append("ertainty AS [E_DictionaryRunStateType.VersionCertainty], \r\n            T.Version");
            viewString.Append("WorkflowInstanceID AS [E_DictionaryRunStateType.VersionWorkflowInstanceID], \r\n  ");
            viewString.Append("          T.VersionUpdatedBy AS [E_DictionaryRunStateType.VersionUpdatedBy], \r\n ");
            viewString.Append("           T.VersionDeletedBy AS [E_DictionaryRunStateType.VersionDeletedBy], \r\n");
            viewString.Append("            T.VersionOwnerContactID AS [E_DictionaryRunStateType.VersionOwnerCon");
            viewString.Append("tactID], \r\n            T.VersionOwnerCompanyID AS [E_DictionaryRunStateType.Vers");
            viewString.Append("ionOwnerCompanyID], \r\n            T.VersionUpdated AS [E_DictionaryRunStateType.");
            viewString.Append("VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.DictionaryRunSt");
            viewString.Append("ateTypes AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_DictionaryRunStateType", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_WorkflowInstance
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView333()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3171);
            viewString.Append("\r\n    SELECT VALUE -- Constructing E_WorkflowInstance\r\n        [NKD.Module.Busin");
            viewString.Append("essObjects.Store.E_WorkflowInstance](T1.[E_WorkflowInstance.WorkflowInstanceID],");
            viewString.Append(" T1.[E_WorkflowInstance.WorkflowID], T1.[E_WorkflowInstance.RunStateTypeID], T1.");
            viewString.Append("[E_WorkflowInstance.TableType], T1.[E_WorkflowInstance.ReferenceID], T1.[E_Workf");
            viewString.Append("lowInstance.ExecutionStatus], T1.[E_WorkflowInstance.ExecutionTimeoutSeconds], T");
            viewString.Append("1.[E_WorkflowInstance.Began], T1.[E_WorkflowInstance.CanResume], T1.[E_WorkflowI");
            viewString.Append("nstance.Resumed], T1.[E_WorkflowInstance.ResumeTriggers], T1.[E_WorkflowInstance");
            viewString.Append(".ResumeAttempts], T1.[E_WorkflowInstance.Pending], T1.[E_WorkflowInstance.Idle],");
            viewString.Append(" T1.[E_WorkflowInstance.IdleTimeoutSeconds], T1.[E_WorkflowInstance.CanCancel], ");
            viewString.Append("T1.[E_WorkflowInstance.Cancelled], T1.[E_WorkflowInstance.Completed], T1.[E_Work");
            viewString.Append("flowInstance.Version], T1.[E_WorkflowInstance.VersionAntecedentID], T1.[E_Workfl");
            viewString.Append("owInstance.VersionCertainty], T1.[E_WorkflowInstance.VersionWorkflowInstanceID],");
            viewString.Append(" T1.[E_WorkflowInstance.VersionUpdatedBy], T1.[E_WorkflowInstance.VersionDeleted");
            viewString.Append("By], T1.[E_WorkflowInstance.VersionOwnerContactID], T1.[E_WorkflowInstance.Versi");
            viewString.Append("onOwnerCompanyID], T1.[E_WorkflowInstance.VersionUpdated])\r\n    FROM (\r\n        ");
            viewString.Append("SELECT \r\n            T.WorkflowInstanceID AS [E_WorkflowInstance.WorkflowInstanc");
            viewString.Append("eID], \r\n            T.WorkflowID AS [E_WorkflowInstance.WorkflowID], \r\n         ");
            viewString.Append("   T.RunStateTypeID AS [E_WorkflowInstance.RunStateTypeID], \r\n            T.Tabl");
            viewString.Append("eType AS [E_WorkflowInstance.TableType], \r\n            T.ReferenceID AS [E_Workf");
            viewString.Append("lowInstance.ReferenceID], \r\n            T.ExecutionStatus AS [E_WorkflowInstance");
            viewString.Append(".ExecutionStatus], \r\n            T.ExecutionTimeoutSeconds AS [E_WorkflowInstanc");
            viewString.Append("e.ExecutionTimeoutSeconds], \r\n            T.Began AS [E_WorkflowInstance.Began],");
            viewString.Append(" \r\n            T.CanResume AS [E_WorkflowInstance.CanResume], \r\n            T.Re");
            viewString.Append("sumed AS [E_WorkflowInstance.Resumed], \r\n            T.ResumeTriggers AS [E_Work");
            viewString.Append("flowInstance.ResumeTriggers], \r\n            T.ResumeAttempts AS [E_WorkflowInsta");
            viewString.Append("nce.ResumeAttempts], \r\n            T.Pending AS [E_WorkflowInstance.Pending], \r\n");
            viewString.Append("            T.Idle AS [E_WorkflowInstance.Idle], \r\n            T.IdleTimeoutSeco");
            viewString.Append("nds AS [E_WorkflowInstance.IdleTimeoutSeconds], \r\n            T.CanCancel AS [E_");
            viewString.Append("WorkflowInstance.CanCancel], \r\n            T.Cancelled AS [E_WorkflowInstance.Ca");
            viewString.Append("ncelled], \r\n            T.Completed AS [E_WorkflowInstance.Completed], \r\n       ");
            viewString.Append("     T.Version AS [E_WorkflowInstance.Version], \r\n            T.VersionAnteceden");
            viewString.Append("tID AS [E_WorkflowInstance.VersionAntecedentID], \r\n            T.VersionCertaint");
            viewString.Append("y AS [E_WorkflowInstance.VersionCertainty], \r\n            T.VersionWorkflowInsta");
            viewString.Append("nceID AS [E_WorkflowInstance.VersionWorkflowInstanceID], \r\n            T.Version");
            viewString.Append("UpdatedBy AS [E_WorkflowInstance.VersionUpdatedBy], \r\n            T.VersionDelet");
            viewString.Append("edBy AS [E_WorkflowInstance.VersionDeletedBy], \r\n            T.VersionOwnerConta");
            viewString.Append("ctID AS [E_WorkflowInstance.VersionOwnerContactID], \r\n            T.VersionOwner");
            viewString.Append("CompanyID AS [E_WorkflowInstance.VersionOwnerCompanyID], \r\n            T.Version");
            viewString.Append("Updated AS [E_WorkflowInstance.VersionUpdated], \r\n            True AS _from0\r\n  ");
            viewString.Append("      FROM NKDC.WorkflowInstances AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_WorkflowInstance", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_WorkflowInstanceData
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView334()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2289);
            viewString.Append("\r\n    SELECT VALUE -- Constructing E_WorkflowInstanceData\r\n        [NKD.Module.B");
            viewString.Append("usinessObjects.Store.E_WorkflowInstanceData](T1.[E_WorkflowInstanceData.Workflow");
            viewString.Append("InstanceDataID], T1.[E_WorkflowInstanceData.WorkflowInstanceID], T1.[E_WorkflowI");
            viewString.Append("nstanceData.Name], T1.[E_WorkflowInstanceData.TableType], T1.[E_WorkflowInstance");
            viewString.Append("Data.Value], T1.[E_WorkflowInstanceData.ValueID], T1.[E_WorkflowInstanceData.Num");
            viewString.Append("ericValue], T1.[E_WorkflowInstanceData.SystemDataType], T1.[E_WorkflowInstanceDa");
            viewString.Append("ta.Version], T1.[E_WorkflowInstanceData.VersionAntecedentID], T1.[E_WorkflowInst");
            viewString.Append("anceData.VersionCertainty], T1.[E_WorkflowInstanceData.VersionWorkflowInstanceID");
            viewString.Append("], T1.[E_WorkflowInstanceData.VersionUpdatedBy], T1.[E_WorkflowInstanceData.Vers");
            viewString.Append("ionDeletedBy], T1.[E_WorkflowInstanceData.VersionOwnerContactID], T1.[E_Workflow");
            viewString.Append("InstanceData.VersionOwnerCompanyID], T1.[E_WorkflowInstanceData.VersionUpdated])");
            viewString.Append("\r\n    FROM (\r\n        SELECT \r\n            T.WorkflowInstanceDataID AS [E_Workfl");
            viewString.Append("owInstanceData.WorkflowInstanceDataID], \r\n            T.WorkflowInstanceID AS [E");
            viewString.Append("_WorkflowInstanceData.WorkflowInstanceID], \r\n            T.Name AS [E_WorkflowIn");
            viewString.Append("stanceData.Name], \r\n            T.TableType AS [E_WorkflowInstanceData.TableType");
            viewString.Append("], \r\n            T.[Value] AS [E_WorkflowInstanceData.Value], \r\n            T.Va");
            viewString.Append("lueID AS [E_WorkflowInstanceData.ValueID], \r\n            T.NumericValue AS [E_Wo");
            viewString.Append("rkflowInstanceData.NumericValue], \r\n            T.SystemDataType AS [E_WorkflowI");
            viewString.Append("nstanceData.SystemDataType], \r\n            T.Version AS [E_WorkflowInstanceData.");
            viewString.Append("Version], \r\n            T.VersionAntecedentID AS [E_WorkflowInstanceData.Version");
            viewString.Append("AntecedentID], \r\n            T.VersionCertainty AS [E_WorkflowInstanceData.Versi");
            viewString.Append("onCertainty], \r\n            T.VersionWorkflowInstanceID AS [E_WorkflowInstanceDa");
            viewString.Append("ta.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [E_WorkflowIn");
            viewString.Append("stanceData.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [E_WorkflowIns");
            viewString.Append("tanceData.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [E_Workflo");
            viewString.Append("wInstanceData.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [");
            viewString.Append("E_WorkflowInstanceData.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS");
            viewString.Append(" [E_WorkflowInstanceData.VersionUpdated], \r\n            True AS _from0\r\n        ");
            viewString.Append("FROM NKDC.WorkflowInstanceDatas AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_WorkflowInstanceData", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_TriggerGraph
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView335()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2070);
            viewString.Append("\r\n    SELECT VALUE -- Constructing E_TriggerGraph\r\n        [NKD.Module.BusinessO");
            viewString.Append("bjects.Store.E_TriggerGraph](T1.[E_TriggerGraph.TriggerGraphID], T1.[E_TriggerGr");
            viewString.Append("aph.TriggerID], T1.[E_TriggerGraph.GraphDataID], T1.[E_TriggerGraph.GraphDataGro");
            viewString.Append("upID], T1.[E_TriggerGraph.MergeProjectData], T1.[E_TriggerGraph.OnEnter], T1.[E_");
            viewString.Append("TriggerGraph.OnDataUpdate], T1.[E_TriggerGraph.OnExit], T1.[E_TriggerGraph.OnIdl");
            viewString.Append("e], T1.[E_TriggerGraph.Version], T1.[E_TriggerGraph.VersionAntecedentID], T1.[E_");
            viewString.Append("TriggerGraph.VersionCertainty], T1.[E_TriggerGraph.VersionWorkflowInstanceID], T");
            viewString.Append("1.[E_TriggerGraph.VersionUpdatedBy], T1.[E_TriggerGraph.VersionDeletedBy], T1.[E");
            viewString.Append("_TriggerGraph.VersionOwnerContactID], T1.[E_TriggerGraph.VersionOwnerCompanyID],");
            viewString.Append(" T1.[E_TriggerGraph.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T");
            viewString.Append(".TriggerGraphID AS [E_TriggerGraph.TriggerGraphID], \r\n            T.TriggerID AS");
            viewString.Append(" [E_TriggerGraph.TriggerID], \r\n            T.GraphDataID AS [E_TriggerGraph.Grap");
            viewString.Append("hDataID], \r\n            T.GraphDataGroupID AS [E_TriggerGraph.GraphDataGroupID],");
            viewString.Append(" \r\n            T.MergeProjectData AS [E_TriggerGraph.MergeProjectData], \r\n      ");
            viewString.Append("      T.OnEnter AS [E_TriggerGraph.OnEnter], \r\n            T.OnDataUpdate AS [E_");
            viewString.Append("TriggerGraph.OnDataUpdate], \r\n            T.OnExit AS [E_TriggerGraph.OnExit], \r");
            viewString.Append("\n            T.OnIdle AS [E_TriggerGraph.OnIdle], \r\n            T.Version AS [E_");
            viewString.Append("TriggerGraph.Version], \r\n            T.VersionAntecedentID AS [E_TriggerGraph.Ve");
            viewString.Append("rsionAntecedentID], \r\n            T.VersionCertainty AS [E_TriggerGraph.VersionC");
            viewString.Append("ertainty], \r\n            T.VersionWorkflowInstanceID AS [E_TriggerGraph.VersionW");
            viewString.Append("orkflowInstanceID], \r\n            T.VersionUpdatedBy AS [E_TriggerGraph.VersionU");
            viewString.Append("pdatedBy], \r\n            T.VersionDeletedBy AS [E_TriggerGraph.VersionDeletedBy]");
            viewString.Append(", \r\n            T.VersionOwnerContactID AS [E_TriggerGraph.VersionOwnerContactID");
            viewString.Append("], \r\n            T.VersionOwnerCompanyID AS [E_TriggerGraph.VersionOwnerCompanyI");
            viewString.Append("D], \r\n            T.VersionUpdated AS [E_TriggerGraph.VersionUpdated], \r\n       ");
            viewString.Append("     True AS _from0\r\n        FROM NKDC.TriggerGraphs AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_TriggerGraph", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_SupplierDiscount
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView336()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2196);
            viewString.Append("\r\n    SELECT VALUE -- Constructing E_SupplierDiscount\r\n        [NKD.Module.Busin");
            viewString.Append("essObjects.Store.E_SupplierDiscount](T1.[E_SupplierDiscount.SupplierDiscountID],");
            viewString.Append(" T1.[E_SupplierDiscount.SupplierID], T1.[E_SupplierDiscount.ModelID], T1.[E_Supp");
            viewString.Append("lierDiscount.PartID], T1.[E_SupplierDiscount.ConsumerContactID], T1.[E_SupplierD");
            viewString.Append("iscount.ConsumerCompanyID], T1.[E_SupplierDiscount.OrderQuantityMinimum], T1.[E_");
            viewString.Append("SupplierDiscount.DiscountPercent], T1.[E_SupplierDiscount.Version], T1.[E_Suppli");
            viewString.Append("erDiscount.VersionAntecedentID], T1.[E_SupplierDiscount.VersionCertainty], T1.[E");
            viewString.Append("_SupplierDiscount.VersionWorkflowInstanceID], T1.[E_SupplierDiscount.VersionUpda");
            viewString.Append("tedBy], T1.[E_SupplierDiscount.VersionDeletedBy], T1.[E_SupplierDiscount.Version");
            viewString.Append("OwnerContactID], T1.[E_SupplierDiscount.VersionOwnerCompanyID], T1.[E_SupplierDi");
            viewString.Append("scount.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.SupplierDisc");
            viewString.Append("ountID AS [E_SupplierDiscount.SupplierDiscountID], \r\n            T.SupplierID AS");
            viewString.Append(" [E_SupplierDiscount.SupplierID], \r\n            T.ModelID AS [E_SupplierDiscount");
            viewString.Append(".ModelID], \r\n            T.PartID AS [E_SupplierDiscount.PartID], \r\n            ");
            viewString.Append("T.ConsumerContactID AS [E_SupplierDiscount.ConsumerContactID], \r\n            T.C");
            viewString.Append("onsumerCompanyID AS [E_SupplierDiscount.ConsumerCompanyID], \r\n            T.Orde");
            viewString.Append("rQuantityMinimum AS [E_SupplierDiscount.OrderQuantityMinimum], \r\n            T.D");
            viewString.Append("iscountPercent AS [E_SupplierDiscount.DiscountPercent], \r\n            T.Version ");
            viewString.Append("AS [E_SupplierDiscount.Version], \r\n            T.VersionAntecedentID AS [E_Suppl");
            viewString.Append("ierDiscount.VersionAntecedentID], \r\n            T.VersionCertainty AS [E_Supplie");
            viewString.Append("rDiscount.VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [E_Sup");
            viewString.Append("plierDiscount.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [E");
            viewString.Append("_SupplierDiscount.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [E_Supp");
            viewString.Append("lierDiscount.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [E_Supp");
            viewString.Append("lierDiscount.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [E");
            viewString.Append("_SupplierDiscount.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [E_S");
            viewString.Append("upplierDiscount.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC");
            viewString.Append(".SupplierDiscounts AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_SupplierDiscount", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_Notification
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView337()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_Notification", "\r\n    SELECT VALUE -- Constructing E_Notification\r\n        [NKD.Module.BusinessOb" +
                    "jects.Store.E_Notification](T1.[E_Notification.NotificationID], T1.[E_Notificati" +
                    "on.ContactID], T1.[E_Notification.ReminderMinutes], T1.[E_Notification.BlackoutO" +
                    "utOfHours], T1.[E_Notification.Timezone], T1.[E_Notification.Version], T1.[E_Not" +
                    "ification.VersionAntecedentID], T1.[E_Notification.VersionCertainty], T1.[E_Noti" +
                    "fication.VersionWorkflowInstanceID], T1.[E_Notification.VersionUpdatedBy], T1.[E" +
                    "_Notification.VersionDeletedBy], T1.[E_Notification.VersionOwnerContactID], T1.[" +
                    "E_Notification.VersionOwnerCompanyID], T1.[E_Notification.VersionUpdated])\r\n    " +
                    "FROM (\r\n        SELECT \r\n            T.NotificationID AS [E_Notification.Notific" +
                    "ationID], \r\n            T.ContactID AS [E_Notification.ContactID], \r\n           " +
                    " T.ReminderMinutes AS [E_Notification.ReminderMinutes], \r\n            T.Blackout" +
                    "OutOfHours AS [E_Notification.BlackoutOutOfHours], \r\n            T.Timezone AS [" +
                    "E_Notification.Timezone], \r\n            T.Version AS [E_Notification.Version], \r" +
                    "\n            T.VersionAntecedentID AS [E_Notification.VersionAntecedentID], \r\n  " +
                    "          T.VersionCertainty AS [E_Notification.VersionCertainty], \r\n           " +
                    " T.VersionWorkflowInstanceID AS [E_Notification.VersionWorkflowInstanceID], \r\n  " +
                    "          T.VersionUpdatedBy AS [E_Notification.VersionUpdatedBy], \r\n           " +
                    " T.VersionDeletedBy AS [E_Notification.VersionDeletedBy], \r\n            T.Versio" +
                    "nOwnerContactID AS [E_Notification.VersionOwnerContactID], \r\n            T.Versi" +
                    "onOwnerCompanyID AS [E_Notification.VersionOwnerCompanyID], \r\n            T.Vers" +
                    "ionUpdated AS [E_Notification.VersionUpdated], \r\n            True AS _from0\r\n   " +
                    "     FROM NKDC.Notifications AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_NotificationData
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView338()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2127);
            viewString.Append("\r\n    SELECT VALUE -- Constructing E_NotificationData\r\n        [NKD.Module.Busin");
            viewString.Append("essObjects.Store.E_NotificationData](T1.[E_NotificationData.NotificationDataID],");
            viewString.Append(" T1.[E_NotificationData.NotificationID], T1.[E_NotificationData.NotificationType");
            viewString.Append("], T1.[E_NotificationData.TableType], T1.[E_NotificationData.ReferenceID], T1.[E");
            viewString.Append("_NotificationData.JSON], T1.[E_NotificationData.RetriesLeft], T1.[E_Notification");
            viewString.Append("Data.Sent], T1.[E_NotificationData.Version], T1.[E_NotificationData.VersionAntec");
            viewString.Append("edentID], T1.[E_NotificationData.VersionCertainty], T1.[E_NotificationData.Versi");
            viewString.Append("onWorkflowInstanceID], T1.[E_NotificationData.VersionUpdatedBy], T1.[E_Notificat");
            viewString.Append("ionData.VersionDeletedBy], T1.[E_NotificationData.VersionOwnerContactID], T1.[E_");
            viewString.Append("NotificationData.VersionOwnerCompanyID], T1.[E_NotificationData.VersionUpdated])");
            viewString.Append("\r\n    FROM (\r\n        SELECT \r\n            T.NotificationDataID AS [E_Notificati");
            viewString.Append("onData.NotificationDataID], \r\n            T.NotificationID AS [E_NotificationDat");
            viewString.Append("a.NotificationID], \r\n            T.NotificationType AS [E_NotificationData.Notif");
            viewString.Append("icationType], \r\n            T.TableType AS [E_NotificationData.TableType], \r\n   ");
            viewString.Append("         T.ReferenceID AS [E_NotificationData.ReferenceID], \r\n            T.JSON");
            viewString.Append(" AS [E_NotificationData.JSON], \r\n            T.RetriesLeft AS [E_NotificationDat");
            viewString.Append("a.RetriesLeft], \r\n            T.Sent AS [E_NotificationData.Sent], \r\n           ");
            viewString.Append(" T.Version AS [E_NotificationData.Version], \r\n            T.VersionAntecedentID ");
            viewString.Append("AS [E_NotificationData.VersionAntecedentID], \r\n            T.VersionCertainty AS");
            viewString.Append(" [E_NotificationData.VersionCertainty], \r\n            T.VersionWorkflowInstanceI");
            viewString.Append("D AS [E_NotificationData.VersionWorkflowInstanceID], \r\n            T.VersionUpda");
            viewString.Append("tedBy AS [E_NotificationData.VersionUpdatedBy], \r\n            T.VersionDeletedBy");
            viewString.Append(" AS [E_NotificationData.VersionDeletedBy], \r\n            T.VersionOwnerContactID");
            viewString.Append(" AS [E_NotificationData.VersionOwnerContactID], \r\n            T.VersionOwnerComp");
            viewString.Append("anyID AS [E_NotificationData.VersionOwnerCompanyID], \r\n            T.VersionUpda");
            viewString.Append("ted AS [E_NotificationData.VersionUpdated], \r\n            True AS _from0\r\n      ");
            viewString.Append("  FROM NKDC.NotificationDatas AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_NotificationData", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_NotificationDevice
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView339()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_NotificationDevice", "\r\n    SELECT VALUE -- Constructing E_NotificationDevice\r\n        [NKD.Module.Busi" +
                    "nessObjects.Store.E_NotificationDevice](T1.[E_NotificationDevice.NotificationDev" +
                    "iceID], T1.[E_NotificationDevice.NotificationID], T1.[E_NotificationDevice.Devic" +
                    "eType], T1.[E_NotificationDevice.DeviceToken], T1.[E_NotificationDevice.LastRegi" +
                    "stered], T1.[E_NotificationDevice.Version], T1.[E_NotificationDevice.VersionAnte" +
                    "cedentID], T1.[E_NotificationDevice.VersionCertainty], T1.[E_NotificationDevice." +
                    "VersionWorkflowInstanceID], T1.[E_NotificationDevice.VersionUpdatedBy], T1.[E_No" +
                    "tificationDevice.VersionDeletedBy], T1.[E_NotificationDevice.VersionOwnerContact" +
                    "ID], T1.[E_NotificationDevice.VersionOwnerCompanyID], T1.[E_NotificationDevice.V" +
                    "ersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.NotificationDeviceID" +
                    " AS [E_NotificationDevice.NotificationDeviceID], \r\n            T.NotificationID " +
                    "AS [E_NotificationDevice.NotificationID], \r\n            T.DeviceType AS [E_Notif" +
                    "icationDevice.DeviceType], \r\n            T.DeviceToken AS [E_NotificationDevice." +
                    "DeviceToken], \r\n            T.LastRegistered AS [E_NotificationDevice.LastRegist" +
                    "ered], \r\n            T.Version AS [E_NotificationDevice.Version], \r\n            " +
                    "T.VersionAntecedentID AS [E_NotificationDevice.VersionAntecedentID], \r\n         " +
                    "   T.VersionCertainty AS [E_NotificationDevice.VersionCertainty], \r\n            " +
                    "T.VersionWorkflowInstanceID AS [E_NotificationDevice.VersionWorkflowInstanceID]," +
                    " \r\n            T.VersionUpdatedBy AS [E_NotificationDevice.VersionUpdatedBy], \r\n" +
                    "            T.VersionDeletedBy AS [E_NotificationDevice.VersionDeletedBy], \r\n   " +
                    "         T.VersionOwnerContactID AS [E_NotificationDevice.VersionOwnerContactID]" +
                    ", \r\n            T.VersionOwnerCompanyID AS [E_NotificationDevice.VersionOwnerCom" +
                    "panyID], \r\n            T.VersionUpdated AS [E_NotificationDevice.VersionUpdated]" +
                    ", \r\n            True AS _from0\r\n        FROM NKDC.NotificationDevices AS T\r\n    " +
                    ") AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.aspnet_UsersInRoles
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView340()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.aspnet_UsersInRoles", @"
    SELECT VALUE -- Constructing aspnet_UsersInRoles
        [NKD.Module.BusinessObjects.Store.aspnet_UsersInRoles](T1.[aspnet_UsersInRoles.UserId], T1.[aspnet_UsersInRoles.RoleId])
    FROM (
        SELECT 
            Key(T.aspnet_Users).UserId AS [aspnet_UsersInRoles.UserId], 
            Key(T.aspnet_Roles).RoleId AS [aspnet_UsersInRoles.RoleId], 
            True AS _from0
        FROM NKDC.aspnet_UsersInRoles AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.Applications
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView341()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.Applications", @"
    SELECT VALUE -- Constructing Applications
        [NKD.Module.BusinessObjects.Applications](T1.Applications_ApplicationName, T1.Applications_LoweredApplicationName, T1.Applications_ApplicationId, T1.Applications_Description)
    FROM (
        SELECT 
            T.ApplicationName AS Applications_ApplicationName, 
            T.LoweredApplicationName AS Applications_LoweredApplicationName, 
            T.ApplicationId AS Applications_ApplicationId, 
            T.Description AS Applications_Description, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.aspnet_Applications AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.Memberships
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView342()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2248);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Memberships\r\n        [NKD.Module.BusinessObje");
            viewString.Append("cts.Membership](T1.Membership_ApplicationId, T1.Membership_UserId, T1.Membership");
            viewString.Append("_Password, T1.Membership_PasswordFormat, T1.Membership_PasswordSalt, T1.Membersh");
            viewString.Append("ip_MobilePIN, T1.Membership_Email, T1.Membership_LoweredEmail, T1.Membership_Pas");
            viewString.Append("swordQuestion, T1.Membership_PasswordAnswer, T1.Membership_IsApproved, T1.Member");
            viewString.Append("ship_IsLockedOut, T1.Membership_CreateDate, T1.Membership_LastLoginDate, T1.Memb");
            viewString.Append("ership_LastPasswordChangedDate, T1.Membership_LastLockoutDate, T1.Membership_Fai");
            viewString.Append("ledPasswordAttemptCount, T1.Membership_FailedPasswordAttemptWindowStart, T1.Memb");
            viewString.Append("ership_FailedPasswordAnswerAttemptCount, T1.Membership_FailedPasswordAnswerAttem");
            viewString.Append("ptWindowStart, T1.Membership_Comment)\r\n    FROM (\r\n        SELECT \r\n            ");
            viewString.Append("T.ApplicationId AS Membership_ApplicationId, \r\n            T.UserId AS Membershi");
            viewString.Append("p_UserId, \r\n            T.Password AS Membership_Password, \r\n            T.Passw");
            viewString.Append("ordFormat AS Membership_PasswordFormat, \r\n            T.PasswordSalt AS Membersh");
            viewString.Append("ip_PasswordSalt, \r\n            T.MobilePIN AS Membership_MobilePIN, \r\n          ");
            viewString.Append("  T.Email AS Membership_Email, \r\n            T.LoweredEmail AS Membership_Lowere");
            viewString.Append("dEmail, \r\n            T.PasswordQuestion AS Membership_PasswordQuestion, \r\n     ");
            viewString.Append("       T.PasswordAnswer AS Membership_PasswordAnswer, \r\n            T.IsApproved");
            viewString.Append(" AS Membership_IsApproved, \r\n            T.IsLockedOut AS Membership_IsLockedOut");
            viewString.Append(", \r\n            T.CreateDate AS Membership_CreateDate, \r\n            T.LastLogin");
            viewString.Append("Date AS Membership_LastLoginDate, \r\n            T.LastPasswordChangedDate AS Mem");
            viewString.Append("bership_LastPasswordChangedDate, \r\n            T.LastLockoutDate AS Membership_L");
            viewString.Append("astLockoutDate, \r\n            T.FailedPasswordAttemptCount AS Membership_FailedP");
            viewString.Append("asswordAttemptCount, \r\n            T.FailedPasswordAttemptWindowStart AS Members");
            viewString.Append("hip_FailedPasswordAttemptWindowStart, \r\n            T.FailedPasswordAnswerAttemp");
            viewString.Append("tCount AS Membership_FailedPasswordAnswerAttemptCount, \r\n            T.FailedPas");
            viewString.Append("swordAnswerAttemptWindowStart AS Membership_FailedPasswordAnswerAttemptWindowSta");
            viewString.Append("rt, \r\n            T.Comment AS Membership_Comment, \r\n            True AS _from0\r");
            viewString.Append("\n        FROM NKDModuleBusinessObjectsStoreContainer.aspnet_Membership AS T\r\n   ");
            viewString.Append(" ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.Memberships", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.Paths
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView343()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.Paths", @"
    SELECT VALUE -- Constructing Paths
        [NKD.Module.BusinessObjects.Paths](T1.Paths_ApplicationId, T1.Paths_PathId, T1.Paths_Path, T1.Paths_LoweredPath)
    FROM (
        SELECT 
            T.ApplicationId AS Paths_ApplicationId, 
            T.PathId AS Paths_PathId, 
            T.Path AS Paths_Path, 
            T.LoweredPath AS Paths_LoweredPath, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.aspnet_Paths AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.PersonalizationAllUsers
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView344()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.PersonalizationAllUsers", @"
    SELECT VALUE -- Constructing PersonalizationAllUsers
        [NKD.Module.BusinessObjects.PersonalizationAllUsers](T1.PersonalizationAllUsers_PathId, T1.PersonalizationAllUsers_PageSettings, T1.PersonalizationAllUsers_LastUpdatedDate)
    FROM (
        SELECT 
            T.PathId AS PersonalizationAllUsers_PathId, 
            T.PageSettings AS PersonalizationAllUsers_PageSettings, 
            T.LastUpdatedDate AS PersonalizationAllUsers_LastUpdatedDate, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.aspnet_PersonalizationAllUsers AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.PersonalizationPerUsers
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView345()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.PersonalizationPerUsers", @"
    SELECT VALUE -- Constructing PersonalizationPerUsers
        [NKD.Module.BusinessObjects.PersonalizationPerUser](T1.PersonalizationPerUser_Id, T1.PersonalizationPerUser_PathId, T1.PersonalizationPerUser_UserId, T1.PersonalizationPerUser_PageSettings, T1.PersonalizationPerUser_LastUpdatedDate)
    FROM (
        SELECT 
            T.Id AS PersonalizationPerUser_Id, 
            T.PathId AS PersonalizationPerUser_PathId, 
            T.UserId AS PersonalizationPerUser_UserId, 
            T.PageSettings AS PersonalizationPerUser_PageSettings, 
            T.LastUpdatedDate AS PersonalizationPerUser_LastUpdatedDate, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.aspnet_PersonalizationPerUser AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.Profiles
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView346()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.Profiles", @"
    SELECT VALUE -- Constructing Profiles
        [NKD.Module.BusinessObjects.Profile](T1.Profile_UserId, T1.Profile_PropertyNames, T1.Profile_PropertyValuesString, T1.Profile_PropertyValuesBinary, T1.Profile_LastUpdatedDate)
    FROM (
        SELECT 
            T.UserId AS Profile_UserId, 
            T.PropertyNames AS Profile_PropertyNames, 
            T.PropertyValuesString AS Profile_PropertyValuesString, 
            T.PropertyValuesBinary AS Profile_PropertyValuesBinary, 
            T.LastUpdatedDate AS Profile_LastUpdatedDate, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.aspnet_Profile AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.Roles
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView347()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.Roles", @"
    SELECT VALUE -- Constructing Roles
        [NKD.Module.BusinessObjects.Roles](T1.Roles_ApplicationId, T1.Roles_RoleId, T1.Roles_RoleName, T1.Roles_LoweredRoleName, T1.Roles_Description)
    FROM (
        SELECT 
            T.ApplicationId AS Roles_ApplicationId, 
            T.RoleId AS Roles_RoleId, 
            T.RoleName AS Roles_RoleName, 
            T.LoweredRoleName AS Roles_LoweredRoleName, 
            T.Description AS Roles_Description, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.aspnet_Roles AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.Users
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView348()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.Users", @"
    SELECT VALUE -- Constructing Users
        [NKD.Module.BusinessObjects.Users](T1.Users_ApplicationId, T1.Users_UserId, T1.Users_UserName, T1.Users_LoweredUserName, T1.Users_MobileAlias, T1.Users_IsAnonymous, T1.Users_LastActivityDate)
    FROM (
        SELECT 
            T.ApplicationId AS Users_ApplicationId, 
            T.UserId AS Users_UserId, 
            T.UserName AS Users_UserName, 
            T.LoweredUserName AS Users_LoweredUserName, 
            T.MobileAlias AS Users_MobileAlias, 
            T.IsAnonymous AS Users_IsAnonymous, 
            T.LastActivityDate AS Users_LastActivityDate, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.aspnet_Users AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.Credits
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView349()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.Credits", "\r\n    SELECT VALUE -- Constructing Credits\r\n        [NKD.Module.BusinessObjects.C" +
                    "redit](T1.Credit_CreditID, T1.Credit_SupplyID, T1.Credit_InvoiceID, T1.Credit_In" +
                    "voiceLineID, T1.Credit_IsCreditNote, T1.Credit_IsRefund, T1.Credit_OriginalCredi" +
                    "t, T1.Credit_CurrencyID, T1.Credit_CreditAmount, T1.Credit_Version, T1.Credit_Ve" +
                    "rsionAntecedentID, T1.Credit_VersionCertainty, T1.Credit_VersionWorkflowInstance" +
                    "ID, T1.Credit_VersionUpdatedBy, T1.Credit_VersionDeletedBy, T1.Credit_VersionOwn" +
                    "erContactID, T1.Credit_VersionOwnerCompanyID, T1.Credit_VersionUpdated)\r\n    FRO" +
                    "M (\r\n        SELECT \r\n            T.CreditID AS Credit_CreditID, \r\n            T" +
                    ".SupplyID AS Credit_SupplyID, \r\n            T.InvoiceID AS Credit_InvoiceID, \r\n " +
                    "           T.InvoiceLineID AS Credit_InvoiceLineID, \r\n            T.IsCreditNote" +
                    " AS Credit_IsCreditNote, \r\n            T.IsRefund AS Credit_IsRefund, \r\n        " +
                    "    T.OriginalCredit AS Credit_OriginalCredit, \r\n            T.CurrencyID AS Cre" +
                    "dit_CurrencyID, \r\n            T.CreditAmount AS Credit_CreditAmount, \r\n         " +
                    "   T.Version AS Credit_Version, \r\n            T.VersionAntecedentID AS Credit_Ve" +
                    "rsionAntecedentID, \r\n            T.VersionCertainty AS Credit_VersionCertainty, " +
                    "\r\n            T.VersionWorkflowInstanceID AS Credit_VersionWorkflowInstanceID, \r" +
                    "\n            T.VersionUpdatedBy AS Credit_VersionUpdatedBy, \r\n            T.Vers" +
                    "ionDeletedBy AS Credit_VersionDeletedBy, \r\n            T.VersionOwnerContactID A" +
                    "S Credit_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS Credit_" +
                    "VersionOwnerCompanyID, \r\n            T.VersionUpdated AS Credit_VersionUpdated, " +
                    "\r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContaine" +
                    "r.E_Credit AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.Currencies
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView350()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.Currencies", "\r\n    SELECT VALUE -- Constructing Currencies\r\n        [NKD.Module.BusinessObject" +
                    "s.Currency](T1.Currency_CurrencyID, T1.Currency_CountryID, T1.Currency_Equivalen" +
                    "tMultiplier, T1.Currency_BuyMultiplier, T1.Currency_SellMultiplier, T1.Currency_" +
                    "Version, T1.Currency_VersionAntecedentID, T1.Currency_VersionCertainty, T1.Curre" +
                    "ncy_VersionWorkflowInstanceID, T1.Currency_VersionUpdatedBy, T1.Currency_Version" +
                    "DeletedBy, T1.Currency_VersionOwnerContactID, T1.Currency_VersionOwnerCompanyID," +
                    " T1.Currency_VersionUpdated, T1.Currency_PrefixCharacters, T1.Currency_PostfixCh" +
                    "aracters)\r\n    FROM (\r\n        SELECT \r\n            T.CurrencyID AS Currency_Cur" +
                    "rencyID, \r\n            T.CountryID AS Currency_CountryID, \r\n            T.Equiva" +
                    "lentMultiplier AS Currency_EquivalentMultiplier, \r\n            T.BuyMultiplier A" +
                    "S Currency_BuyMultiplier, \r\n            T.SellMultiplier AS Currency_SellMultipl" +
                    "ier, \r\n            T.Version AS Currency_Version, \r\n            T.VersionAnteced" +
                    "entID AS Currency_VersionAntecedentID, \r\n            T.VersionCertainty AS Curre" +
                    "ncy_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS Currency_Vers" +
                    "ionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS Currency_VersionUpdat" +
                    "edBy, \r\n            T.VersionDeletedBy AS Currency_VersionDeletedBy, \r\n         " +
                    "   T.VersionOwnerContactID AS Currency_VersionOwnerContactID, \r\n            T.Ve" +
                    "rsionOwnerCompanyID AS Currency_VersionOwnerCompanyID, \r\n            T.VersionUp" +
                    "dated AS Currency_VersionUpdated, \r\n            T.PrefixCharacters AS Currency_P" +
                    "refixCharacters, \r\n            T.PostfixCharacters AS Currency_PostfixCharacters" +
                    ", \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContai" +
                    "ner.E_Currency AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryTaxes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView351()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2177);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryTaxes\r\n        [NKD.Module.Business");
            viewString.Append("Objects.DictionaryTax](T1.DictionaryTax_TaxID, T1.DictionaryTax_TaxName, T1.Dict");
            viewString.Append("ionaryTax_TaxRate, T1.DictionaryTax_TaxRateUnitID, T1.DictionaryTax_CountryID, T");
            viewString.Append("1.DictionaryTax_CountryStateID, T1.DictionaryTax_ProvinceID, T1.DictionaryTax_Ap");
            viewString.Append("plicableFrom, T1.DictionaryTax_ApplicableUntil, T1.DictionaryTax_BracketMinimum,");
            viewString.Append(" T1.DictionaryTax_BracketMaximum, T1.DictionaryTax_Version, T1.DictionaryTax_Ver");
            viewString.Append("sionAntecedentID, T1.DictionaryTax_VersionCertainty, T1.DictionaryTax_VersionWor");
            viewString.Append("kflowInstanceID, T1.DictionaryTax_VersionUpdatedBy, T1.DictionaryTax_VersionDele");
            viewString.Append("tedBy, T1.DictionaryTax_VersionOwnerContactID, T1.DictionaryTax_VersionOwnerComp");
            viewString.Append("anyID, T1.DictionaryTax_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n          ");
            viewString.Append("  T.TaxID AS DictionaryTax_TaxID, \r\n            T.TaxName AS DictionaryTax_TaxNa");
            viewString.Append("me, \r\n            T.TaxRate AS DictionaryTax_TaxRate, \r\n            T.TaxRateUni");
            viewString.Append("tID AS DictionaryTax_TaxRateUnitID, \r\n            T.CountryID AS DictionaryTax_C");
            viewString.Append("ountryID, \r\n            T.CountryStateID AS DictionaryTax_CountryStateID, \r\n    ");
            viewString.Append("        T.ProvinceID AS DictionaryTax_ProvinceID, \r\n            T.ApplicableFrom");
            viewString.Append(" AS DictionaryTax_ApplicableFrom, \r\n            T.ApplicableUntil AS DictionaryT");
            viewString.Append("ax_ApplicableUntil, \r\n            T.BracketMinimum AS DictionaryTax_BracketMinim");
            viewString.Append("um, \r\n            T.BracketMaximum AS DictionaryTax_BracketMaximum, \r\n          ");
            viewString.Append("  T.Version AS DictionaryTax_Version, \r\n            T.VersionAntecedentID AS Dic");
            viewString.Append("tionaryTax_VersionAntecedentID, \r\n            T.VersionCertainty AS DictionaryTa");
            viewString.Append("x_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS DictionaryTax_V");
            viewString.Append("ersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS DictionaryTax_Vers");
            viewString.Append("ionUpdatedBy, \r\n            T.VersionDeletedBy AS DictionaryTax_VersionDeletedBy");
            viewString.Append(", \r\n            T.VersionOwnerContactID AS DictionaryTax_VersionOwnerContactID, ");
            viewString.Append("\r\n            T.VersionOwnerCompanyID AS DictionaryTax_VersionOwnerCompanyID, \r\n");
            viewString.Append("            T.VersionUpdated AS DictionaryTax_VersionUpdated, \r\n            True");
            viewString.Append(" AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.E_DictionaryTax ");
            viewString.Append("AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryTaxes", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.Invoices
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView352()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3128);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Invoices\r\n        [NKD.Module.BusinessObjects");
            viewString.Append(".Invoice](T1.Invoice_InvoiceID, T1.Invoice_Sequence, T1.Invoice_SupplierCompanyI");
            viewString.Append("D, T1.Invoice_SupplierAccountID, T1.Invoice_SupplierReferenceNumber, T1.Invoice_");
            viewString.Append("CustomerCompanyID, T1.Invoice_CustomerAccountID, T1.Invoice_CustomerReferenceNum");
            viewString.Append("ber, T1.Invoice_FreightTax, T1.Invoice_FreightAmount, T1.Invoice_DiscountInclude");
            viewString.Append("sFreight, T1.Invoice_DiscountAllFreight, T1.Invoice_DiscountAmount, T1.Invoice_T");
            viewString.Append("axAmount, T1.Invoice_OriginalTotal, T1.Invoice_CurrencyID, T1.Invoice_Total, T1.");
            viewString.Append("Invoice_Dated, T1.Invoice_Communicated, T1.Invoice_Version, T1.Invoice_VersionAn");
            viewString.Append("tecedentID, T1.Invoice_VersionCertainty, T1.Invoice_VersionWorkflowInstanceID, T");
            viewString.Append("1.Invoice_VersionUpdatedBy, T1.Invoice_VersionDeletedBy, T1.Invoice_VersionOwner");
            viewString.Append("ContactID, T1.Invoice_VersionOwnerCompanyID, T1.Invoice_VersionUpdated, T1.Invoi");
            viewString.Append("ce_SupplierContactID, T1.Invoice_CustomerContactID, T1.Invoice_SupplyID, T1.Invo");
            viewString.Append("ice_SupplierAddressID, T1.Invoice_CustomerAddressID)\r\n    FROM (\r\n        SELECT");
            viewString.Append(" \r\n            T.InvoiceID AS Invoice_InvoiceID, \r\n            T.Sequence AS Inv");
            viewString.Append("oice_Sequence, \r\n            T.SupplierCompanyID AS Invoice_SupplierCompanyID, \r");
            viewString.Append("\n            T.SupplierAccountID AS Invoice_SupplierAccountID, \r\n            T.S");
            viewString.Append("upplierReferenceNumber AS Invoice_SupplierReferenceNumber, \r\n            T.Custo");
            viewString.Append("merCompanyID AS Invoice_CustomerCompanyID, \r\n            T.CustomerAccountID AS ");
            viewString.Append("Invoice_CustomerAccountID, \r\n            T.CustomerReferenceNumber AS Invoice_Cu");
            viewString.Append("stomerReferenceNumber, \r\n            T.FreightTax AS Invoice_FreightTax, \r\n     ");
            viewString.Append("       T.FreightAmount AS Invoice_FreightAmount, \r\n            T.DiscountInclude");
            viewString.Append("sFreight AS Invoice_DiscountIncludesFreight, \r\n            T.DiscountAllFreight ");
            viewString.Append("AS Invoice_DiscountAllFreight, \r\n            T.DiscountAmount AS Invoice_Discoun");
            viewString.Append("tAmount, \r\n            T.TaxAmount AS Invoice_TaxAmount, \r\n            T.Origina");
            viewString.Append("lTotal AS Invoice_OriginalTotal, \r\n            T.CurrencyID AS Invoice_CurrencyI");
            viewString.Append("D, \r\n            T.Total AS Invoice_Total, \r\n            T.Dated AS Invoice_Date");
            viewString.Append("d, \r\n            T.Communicated AS Invoice_Communicated, \r\n            T.Version");
            viewString.Append(" AS Invoice_Version, \r\n            T.VersionAntecedentID AS Invoice_VersionAntec");
            viewString.Append("edentID, \r\n            T.VersionCertainty AS Invoice_VersionCertainty, \r\n       ");
            viewString.Append("     T.VersionWorkflowInstanceID AS Invoice_VersionWorkflowInstanceID, \r\n       ");
            viewString.Append("     T.VersionUpdatedBy AS Invoice_VersionUpdatedBy, \r\n            T.VersionDele");
            viewString.Append("tedBy AS Invoice_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS Invo");
            viewString.Append("ice_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS Invoice_Vers");
            viewString.Append("ionOwnerCompanyID, \r\n            T.VersionUpdated AS Invoice_VersionUpdated, \r\n ");
            viewString.Append("           T.SupplierContactID AS Invoice_SupplierContactID, \r\n            T.Cus");
            viewString.Append("tomerContactID AS Invoice_CustomerContactID, \r\n            T.SupplyID AS Invoice");
            viewString.Append("_SupplyID, \r\n            T.SupplierAddressID AS Invoice_SupplierAddressID, \r\n   ");
            viewString.Append("         T.CustomerAddressID AS Invoice_CustomerAddressID, \r\n            True AS");
            viewString.Append(" _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.E_Invoice AS T\r\n   ");
            viewString.Append(" ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.Invoices", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.InvoiceLines
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView353()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2300);
            viewString.Append("\r\n    SELECT VALUE -- Constructing InvoiceLines\r\n        [NKD.Module.BusinessObj");
            viewString.Append("ects.InvoiceLine](T1.InvoiceLine_InvoiceLineID, T1.InvoiceLine_InvoiceID, T1.Inv");
            viewString.Append("oiceLine_SupplyItemID, T1.InvoiceLine_ReferenceType, T1.InvoiceLine_ReferenceID,");
            viewString.Append(" T1.InvoiceLine_Description, T1.InvoiceLine_Quantity, T1.InvoiceLine_TaxID, T1.I");
            viewString.Append("nvoiceLine_Tax, T1.InvoiceLine_OriginalSubtotal, T1.InvoiceLine_CurrencyID, T1.I");
            viewString.Append("nvoiceLine_Subtotal, T1.InvoiceLine_Version, T1.InvoiceLine_VersionAntecedentID,");
            viewString.Append(" T1.InvoiceLine_VersionCertainty, T1.InvoiceLine_VersionWorkflowInstanceID, T1.I");
            viewString.Append("nvoiceLine_VersionUpdatedBy, T1.InvoiceLine_VersionDeletedBy, T1.InvoiceLine_Ver");
            viewString.Append("sionOwnerContactID, T1.InvoiceLine_VersionOwnerCompanyID, T1.InvoiceLine_Version");
            viewString.Append("Updated, T1.InvoiceLine_DiscountAmount, T1.InvoiceLine_Sequence)\r\n    FROM (\r\n  ");
            viewString.Append("      SELECT \r\n            T.InvoiceLineID AS InvoiceLine_InvoiceLineID, \r\n     ");
            viewString.Append("       T.InvoiceID AS InvoiceLine_InvoiceID, \r\n            T.SupplyItemID AS Inv");
            viewString.Append("oiceLine_SupplyItemID, \r\n            T.ReferenceType AS InvoiceLine_ReferenceTyp");
            viewString.Append("e, \r\n            T.ReferenceID AS InvoiceLine_ReferenceID, \r\n            T.Descr");
            viewString.Append("iption AS InvoiceLine_Description, \r\n            T.Quantity AS InvoiceLine_Quant");
            viewString.Append("ity, \r\n            T.TaxID AS InvoiceLine_TaxID, \r\n            T.Tax AS InvoiceL");
            viewString.Append("ine_Tax, \r\n            T.OriginalSubtotal AS InvoiceLine_OriginalSubtotal, \r\n   ");
            viewString.Append("         T.CurrencyID AS InvoiceLine_CurrencyID, \r\n            T.Subtotal AS Inv");
            viewString.Append("oiceLine_Subtotal, \r\n            T.Version AS InvoiceLine_Version, \r\n           ");
            viewString.Append(" T.VersionAntecedentID AS InvoiceLine_VersionAntecedentID, \r\n            T.Versi");
            viewString.Append("onCertainty AS InvoiceLine_VersionCertainty, \r\n            T.VersionWorkflowInst");
            viewString.Append("anceID AS InvoiceLine_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedB");
            viewString.Append("y AS InvoiceLine_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS InvoiceLi");
            viewString.Append("ne_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS InvoiceLine_Versio");
            viewString.Append("nOwnerContactID, \r\n            T.VersionOwnerCompanyID AS InvoiceLine_VersionOwn");
            viewString.Append("erCompanyID, \r\n            T.VersionUpdated AS InvoiceLine_VersionUpdated, \r\n   ");
            viewString.Append("         T.DiscountAmount AS InvoiceLine_DiscountAmount, \r\n            T.Sequenc");
            viewString.Append("e AS InvoiceLine_Sequence, \r\n            True AS _from0\r\n        FROM NKDModuleB");
            viewString.Append("usinessObjectsStoreContainer.E_InvoiceLine AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.InvoiceLines", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.Journals
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView354()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.Journals", "\r\n    SELECT VALUE -- Constructing Journals\r\n        [NKD.Module.BusinessObjects." +
                    "Journal](T1.Journal_JournalID, T1.Journal_ReferenceType, T1.Journal_ReferenceID," +
                    " T1.Journal_ReferenceDate, T1.Journal_AccountID, T1.Journal_OriginalAmount, T1.J" +
                    "ournal_CurrencyID, T1.Journal_Amount, T1.Journal_Version, T1.Journal_VersionAnte" +
                    "cedentID, T1.Journal_VersionCertainty, T1.Journal_VersionWorkflowInstanceID, T1." +
                    "Journal_VersionUpdatedBy, T1.Journal_VersionDeletedBy, T1.Journal_VersionOwnerCo" +
                    "ntactID, T1.Journal_VersionOwnerCompanyID, T1.Journal_VersionUpdated)\r\n    FROM " +
                    "(\r\n        SELECT \r\n            T.JournalID AS Journal_JournalID, \r\n            " +
                    "T.ReferenceType AS Journal_ReferenceType, \r\n            T.ReferenceID AS Journal" +
                    "_ReferenceID, \r\n            T.ReferenceDate AS Journal_ReferenceDate, \r\n        " +
                    "    T.AccountID AS Journal_AccountID, \r\n            T.OriginalAmount AS Journal_" +
                    "OriginalAmount, \r\n            T.CurrencyID AS Journal_CurrencyID, \r\n            " +
                    "T.Amount AS Journal_Amount, \r\n            T.Version AS Journal_Version, \r\n      " +
                    "      T.VersionAntecedentID AS Journal_VersionAntecedentID, \r\n            T.Vers" +
                    "ionCertainty AS Journal_VersionCertainty, \r\n            T.VersionWorkflowInstanc" +
                    "eID AS Journal_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS Jo" +
                    "urnal_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS Journal_VersionDelet" +
                    "edBy, \r\n            T.VersionOwnerContactID AS Journal_VersionOwnerContactID, \r\n" +
                    "            T.VersionOwnerCompanyID AS Journal_VersionOwnerCompanyID, \r\n        " +
                    "    T.VersionUpdated AS Journal_VersionUpdated, \r\n            True AS _from0\r\n  " +
                    "      FROM NKDModuleBusinessObjectsStoreContainer.E_Journal AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.Payments
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView355()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2335);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Payments\r\n        [NKD.Module.BusinessObjects");
            viewString.Append(".Payment](T1.Payment_PaymentID, T1.Payment_SupplierAccountID, T1.Payment_Custome");
            viewString.Append("rAccountID, T1.Payment_OriginalAmount, T1.Payment_CurrencyID, T1.Payment_Amount,");
            viewString.Append(" T1.Payment_Paid, T1.Payment_Version, T1.Payment_VersionAntecedentID, T1.Payment");
            viewString.Append("_VersionCertainty, T1.Payment_VersionWorkflowInstanceID, T1.Payment_VersionUpdat");
            viewString.Append("edBy, T1.Payment_VersionDeletedBy, T1.Payment_VersionOwnerContactID, T1.Payment_");
            viewString.Append("VersionOwnerCompanyID, T1.Payment_VersionUpdated, T1.Payment_SupplierContactID, ");
            viewString.Append("T1.Payment_CustomerContactID, T1.Payment_InternalReferenceTableType, T1.Payment_");
            viewString.Append("InternalReferenceID, T1.Payment_InternalReferenceName, T1.Payment_ExternalProvid");
            viewString.Append("erType, T1.Payment_ExternalReferenceName)\r\n    FROM (\r\n        SELECT \r\n        ");
            viewString.Append("    T.PaymentID AS Payment_PaymentID, \r\n            T.SupplierAccountID AS Payme");
            viewString.Append("nt_SupplierAccountID, \r\n            T.CustomerAccountID AS Payment_CustomerAccou");
            viewString.Append("ntID, \r\n            T.OriginalAmount AS Payment_OriginalAmount, \r\n            T.");
            viewString.Append("CurrencyID AS Payment_CurrencyID, \r\n            T.Amount AS Payment_Amount, \r\n  ");
            viewString.Append("          T.Paid AS Payment_Paid, \r\n            T.Version AS Payment_Version, \r\n");
            viewString.Append("            T.VersionAntecedentID AS Payment_VersionAntecedentID, \r\n            ");
            viewString.Append("T.VersionCertainty AS Payment_VersionCertainty, \r\n            T.VersionWorkflowI");
            viewString.Append("nstanceID AS Payment_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy");
            viewString.Append(" AS Payment_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS Payment_Versio");
            viewString.Append("nDeletedBy, \r\n            T.VersionOwnerContactID AS Payment_VersionOwnerContact");
            viewString.Append("ID, \r\n            T.VersionOwnerCompanyID AS Payment_VersionOwnerCompanyID, \r\n  ");
            viewString.Append("          T.VersionUpdated AS Payment_VersionUpdated, \r\n            T.SupplierCo");
            viewString.Append("ntactID AS Payment_SupplierContactID, \r\n            T.CustomerContactID AS Payme");
            viewString.Append("nt_CustomerContactID, \r\n            T.InternalReferenceTableType AS Payment_Inte");
            viewString.Append("rnalReferenceTableType, \r\n            T.InternalReferenceID AS Payment_InternalR");
            viewString.Append("eferenceID, \r\n            T.InternalReferenceName AS Payment_InternalReferenceNa");
            viewString.Append("me, \r\n            T.ExternalProviderType AS Payment_ExternalProviderType, \r\n    ");
            viewString.Append("        T.ExternalReferenceName AS Payment_ExternalReferenceName, \r\n            ");
            viewString.Append("True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.E_Payment AS");
            viewString.Append(" T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.Payments", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.PurchaseOrders
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView356()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2942);
            viewString.Append("\r\n    SELECT VALUE -- Constructing PurchaseOrders\r\n        [NKD.Module.BusinessO");
            viewString.Append("bjects.PurchaseOrder](T1.PurchaseOrder_PurchaseOrderID, T1.PurchaseOrder_Purchas");
            viewString.Append("eName, T1.PurchaseOrder_ReferenceCode, T1.PurchaseOrder_ReferenceSystem, T1.Purc");
            viewString.Append("haseOrder_OriginalSubtotal, T1.PurchaseOrder_CurrencyID, T1.PurchaseOrder_Subtot");
            viewString.Append("al, T1.PurchaseOrder_Ordered, T1.PurchaseOrder_ProjectID, T1.PurchaseOrder_Custo");
            viewString.Append("merCompanyID, T1.PurchaseOrder_CustomerContactID, T1.PurchaseOrder_CustomerAccou");
            viewString.Append("ntID, T1.PurchaseOrder_SupplierCompanyID, T1.PurchaseOrder_SupplierContactID, T1");
            viewString.Append(".PurchaseOrder_SupplierAccountID, T1.PurchaseOrder_Version, T1.PurchaseOrder_Ver");
            viewString.Append("sionAntecedentID, T1.PurchaseOrder_VersionCertainty, T1.PurchaseOrder_VersionWor");
            viewString.Append("kflowInstanceID, T1.PurchaseOrder_VersionUpdatedBy, T1.PurchaseOrder_VersionDele");
            viewString.Append("tedBy, T1.PurchaseOrder_VersionOwnerContactID, T1.PurchaseOrder_VersionOwnerComp");
            viewString.Append("anyID, T1.PurchaseOrder_VersionUpdated, T1.PurchaseOrder_Sequence, T1.PurchaseOr");
            viewString.Append("der_OrderStatusID, T1.PurchaseOrder_ParentPurchaseOrderID)\r\n    FROM (\r\n        ");
            viewString.Append("SELECT \r\n            T.PurchaseOrderID AS PurchaseOrder_PurchaseOrderID, \r\n     ");
            viewString.Append("       T.PurchaseName AS PurchaseOrder_PurchaseName, \r\n            T.ReferenceCo");
            viewString.Append("de AS PurchaseOrder_ReferenceCode, \r\n            T.ReferenceSystem AS PurchaseOr");
            viewString.Append("der_ReferenceSystem, \r\n            T.OriginalSubtotal AS PurchaseOrder_OriginalS");
            viewString.Append("ubtotal, \r\n            T.CurrencyID AS PurchaseOrder_CurrencyID, \r\n            T");
            viewString.Append(".Subtotal AS PurchaseOrder_Subtotal, \r\n            T.Ordered AS PurchaseOrder_Or");
            viewString.Append("dered, \r\n            T.ProjectID AS PurchaseOrder_ProjectID, \r\n            T.Cus");
            viewString.Append("tomerCompanyID AS PurchaseOrder_CustomerCompanyID, \r\n            T.CustomerConta");
            viewString.Append("ctID AS PurchaseOrder_CustomerContactID, \r\n            T.CustomerAccountID AS Pu");
            viewString.Append("rchaseOrder_CustomerAccountID, \r\n            T.SupplierCompanyID AS PurchaseOrde");
            viewString.Append("r_SupplierCompanyID, \r\n            T.SupplierContactID AS PurchaseOrder_Supplier");
            viewString.Append("ContactID, \r\n            T.SupplierAccountID AS PurchaseOrder_SupplierAccountID,");
            viewString.Append(" \r\n            T.Version AS PurchaseOrder_Version, \r\n            T.VersionAntece");
            viewString.Append("dentID AS PurchaseOrder_VersionAntecedentID, \r\n            T.VersionCertainty AS");
            viewString.Append(" PurchaseOrder_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS Pu");
            viewString.Append("rchaseOrder_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS Purch");
            viewString.Append("aseOrder_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS PurchaseOrder_Ver");
            viewString.Append("sionDeletedBy, \r\n            T.VersionOwnerContactID AS PurchaseOrder_VersionOwn");
            viewString.Append("erContactID, \r\n            T.VersionOwnerCompanyID AS PurchaseOrder_VersionOwner");
            viewString.Append("CompanyID, \r\n            T.VersionUpdated AS PurchaseOrder_VersionUpdated, \r\n   ");
            viewString.Append("         T.Sequence AS PurchaseOrder_Sequence, \r\n            T.OrderStatusID AS ");
            viewString.Append("PurchaseOrder_OrderStatusID, \r\n            T.ParentPurchaseOrderID AS PurchaseOr");
            viewString.Append("der_ParentPurchaseOrderID, \r\n            True AS _from0\r\n        FROM NKDModuleB");
            viewString.Append("usinessObjectsStoreContainer.E_PurchaseOrder AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.PurchaseOrders", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.Supplies
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView357()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2636);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Supplies\r\n        [NKD.Module.BusinessObjects");
            viewString.Append(".Supply](T1.Supply_SupplyID, T1.Supply_ParentSupplyID, T1.Supply_ProjectID, T1.S");
            viewString.Append("upply_Sequence, T1.Supply_CustomerPurchaseOrderID, T1.Supply_CustomerApprovedBy,");
            viewString.Append(" T1.Supply_SupplierPurchaseOrderID, T1.Supply_SupplierApprovedBy, T1.Supply_IsDr");
            viewString.Append("aft, T1.Supply_IsUnapproved, T1.Supply_IsDenied, T1.Supply_IsSupplied, T1.Supply");
            viewString.Append("_IsReorderSent, T1.Supply_IsPaid, T1.Supply_IsFinalised, T1.Supply_CurrentProjec");
            viewString.Append("tDeliverableID, T1.Supply_FinalProjectDeliverableID, T1.Supply_DateOrdered, T1.S");
            viewString.Append("upply_PurchasingNotes, T1.Supply_Version, T1.Supply_VersionAntecedentID, T1.Supp");
            viewString.Append("ly_VersionCertainty, T1.Supply_VersionWorkflowInstanceID, T1.Supply_VersionUpdat");
            viewString.Append("edBy, T1.Supply_VersionDeletedBy, T1.Supply_VersionOwnerContactID, T1.Supply_Ver");
            viewString.Append("sionOwnerCompanyID, T1.Supply_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n    ");
            viewString.Append("        T.SupplyID AS Supply_SupplyID, \r\n            T.ParentSupplyID AS Supply_");
            viewString.Append("ParentSupplyID, \r\n            T.ProjectID AS Supply_ProjectID, \r\n            T.S");
            viewString.Append("equence AS Supply_Sequence, \r\n            T.CustomerPurchaseOrderID AS Supply_Cu");
            viewString.Append("stomerPurchaseOrderID, \r\n            T.CustomerApprovedBy AS Supply_CustomerAppr");
            viewString.Append("ovedBy, \r\n            T.SupplierPurchaseOrderID AS Supply_SupplierPurchaseOrderI");
            viewString.Append("D, \r\n            T.SupplierApprovedBy AS Supply_SupplierApprovedBy, \r\n          ");
            viewString.Append("  T.IsDraft AS Supply_IsDraft, \r\n            T.IsUnapproved AS Supply_IsUnapprov");
            viewString.Append("ed, \r\n            T.IsDenied AS Supply_IsDenied, \r\n            T.IsSupplied AS S");
            viewString.Append("upply_IsSupplied, \r\n            T.IsReorderSent AS Supply_IsReorderSent, \r\n     ");
            viewString.Append("       T.IsPaid AS Supply_IsPaid, \r\n            T.IsFinalised AS Supply_IsFinali");
            viewString.Append("sed, \r\n            T.CurrentProjectDeliverableID AS Supply_CurrentProjectDeliver");
            viewString.Append("ableID, \r\n            T.FinalProjectDeliverableID AS Supply_FinalProjectDelivera");
            viewString.Append("bleID, \r\n            T.DateOrdered AS Supply_DateOrdered, \r\n            T.Purcha");
            viewString.Append("singNotes AS Supply_PurchasingNotes, \r\n            T.Version AS Supply_Version, ");
            viewString.Append("\r\n            T.VersionAntecedentID AS Supply_VersionAntecedentID, \r\n           ");
            viewString.Append(" T.VersionCertainty AS Supply_VersionCertainty, \r\n            T.VersionWorkflowI");
            viewString.Append("nstanceID AS Supply_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy ");
            viewString.Append("AS Supply_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS Supply_VersionDe");
            viewString.Append("letedBy, \r\n            T.VersionOwnerContactID AS Supply_VersionOwnerContactID, ");
            viewString.Append("\r\n            T.VersionOwnerCompanyID AS Supply_VersionOwnerCompanyID, \r\n       ");
            viewString.Append("     T.VersionUpdated AS Supply_VersionUpdated, \r\n            True AS _from0\r\n  ");
            viewString.Append("      FROM NKDModuleBusinessObjectsStoreContainer.E_Supply AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.Supplies", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.SupplyItems
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView358()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(4882);
            viewString.Append("\r\n    SELECT VALUE -- Constructing SupplyItems\r\n        [NKD.Module.BusinessObje");
            viewString.Append("cts.SupplyItem](T1.SupplyItem_SupplyItemID, T1.SupplyItem_SupplyID, T1.SupplyIte");
            viewString.Append("m_ProjectPlanTaskModelID, T1.SupplyItem_ProjectPlanTaskPartID, T1.SupplyItem_Pro");
            viewString.Append("jectPlanTaskResponseID, T1.SupplyItem_CustomerAccountID, T1.SupplyItem_ModelUnit");
            viewString.Append("ID, T1.SupplyItem_LabourUnitID, T1.SupplyItem_PartUnitID, T1.SupplyItem_CostPerU");
            viewString.Append("nitModel, T1.SupplyItem_CostPerUnitLabour, T1.SupplyItem_CostPerUnitPart, T1.Sup");
            viewString.Append("plyItem_QuantityModel, T1.SupplyItem_QuantityLabour, T1.SupplyItem_QuantityPart,");
            viewString.Append(" T1.SupplyItem_CostModel, T1.SupplyItem_CostLabour, T1.SupplyItem_CostPart, T1.S");
            viewString.Append("upplyItem_SubtotalModel, T1.SupplyItem_SubtotalLabour, T1.SupplyItem_SubtotalPar");
            viewString.Append("t, T1.SupplyItem_TaxModel, T1.SupplyItem_TaxLabour, T1.SupplyItem_TaxPart, T1.Su");
            viewString.Append("pplyItem_Tax, T1.SupplyItem_OriginalSubtotal, T1.SupplyItem_CurrencyID, T1.Suppl");
            viewString.Append("yItem_Subtotal, T1.SupplyItem_Notes, T1.SupplyItem_Version, T1.SupplyItem_Versio");
            viewString.Append("nAntecedentID, T1.SupplyItem_VersionCertainty, T1.SupplyItem_VersionWorkflowInst");
            viewString.Append("anceID, T1.SupplyItem_VersionUpdatedBy, T1.SupplyItem_VersionDeletedBy, T1.Suppl");
            viewString.Append("yItem_VersionOwnerContactID, T1.SupplyItem_VersionOwnerCompanyID, T1.SupplyItem_");
            viewString.Append("VersionUpdated, T1.SupplyItem_ModelID, T1.SupplyItem_PartID, T1.SupplyItem_Suppl");
            viewString.Append("ierModelID, T1.SupplyItem_SupplierPartID, T1.SupplyItem_WarehouseID, T1.SupplyIt");
            viewString.Append("em_ApplicationPaymentProviderProductModelID, T1.SupplyItem_ApplicationPaymentPro");
            viewString.Append("viderProductPartID, T1.SupplyItem_ApplicationPaymentProviderProductID, T1.Supply");
            viewString.Append("Item_DiscountModel, T1.SupplyItem_DiscountLabour, T1.SupplyItem_DiscountPart, T1");
            viewString.Append(".SupplyItem_DiscountAmount)\r\n    FROM (\r\n        SELECT \r\n            T.SupplyIt");
            viewString.Append("emID AS SupplyItem_SupplyItemID, \r\n            T.SupplyID AS SupplyItem_SupplyID");
            viewString.Append(", \r\n            T.ProjectPlanTaskModelID AS SupplyItem_ProjectPlanTaskModelID, \r");
            viewString.Append("\n            T.ProjectPlanTaskPartID AS SupplyItem_ProjectPlanTaskPartID, \r\n    ");
            viewString.Append("        T.ProjectPlanTaskResponseID AS SupplyItem_ProjectPlanTaskResponseID, \r\n ");
            viewString.Append("           T.CustomerAccountID AS SupplyItem_CustomerAccountID, \r\n            T.");
            viewString.Append("ModelUnitID AS SupplyItem_ModelUnitID, \r\n            T.LabourUnitID AS SupplyIte");
            viewString.Append("m_LabourUnitID, \r\n            T.PartUnitID AS SupplyItem_PartUnitID, \r\n         ");
            viewString.Append("   T.CostPerUnitModel AS SupplyItem_CostPerUnitModel, \r\n            T.CostPerUni");
            viewString.Append("tLabour AS SupplyItem_CostPerUnitLabour, \r\n            T.CostPerUnitPart AS Supp");
            viewString.Append("lyItem_CostPerUnitPart, \r\n            T.QuantityModel AS SupplyItem_QuantityMode");
            viewString.Append("l, \r\n            T.QuantityLabour AS SupplyItem_QuantityLabour, \r\n            T.");
            viewString.Append("QuantityPart AS SupplyItem_QuantityPart, \r\n            T.CostModel AS SupplyItem");
            viewString.Append("_CostModel, \r\n            T.CostLabour AS SupplyItem_CostLabour, \r\n            T");
            viewString.Append(".CostPart AS SupplyItem_CostPart, \r\n            T.SubtotalModel AS SupplyItem_Su");
            viewString.Append("btotalModel, \r\n            T.SubtotalLabour AS SupplyItem_SubtotalLabour, \r\n    ");
            viewString.Append("        T.SubtotalPart AS SupplyItem_SubtotalPart, \r\n            T.TaxModel AS S");
            viewString.Append("upplyItem_TaxModel, \r\n            T.TaxLabour AS SupplyItem_TaxLabour, \r\n       ");
            viewString.Append("     T.TaxPart AS SupplyItem_TaxPart, \r\n            T.Tax AS SupplyItem_Tax, \r\n ");
            viewString.Append("           T.OriginalSubtotal AS SupplyItem_OriginalSubtotal, \r\n            T.Cu");
            viewString.Append("rrencyID AS SupplyItem_CurrencyID, \r\n            T.Subtotal AS SupplyItem_Subtot");
            viewString.Append("al, \r\n            T.Notes AS SupplyItem_Notes, \r\n            T.Version AS Supply");
            viewString.Append("Item_Version, \r\n            T.VersionAntecedentID AS SupplyItem_VersionAnteceden");
            viewString.Append("tID, \r\n            T.VersionCertainty AS SupplyItem_VersionCertainty, \r\n        ");
            viewString.Append("    T.VersionWorkflowInstanceID AS SupplyItem_VersionWorkflowInstanceID, \r\n     ");
            viewString.Append("       T.VersionUpdatedBy AS SupplyItem_VersionUpdatedBy, \r\n            T.Versio");
            viewString.Append("nDeletedBy AS SupplyItem_VersionDeletedBy, \r\n            T.VersionOwnerContactID");
            viewString.Append(" AS SupplyItem_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS S");
            viewString.Append("upplyItem_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS SupplyItem_Ve");
            viewString.Append("rsionUpdated, \r\n            T.ModelID AS SupplyItem_ModelID, \r\n            T.Par");
            viewString.Append("tID AS SupplyItem_PartID, \r\n            T.SupplierModelID AS SupplyItem_Supplier");
            viewString.Append("ModelID, \r\n            T.SupplierPartID AS SupplyItem_SupplierPartID, \r\n        ");
            viewString.Append("    T.WarehouseID AS SupplyItem_WarehouseID, \r\n            T.ApplicationPaymentP");
            viewString.Append("roviderProductModelID AS SupplyItem_ApplicationPaymentProviderProductModelID, \r\n");
            viewString.Append("            T.ApplicationPaymentProviderProductPartID AS SupplyItem_ApplicationP");
            viewString.Append("aymentProviderProductPartID, \r\n            T.ApplicationPaymentProviderProductID");
            viewString.Append(" AS SupplyItem_ApplicationPaymentProviderProductID, \r\n            T.DiscountMode");
            viewString.Append("l AS SupplyItem_DiscountModel, \r\n            T.DiscountLabour AS SupplyItem_Disc");
            viewString.Append("ountLabour, \r\n            T.DiscountPart AS SupplyItem_DiscountPart, \r\n         ");
            viewString.Append("   T.DiscountAmount AS SupplyItem_DiscountAmount, \r\n            True AS _from0\r\n");
            viewString.Append("        FROM NKDModuleBusinessObjectsStoreContainer.E_SupplyItem AS T\r\n    ) AS ");
            viewString.Append("T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.SupplyItems", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.SupplyItemTaxes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView359()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.SupplyItemTaxes", "\r\n    SELECT VALUE -- Constructing SupplyItemTaxes\r\n        [NKD.Module.BusinessO" +
                    "bjects.SupplyItemTax](T1.SupplyItemTax_SupplyItemTaxID, T1.SupplyItemTax_SupplyI" +
                    "temID, T1.SupplyItemTax_TaxID, T1.SupplyItemTax_Tax, T1.SupplyItemTax_Version, T" +
                    "1.SupplyItemTax_VersionAntecedentID, T1.SupplyItemTax_VersionCertainty, T1.Suppl" +
                    "yItemTax_VersionWorkflowInstanceID, T1.SupplyItemTax_VersionUpdatedBy, T1.Supply" +
                    "ItemTax_VersionDeletedBy, T1.SupplyItemTax_VersionOwnerContactID, T1.SupplyItemT" +
                    "ax_VersionOwnerCompanyID, T1.SupplyItemTax_VersionUpdated)\r\n    FROM (\r\n        " +
                    "SELECT \r\n            T.SupplyItemTaxID AS SupplyItemTax_SupplyItemTaxID, \r\n     " +
                    "       T.SupplyItemID AS SupplyItemTax_SupplyItemID, \r\n            T.TaxID AS Su" +
                    "pplyItemTax_TaxID, \r\n            T.Tax AS SupplyItemTax_Tax, \r\n            T.Ver" +
                    "sion AS SupplyItemTax_Version, \r\n            T.VersionAntecedentID AS SupplyItem" +
                    "Tax_VersionAntecedentID, \r\n            T.VersionCertainty AS SupplyItemTax_Versi" +
                    "onCertainty, \r\n            T.VersionWorkflowInstanceID AS SupplyItemTax_VersionW" +
                    "orkflowInstanceID, \r\n            T.VersionUpdatedBy AS SupplyItemTax_VersionUpda" +
                    "tedBy, \r\n            T.VersionDeletedBy AS SupplyItemTax_VersionDeletedBy, \r\n   " +
                    "         T.VersionOwnerContactID AS SupplyItemTax_VersionOwnerContactID, \r\n     " +
                    "       T.VersionOwnerCompanyID AS SupplyItemTax_VersionOwnerCompanyID, \r\n       " +
                    "     T.VersionUpdated AS SupplyItemTax_VersionUpdated, \r\n            True AS _fr" +
                    "om0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.E_SupplyItemTax AS T\r\n " +
                    "   ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.Accounts
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView360()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.Accounts", "\r\n    SELECT VALUE -- Constructing Accounts\r\n        [NKD.Module.BusinessObjects." +
                    "Account](T1.Account_AccountID, T1.Account_ParentAccountID, T1.Account_AcountCode" +
                    ", T1.Account_AccountName, T1.Account_PrimaryCompanyID, T1.Account_DefaultLocatio" +
                    "nID, T1.Account_Description, T1.Account_Version, T1.Account_VersionAntecedentID," +
                    " T1.Account_VersionCertainty, T1.Account_VersionWorkflowInstanceID, T1.Account_V" +
                    "ersionUpdatedBy, T1.Account_VersionDeletedBy, T1.Account_VersionOwnerContactID, " +
                    "T1.Account_VersionOwnerCompanyID, T1.Account_VersionUpdated, T1.Account_AccountT" +
                    "ypeID)\r\n    FROM (\r\n        SELECT \r\n            T.AccountID AS Account_AccountI" +
                    "D, \r\n            T.ParentAccountID AS Account_ParentAccountID, \r\n            T.A" +
                    "countCode AS Account_AcountCode, \r\n            T.AccountName AS Account_AccountN" +
                    "ame, \r\n            T.PrimaryCompanyID AS Account_PrimaryCompanyID, \r\n           " +
                    " T.DefaultLocationID AS Account_DefaultLocationID, \r\n            T.Description A" +
                    "S Account_Description, \r\n            T.Version AS Account_Version, \r\n           " +
                    " T.VersionAntecedentID AS Account_VersionAntecedentID, \r\n            T.VersionCe" +
                    "rtainty AS Account_VersionCertainty, \r\n            T.VersionWorkflowInstanceID A" +
                    "S Account_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS Account" +
                    "_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS Account_VersionDeletedBy," +
                    " \r\n            T.VersionOwnerContactID AS Account_VersionOwnerContactID, \r\n     " +
                    "       T.VersionOwnerCompanyID AS Account_VersionOwnerCompanyID, \r\n            T" +
                    ".VersionUpdated AS Account_VersionUpdated, \r\n            T.AccountTypeID AS Acco" +
                    "unt_AccountTypeID, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessO" +
                    "bjectsStoreContainer.Q_Account AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.AccountDiscounts
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView361()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2215);
            viewString.Append("\r\n    SELECT VALUE -- Constructing AccountDiscounts\r\n        [NKD.Module.Busines");
            viewString.Append("sObjects.AccountDiscount](T1.AccountDiscount_SourceAccountID, T1.AccountDiscount");
            viewString.Append("_ClientCompanyID, T1.AccountDiscount_ProviderExperienceID, T1.AccountDiscount_De");
            viewString.Append("viceTypeID, T1.AccountDiscount_LevelUnitID, T1.AccountDiscount_LevelQuantity, T1");
            viewString.Append(".AccountDiscount_Rate, T1.AccountDiscount_ValidFrom, T1.AccountDiscount_ValidUnt");
            viewString.Append("il, T1.AccountDiscount_Version, T1.AccountDiscount_VersionAntecedentID, T1.Accou");
            viewString.Append("ntDiscount_VersionCertainty, T1.AccountDiscount_VersionWorkflowInstanceID, T1.Ac");
            viewString.Append("countDiscount_VersionUpdatedBy, T1.AccountDiscount_VersionDeletedBy, T1.AccountD");
            viewString.Append("iscount_VersionOwnerContactID, T1.AccountDiscount_VersionOwnerCompanyID, T1.Acco");
            viewString.Append("untDiscount_VersionUpdated, T1.AccountDiscount_AccountDiscountID)\r\n    FROM (\r\n ");
            viewString.Append("       SELECT \r\n            T.SourceAccountID AS AccountDiscount_SourceAccountID");
            viewString.Append(", \r\n            T.ClientCompanyID AS AccountDiscount_ClientCompanyID, \r\n        ");
            viewString.Append("    T.ProviderExperienceID AS AccountDiscount_ProviderExperienceID, \r\n          ");
            viewString.Append("  T.DeviceTypeID AS AccountDiscount_DeviceTypeID, \r\n            T.LevelUnitID AS");
            viewString.Append(" AccountDiscount_LevelUnitID, \r\n            T.LevelQuantity AS AccountDiscount_L");
            viewString.Append("evelQuantity, \r\n            T.Rate AS AccountDiscount_Rate, \r\n            T.Vali");
            viewString.Append("dFrom AS AccountDiscount_ValidFrom, \r\n            T.ValidUntil AS AccountDiscoun");
            viewString.Append("t_ValidUntil, \r\n            T.Version AS AccountDiscount_Version, \r\n            ");
            viewString.Append("T.VersionAntecedentID AS AccountDiscount_VersionAntecedentID, \r\n            T.Ve");
            viewString.Append("rsionCertainty AS AccountDiscount_VersionCertainty, \r\n            T.VersionWorkf");
            viewString.Append("lowInstanceID AS AccountDiscount_VersionWorkflowInstanceID, \r\n            T.Vers");
            viewString.Append("ionUpdatedBy AS AccountDiscount_VersionUpdatedBy, \r\n            T.VersionDeleted");
            viewString.Append("By AS AccountDiscount_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS");
            viewString.Append(" AccountDiscount_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS");
            viewString.Append(" AccountDiscount_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS Accoun");
            viewString.Append("tDiscount_VersionUpdated, \r\n            T.AccountDiscountID AS AccountDiscount_A");
            viewString.Append("ccountDiscountID, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessOb");
            viewString.Append("jectsStoreContainer.Q_AccountDiscount AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.AccountDiscounts", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.Assets
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView362()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2540);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Assets\r\n        [NKD.Module.BusinessObjects.A");
            viewString.Append("sset](T1.Asset_AssetID, T1.Asset_ParentAssetID, T1.Asset_AssetName, T1.Asset_Pur");
            viewString.Append("chased, T1.Asset_PurchaseOrderID, T1.Asset_ExpenseNotToExceedLifeTimeCost, T1.As");
            viewString.Append("set_OwnerAccountID, T1.Asset_BorrowerAccountID, T1.Asset_MaintenanceAccountID, T");
            viewString.Append("1.Asset_ModelID, T1.Asset_LocationID, T1.Asset_AssetStatusID, T1.Asset_Experienc");
            viewString.Append("eID, T1.Asset_Description, T1.Asset_Version, T1.Asset_VersionAntecedentID, T1.As");
            viewString.Append("set_VersionCertainty, T1.Asset_VersionWorkflowInstanceID, T1.Asset_VersionUpdate");
            viewString.Append("dBy, T1.Asset_VersionDeletedBy, T1.Asset_VersionOwnerContactID, T1.Asset_Version");
            viewString.Append("OwnerCompanyID, T1.Asset_VersionUpdated, T1.Asset_InitialCost, T1.Asset_ProRataC");
            viewString.Append("ost, T1.Asset_ProRataUnitID, T1.Asset_CurrentCompanyID, T1.Asset_CurrentContactI");
            viewString.Append("D)\r\n    FROM (\r\n        SELECT \r\n            T.AssetID AS Asset_AssetID, \r\n     ");
            viewString.Append("       T.ParentAssetID AS Asset_ParentAssetID, \r\n            T.AssetName AS Asse");
            viewString.Append("t_AssetName, \r\n            T.Purchased AS Asset_Purchased, \r\n            T.Purch");
            viewString.Append("aseOrderID AS Asset_PurchaseOrderID, \r\n            T.ExpenseNotToExceedLifeTimeC");
            viewString.Append("ost AS Asset_ExpenseNotToExceedLifeTimeCost, \r\n            T.OwnerAccountID AS A");
            viewString.Append("sset_OwnerAccountID, \r\n            T.BorrowerAccountID AS Asset_BorrowerAccountI");
            viewString.Append("D, \r\n            T.MaintenanceAccountID AS Asset_MaintenanceAccountID, \r\n       ");
            viewString.Append("     T.ModelID AS Asset_ModelID, \r\n            T.LocationID AS Asset_LocationID,");
            viewString.Append(" \r\n            T.AssetStatusID AS Asset_AssetStatusID, \r\n            T.Experienc");
            viewString.Append("eID AS Asset_ExperienceID, \r\n            T.Description AS Asset_Description, \r\n ");
            viewString.Append("           T.Version AS Asset_Version, \r\n            T.VersionAntecedentID AS As");
            viewString.Append("set_VersionAntecedentID, \r\n            T.VersionCertainty AS Asset_VersionCertai");
            viewString.Append("nty, \r\n            T.VersionWorkflowInstanceID AS Asset_VersionWorkflowInstanceI");
            viewString.Append("D, \r\n            T.VersionUpdatedBy AS Asset_VersionUpdatedBy, \r\n            T.V");
            viewString.Append("ersionDeletedBy AS Asset_VersionDeletedBy, \r\n            T.VersionOwnerContactID");
            viewString.Append(" AS Asset_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS Asset_");
            viewString.Append("VersionOwnerCompanyID, \r\n            T.VersionUpdated AS Asset_VersionUpdated, \r");
            viewString.Append("\n            T.InitialCost AS Asset_InitialCost, \r\n            T.ProRataCost AS ");
            viewString.Append("Asset_ProRataCost, \r\n            T.ProRataUnitID AS Asset_ProRataUnitID, \r\n     ");
            viewString.Append("       T.CurrentCompanyID AS Asset_CurrentCompanyID, \r\n            T.CurrentCont");
            viewString.Append("actID AS Asset_CurrentContactID, \r\n            True AS _from0\r\n        FROM NKDM");
            viewString.Append("oduleBusinessObjectsStoreContainer.Q_Asset AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.Assets", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.AssetAlias
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView363()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.AssetAlias", "\r\n    SELECT VALUE -- Constructing AssetAlias\r\n        [NKD.Module.BusinessObject" +
                    "s.AssetAlias](T1.AssetAlias_AssetAliasID, T1.AssetAlias_AssetID, T1.AssetAlias_A" +
                    "ssetAliasName, T1.AssetAlias_FullDescription, T1.AssetAlias_Thumbnail, T1.AssetA" +
                    "lias_OriginalFileDataID, T1.AssetAlias_Version, T1.AssetAlias_VersionAntecedentI" +
                    "D, T1.AssetAlias_VersionCertainty, T1.AssetAlias_VersionWorkflowInstanceID, T1.A" +
                    "ssetAlias_VersionUpdatedBy, T1.AssetAlias_VersionDeletedBy, T1.AssetAlias_Versio" +
                    "nOwnerContactID, T1.AssetAlias_VersionOwnerCompanyID, T1.AssetAlias_VersionUpdat" +
                    "ed)\r\n    FROM (\r\n        SELECT \r\n            T.AssetAliasID AS AssetAlias_Asset" +
                    "AliasID, \r\n            T.AssetID AS AssetAlias_AssetID, \r\n            T.AssetAli" +
                    "asName AS AssetAlias_AssetAliasName, \r\n            T.FullDescription AS AssetAli" +
                    "as_FullDescription, \r\n            T.Thumbnail AS AssetAlias_Thumbnail, \r\n       " +
                    "     T.OriginalFileDataID AS AssetAlias_OriginalFileDataID, \r\n            T.Vers" +
                    "ion AS AssetAlias_Version, \r\n            T.VersionAntecedentID AS AssetAlias_Ver" +
                    "sionAntecedentID, \r\n            T.VersionCertainty AS AssetAlias_VersionCertaint" +
                    "y, \r\n            T.VersionWorkflowInstanceID AS AssetAlias_VersionWorkflowInstan" +
                    "ceID, \r\n            T.VersionUpdatedBy AS AssetAlias_VersionUpdatedBy, \r\n       " +
                    "     T.VersionDeletedBy AS AssetAlias_VersionDeletedBy, \r\n            T.VersionO" +
                    "wnerContactID AS AssetAlias_VersionOwnerContactID, \r\n            T.VersionOwnerC" +
                    "ompanyID AS AssetAlias_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS " +
                    "AssetAlias_VersionUpdated, \r\n            True AS _from0\r\n        FROM NKDModuleB" +
                    "usinessObjectsStoreContainer.Q_AssetAlias AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.AssetMaintenances
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView364()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.AssetMaintenances", "\r\n    SELECT VALUE -- Constructing AssetMaintenances\r\n        [NKD.Module.Busines" +
                    "sObjects.AssetMaintenance](T1.AssetMaintenance_AssetMaintenanceID, T1.AssetMaint" +
                    "enance_AssetID, T1.AssetMaintenance_ModelProcedureID, T1.AssetMaintenance_Versio" +
                    "n, T1.AssetMaintenance_VersionAntecedentID, T1.AssetMaintenance_VersionCertainty" +
                    ", T1.AssetMaintenance_VersionWorkflowInstanceID, T1.AssetMaintenance_VersionUpda" +
                    "tedBy, T1.AssetMaintenance_VersionDeletedBy, T1.AssetMaintenance_VersionOwnerCon" +
                    "tactID, T1.AssetMaintenance_VersionOwnerCompanyID, T1.AssetMaintenance_VersionUp" +
                    "dated, T1.AssetMaintenance_NextDueDateService, T1.AssetMaintenance_NextDueDateBi" +
                    "lling)\r\n    FROM (\r\n        SELECT \r\n            T.AssetMaintenanceID AS AssetMa" +
                    "intenance_AssetMaintenanceID, \r\n            T.AssetID AS AssetMaintenance_AssetI" +
                    "D, \r\n            T.ModelProcedureID AS AssetMaintenance_ModelProcedureID, \r\n    " +
                    "        T.Version AS AssetMaintenance_Version, \r\n            T.VersionAntecedent" +
                    "ID AS AssetMaintenance_VersionAntecedentID, \r\n            T.VersionCertainty AS " +
                    "AssetMaintenance_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS " +
                    "AssetMaintenance_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS " +
                    "AssetMaintenance_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS AssetMain" +
                    "tenance_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS AssetMaintena" +
                    "nce_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS AssetMainten" +
                    "ance_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS AssetMaintenance_V" +
                    "ersionUpdated, \r\n            T.NextDueDateService AS AssetMaintenance_NextDueDat" +
                    "eService, \r\n            T.NextDueDateBilling AS AssetMaintenance_NextDueDateBill" +
                    "ing, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreCon" +
                    "tainer.Q_AssetMaintenance AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.AssetWarranties
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView365()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.AssetWarranties", "\r\n    SELECT VALUE -- Constructing AssetWarranties\r\n        [NKD.Module.BusinessO" +
                    "bjects.AssetWarranty](T1.AssetWarranty_AssetID, T1.AssetWarranty_ModelWarrantyID" +
                    ", T1.AssetWarranty_StartDate, T1.AssetWarranty_EndDate, T1.AssetWarranty_Frequen" +
                    "cy, T1.AssetWarranty_FrequencyUnitID, T1.AssetWarranty_WarrantyTypeID, T1.AssetW" +
                    "arranty_Version, T1.AssetWarranty_VersionAntecedentID, T1.AssetWarranty_VersionC" +
                    "ertainty, T1.AssetWarranty_VersionWorkflowInstanceID, T1.AssetWarranty_VersionUp" +
                    "datedBy, T1.AssetWarranty_VersionDeletedBy, T1.AssetWarranty_VersionOwnerContact" +
                    "ID, T1.AssetWarranty_VersionOwnerCompanyID, T1.AssetWarranty_VersionUpdated, T1." +
                    "AssetWarranty_AssetWarrantyID)\r\n    FROM (\r\n        SELECT \r\n            T.Asset" +
                    "ID AS AssetWarranty_AssetID, \r\n            T.ModelWarrantyID AS AssetWarranty_Mo" +
                    "delWarrantyID, \r\n            T.StartDate AS AssetWarranty_StartDate, \r\n         " +
                    "   T.EndDate AS AssetWarranty_EndDate, \r\n            T.Frequency AS AssetWarrant" +
                    "y_Frequency, \r\n            T.FrequencyUnitID AS AssetWarranty_FrequencyUnitID, \r" +
                    "\n            T.WarrantyTypeID AS AssetWarranty_WarrantyTypeID, \r\n            T.V" +
                    "ersion AS AssetWarranty_Version, \r\n            T.VersionAntecedentID AS AssetWar" +
                    "ranty_VersionAntecedentID, \r\n            T.VersionCertainty AS AssetWarranty_Ver" +
                    "sionCertainty, \r\n            T.VersionWorkflowInstanceID AS AssetWarranty_Versio" +
                    "nWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS AssetWarranty_VersionUp" +
                    "datedBy, \r\n            T.VersionDeletedBy AS AssetWarranty_VersionDeletedBy, \r\n " +
                    "           T.VersionOwnerContactID AS AssetWarranty_VersionOwnerContactID, \r\n   " +
                    "         T.VersionOwnerCompanyID AS AssetWarranty_VersionOwnerCompanyID, \r\n     " +
                    "       T.VersionUpdated AS AssetWarranty_VersionUpdated, \r\n            T.AssetWa" +
                    "rrantyID AS AssetWarranty_AssetWarrantyID, \r\n            True AS _from0\r\n       " +
                    " FROM NKDModuleBusinessObjectsStoreContainer.Q_AssetWarranty AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.CompanyAccounts
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView366()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.CompanyAccounts", @"
    SELECT VALUE -- Constructing CompanyAccounts
        [NKD.Module.BusinessObjects.CompanyAccount](T1.CompanyAccount_CompanyAccountID, T1.CompanyAccount_CompanyID, T1.CompanyAccount_AccountID, T1.CompanyAccount_Version, T1.CompanyAccount_VersionAntecedentID, T1.CompanyAccount_VersionCertainty, T1.CompanyAccount_VersionWorkflowInstanceID, T1.CompanyAccount_VersionUpdatedBy, T1.CompanyAccount_VersionDeletedBy, T1.CompanyAccount_VersionOwnerContactID, T1.CompanyAccount_VersionOwnerCompanyID, T1.CompanyAccount_VersionUpdated)
    FROM (
        SELECT 
            T.CompanyAccountID AS CompanyAccount_CompanyAccountID, 
            T.CompanyID AS CompanyAccount_CompanyID, 
            T.AccountID AS CompanyAccount_AccountID, 
            T.Version AS CompanyAccount_Version, 
            T.VersionAntecedentID AS CompanyAccount_VersionAntecedentID, 
            T.VersionCertainty AS CompanyAccount_VersionCertainty, 
            T.VersionWorkflowInstanceID AS CompanyAccount_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS CompanyAccount_VersionUpdatedBy, 
            T.VersionDeletedBy AS CompanyAccount_VersionDeletedBy, 
            T.VersionOwnerContactID AS CompanyAccount_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS CompanyAccount_VersionOwnerCompanyID, 
            T.VersionUpdated AS CompanyAccount_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.Q_CompanyAccount AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.ContractAssets
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView367()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.ContractAssets", "\r\n    SELECT VALUE -- Constructing ContractAssets\r\n        [NKD.Module.BusinessOb" +
                    "jects.ContractAsset](T1.ContractAsset_ContractAssetID, T1.ContractAsset_Contract" +
                    "ID, T1.ContractAsset_AssetID, T1.ContractAsset_OverrideCoverageStart, T1.Contrac" +
                    "tAsset_OverrideCoverageEnd, T1.ContractAsset_Version, T1.ContractAsset_VersionAn" +
                    "tecedentID, T1.ContractAsset_VersionCertainty, T1.ContractAsset_VersionWorkflowI" +
                    "nstanceID, T1.ContractAsset_VersionUpdatedBy, T1.ContractAsset_VersionDeletedBy," +
                    " T1.ContractAsset_VersionOwnerContactID, T1.ContractAsset_VersionOwnerCompanyID," +
                    " T1.ContractAsset_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.Co" +
                    "ntractAssetID AS ContractAsset_ContractAssetID, \r\n            T.ContractID AS Co" +
                    "ntractAsset_ContractID, \r\n            T.AssetID AS ContractAsset_AssetID, \r\n    " +
                    "        T.OverrideCoverageStart AS ContractAsset_OverrideCoverageStart, \r\n      " +
                    "      T.OverrideCoverageEnd AS ContractAsset_OverrideCoverageEnd, \r\n            " +
                    "T.Version AS ContractAsset_Version, \r\n            T.VersionAntecedentID AS Contr" +
                    "actAsset_VersionAntecedentID, \r\n            T.VersionCertainty AS ContractAsset_" +
                    "VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS ContractAsset_Ver" +
                    "sionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS ContractAsset_Versio" +
                    "nUpdatedBy, \r\n            T.VersionDeletedBy AS ContractAsset_VersionDeletedBy, " +
                    "\r\n            T.VersionOwnerContactID AS ContractAsset_VersionOwnerContactID, \r\n" +
                    "            T.VersionOwnerCompanyID AS ContractAsset_VersionOwnerCompanyID, \r\n  " +
                    "          T.VersionUpdated AS ContractAsset_VersionUpdated, \r\n            True A" +
                    "S _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.Q_ContractAsset AS" +
                    " T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.DeliveryAdvices
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView368()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3038);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DeliveryAdvices\r\n        [NKD.Module.Business");
            viewString.Append("Objects.DeliveryAdvice](T1.DeliveryAdvice_DeliveryAdviceID, T1.DeliveryAdvice_De");
            viewString.Append("liveryAdviceName, T1.DeliveryAdvice_Sequence, T1.DeliveryAdvice_ShippingCompanyI");
            viewString.Append("D, T1.DeliveryAdvice_FreightCharge, T1.DeliveryAdvice_FreightTax, T1.DeliveryAdv");
            viewString.Append("ice_ConsignmentNote, T1.DeliveryAdvice_AccessoriesSent, T1.DeliveryAdvice_Delive");
            viewString.Append("ryAdviceNotes, T1.DeliveryAdvice_IsEditable, T1.DeliveryAdvice_SourceCompanyAddr");
            viewString.Append("essID, T1.DeliveryAdvice_DestinationCompanyAddressID, T1.DeliveryAdvice_Delivery");
            viewString.Append("AdviceReasonID, T1.DeliveryAdvice_DeliveryAdviceReasonNote, T1.DeliveryAdvice_Bi");
            viewString.Append("llingAccountID, T1.DeliveryAdvice_ProjectDeliverableID, T1.DeliveryAdvice_Projec");
            viewString.Append("tID, T1.DeliveryAdvice_Version, T1.DeliveryAdvice_VersionAntecedentID, T1.Delive");
            viewString.Append("ryAdvice_VersionCertainty, T1.DeliveryAdvice_VersionWorkflowInstanceID, T1.Deliv");
            viewString.Append("eryAdvice_VersionUpdatedBy, T1.DeliveryAdvice_VersionDeletedBy, T1.DeliveryAdvic");
            viewString.Append("e_VersionOwnerContactID, T1.DeliveryAdvice_VersionOwnerCompanyID, T1.DeliveryAdv");
            viewString.Append("ice_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.DeliveryAdviceID");
            viewString.Append(" AS DeliveryAdvice_DeliveryAdviceID, \r\n            T.DeliveryAdviceName AS Deliv");
            viewString.Append("eryAdvice_DeliveryAdviceName, \r\n            T.Sequence AS DeliveryAdvice_Sequenc");
            viewString.Append("e, \r\n            T.ShippingCompanyID AS DeliveryAdvice_ShippingCompanyID, \r\n    ");
            viewString.Append("        T.FreightCharge AS DeliveryAdvice_FreightCharge, \r\n            T.Freight");
            viewString.Append("Tax AS DeliveryAdvice_FreightTax, \r\n            T.ConsignmentNote AS DeliveryAdv");
            viewString.Append("ice_ConsignmentNote, \r\n            T.AccessoriesSent AS DeliveryAdvice_Accessori");
            viewString.Append("esSent, \r\n            T.DeliveryAdviceNotes AS DeliveryAdvice_DeliveryAdviceNote");
            viewString.Append("s, \r\n            T.IsEditable AS DeliveryAdvice_IsEditable, \r\n            T.Sour");
            viewString.Append("ceCompanyAddressID AS DeliveryAdvice_SourceCompanyAddressID, \r\n            T.Des");
            viewString.Append("tinationCompanyAddressID AS DeliveryAdvice_DestinationCompanyAddressID, \r\n      ");
            viewString.Append("      T.DeliveryAdviceReasonID AS DeliveryAdvice_DeliveryAdviceReasonID, \r\n     ");
            viewString.Append("       T.DeliveryAdviceReasonNote AS DeliveryAdvice_DeliveryAdviceReasonNote, \r\n");
            viewString.Append("            T.BillingAccountID AS DeliveryAdvice_BillingAccountID, \r\n           ");
            viewString.Append(" T.ProjectDeliverableID AS DeliveryAdvice_ProjectDeliverableID, \r\n            T.");
            viewString.Append("ProjectID AS DeliveryAdvice_ProjectID, \r\n            T.Version AS DeliveryAdvice");
            viewString.Append("_Version, \r\n            T.VersionAntecedentID AS DeliveryAdvice_VersionAnteceden");
            viewString.Append("tID, \r\n            T.VersionCertainty AS DeliveryAdvice_VersionCertainty, \r\n    ");
            viewString.Append("        T.VersionWorkflowInstanceID AS DeliveryAdvice_VersionWorkflowInstanceID,");
            viewString.Append(" \r\n            T.VersionUpdatedBy AS DeliveryAdvice_VersionUpdatedBy, \r\n        ");
            viewString.Append("    T.VersionDeletedBy AS DeliveryAdvice_VersionDeletedBy, \r\n            T.Versi");
            viewString.Append("onOwnerContactID AS DeliveryAdvice_VersionOwnerContactID, \r\n            T.Versio");
            viewString.Append("nOwnerCompanyID AS DeliveryAdvice_VersionOwnerCompanyID, \r\n            T.Version");
            viewString.Append("Updated AS DeliveryAdvice_VersionUpdated, \r\n            True AS _from0\r\n        ");
            viewString.Append("FROM NKDModuleBusinessObjectsStoreContainer.Q_DeliveryAdvice AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DeliveryAdvices", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DeliveryAdviceItems
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView369()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2413);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DeliveryAdviceItems\r\n        [NKD.Module.Busi");
            viewString.Append("nessObjects.DeliveryAdviceItem](T1.DeliveryAdviceItem_DeliveryAdviceItemID, T1.D");
            viewString.Append("eliveryAdviceItem_DeliveryAdviceID, T1.DeliveryAdviceItem_AssetID, T1.DeliveryAd");
            viewString.Append("viceItem_ItemDescription, T1.DeliveryAdviceItem_PartID, T1.DeliveryAdviceItem_Qu");
            viewString.Append("antitySent, T1.DeliveryAdviceItem_QuantityReceived, T1.DeliveryAdviceItem_Return");
            viewString.Append("ReferenceNumber, T1.DeliveryAdviceItem_ItemInstruction, T1.DeliveryAdviceItem_De");
            viewString.Append("contaminationStatusID, T1.DeliveryAdviceItem_Version, T1.DeliveryAdviceItem_Vers");
            viewString.Append("ionAntecedentID, T1.DeliveryAdviceItem_VersionCertainty, T1.DeliveryAdviceItem_V");
            viewString.Append("ersionWorkflowInstanceID, T1.DeliveryAdviceItem_VersionUpdatedBy, T1.DeliveryAdv");
            viewString.Append("iceItem_VersionDeletedBy, T1.DeliveryAdviceItem_VersionOwnerContactID, T1.Delive");
            viewString.Append("ryAdviceItem_VersionOwnerCompanyID, T1.DeliveryAdviceItem_VersionUpdated)\r\n    F");
            viewString.Append("ROM (\r\n        SELECT \r\n            T.DeliveryAdviceItemID AS DeliveryAdviceItem");
            viewString.Append("_DeliveryAdviceItemID, \r\n            T.DeliveryAdviceID AS DeliveryAdviceItem_De");
            viewString.Append("liveryAdviceID, \r\n            T.AssetID AS DeliveryAdviceItem_AssetID, \r\n       ");
            viewString.Append("     T.ItemDescription AS DeliveryAdviceItem_ItemDescription, \r\n            T.Pa");
            viewString.Append("rtID AS DeliveryAdviceItem_PartID, \r\n            T.QuantitySent AS DeliveryAdvic");
            viewString.Append("eItem_QuantitySent, \r\n            T.QuantityReceived AS DeliveryAdviceItem_Quant");
            viewString.Append("ityReceived, \r\n            T.ReturnReferenceNumber AS DeliveryAdviceItem_ReturnR");
            viewString.Append("eferenceNumber, \r\n            T.ItemInstruction AS DeliveryAdviceItem_ItemInstru");
            viewString.Append("ction, \r\n            T.DecontaminationStatusID AS DeliveryAdviceItem_Decontamina");
            viewString.Append("tionStatusID, \r\n            T.Version AS DeliveryAdviceItem_Version, \r\n         ");
            viewString.Append("   T.VersionAntecedentID AS DeliveryAdviceItem_VersionAntecedentID, \r\n          ");
            viewString.Append("  T.VersionCertainty AS DeliveryAdviceItem_VersionCertainty, \r\n            T.Ver");
            viewString.Append("sionWorkflowInstanceID AS DeliveryAdviceItem_VersionWorkflowInstanceID, \r\n      ");
            viewString.Append("      T.VersionUpdatedBy AS DeliveryAdviceItem_VersionUpdatedBy, \r\n            T");
            viewString.Append(".VersionDeletedBy AS DeliveryAdviceItem_VersionDeletedBy, \r\n            T.Versio");
            viewString.Append("nOwnerContactID AS DeliveryAdviceItem_VersionOwnerContactID, \r\n            T.Ver");
            viewString.Append("sionOwnerCompanyID AS DeliveryAdviceItem_VersionOwnerCompanyID, \r\n            T.");
            viewString.Append("VersionUpdated AS DeliveryAdviceItem_VersionUpdated, \r\n            True AS _from");
            viewString.Append("0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.Q_DeliveryAdviceItem AS T");
            viewString.Append("\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DeliveryAdviceItems", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryDecontaminationStatus
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView370()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2382);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryDecontaminationStatus\r\n        [NKD");
            viewString.Append(".Module.BusinessObjects.DictionaryDecontaminationStatus](T1.DictionaryDecontamin");
            viewString.Append("ationStatus_DecontaminationStatusID, T1.DictionaryDecontaminationStatus_Standard");
            viewString.Append("DecontaminationStatusName, T1.DictionaryDecontaminationStatus_CustomDecontaminat");
            viewString.Append("ionStatusName, T1.DictionaryDecontaminationStatus_IsSafeForHandling, T1.Dictiona");
            viewString.Append("ryDecontaminationStatus_Description, T1.DictionaryDecontaminationStatus_Version,");
            viewString.Append(" T1.DictionaryDecontaminationStatus_VersionAntecedentID, T1.DictionaryDecontamin");
            viewString.Append("ationStatus_VersionCertainty, T1.DictionaryDecontaminationStatus_VersionWorkflow");
            viewString.Append("InstanceID, T1.DictionaryDecontaminationStatus_VersionUpdatedBy, T1.DictionaryDe");
            viewString.Append("contaminationStatus_VersionDeletedBy, T1.DictionaryDecontaminationStatus_Version");
            viewString.Append("OwnerContactID, T1.DictionaryDecontaminationStatus_VersionOwnerCompanyID, T1.Dic");
            viewString.Append("tionaryDecontaminationStatus_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n     ");
            viewString.Append("       T.DecontaminationStatusID AS DictionaryDecontaminationStatus_Decontaminat");
            viewString.Append("ionStatusID, \r\n            T.StandardDecontaminationStatusName AS DictionaryDeco");
            viewString.Append("ntaminationStatus_StandardDecontaminationStatusName, \r\n            T.CustomDecon");
            viewString.Append("taminationStatusName AS DictionaryDecontaminationStatus_CustomDecontaminationSta");
            viewString.Append("tusName, \r\n            T.IsSafeForHandling AS DictionaryDecontaminationStatus_Is");
            viewString.Append("SafeForHandling, \r\n            T.Description AS DictionaryDecontaminationStatus_");
            viewString.Append("Description, \r\n            T.Version AS DictionaryDecontaminationStatus_Version,");
            viewString.Append(" \r\n            T.VersionAntecedentID AS DictionaryDecontaminationStatus_VersionA");
            viewString.Append("ntecedentID, \r\n            T.VersionCertainty AS DictionaryDecontaminationStatus");
            viewString.Append("_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS DictionaryDecont");
            viewString.Append("aminationStatus_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS D");
            viewString.Append("ictionaryDecontaminationStatus_VersionUpdatedBy, \r\n            T.VersionDeletedB");
            viewString.Append("y AS DictionaryDecontaminationStatus_VersionDeletedBy, \r\n            T.VersionOw");
            viewString.Append("nerContactID AS DictionaryDecontaminationStatus_VersionOwnerContactID, \r\n       ");
            viewString.Append("     T.VersionOwnerCompanyID AS DictionaryDecontaminationStatus_VersionOwnerComp");
            viewString.Append("anyID, \r\n            T.VersionUpdated AS DictionaryDecontaminationStatus_Version");
            viewString.Append("Updated, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjectsStor");
            viewString.Append("eContainer.Q_DictionaryDecontaminationStatus AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryDecontaminationStatus", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryDeliveryAdviceReasons
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView371()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2203);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryDeliveryAdviceReasons\r\n        [NKD");
            viewString.Append(".Module.BusinessObjects.DictionaryDeliveryAdviceReason](T1.DictionaryDeliveryAdv");
            viewString.Append("iceReason_DeliveryAdviceReasonID, T1.DictionaryDeliveryAdviceReason_StandardDeli");
            viewString.Append("veryAdviceReasonName, T1.DictionaryDeliveryAdviceReason_CustomDeliveryAdviceReas");
            viewString.Append("onName, T1.DictionaryDeliveryAdviceReason_Description, T1.DictionaryDeliveryAdvi");
            viewString.Append("ceReason_Version, T1.DictionaryDeliveryAdviceReason_VersionAntecedentID, T1.Dict");
            viewString.Append("ionaryDeliveryAdviceReason_VersionCertainty, T1.DictionaryDeliveryAdviceReason_V");
            viewString.Append("ersionWorkflowInstanceID, T1.DictionaryDeliveryAdviceReason_VersionUpdatedBy, T1");
            viewString.Append(".DictionaryDeliveryAdviceReason_VersionDeletedBy, T1.DictionaryDeliveryAdviceRea");
            viewString.Append("son_VersionOwnerContactID, T1.DictionaryDeliveryAdviceReason_VersionOwnerCompany");
            viewString.Append("ID, T1.DictionaryDeliveryAdviceReason_VersionUpdated)\r\n    FROM (\r\n        SELEC");
            viewString.Append("T \r\n            T.DeliveryAdviceReasonID AS DictionaryDeliveryAdviceReason_Deliv");
            viewString.Append("eryAdviceReasonID, \r\n            T.StandardDeliveryAdviceReasonName AS Dictionar");
            viewString.Append("yDeliveryAdviceReason_StandardDeliveryAdviceReasonName, \r\n            T.CustomDe");
            viewString.Append("liveryAdviceReasonName AS DictionaryDeliveryAdviceReason_CustomDeliveryAdviceRea");
            viewString.Append("sonName, \r\n            T.Description AS DictionaryDeliveryAdviceReason_Descripti");
            viewString.Append("on, \r\n            T.Version AS DictionaryDeliveryAdviceReason_Version, \r\n       ");
            viewString.Append("     T.VersionAntecedentID AS DictionaryDeliveryAdviceReason_VersionAntecedentID");
            viewString.Append(", \r\n            T.VersionCertainty AS DictionaryDeliveryAdviceReason_VersionCert");
            viewString.Append("ainty, \r\n            T.VersionWorkflowInstanceID AS DictionaryDeliveryAdviceReas");
            viewString.Append("on_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS DictionaryDeli");
            viewString.Append("veryAdviceReason_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS Dictionar");
            viewString.Append("yDeliveryAdviceReason_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS");
            viewString.Append(" DictionaryDeliveryAdviceReason_VersionOwnerContactID, \r\n            T.VersionOw");
            viewString.Append("nerCompanyID AS DictionaryDeliveryAdviceReason_VersionOwnerCompanyID, \r\n        ");
            viewString.Append("    T.VersionUpdated AS DictionaryDeliveryAdviceReason_VersionUpdated, \r\n       ");
            viewString.Append("     True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.Q_Dicti");
            viewString.Append("onaryDeliveryAdviceReason AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryDeliveryAdviceReasons", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryDeviceTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView372()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2480);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryDeviceTypes\r\n        [NKD.Module.Bu");
            viewString.Append("sinessObjects.DictionaryDeviceType](T1.DictionaryDeviceType_DeviceTypeID, T1.Dic");
            viewString.Append("tionaryDeviceType_ParentDeviceTypeID, T1.DictionaryDeviceType_StandardDeviceType");
            viewString.Append("Name, T1.DictionaryDeviceType_EcriDeviceTypeName, T1.DictionaryDeviceType_Custom");
            viewString.Append("DeviceTypeName, T1.DictionaryDeviceType_PrimaryWorkTypeID, T1.DictionaryDeviceTy");
            viewString.Append("pe_IsAttributable, T1.DictionaryDeviceType_IsDevice, T1.DictionaryDeviceType_IsP");
            viewString.Append("art, T1.DictionaryDeviceType_Description, T1.DictionaryDeviceType_Version, T1.Di");
            viewString.Append("ctionaryDeviceType_VersionAntecedentID, T1.DictionaryDeviceType_VersionCertainty");
            viewString.Append(", T1.DictionaryDeviceType_VersionWorkflowInstanceID, T1.DictionaryDeviceType_Ver");
            viewString.Append("sionUpdatedBy, T1.DictionaryDeviceType_VersionDeletedBy, T1.DictionaryDeviceType");
            viewString.Append("_VersionOwnerContactID, T1.DictionaryDeviceType_VersionOwnerCompanyID, T1.Dictio");
            viewString.Append("naryDeviceType_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.Devic");
            viewString.Append("eTypeID AS DictionaryDeviceType_DeviceTypeID, \r\n            T.ParentDeviceTypeID");
            viewString.Append(" AS DictionaryDeviceType_ParentDeviceTypeID, \r\n            T.StandardDeviceTypeN");
            viewString.Append("ame AS DictionaryDeviceType_StandardDeviceTypeName, \r\n            T.EcriDeviceTy");
            viewString.Append("peName AS DictionaryDeviceType_EcriDeviceTypeName, \r\n            T.CustomDeviceT");
            viewString.Append("ypeName AS DictionaryDeviceType_CustomDeviceTypeName, \r\n            T.PrimaryWor");
            viewString.Append("kTypeID AS DictionaryDeviceType_PrimaryWorkTypeID, \r\n            T.IsAttributabl");
            viewString.Append("e AS DictionaryDeviceType_IsAttributable, \r\n            T.IsDevice AS Dictionary");
            viewString.Append("DeviceType_IsDevice, \r\n            T.IsPart AS DictionaryDeviceType_IsPart, \r\n  ");
            viewString.Append("          T.Description AS DictionaryDeviceType_Description, \r\n            T.Ver");
            viewString.Append("sion AS DictionaryDeviceType_Version, \r\n            T.VersionAntecedentID AS Dic");
            viewString.Append("tionaryDeviceType_VersionAntecedentID, \r\n            T.VersionCertainty AS Dicti");
            viewString.Append("onaryDeviceType_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS D");
            viewString.Append("ictionaryDeviceType_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy ");
            viewString.Append("AS DictionaryDeviceType_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS Di");
            viewString.Append("ctionaryDeviceType_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS Di");
            viewString.Append("ctionaryDeviceType_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID ");
            viewString.Append("AS DictionaryDeviceType_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS");
            viewString.Append(" DictionaryDeviceType_VersionUpdated, \r\n            True AS _from0\r\n        FROM");
            viewString.Append(" NKDModuleBusinessObjectsStoreContainer.Q_DictionaryDeviceType AS T\r\n    ) AS T1");
            viewString.Append("");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryDeviceTypes", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryEventTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView373()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryEventTypes", "\r\n    SELECT VALUE -- Constructing DictionaryEventTypes\r\n        [NKD.Module.Busi" +
                    "nessObjects.DictionaryEventType](T1.DictionaryEventType_EventTypeID, T1.Dictiona" +
                    "ryEventType_StandardEventTypeName, T1.DictionaryEventType_CustomEventTypeName, T" +
                    "1.DictionaryEventType_Description, T1.DictionaryEventType_Version, T1.Dictionary" +
                    "EventType_VersionAntecedentID, T1.DictionaryEventType_VersionCertainty, T1.Dicti" +
                    "onaryEventType_VersionWorkflowInstanceID, T1.DictionaryEventType_VersionUpdatedB" +
                    "y, T1.DictionaryEventType_VersionDeletedBy, T1.DictionaryEventType_VersionOwnerC" +
                    "ontactID, T1.DictionaryEventType_VersionOwnerCompanyID, T1.DictionaryEventType_V" +
                    "ersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.EventTypeID AS Dictio" +
                    "naryEventType_EventTypeID, \r\n            T.StandardEventTypeName AS DictionaryEv" +
                    "entType_StandardEventTypeName, \r\n            T.CustomEventTypeName AS Dictionary" +
                    "EventType_CustomEventTypeName, \r\n            T.Description AS DictionaryEventTyp" +
                    "e_Description, \r\n            T.Version AS DictionaryEventType_Version, \r\n       " +
                    "     T.VersionAntecedentID AS DictionaryEventType_VersionAntecedentID, \r\n       " +
                    "     T.VersionCertainty AS DictionaryEventType_VersionCertainty, \r\n            T" +
                    ".VersionWorkflowInstanceID AS DictionaryEventType_VersionWorkflowInstanceID, \r\n " +
                    "           T.VersionUpdatedBy AS DictionaryEventType_VersionUpdatedBy, \r\n       " +
                    "     T.VersionDeletedBy AS DictionaryEventType_VersionDeletedBy, \r\n            T" +
                    ".VersionOwnerContactID AS DictionaryEventType_VersionOwnerContactID, \r\n         " +
                    "   T.VersionOwnerCompanyID AS DictionaryEventType_VersionOwnerCompanyID, \r\n     " +
                    "       T.VersionUpdated AS DictionaryEventType_VersionUpdated, \r\n            Tru" +
                    "e AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.Q_DictionaryEve" +
                    "ntType AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryParts
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView374()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3023);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryParts\r\n        [NKD.Module.Business");
            viewString.Append("Objects.DictionaryPart](T1.DictionaryPart_PartID, T1.DictionaryPart_ParentPartID");
            viewString.Append(", T1.DictionaryPart_StandardPartName, T1.DictionaryPart_EcriPartName, T1.Diction");
            viewString.Append("aryPart_CustomPartName, T1.DictionaryPart_CompanyID, T1.DictionaryPart_OriginalM");
            viewString.Append("anufacturerName, T1.DictionaryPart_PartStatusID, T1.DictionaryPart_DeviceTypeID,");
            viewString.Append(" T1.DictionaryPart_ManufacturedFrom, T1.DictionaryPart_ManufacturedUntil, T1.Dic");
            viewString.Append("tionaryPart_SupportedUntil, T1.DictionaryPart_EstimatedLifetimeUnitID, T1.Dictio");
            viewString.Append("naryPart_EstimatedLifetime, T1.DictionaryPart_Description, T1.DictionaryPart_Ful");
            viewString.Append("lDescription, T1.DictionaryPart_Thumbnail, T1.DictionaryPart_OriginalFileDataID,");
            viewString.Append(" T1.DictionaryPart_Version, T1.DictionaryPart_VersionAntecedentID, T1.Dictionary");
            viewString.Append("Part_VersionCertainty, T1.DictionaryPart_VersionWorkflowInstanceID, T1.Dictionar");
            viewString.Append("yPart_VersionUpdatedBy, T1.DictionaryPart_VersionDeletedBy, T1.DictionaryPart_Ve");
            viewString.Append("rsionOwnerContactID, T1.DictionaryPart_VersionOwnerCompanyID, T1.DictionaryPart_");
            viewString.Append("VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.PartID AS Dictionary");
            viewString.Append("Part_PartID, \r\n            T.ParentPartID AS DictionaryPart_ParentPartID, \r\n    ");
            viewString.Append("        T.StandardPartName AS DictionaryPart_StandardPartName, \r\n            T.E");
            viewString.Append("criPartName AS DictionaryPart_EcriPartName, \r\n            T.CustomPartName AS Di");
            viewString.Append("ctionaryPart_CustomPartName, \r\n            T.CompanyID AS DictionaryPart_Company");
            viewString.Append("ID, \r\n            T.OriginalManufacturerName AS DictionaryPart_OriginalManufactu");
            viewString.Append("rerName, \r\n            T.PartStatusID AS DictionaryPart_PartStatusID, \r\n        ");
            viewString.Append("    T.DeviceTypeID AS DictionaryPart_DeviceTypeID, \r\n            T.ManufacturedF");
            viewString.Append("rom AS DictionaryPart_ManufacturedFrom, \r\n            T.ManufacturedUntil AS Dic");
            viewString.Append("tionaryPart_ManufacturedUntil, \r\n            T.SupportedUntil AS DictionaryPart_");
            viewString.Append("SupportedUntil, \r\n            T.EstimatedLifetimeUnitID AS DictionaryPart_Estima");
            viewString.Append("tedLifetimeUnitID, \r\n            T.EstimatedLifetime AS DictionaryPart_Estimated");
            viewString.Append("Lifetime, \r\n            T.Description AS DictionaryPart_Description, \r\n         ");
            viewString.Append("   T.FullDescription AS DictionaryPart_FullDescription, \r\n            T.Thumbnai");
            viewString.Append("l AS DictionaryPart_Thumbnail, \r\n            T.OriginalFileDataID AS DictionaryP");
            viewString.Append("art_OriginalFileDataID, \r\n            T.Version AS DictionaryPart_Version, \r\n   ");
            viewString.Append("         T.VersionAntecedentID AS DictionaryPart_VersionAntecedentID, \r\n        ");
            viewString.Append("    T.VersionCertainty AS DictionaryPart_VersionCertainty, \r\n            T.Versi");
            viewString.Append("onWorkflowInstanceID AS DictionaryPart_VersionWorkflowInstanceID, \r\n            ");
            viewString.Append("T.VersionUpdatedBy AS DictionaryPart_VersionUpdatedBy, \r\n            T.VersionDe");
            viewString.Append("letedBy AS DictionaryPart_VersionDeletedBy, \r\n            T.VersionOwnerContactI");
            viewString.Append("D AS DictionaryPart_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID");
            viewString.Append(" AS DictionaryPart_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS Dict");
            viewString.Append("ionaryPart_VersionUpdated, \r\n            True AS _from0\r\n        FROM NKDModuleB");
            viewString.Append("usinessObjectsStoreContainer.Q_DictionaryPart AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryParts", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryPartCategories
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView375()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryPartCategories", "\r\n    SELECT VALUE -- Constructing DictionaryPartCategories\r\n        [NKD.Module." +
                    "BusinessObjects.DictionaryPartCategory](T1.DictionaryPartCategory_PartCategoryID" +
                    ", T1.DictionaryPartCategory_PartID, T1.DictionaryPartCategory_CategoryDeviceType" +
                    "ID, T1.DictionaryPartCategory_Version, T1.DictionaryPartCategory_VersionAntecede" +
                    "ntID, T1.DictionaryPartCategory_VersionCertainty, T1.DictionaryPartCategory_Vers" +
                    "ionWorkflowInstanceID, T1.DictionaryPartCategory_VersionUpdatedBy, T1.Dictionary" +
                    "PartCategory_VersionDeletedBy, T1.DictionaryPartCategory_VersionOwnerContactID, " +
                    "T1.DictionaryPartCategory_VersionOwnerCompanyID, T1.DictionaryPartCategory_Versi" +
                    "onUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.PartCategoryID AS Diction" +
                    "aryPartCategory_PartCategoryID, \r\n            T.PartID AS DictionaryPartCategory" +
                    "_PartID, \r\n            T.CategoryDeviceTypeID AS DictionaryPartCategory_Category" +
                    "DeviceTypeID, \r\n            T.Version AS DictionaryPartCategory_Version, \r\n     " +
                    "       T.VersionAntecedentID AS DictionaryPartCategory_VersionAntecedentID, \r\n  " +
                    "          T.VersionCertainty AS DictionaryPartCategory_VersionCertainty, \r\n     " +
                    "       T.VersionWorkflowInstanceID AS DictionaryPartCategory_VersionWorkflowInst" +
                    "anceID, \r\n            T.VersionUpdatedBy AS DictionaryPartCategory_VersionUpdate" +
                    "dBy, \r\n            T.VersionDeletedBy AS DictionaryPartCategory_VersionDeletedBy" +
                    ", \r\n            T.VersionOwnerContactID AS DictionaryPartCategory_VersionOwnerCo" +
                    "ntactID, \r\n            T.VersionOwnerCompanyID AS DictionaryPartCategory_Version" +
                    "OwnerCompanyID, \r\n            T.VersionUpdated AS DictionaryPartCategory_Version" +
                    "Updated, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjectsStor" +
                    "eContainer.Q_DictionaryPartCategory AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryPartKits
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView376()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryPartKits", "\r\n    SELECT VALUE -- Constructing DictionaryPartKits\r\n        [NKD.Module.Busine" +
                    "ssObjects.DictionaryPartKit](T1.DictionaryPartKit_PartKitID, T1.DictionaryPartKi" +
                    "t_StandardPartKitName, T1.DictionaryPartKit_CustomPartKitName, T1.DictionaryPart" +
                    "Kit_Description, T1.DictionaryPartKit_Version, T1.DictionaryPartKit_VersionAntec" +
                    "edentID, T1.DictionaryPartKit_VersionCertainty, T1.DictionaryPartKit_VersionWork" +
                    "flowInstanceID, T1.DictionaryPartKit_VersionUpdatedBy, T1.DictionaryPartKit_Vers" +
                    "ionDeletedBy, T1.DictionaryPartKit_VersionOwnerContactID, T1.DictionaryPartKit_V" +
                    "ersionOwnerCompanyID, T1.DictionaryPartKit_VersionUpdated)\r\n    FROM (\r\n        " +
                    "SELECT \r\n            T.PartKitID AS DictionaryPartKit_PartKitID, \r\n            T" +
                    ".StandardPartKitName AS DictionaryPartKit_StandardPartKitName, \r\n            T.C" +
                    "ustomPartKitName AS DictionaryPartKit_CustomPartKitName, \r\n            T.Descrip" +
                    "tion AS DictionaryPartKit_Description, \r\n            T.Version AS DictionaryPart" +
                    "Kit_Version, \r\n            T.VersionAntecedentID AS DictionaryPartKit_VersionAnt" +
                    "ecedentID, \r\n            T.VersionCertainty AS DictionaryPartKit_VersionCertaint" +
                    "y, \r\n            T.VersionWorkflowInstanceID AS DictionaryPartKit_VersionWorkflo" +
                    "wInstanceID, \r\n            T.VersionUpdatedBy AS DictionaryPartKit_VersionUpdate" +
                    "dBy, \r\n            T.VersionDeletedBy AS DictionaryPartKit_VersionDeletedBy, \r\n " +
                    "           T.VersionOwnerContactID AS DictionaryPartKit_VersionOwnerContactID, \r" +
                    "\n            T.VersionOwnerCompanyID AS DictionaryPartKit_VersionOwnerCompanyID," +
                    " \r\n            T.VersionUpdated AS DictionaryPartKit_VersionUpdated, \r\n         " +
                    "   True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.Q_Diction" +
                    "aryPartKit AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryPartKitItems
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView377()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryPartKitItems", "\r\n    SELECT VALUE -- Constructing DictionaryPartKitItems\r\n        [NKD.Module.Bu" +
                    "sinessObjects.DictionaryPartKitItem](T1.DictionaryPartKitItem_PartKitItemID, T1." +
                    "DictionaryPartKitItem_PartKitID, T1.DictionaryPartKitItem_PartID, T1.DictionaryP" +
                    "artKitItem_UnitID, T1.DictionaryPartKitItem_Quantity, T1.DictionaryPartKitItem_V" +
                    "ersion, T1.DictionaryPartKitItem_VersionAntecedentID, T1.DictionaryPartKitItem_V" +
                    "ersionCertainty, T1.DictionaryPartKitItem_VersionWorkflowInstanceID, T1.Dictiona" +
                    "ryPartKitItem_VersionUpdatedBy, T1.DictionaryPartKitItem_VersionDeletedBy, T1.Di" +
                    "ctionaryPartKitItem_VersionOwnerContactID, T1.DictionaryPartKitItem_VersionOwner" +
                    "CompanyID, T1.DictionaryPartKitItem_VersionUpdated)\r\n    FROM (\r\n        SELECT " +
                    "\r\n            T.PartKitItemID AS DictionaryPartKitItem_PartKitItemID, \r\n        " +
                    "    T.PartKitID AS DictionaryPartKitItem_PartKitID, \r\n            T.PartID AS Di" +
                    "ctionaryPartKitItem_PartID, \r\n            T.UnitID AS DictionaryPartKitItem_Unit" +
                    "ID, \r\n            T.Quantity AS DictionaryPartKitItem_Quantity, \r\n            T." +
                    "Version AS DictionaryPartKitItem_Version, \r\n            T.VersionAntecedentID AS" +
                    " DictionaryPartKitItem_VersionAntecedentID, \r\n            T.VersionCertainty AS " +
                    "DictionaryPartKitItem_VersionCertainty, \r\n            T.VersionWorkflowInstanceI" +
                    "D AS DictionaryPartKitItem_VersionWorkflowInstanceID, \r\n            T.VersionUpd" +
                    "atedBy AS DictionaryPartKitItem_VersionUpdatedBy, \r\n            T.VersionDeleted" +
                    "By AS DictionaryPartKitItem_VersionDeletedBy, \r\n            T.VersionOwnerContac" +
                    "tID AS DictionaryPartKitItem_VersionOwnerContactID, \r\n            T.VersionOwner" +
                    "CompanyID AS DictionaryPartKitItem_VersionOwnerCompanyID, \r\n            T.Versio" +
                    "nUpdated AS DictionaryPartKitItem_VersionUpdated, \r\n            True AS _from0\r\n" +
                    "        FROM NKDModuleBusinessObjectsStoreContainer.Q_DictionaryPartKitItem AS T" +
                    "\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryProcedures
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView378()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2901);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryProcedures\r\n        [NKD.Module.Bus");
            viewString.Append("inessObjects.DictionaryProcedure](T1.DictionaryProcedure_ProcedureID, T1.Diction");
            viewString.Append("aryProcedure_StandardProcedureName, T1.DictionaryProcedure_CustomProcedureName, ");
            viewString.Append("T1.DictionaryProcedure_Description, T1.DictionaryProcedure_TaskID, T1.Dictionary");
            viewString.Append("Procedure_ModelID, T1.DictionaryProcedure_PartID, T1.DictionaryProcedure_Sequenc");
            viewString.Append("e, T1.DictionaryProcedure_ValidFrom, T1.DictionaryProcedure_ValidUntil, T1.Dicti");
            viewString.Append("onaryProcedure_FileDataID, T1.DictionaryProcedure_CountryID, T1.DictionaryProced");
            viewString.Append("ure_CountryStateID, T1.DictionaryProcedure_Place, T1.DictionaryProcedure_Locatio");
            viewString.Append("nID, T1.DictionaryProcedure_ProvinceID, T1.DictionaryProcedure_Version, T1.Dicti");
            viewString.Append("onaryProcedure_VersionAntecedentID, T1.DictionaryProcedure_VersionCertainty, T1.");
            viewString.Append("DictionaryProcedure_VersionWorkflowInstanceID, T1.DictionaryProcedure_VersionUpd");
            viewString.Append("atedBy, T1.DictionaryProcedure_VersionDeletedBy, T1.DictionaryProcedure_VersionO");
            viewString.Append("wnerContactID, T1.DictionaryProcedure_VersionOwnerCompanyID, T1.DictionaryProced");
            viewString.Append("ure_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.ProcedureID AS D");
            viewString.Append("ictionaryProcedure_ProcedureID, \r\n            T.StandardProcedureName AS Diction");
            viewString.Append("aryProcedure_StandardProcedureName, \r\n            T.CustomProcedureName AS Dicti");
            viewString.Append("onaryProcedure_CustomProcedureName, \r\n            T.Description AS DictionaryPro");
            viewString.Append("cedure_Description, \r\n            T.TaskID AS DictionaryProcedure_TaskID, \r\n    ");
            viewString.Append("        T.ModelID AS DictionaryProcedure_ModelID, \r\n            T.PartID AS Dict");
            viewString.Append("ionaryProcedure_PartID, \r\n            T.Sequence AS DictionaryProcedure_Sequence");
            viewString.Append(", \r\n            T.ValidFrom AS DictionaryProcedure_ValidFrom, \r\n            T.Va");
            viewString.Append("lidUntil AS DictionaryProcedure_ValidUntil, \r\n            T.FileDataID AS Dictio");
            viewString.Append("naryProcedure_FileDataID, \r\n            T.CountryID AS DictionaryProcedure_Count");
            viewString.Append("ryID, \r\n            T.CountryStateID AS DictionaryProcedure_CountryStateID, \r\n  ");
            viewString.Append("          T.Place AS DictionaryProcedure_Place, \r\n            T.LocationID AS Di");
            viewString.Append("ctionaryProcedure_LocationID, \r\n            T.ProvinceID AS DictionaryProcedure_");
            viewString.Append("ProvinceID, \r\n            T.Version AS DictionaryProcedure_Version, \r\n          ");
            viewString.Append("  T.VersionAntecedentID AS DictionaryProcedure_VersionAntecedentID, \r\n          ");
            viewString.Append("  T.VersionCertainty AS DictionaryProcedure_VersionCertainty, \r\n            T.Ve");
            viewString.Append("rsionWorkflowInstanceID AS DictionaryProcedure_VersionWorkflowInstanceID, \r\n    ");
            viewString.Append("        T.VersionUpdatedBy AS DictionaryProcedure_VersionUpdatedBy, \r\n          ");
            viewString.Append("  T.VersionDeletedBy AS DictionaryProcedure_VersionDeletedBy, \r\n            T.Ve");
            viewString.Append("rsionOwnerContactID AS DictionaryProcedure_VersionOwnerContactID, \r\n            ");
            viewString.Append("T.VersionOwnerCompanyID AS DictionaryProcedure_VersionOwnerCompanyID, \r\n        ");
            viewString.Append("    T.VersionUpdated AS DictionaryProcedure_VersionUpdated, \r\n            True A");
            viewString.Append("S _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.Q_DictionaryProced");
            viewString.Append("ure AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryProcedures", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryWarrantyTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView379()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryWarrantyTypes", "\r\n    SELECT VALUE -- Constructing DictionaryWarrantyTypes\r\n        [NKD.Module.B" +
                    "usinessObjects.DictionaryWarrantyType](T1.DictionaryWarrantyType_WarrantyTypeID," +
                    " T1.DictionaryWarrantyType_StandardWarrantyTypeName, T1.DictionaryWarrantyType_C" +
                    "ustomWarrantyTypeName, T1.DictionaryWarrantyType_Description, T1.DictionaryWarra" +
                    "ntyType_Version, T1.DictionaryWarrantyType_VersionAntecedentID, T1.DictionaryWar" +
                    "rantyType_VersionCertainty, T1.DictionaryWarrantyType_VersionWorkflowInstanceID," +
                    " T1.DictionaryWarrantyType_VersionUpdatedBy, T1.DictionaryWarrantyType_VersionDe" +
                    "letedBy, T1.DictionaryWarrantyType_VersionOwnerContactID, T1.DictionaryWarrantyT" +
                    "ype_VersionOwnerCompanyID, T1.DictionaryWarrantyType_VersionUpdated)\r\n    FROM (" +
                    "\r\n        SELECT \r\n            T.WarrantyTypeID AS DictionaryWarrantyType_Warran" +
                    "tyTypeID, \r\n            T.StandardWarrantyTypeName AS DictionaryWarrantyType_Sta" +
                    "ndardWarrantyTypeName, \r\n            T.CustomWarrantyTypeName AS DictionaryWarra" +
                    "ntyType_CustomWarrantyTypeName, \r\n            T.Description AS DictionaryWarrant" +
                    "yType_Description, \r\n            T.Version AS DictionaryWarrantyType_Version, \r\n" +
                    "            T.VersionAntecedentID AS DictionaryWarrantyType_VersionAntecedentID," +
                    " \r\n            T.VersionCertainty AS DictionaryWarrantyType_VersionCertainty, \r\n" +
                    "            T.VersionWorkflowInstanceID AS DictionaryWarrantyType_VersionWorkflo" +
                    "wInstanceID, \r\n            T.VersionUpdatedBy AS DictionaryWarrantyType_VersionU" +
                    "pdatedBy, \r\n            T.VersionDeletedBy AS DictionaryWarrantyType_VersionDele" +
                    "tedBy, \r\n            T.VersionOwnerContactID AS DictionaryWarrantyType_VersionOw" +
                    "nerContactID, \r\n            T.VersionOwnerCompanyID AS DictionaryWarrantyType_Ve" +
                    "rsionOwnerCompanyID, \r\n            T.VersionUpdated AS DictionaryWarrantyType_Ve" +
                    "rsionUpdated, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObject" +
                    "sStoreContainer.Q_DictionaryWarrantyType AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.ModelParts
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView380()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.ModelParts", @"
    SELECT VALUE -- Constructing ModelParts
        [NKD.Module.BusinessObjects.ModelPart](T1.ModelPart_ModelPartID, T1.ModelPart_ModelID, T1.ModelPart_PartID, T1.ModelPart_Version, T1.ModelPart_VersionAntecedentID, T1.ModelPart_VersionCertainty, T1.ModelPart_VersionWorkflowInstanceID, T1.ModelPart_VersionUpdatedBy, T1.ModelPart_VersionDeletedBy, T1.ModelPart_VersionOwnerContactID, T1.ModelPart_VersionOwnerCompanyID, T1.ModelPart_VersionUpdated)
    FROM (
        SELECT 
            T.ModelPartID AS ModelPart_ModelPartID, 
            T.ModelID AS ModelPart_ModelID, 
            T.PartID AS ModelPart_PartID, 
            T.Version AS ModelPart_Version, 
            T.VersionAntecedentID AS ModelPart_VersionAntecedentID, 
            T.VersionCertainty AS ModelPart_VersionCertainty, 
            T.VersionWorkflowInstanceID AS ModelPart_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS ModelPart_VersionUpdatedBy, 
            T.VersionDeletedBy AS ModelPart_VersionDeletedBy, 
            T.VersionOwnerContactID AS ModelPart_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS ModelPart_VersionOwnerCompanyID, 
            T.VersionUpdated AS ModelPart_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.Q_ModelPart AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.ModelPartKits
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView381()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.ModelPartKits", @"
    SELECT VALUE -- Constructing ModelPartKits
        [NKD.Module.BusinessObjects.ModelPartKit](T1.ModelPartKit_ModelPartKitID, T1.ModelPartKit_ModelPartID, T1.ModelPartKit_PartKitID, T1.ModelPartKit_Version, T1.ModelPartKit_VersionAntecedentID, T1.ModelPartKit_VersionCertainty, T1.ModelPartKit_VersionWorkflowInstanceID, T1.ModelPartKit_VersionUpdatedBy, T1.ModelPartKit_VersionDeletedBy, T1.ModelPartKit_VersionOwnerContactID, T1.ModelPartKit_VersionOwnerCompanyID, T1.ModelPartKit_VersionUpdated)
    FROM (
        SELECT 
            T.ModelPartKitID AS ModelPartKit_ModelPartKitID, 
            T.ModelPartID AS ModelPartKit_ModelPartID, 
            T.PartKitID AS ModelPartKit_PartKitID, 
            T.Version AS ModelPartKit_Version, 
            T.VersionAntecedentID AS ModelPartKit_VersionAntecedentID, 
            T.VersionCertainty AS ModelPartKit_VersionCertainty, 
            T.VersionWorkflowInstanceID AS ModelPartKit_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS ModelPartKit_VersionUpdatedBy, 
            T.VersionDeletedBy AS ModelPartKit_VersionDeletedBy, 
            T.VersionOwnerContactID AS ModelPartKit_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS ModelPartKit_VersionOwnerCompanyID, 
            T.VersionUpdated AS ModelPartKit_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.Q_ModelPartKit AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.ModelProcedures
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView382()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.ModelProcedures", "\r\n    SELECT VALUE -- Constructing ModelProcedures\r\n        [NKD.Module.BusinessO" +
                    "bjects.ModelProcedure](T1.ModelProcedure_ModelProcedureID, T1.ModelProcedure_Mod" +
                    "elID, T1.ModelProcedure_ProcedureID, T1.ModelProcedure_Sequence, T1.ModelProcedu" +
                    "re_Frequency, T1.ModelProcedure_FrequencyUnitID, T1.ModelProcedure_RiskFactor, T" +
                    "1.ModelProcedure_Version, T1.ModelProcedure_VersionAntecedentID, T1.ModelProcedu" +
                    "re_VersionCertainty, T1.ModelProcedure_VersionWorkflowInstanceID, T1.ModelProced" +
                    "ure_VersionUpdatedBy, T1.ModelProcedure_VersionDeletedBy, T1.ModelProcedure_Vers" +
                    "ionOwnerContactID, T1.ModelProcedure_VersionOwnerCompanyID, T1.ModelProcedure_Ve" +
                    "rsionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.ModelProcedureID AS Mo" +
                    "delProcedure_ModelProcedureID, \r\n            T.ModelID AS ModelProcedure_ModelID" +
                    ", \r\n            T.ProcedureID AS ModelProcedure_ProcedureID, \r\n            T.Seq" +
                    "uence AS ModelProcedure_Sequence, \r\n            T.Frequency AS ModelProcedure_Fr" +
                    "equency, \r\n            T.FrequencyUnitID AS ModelProcedure_FrequencyUnitID, \r\n  " +
                    "          T.RiskFactor AS ModelProcedure_RiskFactor, \r\n            T.Version AS " +
                    "ModelProcedure_Version, \r\n            T.VersionAntecedentID AS ModelProcedure_Ve" +
                    "rsionAntecedentID, \r\n            T.VersionCertainty AS ModelProcedure_VersionCer" +
                    "tainty, \r\n            T.VersionWorkflowInstanceID AS ModelProcedure_VersionWorkf" +
                    "lowInstanceID, \r\n            T.VersionUpdatedBy AS ModelProcedure_VersionUpdated" +
                    "By, \r\n            T.VersionDeletedBy AS ModelProcedure_VersionDeletedBy, \r\n     " +
                    "       T.VersionOwnerContactID AS ModelProcedure_VersionOwnerContactID, \r\n      " +
                    "      T.VersionOwnerCompanyID AS ModelProcedure_VersionOwnerCompanyID, \r\n       " +
                    "     T.VersionUpdated AS ModelProcedure_VersionUpdated, \r\n            True AS _f" +
                    "rom0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.Q_ModelProcedure AS T\r" +
                    "\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.ModelProcedureTasks
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView383()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2330);
            viewString.Append("\r\n    SELECT VALUE -- Constructing ModelProcedureTasks\r\n        [NKD.Module.Busi");
            viewString.Append("nessObjects.ModelProcedureTask](T1.ModelProcedureTask_ModelProcedureTaskID, T1.M");
            viewString.Append("odelProcedureTask_ModelProcedureID, T1.ModelProcedureTask_TaskID, T1.ModelProced");
            viewString.Append("ureTask_Sequence, T1.ModelProcedureTask_FileDataID, T1.ModelProcedureTask_Stated");
            viewString.Append("RevisionNumber, T1.ModelProcedureTask_StatedRevisionPublishDate, T1.ModelProcedu");
            viewString.Append("reTask_EstimatedDuration, T1.ModelProcedureTask_EstimatedDurationUnitID, T1.Mode");
            viewString.Append("lProcedureTask_Version, T1.ModelProcedureTask_VersionAntecedentID, T1.ModelProce");
            viewString.Append("dureTask_VersionCertainty, T1.ModelProcedureTask_VersionWorkflowInstanceID, T1.M");
            viewString.Append("odelProcedureTask_VersionUpdatedBy, T1.ModelProcedureTask_VersionDeletedBy, T1.M");
            viewString.Append("odelProcedureTask_VersionOwnerContactID, T1.ModelProcedureTask_VersionOwnerCompa");
            viewString.Append("nyID, T1.ModelProcedureTask_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n      ");
            viewString.Append("      T.ModelProcedureTaskID AS ModelProcedureTask_ModelProcedureTaskID, \r\n     ");
            viewString.Append("       T.ModelProcedureID AS ModelProcedureTask_ModelProcedureID, \r\n            ");
            viewString.Append("T.TaskID AS ModelProcedureTask_TaskID, \r\n            T.Sequence AS ModelProcedur");
            viewString.Append("eTask_Sequence, \r\n            T.FileDataID AS ModelProcedureTask_FileDataID, \r\n ");
            viewString.Append("           T.StatedRevisionNumber AS ModelProcedureTask_StatedRevisionNumber, \r\n");
            viewString.Append("            T.StatedRevisionPublishDate AS ModelProcedureTask_StatedRevisionPubl");
            viewString.Append("ishDate, \r\n            T.EstimatedDuration AS ModelProcedureTask_EstimatedDurati");
            viewString.Append("on, \r\n            T.EstimatedDurationUnitID AS ModelProcedureTask_EstimatedDurat");
            viewString.Append("ionUnitID, \r\n            T.Version AS ModelProcedureTask_Version, \r\n            ");
            viewString.Append("T.VersionAntecedentID AS ModelProcedureTask_VersionAntecedentID, \r\n            T");
            viewString.Append(".VersionCertainty AS ModelProcedureTask_VersionCertainty, \r\n            T.Versio");
            viewString.Append("nWorkflowInstanceID AS ModelProcedureTask_VersionWorkflowInstanceID, \r\n         ");
            viewString.Append("   T.VersionUpdatedBy AS ModelProcedureTask_VersionUpdatedBy, \r\n            T.Ve");
            viewString.Append("rsionDeletedBy AS ModelProcedureTask_VersionDeletedBy, \r\n            T.VersionOw");
            viewString.Append("nerContactID AS ModelProcedureTask_VersionOwnerContactID, \r\n            T.Versio");
            viewString.Append("nOwnerCompanyID AS ModelProcedureTask_VersionOwnerCompanyID, \r\n            T.Ver");
            viewString.Append("sionUpdated AS ModelProcedureTask_VersionUpdated, \r\n            True AS _from0\r\n");
            viewString.Append("        FROM NKDModuleBusinessObjectsStoreContainer.Q_ModelProcedureTask AS T\r\n ");
            viewString.Append("   ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.ModelProcedureTasks", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.ModelProcedureTaskParts
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView384()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.ModelProcedureTaskParts", "\r\n    SELECT VALUE -- Constructing ModelProcedureTaskParts\r\n        [NKD.Module.B" +
                    "usinessObjects.ModelProcedureTaskPart](T1.ModelProcedureTaskPart_ModelProcedureT" +
                    "askPartID, T1.ModelProcedureTaskPart_ModelProcedureTaskID, T1.ModelProcedureTask" +
                    "Part_PartID, T1.ModelProcedureTaskPart_PartQuantity, T1.ModelProcedureTaskPart_V" +
                    "ersion, T1.ModelProcedureTaskPart_VersionAntecedentID, T1.ModelProcedureTaskPart" +
                    "_VersionCertainty, T1.ModelProcedureTaskPart_VersionWorkflowInstanceID, T1.Model" +
                    "ProcedureTaskPart_VersionUpdatedBy, T1.ModelProcedureTaskPart_VersionDeletedBy, " +
                    "T1.ModelProcedureTaskPart_VersionOwnerContactID, T1.ModelProcedureTaskPart_Versi" +
                    "onOwnerCompanyID, T1.ModelProcedureTaskPart_VersionUpdated)\r\n    FROM (\r\n       " +
                    " SELECT \r\n            T.ModelProcedureTaskPartID AS ModelProcedureTaskPart_Model" +
                    "ProcedureTaskPartID, \r\n            T.ModelProcedureTaskID AS ModelProcedureTaskP" +
                    "art_ModelProcedureTaskID, \r\n            T.PartID AS ModelProcedureTaskPart_PartI" +
                    "D, \r\n            T.PartQuantity AS ModelProcedureTaskPart_PartQuantity, \r\n      " +
                    "      T.Version AS ModelProcedureTaskPart_Version, \r\n            T.VersionAntece" +
                    "dentID AS ModelProcedureTaskPart_VersionAntecedentID, \r\n            T.VersionCer" +
                    "tainty AS ModelProcedureTaskPart_VersionCertainty, \r\n            T.VersionWorkfl" +
                    "owInstanceID AS ModelProcedureTaskPart_VersionWorkflowInstanceID, \r\n            " +
                    "T.VersionUpdatedBy AS ModelProcedureTaskPart_VersionUpdatedBy, \r\n            T.V" +
                    "ersionDeletedBy AS ModelProcedureTaskPart_VersionDeletedBy, \r\n            T.Vers" +
                    "ionOwnerContactID AS ModelProcedureTaskPart_VersionOwnerContactID, \r\n           " +
                    " T.VersionOwnerCompanyID AS ModelProcedureTaskPart_VersionOwnerCompanyID, \r\n    " +
                    "        T.VersionUpdated AS ModelProcedureTaskPart_VersionUpdated, \r\n           " +
                    " True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.Q_ModelProc" +
                    "edureTaskPart AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.ModelScheduleCycles
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView385()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.ModelScheduleCycles", "\r\n    SELECT VALUE -- Constructing ModelScheduleCycles\r\n        [NKD.Module.Busin" +
                    "essObjects.ModelScheduleCycle](T1.ModelScheduleCycle_ModelScheduleCycleID, T1.Mo" +
                    "delScheduleCycle_ModelID, T1.ModelScheduleCycle_ModelProcedureID, T1.ModelSchedu" +
                    "leCycle_Sequence, T1.ModelScheduleCycle_ScheduleFrequencyUnitID, T1.ModelSchedul" +
                    "eCycle_ScheduleFrequency, T1.ModelScheduleCycle_Version, T1.ModelScheduleCycle_V" +
                    "ersionAntecedentID, T1.ModelScheduleCycle_VersionCertainty, T1.ModelScheduleCycl" +
                    "e_VersionWorkflowInstanceID, T1.ModelScheduleCycle_VersionUpdatedBy, T1.ModelSch" +
                    "eduleCycle_VersionDeletedBy, T1.ModelScheduleCycle_VersionOwnerContactID, T1.Mod" +
                    "elScheduleCycle_VersionOwnerCompanyID, T1.ModelScheduleCycle_VersionUpdated)\r\n  " +
                    "  FROM (\r\n        SELECT \r\n            T.ModelScheduleCycleID AS ModelScheduleCy" +
                    "cle_ModelScheduleCycleID, \r\n            T.ModelID AS ModelScheduleCycle_ModelID," +
                    " \r\n            T.ModelProcedureID AS ModelScheduleCycle_ModelProcedureID, \r\n    " +
                    "        T.Sequence AS ModelScheduleCycle_Sequence, \r\n            T.ScheduleFrequ" +
                    "encyUnitID AS ModelScheduleCycle_ScheduleFrequencyUnitID, \r\n            T.Schedu" +
                    "leFrequency AS ModelScheduleCycle_ScheduleFrequency, \r\n            T.Version AS " +
                    "ModelScheduleCycle_Version, \r\n            T.VersionAntecedentID AS ModelSchedule" +
                    "Cycle_VersionAntecedentID, \r\n            T.VersionCertainty AS ModelScheduleCycl" +
                    "e_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS ModelScheduleCy" +
                    "cle_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS ModelSchedule" +
                    "Cycle_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS ModelScheduleCycle_V" +
                    "ersionDeletedBy, \r\n            T.VersionOwnerContactID AS ModelScheduleCycle_Ver" +
                    "sionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS ModelScheduleCycle_" +
                    "VersionOwnerCompanyID, \r\n            T.VersionUpdated AS ModelScheduleCycle_Vers" +
                    "ionUpdated, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjectsS" +
                    "toreContainer.Q_ModelScheduleCycle AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.ModelWarranties
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView386()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.ModelWarranties", "\r\n    SELECT VALUE -- Constructing ModelWarranties\r\n        [NKD.Module.BusinessO" +
                    "bjects.ModelWarranty](T1.ModelWarranty_ModelWarrantyID, T1.ModelWarranty_ModelID" +
                    ", T1.ModelWarranty_WarrantyTypeID, T1.ModelWarranty_WarrantyPeriodUnitID, T1.Mod" +
                    "elWarranty_WarrantyPeriod, T1.ModelWarranty_WarrantyExpires, T1.ModelWarranty_Wa" +
                    "rrantyRenewal, T1.ModelWarranty_SupplierContractID, T1.ModelWarranty_Version, T1" +
                    ".ModelWarranty_VersionAntecedentID, T1.ModelWarranty_VersionCertainty, T1.ModelW" +
                    "arranty_VersionWorkflowInstanceID, T1.ModelWarranty_VersionUpdatedBy, T1.ModelWa" +
                    "rranty_VersionDeletedBy, T1.ModelWarranty_VersionOwnerContactID, T1.ModelWarrant" +
                    "y_VersionOwnerCompanyID, T1.ModelWarranty_VersionUpdated)\r\n    FROM (\r\n        S" +
                    "ELECT \r\n            T.ModelWarrantyID AS ModelWarranty_ModelWarrantyID, \r\n      " +
                    "      T.ModelID AS ModelWarranty_ModelID, \r\n            T.WarrantyTypeID AS Mode" +
                    "lWarranty_WarrantyTypeID, \r\n            T.WarrantyPeriodUnitID AS ModelWarranty_" +
                    "WarrantyPeriodUnitID, \r\n            T.WarrantyPeriod AS ModelWarranty_WarrantyPe" +
                    "riod, \r\n            T.WarrantyExpires AS ModelWarranty_WarrantyExpires, \r\n      " +
                    "      T.WarrantyRenewal AS ModelWarranty_WarrantyRenewal, \r\n            T.Suppli" +
                    "erContractID AS ModelWarranty_SupplierContractID, \r\n            T.Version AS Mod" +
                    "elWarranty_Version, \r\n            T.VersionAntecedentID AS ModelWarranty_Version" +
                    "AntecedentID, \r\n            T.VersionCertainty AS ModelWarranty_VersionCertainty" +
                    ", \r\n            T.VersionWorkflowInstanceID AS ModelWarranty_VersionWorkflowInst" +
                    "anceID, \r\n            T.VersionUpdatedBy AS ModelWarranty_VersionUpdatedBy, \r\n  " +
                    "          T.VersionDeletedBy AS ModelWarranty_VersionDeletedBy, \r\n            T." +
                    "VersionOwnerContactID AS ModelWarranty_VersionOwnerContactID, \r\n            T.Ve" +
                    "rsionOwnerCompanyID AS ModelWarranty_VersionOwnerCompanyID, \r\n            T.Vers" +
                    "ionUpdated AS ModelWarranty_VersionUpdated, \r\n            True AS _from0\r\n      " +
                    "  FROM NKDModuleBusinessObjectsStoreContainer.Q_ModelWarranty AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.ProjectPlanTaskModels
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView387()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2660);
            viewString.Append("\r\n    SELECT VALUE -- Constructing ProjectPlanTaskModels\r\n        [NKD.Module.Bu");
            viewString.Append("sinessObjects.ProjectPlanTaskModel](T1.ProjectPlanTaskModel_ProjectPlanTaskModel");
            viewString.Append("ID, T1.ProjectPlanTaskModel_ProjectPlanTaskID, T1.ProjectPlanTaskModel_ModelID, ");
            viewString.Append("T1.ProjectPlanTaskModel_WarehouseModelID, T1.ProjectPlanTaskModel_SupplierModelI");
            viewString.Append("D, T1.ProjectPlanTaskModel_QuantityUnitID, T1.ProjectPlanTaskModel_QuantityOrder");
            viewString.Append("ed, T1.ProjectPlanTaskModel_QuantityDespatched, T1.ProjectPlanTaskModel_Quantity");
            viewString.Append("Received, T1.ProjectPlanTaskModel_QuantityUsed, T1.ProjectPlanTaskModel_Used, T1");
            viewString.Append(".ProjectPlanTaskModel_Note, T1.ProjectPlanTaskModel_Version, T1.ProjectPlanTaskM");
            viewString.Append("odel_VersionAntecedentID, T1.ProjectPlanTaskModel_VersionCertainty, T1.ProjectPl");
            viewString.Append("anTaskModel_VersionWorkflowInstanceID, T1.ProjectPlanTaskModel_VersionUpdatedBy,");
            viewString.Append(" T1.ProjectPlanTaskModel_VersionDeletedBy, T1.ProjectPlanTaskModel_VersionOwnerC");
            viewString.Append("ontactID, T1.ProjectPlanTaskModel_VersionOwnerCompanyID, T1.ProjectPlanTaskModel");
            viewString.Append("_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.ProjectPlanTaskMode");
            viewString.Append("lID AS ProjectPlanTaskModel_ProjectPlanTaskModelID, \r\n            T.ProjectPlanT");
            viewString.Append("askID AS ProjectPlanTaskModel_ProjectPlanTaskID, \r\n            T.ModelID AS Proj");
            viewString.Append("ectPlanTaskModel_ModelID, \r\n            T.WarehouseModelID AS ProjectPlanTaskMod");
            viewString.Append("el_WarehouseModelID, \r\n            T.SupplierModelID AS ProjectPlanTaskModel_Sup");
            viewString.Append("plierModelID, \r\n            T.QuantityUnitID AS ProjectPlanTaskModel_QuantityUni");
            viewString.Append("tID, \r\n            T.QuantityOrdered AS ProjectPlanTaskModel_QuantityOrdered, \r\n");
            viewString.Append("            T.QuantityDespatched AS ProjectPlanTaskModel_QuantityDespatched, \r\n ");
            viewString.Append("           T.QuantityReceived AS ProjectPlanTaskModel_QuantityReceived, \r\n      ");
            viewString.Append("      T.QuantityUsed AS ProjectPlanTaskModel_QuantityUsed, \r\n            T.Used ");
            viewString.Append("AS ProjectPlanTaskModel_Used, \r\n            T.Note AS ProjectPlanTaskModel_Note,");
            viewString.Append(" \r\n            T.Version AS ProjectPlanTaskModel_Version, \r\n            T.Versio");
            viewString.Append("nAntecedentID AS ProjectPlanTaskModel_VersionAntecedentID, \r\n            T.Versi");
            viewString.Append("onCertainty AS ProjectPlanTaskModel_VersionCertainty, \r\n            T.VersionWor");
            viewString.Append("kflowInstanceID AS ProjectPlanTaskModel_VersionWorkflowInstanceID, \r\n           ");
            viewString.Append(" T.VersionUpdatedBy AS ProjectPlanTaskModel_VersionUpdatedBy, \r\n            T.Ve");
            viewString.Append("rsionDeletedBy AS ProjectPlanTaskModel_VersionDeletedBy, \r\n            T.Version");
            viewString.Append("OwnerContactID AS ProjectPlanTaskModel_VersionOwnerContactID, \r\n            T.Ve");
            viewString.Append("rsionOwnerCompanyID AS ProjectPlanTaskModel_VersionOwnerCompanyID, \r\n           ");
            viewString.Append(" T.VersionUpdated AS ProjectPlanTaskModel_VersionUpdated, \r\n            True AS ");
            viewString.Append("_from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.Q_ProjectPlanTaskMod");
            viewString.Append("el AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.ProjectPlanTaskModels", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.ProjectPlanTaskParts
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView388()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2603);
            viewString.Append("\r\n    SELECT VALUE -- Constructing ProjectPlanTaskParts\r\n        [NKD.Module.Bus");
            viewString.Append("inessObjects.ProjectPlanTaskPart](T1.ProjectPlanTaskPart_ProjectPlanTaskPartID, ");
            viewString.Append("T1.ProjectPlanTaskPart_ProjectPlanTaskID, T1.ProjectPlanTaskPart_PartID, T1.Proj");
            viewString.Append("ectPlanTaskPart_WarehousePartID, T1.ProjectPlanTaskPart_SupplierPartID, T1.Proje");
            viewString.Append("ctPlanTaskPart_QuantityUnitID, T1.ProjectPlanTaskPart_QuantityOrdered, T1.Projec");
            viewString.Append("tPlanTaskPart_QuantityDespatched, T1.ProjectPlanTaskPart_QuantityReceived, T1.Pr");
            viewString.Append("ojectPlanTaskPart_QuantityUsed, T1.ProjectPlanTaskPart_Used, T1.ProjectPlanTaskP");
            viewString.Append("art_Note, T1.ProjectPlanTaskPart_Version, T1.ProjectPlanTaskPart_VersionAntecede");
            viewString.Append("ntID, T1.ProjectPlanTaskPart_VersionCertainty, T1.ProjectPlanTaskPart_VersionWor");
            viewString.Append("kflowInstanceID, T1.ProjectPlanTaskPart_VersionUpdatedBy, T1.ProjectPlanTaskPart");
            viewString.Append("_VersionDeletedBy, T1.ProjectPlanTaskPart_VersionOwnerContactID, T1.ProjectPlanT");
            viewString.Append("askPart_VersionOwnerCompanyID, T1.ProjectPlanTaskPart_VersionUpdated)\r\n    FROM ");
            viewString.Append("(\r\n        SELECT \r\n            T.ProjectPlanTaskPartID AS ProjectPlanTaskPart_P");
            viewString.Append("rojectPlanTaskPartID, \r\n            T.ProjectPlanTaskID AS ProjectPlanTaskPart_P");
            viewString.Append("rojectPlanTaskID, \r\n            T.PartID AS ProjectPlanTaskPart_PartID, \r\n      ");
            viewString.Append("      T.WarehousePartID AS ProjectPlanTaskPart_WarehousePartID, \r\n            T.");
            viewString.Append("SupplierPartID AS ProjectPlanTaskPart_SupplierPartID, \r\n            T.QuantityUn");
            viewString.Append("itID AS ProjectPlanTaskPart_QuantityUnitID, \r\n            T.QuantityOrdered AS P");
            viewString.Append("rojectPlanTaskPart_QuantityOrdered, \r\n            T.QuantityDespatched AS Projec");
            viewString.Append("tPlanTaskPart_QuantityDespatched, \r\n            T.QuantityReceived AS ProjectPla");
            viewString.Append("nTaskPart_QuantityReceived, \r\n            T.QuantityUsed AS ProjectPlanTaskPart_");
            viewString.Append("QuantityUsed, \r\n            T.Used AS ProjectPlanTaskPart_Used, \r\n            T.");
            viewString.Append("Note AS ProjectPlanTaskPart_Note, \r\n            T.Version AS ProjectPlanTaskPart");
            viewString.Append("_Version, \r\n            T.VersionAntecedentID AS ProjectPlanTaskPart_VersionAnte");
            viewString.Append("cedentID, \r\n            T.VersionCertainty AS ProjectPlanTaskPart_VersionCertain");
            viewString.Append("ty, \r\n            T.VersionWorkflowInstanceID AS ProjectPlanTaskPart_VersionWork");
            viewString.Append("flowInstanceID, \r\n            T.VersionUpdatedBy AS ProjectPlanTaskPart_VersionU");
            viewString.Append("pdatedBy, \r\n            T.VersionDeletedBy AS ProjectPlanTaskPart_VersionDeleted");
            viewString.Append("By, \r\n            T.VersionOwnerContactID AS ProjectPlanTaskPart_VersionOwnerCon");
            viewString.Append("tactID, \r\n            T.VersionOwnerCompanyID AS ProjectPlanTaskPart_VersionOwne");
            viewString.Append("rCompanyID, \r\n            T.VersionUpdated AS ProjectPlanTaskPart_VersionUpdated");
            viewString.Append(", \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContai");
            viewString.Append("ner.Q_ProjectPlanTaskPart AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.ProjectPlanTaskParts", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.Recalls
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView389()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.Recalls", "\r\n    SELECT VALUE -- Constructing Recalls\r\n        [NKD.Module.BusinessObjects.R" +
                    "ecall](T1.Recall_RecallID, T1.Recall_GlobalRecallCode, T1.Recall_GlobalRecallOri" +
                    "gin, T1.Recall_ProjectID, T1.Recall_Issued, T1.Recall_IssuedBy, T1.Recall_Receiv" +
                    "ed, T1.Recall_ReceivedBy, T1.Recall_Actioned, T1.Recall_ActionedBy, T1.Recall_Re" +
                    "sponsibleContactID, T1.Recall_Description, T1.Recall_Version, T1.Recall_VersionA" +
                    "ntecedentID, T1.Recall_VersionCertainty, T1.Recall_VersionWorkflowInstanceID, T1" +
                    ".Recall_VersionUpdatedBy, T1.Recall_VersionDeletedBy, T1.Recall_VersionOwnerCont" +
                    "actID, T1.Recall_VersionOwnerCompanyID, T1.Recall_VersionUpdated)\r\n    FROM (\r\n " +
                    "       SELECT \r\n            T.RecallID AS Recall_RecallID, \r\n            T.Globa" +
                    "lRecallCode AS Recall_GlobalRecallCode, \r\n            T.GlobalRecallOrigin AS Re" +
                    "call_GlobalRecallOrigin, \r\n            T.ProjectID AS Recall_ProjectID, \r\n      " +
                    "      T.Issued AS Recall_Issued, \r\n            T.IssuedBy AS Recall_IssuedBy, \r\n" +
                    "            T.Received AS Recall_Received, \r\n            T.ReceivedBy AS Recall_" +
                    "ReceivedBy, \r\n            T.Actioned AS Recall_Actioned, \r\n            T.Actione" +
                    "dBy AS Recall_ActionedBy, \r\n            T.ResponsibleContactID AS Recall_Respons" +
                    "ibleContactID, \r\n            T.Description AS Recall_Description, \r\n            " +
                    "T.Version AS Recall_Version, \r\n            T.VersionAntecedentID AS Recall_Versi" +
                    "onAntecedentID, \r\n            T.VersionCertainty AS Recall_VersionCertainty, \r\n " +
                    "           T.VersionWorkflowInstanceID AS Recall_VersionWorkflowInstanceID, \r\n  " +
                    "          T.VersionUpdatedBy AS Recall_VersionUpdatedBy, \r\n            T.Version" +
                    "DeletedBy AS Recall_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS R" +
                    "ecall_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS Recall_Ver" +
                    "sionOwnerCompanyID, \r\n            T.VersionUpdated AS Recall_VersionUpdated, \r\n " +
                    "           True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.Q" +
                    "_Recall AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.RecallModels
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView390()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.RecallModels", @"
    SELECT VALUE -- Constructing RecallModels
        [NKD.Module.BusinessObjects.RecallModel](T1.RecallModel_RecallModelID, T1.RecallModel_RecallID, T1.RecallModel_ModelID, T1.RecallModel_Description, T1.RecallModel_Version, T1.RecallModel_VersionAntecedentID, T1.RecallModel_VersionCertainty, T1.RecallModel_VersionWorkflowInstanceID, T1.RecallModel_VersionUpdatedBy, T1.RecallModel_VersionDeletedBy, T1.RecallModel_VersionOwnerContactID, T1.RecallModel_VersionOwnerCompanyID, T1.RecallModel_VersionUpdated)
    FROM (
        SELECT 
            T.RecallModelID AS RecallModel_RecallModelID, 
            T.RecallID AS RecallModel_RecallID, 
            T.ModelID AS RecallModel_ModelID, 
            T.Description AS RecallModel_Description, 
            T.Version AS RecallModel_Version, 
            T.VersionAntecedentID AS RecallModel_VersionAntecedentID, 
            T.VersionCertainty AS RecallModel_VersionCertainty, 
            T.VersionWorkflowInstanceID AS RecallModel_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS RecallModel_VersionUpdatedBy, 
            T.VersionDeletedBy AS RecallModel_VersionDeletedBy, 
            T.VersionOwnerContactID AS RecallModel_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS RecallModel_VersionOwnerCompanyID, 
            T.VersionUpdated AS RecallModel_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.Q_RecallModel AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.RecallModelAssets
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView391()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.RecallModelAssets", "\r\n    SELECT VALUE -- Constructing RecallModelAssets\r\n        [NKD.Module.Busines" +
                    "sObjects.RecallModelAsset](T1.RecallModelAsset_RecallModelAssetID, T1.RecallMode" +
                    "lAsset_RecallModelID, T1.RecallModelAsset_AssetID, T1.RecallModelAsset_ProjectPl" +
                    "anID, T1.RecallModelAsset_Version, T1.RecallModelAsset_VersionAntecedentID, T1.R" +
                    "ecallModelAsset_VersionCertainty, T1.RecallModelAsset_VersionWorkflowInstanceID," +
                    " T1.RecallModelAsset_VersionUpdatedBy, T1.RecallModelAsset_VersionDeletedBy, T1." +
                    "RecallModelAsset_VersionOwnerContactID, T1.RecallModelAsset_VersionOwnerCompanyI" +
                    "D, T1.RecallModelAsset_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n           " +
                    " T.RecallModelAssetID AS RecallModelAsset_RecallModelAssetID, \r\n            T.Re" +
                    "callModelID AS RecallModelAsset_RecallModelID, \r\n            T.AssetID AS Recall" +
                    "ModelAsset_AssetID, \r\n            T.ProjectPlanID AS RecallModelAsset_ProjectPla" +
                    "nID, \r\n            T.Version AS RecallModelAsset_Version, \r\n            T.Versio" +
                    "nAntecedentID AS RecallModelAsset_VersionAntecedentID, \r\n            T.VersionCe" +
                    "rtainty AS RecallModelAsset_VersionCertainty, \r\n            T.VersionWorkflowIns" +
                    "tanceID AS RecallModelAsset_VersionWorkflowInstanceID, \r\n            T.VersionUp" +
                    "datedBy AS RecallModelAsset_VersionUpdatedBy, \r\n            T.VersionDeletedBy A" +
                    "S RecallModelAsset_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS Re" +
                    "callModelAsset_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS R" +
                    "ecallModelAsset_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS RecallM" +
                    "odelAsset_VersionUpdated, \r\n            True AS _from0\r\n        FROM NKDModuleBu" +
                    "sinessObjectsStoreContainer.Q_RecallModelAsset AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.SupplierModels
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView392()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2627);
            viewString.Append("\r\n    SELECT VALUE -- Constructing SupplierModels\r\n        [NKD.Module.BusinessO");
            viewString.Append("bjects.SupplierModel](T1.SupplierModel_SupplierModelID, T1.SupplierModel_Supplie");
            viewString.Append("rID, T1.SupplierModel_ModelID, T1.SupplierModel_SupplierContractID, T1.SupplierM");
            viewString.Append("odel_IsOEM, T1.SupplierModel_OrderQuantityMinimum, T1.SupplierModel_PricePerUnit");
            viewString.Append(", T1.SupplierModel_PriceUnitID, T1.SupplierModel_SupplierModelNumber, T1.Supplie");
            viewString.Append("rModel_SupplierModelDescription, T1.SupplierModel_SupplierFileDataID, T1.Supplie");
            viewString.Append("rModel_LeadTimeUnitID, T1.SupplierModel_LeadTime, T1.SupplierModel_Version, T1.S");
            viewString.Append("upplierModel_VersionAntecedentID, T1.SupplierModel_VersionCertainty, T1.Supplier");
            viewString.Append("Model_VersionWorkflowInstanceID, T1.SupplierModel_VersionUpdatedBy, T1.SupplierM");
            viewString.Append("odel_VersionDeletedBy, T1.SupplierModel_VersionOwnerContactID, T1.SupplierModel_");
            viewString.Append("VersionOwnerCompanyID, T1.SupplierModel_VersionUpdated, T1.SupplierModel_Sequenc");
            viewString.Append("e, T1.SupplierModel_CurrencyID)\r\n    FROM (\r\n        SELECT \r\n            T.Supp");
            viewString.Append("lierModelID AS SupplierModel_SupplierModelID, \r\n            T.SupplierID AS Supp");
            viewString.Append("lierModel_SupplierID, \r\n            T.ModelID AS SupplierModel_ModelID, \r\n      ");
            viewString.Append("      T.SupplierContractID AS SupplierModel_SupplierContractID, \r\n            T.");
            viewString.Append("IsOEM AS SupplierModel_IsOEM, \r\n            T.OrderQuantityMinimum AS SupplierMo");
            viewString.Append("del_OrderQuantityMinimum, \r\n            T.PricePerUnit AS SupplierModel_PricePer");
            viewString.Append("Unit, \r\n            T.PriceUnitID AS SupplierModel_PriceUnitID, \r\n            T.");
            viewString.Append("SupplierModelNumber AS SupplierModel_SupplierModelNumber, \r\n            T.Suppli");
            viewString.Append("erModelDescription AS SupplierModel_SupplierModelDescription, \r\n            T.Su");
            viewString.Append("pplierFileDataID AS SupplierModel_SupplierFileDataID, \r\n            T.LeadTimeUn");
            viewString.Append("itID AS SupplierModel_LeadTimeUnitID, \r\n            T.LeadTime AS SupplierModel_");
            viewString.Append("LeadTime, \r\n            T.Version AS SupplierModel_Version, \r\n            T.Vers");
            viewString.Append("ionAntecedentID AS SupplierModel_VersionAntecedentID, \r\n            T.VersionCer");
            viewString.Append("tainty AS SupplierModel_VersionCertainty, \r\n            T.VersionWorkflowInstanc");
            viewString.Append("eID AS SupplierModel_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy");
            viewString.Append(" AS SupplierModel_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS Supplier");
            viewString.Append("Model_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS SupplierModel_V");
            viewString.Append("ersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS SupplierModel_Ver");
            viewString.Append("sionOwnerCompanyID, \r\n            T.VersionUpdated AS SupplierModel_VersionUpdat");
            viewString.Append("ed, \r\n            T.Sequence AS SupplierModel_Sequence, \r\n            T.Currency");
            viewString.Append("ID AS SupplierModel_CurrencyID, \r\n            True AS _from0\r\n        FROM NKDMo");
            viewString.Append("duleBusinessObjectsStoreContainer.Q_SupplierModel AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.SupplierModels", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.SupplierParts
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView393()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2564);
            viewString.Append("\r\n    SELECT VALUE -- Constructing SupplierParts\r\n        [NKD.Module.BusinessOb");
            viewString.Append("jects.SupplierPart](T1.SupplierPart_SupplierPartID, T1.SupplierPart_SupplierID, ");
            viewString.Append("T1.SupplierPart_PartID, T1.SupplierPart_SupplierContractID, T1.SupplierPart_IsOE");
            viewString.Append("M, T1.SupplierPart_OrderQuantityMinimum, T1.SupplierPart_PricePerUnit, T1.Suppli");
            viewString.Append("erPart_PriceUnitID, T1.SupplierPart_SupplierPartNumber, T1.SupplierPart_Supplier");
            viewString.Append("PartDescription, T1.SupplierPart_SupplierFileDataID, T1.SupplierPart_LeadTimeUni");
            viewString.Append("tID, T1.SupplierPart_LeadTime, T1.SupplierPart_Version, T1.SupplierPart_VersionA");
            viewString.Append("ntecedentID, T1.SupplierPart_VersionCertainty, T1.SupplierPart_VersionWorkflowIn");
            viewString.Append("stanceID, T1.SupplierPart_VersionUpdatedBy, T1.SupplierPart_VersionDeletedBy, T1");
            viewString.Append(".SupplierPart_VersionOwnerContactID, T1.SupplierPart_VersionOwnerCompanyID, T1.S");
            viewString.Append("upplierPart_VersionUpdated, T1.SupplierPart_Sequence, T1.SupplierPart_CurrencyID");
            viewString.Append(")\r\n    FROM (\r\n        SELECT \r\n            T.SupplierPartID AS SupplierPart_Sup");
            viewString.Append("plierPartID, \r\n            T.SupplierID AS SupplierPart_SupplierID, \r\n          ");
            viewString.Append("  T.PartID AS SupplierPart_PartID, \r\n            T.SupplierContractID AS Supplie");
            viewString.Append("rPart_SupplierContractID, \r\n            T.IsOEM AS SupplierPart_IsOEM, \r\n       ");
            viewString.Append("     T.OrderQuantityMinimum AS SupplierPart_OrderQuantityMinimum, \r\n            ");
            viewString.Append("T.PricePerUnit AS SupplierPart_PricePerUnit, \r\n            T.PriceUnitID AS Supp");
            viewString.Append("lierPart_PriceUnitID, \r\n            T.SupplierPartNumber AS SupplierPart_Supplie");
            viewString.Append("rPartNumber, \r\n            T.SupplierPartDescription AS SupplierPart_SupplierPar");
            viewString.Append("tDescription, \r\n            T.SupplierFileDataID AS SupplierPart_SupplierFileDat");
            viewString.Append("aID, \r\n            T.LeadTimeUnitID AS SupplierPart_LeadTimeUnitID, \r\n          ");
            viewString.Append("  T.LeadTime AS SupplierPart_LeadTime, \r\n            T.Version AS SupplierPart_V");
            viewString.Append("ersion, \r\n            T.VersionAntecedentID AS SupplierPart_VersionAntecedentID,");
            viewString.Append(" \r\n            T.VersionCertainty AS SupplierPart_VersionCertainty, \r\n          ");
            viewString.Append("  T.VersionWorkflowInstanceID AS SupplierPart_VersionWorkflowInstanceID, \r\n     ");
            viewString.Append("       T.VersionUpdatedBy AS SupplierPart_VersionUpdatedBy, \r\n            T.Vers");
            viewString.Append("ionDeletedBy AS SupplierPart_VersionDeletedBy, \r\n            T.VersionOwnerConta");
            viewString.Append("ctID AS SupplierPart_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyI");
            viewString.Append("D AS SupplierPart_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS Suppl");
            viewString.Append("ierPart_VersionUpdated, \r\n            T.Sequence AS SupplierPart_Sequence, \r\n   ");
            viewString.Append("         T.CurrencyID AS SupplierPart_CurrencyID, \r\n            True AS _from0\r\n");
            viewString.Append("        FROM NKDModuleBusinessObjectsStoreContainer.Q_SupplierPart AS T\r\n    ) A");
            viewString.Append("S T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.SupplierParts", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.Warehouses
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView394()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.Warehouses", "\r\n    SELECT VALUE -- Constructing Warehouses\r\n        [NKD.Module.BusinessObject" +
                    "s.Warehouse](T1.Warehouse_WarehouseID, T1.Warehouse_WarehouseName, T1.Warehouse_" +
                    "CompanyID, T1.Warehouse_PrimaryLocationID, T1.Warehouse_Description, T1.Warehous" +
                    "e_Version, T1.Warehouse_VersionAntecedentID, T1.Warehouse_VersionCertainty, T1.W" +
                    "arehouse_VersionWorkflowInstanceID, T1.Warehouse_VersionUpdatedBy, T1.Warehouse_" +
                    "VersionDeletedBy, T1.Warehouse_VersionOwnerContactID, T1.Warehouse_VersionOwnerC" +
                    "ompanyID, T1.Warehouse_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n           " +
                    " T.WarehouseID AS Warehouse_WarehouseID, \r\n            T.WarehouseName AS Wareho" +
                    "use_WarehouseName, \r\n            T.CompanyID AS Warehouse_CompanyID, \r\n         " +
                    "   T.PrimaryLocationID AS Warehouse_PrimaryLocationID, \r\n            T.Descripti" +
                    "on AS Warehouse_Description, \r\n            T.Version AS Warehouse_Version, \r\n   " +
                    "         T.VersionAntecedentID AS Warehouse_VersionAntecedentID, \r\n            T" +
                    ".VersionCertainty AS Warehouse_VersionCertainty, \r\n            T.VersionWorkflow" +
                    "InstanceID AS Warehouse_VersionWorkflowInstanceID, \r\n            T.VersionUpdate" +
                    "dBy AS Warehouse_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS Warehouse" +
                    "_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS Warehouse_VersionOwn" +
                    "erContactID, \r\n            T.VersionOwnerCompanyID AS Warehouse_VersionOwnerComp" +
                    "anyID, \r\n            T.VersionUpdated AS Warehouse_VersionUpdated, \r\n           " +
                    " True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.Q_Warehouse" +
                    " AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.WarehouseModels
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView395()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.WarehouseModels", "\r\n    SELECT VALUE -- Constructing WarehouseModels\r\n        [NKD.Module.BusinessO" +
                    "bjects.WarehouseModel](T1.WarehouseModel_WarehouseModelID, T1.WarehouseModel_Mod" +
                    "elID, T1.WarehouseModel_WarehouseID, T1.WarehouseModel_IssueCost, T1.WarehouseMo" +
                    "del_QuantityOnOrder, T1.WarehouseModel_QuantityInStock, T1.WarehouseModel_Quanti" +
                    "tyOnHold, T1.WarehouseModel_QuantityReOrderLevel, T1.WarehouseModel_Version, T1." +
                    "WarehouseModel_VersionAntecedentID, T1.WarehouseModel_VersionCertainty, T1.Wareh" +
                    "ouseModel_VersionWorkflowInstanceID, T1.WarehouseModel_VersionUpdatedBy, T1.Ware" +
                    "houseModel_VersionDeletedBy, T1.WarehouseModel_VersionOwnerContactID, T1.Warehou" +
                    "seModel_VersionOwnerCompanyID, T1.WarehouseModel_VersionUpdated)\r\n    FROM (\r\n  " +
                    "      SELECT \r\n            T.WarehouseModelID AS WarehouseModel_WarehouseModelID" +
                    ", \r\n            T.ModelID AS WarehouseModel_ModelID, \r\n            T.WarehouseID" +
                    " AS WarehouseModel_WarehouseID, \r\n            T.IssueCost AS WarehouseModel_Issu" +
                    "eCost, \r\n            T.QuantityOnOrder AS WarehouseModel_QuantityOnOrder, \r\n    " +
                    "        T.QuantityInStock AS WarehouseModel_QuantityInStock, \r\n            T.Qua" +
                    "ntityOnHold AS WarehouseModel_QuantityOnHold, \r\n            T.QuantityReOrderLev" +
                    "el AS WarehouseModel_QuantityReOrderLevel, \r\n            T.Version AS WarehouseM" +
                    "odel_Version, \r\n            T.VersionAntecedentID AS WarehouseModel_VersionAntec" +
                    "edentID, \r\n            T.VersionCertainty AS WarehouseModel_VersionCertainty, \r\n" +
                    "            T.VersionWorkflowInstanceID AS WarehouseModel_VersionWorkflowInstanc" +
                    "eID, \r\n            T.VersionUpdatedBy AS WarehouseModel_VersionUpdatedBy, \r\n    " +
                    "        T.VersionDeletedBy AS WarehouseModel_VersionDeletedBy, \r\n            T.V" +
                    "ersionOwnerContactID AS WarehouseModel_VersionOwnerContactID, \r\n            T.Ve" +
                    "rsionOwnerCompanyID AS WarehouseModel_VersionOwnerCompanyID, \r\n            T.Ver" +
                    "sionUpdated AS WarehouseModel_VersionUpdated, \r\n            True AS _from0\r\n    " +
                    "    FROM NKDModuleBusinessObjectsStoreContainer.Q_WarehouseModel AS T\r\n    ) AS " +
                    "T1");
        }
        
        /// <Summary>
        /// return view for NKDC.WarehouseModelSuppliers
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView396()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2202);
            viewString.Append("\r\n    SELECT VALUE -- Constructing WarehouseModelSuppliers\r\n        [NKD.Module.");
            viewString.Append("BusinessObjects.WarehouseModelSupplier](T1.WarehouseModelSupplier_WarehouseModel");
            viewString.Append("SupplierID, T1.WarehouseModelSupplier_WarehouseModelID, T1.WarehouseModelSupplie");
            viewString.Append("r_SupplierModelID, T1.WarehouseModelSupplier_QuantityUnitID, T1.WarehouseModelSu");
            viewString.Append("pplier_QuantityOrdered, T1.WarehouseModelSupplier_Ordered, T1.WarehouseModelSupp");
            viewString.Append("lier_Received, T1.WarehouseModelSupplier_Version, T1.WarehouseModelSupplier_Vers");
            viewString.Append("ionAntecedentID, T1.WarehouseModelSupplier_VersionCertainty, T1.WarehouseModelSu");
            viewString.Append("pplier_VersionWorkflowInstanceID, T1.WarehouseModelSupplier_VersionUpdatedBy, T1");
            viewString.Append(".WarehouseModelSupplier_VersionDeletedBy, T1.WarehouseModelSupplier_VersionOwner");
            viewString.Append("ContactID, T1.WarehouseModelSupplier_VersionOwnerCompanyID, T1.WarehouseModelSup");
            viewString.Append("plier_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.WarehouseModel");
            viewString.Append("SupplierID AS WarehouseModelSupplier_WarehouseModelSupplierID, \r\n            T.W");
            viewString.Append("arehouseModelID AS WarehouseModelSupplier_WarehouseModelID, \r\n            T.Supp");
            viewString.Append("lierModelID AS WarehouseModelSupplier_SupplierModelID, \r\n            T.QuantityU");
            viewString.Append("nitID AS WarehouseModelSupplier_QuantityUnitID, \r\n            T.QuantityOrdered ");
            viewString.Append("AS WarehouseModelSupplier_QuantityOrdered, \r\n            T.Ordered AS WarehouseM");
            viewString.Append("odelSupplier_Ordered, \r\n            T.Received AS WarehouseModelSupplier_Receive");
            viewString.Append("d, \r\n            T.Version AS WarehouseModelSupplier_Version, \r\n            T.Ve");
            viewString.Append("rsionAntecedentID AS WarehouseModelSupplier_VersionAntecedentID, \r\n            T");
            viewString.Append(".VersionCertainty AS WarehouseModelSupplier_VersionCertainty, \r\n            T.Ve");
            viewString.Append("rsionWorkflowInstanceID AS WarehouseModelSupplier_VersionWorkflowInstanceID, \r\n ");
            viewString.Append("           T.VersionUpdatedBy AS WarehouseModelSupplier_VersionUpdatedBy, \r\n    ");
            viewString.Append("        T.VersionDeletedBy AS WarehouseModelSupplier_VersionDeletedBy, \r\n       ");
            viewString.Append("     T.VersionOwnerContactID AS WarehouseModelSupplier_VersionOwnerContactID, \r\n");
            viewString.Append("            T.VersionOwnerCompanyID AS WarehouseModelSupplier_VersionOwnerCompan");
            viewString.Append("yID, \r\n            T.VersionUpdated AS WarehouseModelSupplier_VersionUpdated, \r\n");
            viewString.Append("            True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.");
            viewString.Append("Q_WarehouseModelSupplier AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.WarehouseModelSuppliers", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.WarehouseParts
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView397()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.WarehouseParts", "\r\n    SELECT VALUE -- Constructing WarehouseParts\r\n        [NKD.Module.BusinessOb" +
                    "jects.WarehousePart](T1.WarehousePart_WarehousePartID, T1.WarehousePart_PartID, " +
                    "T1.WarehousePart_WarehouseID, T1.WarehousePart_IssueCost, T1.WarehousePart_Quant" +
                    "ityOnOrder, T1.WarehousePart_QuantityInStock, T1.WarehousePart_QuantityOnHold, T" +
                    "1.WarehousePart_QuantityReOrderLevel, T1.WarehousePart_Version, T1.WarehousePart" +
                    "_VersionAntecedentID, T1.WarehousePart_VersionCertainty, T1.WarehousePart_Versio" +
                    "nWorkflowInstanceID, T1.WarehousePart_VersionUpdatedBy, T1.WarehousePart_Version" +
                    "DeletedBy, T1.WarehousePart_VersionOwnerContactID, T1.WarehousePart_VersionOwner" +
                    "CompanyID, T1.WarehousePart_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n      " +
                    "      T.WarehousePartID AS WarehousePart_WarehousePartID, \r\n            T.PartID" +
                    " AS WarehousePart_PartID, \r\n            T.WarehouseID AS WarehousePart_Warehouse" +
                    "ID, \r\n            T.IssueCost AS WarehousePart_IssueCost, \r\n            T.Quanti" +
                    "tyOnOrder AS WarehousePart_QuantityOnOrder, \r\n            T.QuantityInStock AS W" +
                    "arehousePart_QuantityInStock, \r\n            T.QuantityOnHold AS WarehousePart_Qu" +
                    "antityOnHold, \r\n            T.QuantityReOrderLevel AS WarehousePart_QuantityReOr" +
                    "derLevel, \r\n            T.Version AS WarehousePart_Version, \r\n            T.Vers" +
                    "ionAntecedentID AS WarehousePart_VersionAntecedentID, \r\n            T.VersionCer" +
                    "tainty AS WarehousePart_VersionCertainty, \r\n            T.VersionWorkflowInstanc" +
                    "eID AS WarehousePart_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy" +
                    " AS WarehousePart_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS Warehous" +
                    "ePart_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS WarehousePart_V" +
                    "ersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS WarehousePart_Ver" +
                    "sionOwnerCompanyID, \r\n            T.VersionUpdated AS WarehousePart_VersionUpdat" +
                    "ed, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreCont" +
                    "ainer.Q_WarehousePart AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.WarehousePartSuppliers
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView398()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2158);
            viewString.Append("\r\n    SELECT VALUE -- Constructing WarehousePartSuppliers\r\n        [NKD.Module.B");
            viewString.Append("usinessObjects.WarehousePartSupplier](T1.WarehousePartSupplier_WarehousePartSupp");
            viewString.Append("lierID, T1.WarehousePartSupplier_WarehousePartID, T1.WarehousePartSupplier_Suppl");
            viewString.Append("ierPartID, T1.WarehousePartSupplier_QuantityUnitID, T1.WarehousePartSupplier_Qua");
            viewString.Append("ntityOrdered, T1.WarehousePartSupplier_Ordered, T1.WarehousePartSupplier_Receive");
            viewString.Append("d, T1.WarehousePartSupplier_Version, T1.WarehousePartSupplier_VersionAntecedentI");
            viewString.Append("D, T1.WarehousePartSupplier_VersionCertainty, T1.WarehousePartSupplier_VersionWo");
            viewString.Append("rkflowInstanceID, T1.WarehousePartSupplier_VersionUpdatedBy, T1.WarehousePartSup");
            viewString.Append("plier_VersionDeletedBy, T1.WarehousePartSupplier_VersionOwnerContactID, T1.Wareh");
            viewString.Append("ousePartSupplier_VersionOwnerCompanyID, T1.WarehousePartSupplier_VersionUpdated)");
            viewString.Append("\r\n    FROM (\r\n        SELECT \r\n            T.WarehousePartSupplierID AS Warehous");
            viewString.Append("ePartSupplier_WarehousePartSupplierID, \r\n            T.WarehousePartID AS Wareho");
            viewString.Append("usePartSupplier_WarehousePartID, \r\n            T.SupplierPartID AS WarehousePart");
            viewString.Append("Supplier_SupplierPartID, \r\n            T.QuantityUnitID AS WarehousePartSupplier");
            viewString.Append("_QuantityUnitID, \r\n            T.QuantityOrdered AS WarehousePartSupplier_Quanti");
            viewString.Append("tyOrdered, \r\n            T.Ordered AS WarehousePartSupplier_Ordered, \r\n         ");
            viewString.Append("   T.Received AS WarehousePartSupplier_Received, \r\n            T.Version AS Ware");
            viewString.Append("housePartSupplier_Version, \r\n            T.VersionAntecedentID AS WarehousePartS");
            viewString.Append("upplier_VersionAntecedentID, \r\n            T.VersionCertainty AS WarehousePartSu");
            viewString.Append("pplier_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS WarehouseP");
            viewString.Append("artSupplier_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS Wareh");
            viewString.Append("ousePartSupplier_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS Warehouse");
            viewString.Append("PartSupplier_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS Warehous");
            viewString.Append("ePartSupplier_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS Wa");
            viewString.Append("rehousePartSupplier_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS War");
            viewString.Append("ehousePartSupplier_VersionUpdated, \r\n            True AS _from0\r\n        FROM NK");
            viewString.Append("DModuleBusinessObjectsStoreContainer.Q_WarehousePartSupplier AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.WarehousePartSuppliers", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.WorkflowSchedules
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView399()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.WorkflowSchedules", "\r\n    SELECT VALUE -- Constructing WorkflowSchedules\r\n        [NKD.Module.Busines" +
                    "sObjects.WorkflowSchedule](T1.WorkflowSchedule_WorkflowScheduleID, T1.WorkflowSc" +
                    "hedule_EventTypeID, T1.WorkflowSchedule_TableType, T1.WorkflowSchedule_Reference" +
                    "ID, T1.WorkflowSchedule_WorkerID, T1.WorkflowSchedule_WorkflowInstanceID, T1.Wor" +
                    "kflowSchedule_Version, T1.WorkflowSchedule_VersionAntecedentID, T1.WorkflowSched" +
                    "ule_VersionCertainty, T1.WorkflowSchedule_VersionWorkflowInstanceID, T1.Workflow" +
                    "Schedule_VersionUpdatedBy, T1.WorkflowSchedule_VersionDeletedBy, T1.WorkflowSche" +
                    "dule_VersionOwnerContactID, T1.WorkflowSchedule_VersionOwnerCompanyID, T1.Workfl" +
                    "owSchedule_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.WorkflowS" +
                    "cheduleID AS WorkflowSchedule_WorkflowScheduleID, \r\n            T.EventTypeID AS" +
                    " WorkflowSchedule_EventTypeID, \r\n            T.TableType AS WorkflowSchedule_Tab" +
                    "leType, \r\n            T.ReferenceID AS WorkflowSchedule_ReferenceID, \r\n         " +
                    "   T.WorkerID AS WorkflowSchedule_WorkerID, \r\n            T.WorkflowInstanceID A" +
                    "S WorkflowSchedule_WorkflowInstanceID, \r\n            T.Version AS WorkflowSchedu" +
                    "le_Version, \r\n            T.VersionAntecedentID AS WorkflowSchedule_VersionAntec" +
                    "edentID, \r\n            T.VersionCertainty AS WorkflowSchedule_VersionCertainty, " +
                    "\r\n            T.VersionWorkflowInstanceID AS WorkflowSchedule_VersionWorkflowIns" +
                    "tanceID, \r\n            T.VersionUpdatedBy AS WorkflowSchedule_VersionUpdatedBy, " +
                    "\r\n            T.VersionDeletedBy AS WorkflowSchedule_VersionDeletedBy, \r\n       " +
                    "     T.VersionOwnerContactID AS WorkflowSchedule_VersionOwnerContactID, \r\n      " +
                    "      T.VersionOwnerCompanyID AS WorkflowSchedule_VersionOwnerCompanyID, \r\n     " +
                    "       T.VersionUpdated AS WorkflowSchedule_VersionUpdated, \r\n            True A" +
                    "S _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.Q_WorkflowSchedule" +
                    " AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.Addresses
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView400()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2308);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Addresses\r\n        [NKD.Module.BusinessObject");
            viewString.Append("s.Address](T1.Address_AddressID, T1.Address_AddressName, T1.Address_Street, T1.A");
            viewString.Append("ddress_City, T1.Address_State, T1.Address_Postcode, T1.Address_IsHQ, T1.Address_");
            viewString.Append("IsPostBox, T1.Address_Phone, T1.Address_Fax, T1.Address_Email, T1.Address_Mobile");
            viewString.Append(", T1.Address_LocationID, T1.Address_Version, T1.Address_VersionAntecedentID, T1.");
            viewString.Append("Address_VersionCertainty, T1.Address_VersionWorkflowInstanceID, T1.Address_Versi");
            viewString.Append("onUpdatedBy, T1.Address_VersionDeletedBy, T1.Address_VersionOwnerContactID, T1.A");
            viewString.Append("ddress_VersionOwnerCompanyID, T1.Address_VersionUpdated, T1.Address_AddressTypeI");
            viewString.Append("D, T1.Address_IsBusiness, T1.Address_IsHome, T1.Address_Sequence, T1.Address_Ext");
            viewString.Append("ended, T1.Address_Country)\r\n    FROM (\r\n        SELECT \r\n            T.AddressID");
            viewString.Append(" AS Address_AddressID, \r\n            T.AddressName AS Address_AddressName, \r\n   ");
            viewString.Append("         T.Street AS Address_Street, \r\n            T.City AS Address_City, \r\n   ");
            viewString.Append("         T.State AS Address_State, \r\n            T.Postcode AS Address_Postcode,");
            viewString.Append(" \r\n            T.IsHQ AS Address_IsHQ, \r\n            T.IsPostBox AS Address_IsPo");
            viewString.Append("stBox, \r\n            T.Phone AS Address_Phone, \r\n            T.Fax AS Address_Fa");
            viewString.Append("x, \r\n            T.Email AS Address_Email, \r\n            T.Mobile AS Address_Mob");
            viewString.Append("ile, \r\n            T.LocationID AS Address_LocationID, \r\n            T.Version A");
            viewString.Append("S Address_Version, \r\n            T.VersionAntecedentID AS Address_VersionAnteced");
            viewString.Append("entID, \r\n            T.VersionCertainty AS Address_VersionCertainty, \r\n         ");
            viewString.Append("   T.VersionWorkflowInstanceID AS Address_VersionWorkflowInstanceID, \r\n         ");
            viewString.Append("   T.VersionUpdatedBy AS Address_VersionUpdatedBy, \r\n            T.VersionDelete");
            viewString.Append("dBy AS Address_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS Addres");
            viewString.Append("s_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS Address_Versio");
            viewString.Append("nOwnerCompanyID, \r\n            T.VersionUpdated AS Address_VersionUpdated, \r\n   ");
            viewString.Append("         T.AddressTypeID AS Address_AddressTypeID, \r\n            T.IsBusiness AS");
            viewString.Append(" Address_IsBusiness, \r\n            T.IsHome AS Address_IsHome, \r\n            T.S");
            viewString.Append("equence AS Address_Sequence, \r\n            T.Extended AS Address_Extended, \r\n   ");
            viewString.Append("         T.Country AS Address_Country, \r\n            True AS _from0\r\n        FRO");
            viewString.Append("M NKDModuleBusinessObjectsStoreContainer.X_Address AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.Addresses", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.AssayGroups
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView401()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2068);
            viewString.Append("\r\n    SELECT VALUE -- Constructing AssayGroups\r\n        [NKD.Module.BusinessObje");
            viewString.Append("cts.AssayGroup](T1.AssayGroup_AssayGroupID, T1.AssayGroup_ProjectID, T1.AssayGro");
            viewString.Append("up_AssayGroupName, T1.AssayGroup_LabCompanyID, T1.AssayGroup_Submitted, T1.Assay");
            viewString.Append("Group_SubmittedContactID, T1.AssayGroup_Received, T1.AssayGroup_ReceivedContactI");
            viewString.Append("D, T1.AssayGroup_Entered, T1.AssayGroup_EnteredContactID, T1.AssayGroup_Comment,");
            viewString.Append(" T1.AssayGroup_Version, T1.AssayGroup_VersionAntecedentID, T1.AssayGroup_Version");
            viewString.Append("Certainty, T1.AssayGroup_VersionWorkflowInstanceID, T1.AssayGroup_VersionUpdated");
            viewString.Append("By, T1.AssayGroup_VersionDeletedBy, T1.AssayGroup_VersionOwnerContactID, T1.Assa");
            viewString.Append("yGroup_VersionOwnerCompanyID, T1.AssayGroup_VersionUpdated)\r\n    FROM (\r\n       ");
            viewString.Append(" SELECT \r\n            T.AssayGroupID AS AssayGroup_AssayGroupID, \r\n            T");
            viewString.Append(".ProjectID AS AssayGroup_ProjectID, \r\n            T.AssayGroupName AS AssayGroup");
            viewString.Append("_AssayGroupName, \r\n            T.LabCompanyID AS AssayGroup_LabCompanyID, \r\n    ");
            viewString.Append("        T.Submitted AS AssayGroup_Submitted, \r\n            T.SubmittedContactID ");
            viewString.Append("AS AssayGroup_SubmittedContactID, \r\n            T.Received AS AssayGroup_Receive");
            viewString.Append("d, \r\n            T.ReceivedContactID AS AssayGroup_ReceivedContactID, \r\n        ");
            viewString.Append("    T.Entered AS AssayGroup_Entered, \r\n            T.EnteredContactID AS AssayGr");
            viewString.Append("oup_EnteredContactID, \r\n            T.Comment AS AssayGroup_Comment, \r\n         ");
            viewString.Append("   T.Version AS AssayGroup_Version, \r\n            T.VersionAntecedentID AS Assay");
            viewString.Append("Group_VersionAntecedentID, \r\n            T.VersionCertainty AS AssayGroup_Versio");
            viewString.Append("nCertainty, \r\n            T.VersionWorkflowInstanceID AS AssayGroup_VersionWorkf");
            viewString.Append("lowInstanceID, \r\n            T.VersionUpdatedBy AS AssayGroup_VersionUpdatedBy, ");
            viewString.Append("\r\n            T.VersionDeletedBy AS AssayGroup_VersionDeletedBy, \r\n            T");
            viewString.Append(".VersionOwnerContactID AS AssayGroup_VersionOwnerContactID, \r\n            T.Vers");
            viewString.Append("ionOwnerCompanyID AS AssayGroup_VersionOwnerCompanyID, \r\n            T.VersionUp");
            viewString.Append("dated AS AssayGroup_VersionUpdated, \r\n            True AS _from0\r\n        FROM N");
            viewString.Append("KDModuleBusinessObjectsStoreContainer.X_AssayGroup AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.AssayGroups", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.AssayGroupStandardTestResults
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView402()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3570);
            viewString.Append("\r\n    SELECT VALUE -- Constructing AssayGroupStandardTestResults\r\n        [NKD.M");
            viewString.Append("odule.BusinessObjects.AssayGroupStandardTestResult](T1.AssayGroupStandardTestRes");
            viewString.Append("ult_AssayGroupStandardTestResultID, T1.AssayGroupStandardTestResult_AssayGroupTe");
            viewString.Append("stSampleID, T1.AssayGroupStandardTestResult_AssayGroupTestID, T1.AssayGroupStand");
            viewString.Append("ardTestResult_AssayStandardID, T1.AssayGroupStandardTestResult_SampleCategoryID,");
            viewString.Append(" T1.AssayGroupStandardTestResult_SampleStateID, T1.AssayGroupStandardTestResult_");
            viewString.Append("SampleTypeID, T1.AssayGroupStandardTestResult_LabResultText, T1.AssayGroupStanda");
            viewString.Append("rdTestResult_LabResult, T1.AssayGroupStandardTestResult_LabBatchNumber, T1.Assay");
            viewString.Append("GroupStandardTestResult_Sampled, T1.AssayGroupStandardTestResult_SampledBy, T1.A");
            viewString.Append("ssayGroupStandardTestResult_Version, T1.AssayGroupStandardTestResult_VersionAnte");
            viewString.Append("cedentID, T1.AssayGroupStandardTestResult_VersionCertainty, T1.AssayGroupStandar");
            viewString.Append("dTestResult_VersionWorkflowInstanceID, T1.AssayGroupStandardTestResult_VersionUp");
            viewString.Append("datedBy, T1.AssayGroupStandardTestResult_VersionDeletedBy, T1.AssayGroupStandard");
            viewString.Append("TestResult_VersionOwnerContactID, T1.AssayGroupStandardTestResult_VersionOwnerCo");
            viewString.Append("mpanyID, T1.AssayGroupStandardTestResult_VersionUpdated, T1.AssayGroupStandardTe");
            viewString.Append("stResult_LabSampleName, T1.AssayGroupStandardTestResult_AddressID, T1.AssayGroup");
            viewString.Append("StandardTestResult_LabResultMinimum, T1.AssayGroupStandardTestResult_LabResultMa");
            viewString.Append("ximum)\r\n    FROM (\r\n        SELECT \r\n            T.AssayGroupStandardTestResultI");
            viewString.Append("D AS AssayGroupStandardTestResult_AssayGroupStandardTestResultID, \r\n            ");
            viewString.Append("T.AssayGroupTestSampleID AS AssayGroupStandardTestResult_AssayGroupTestSampleID,");
            viewString.Append(" \r\n            T.AssayGroupTestID AS AssayGroupStandardTestResult_AssayGroupTest");
            viewString.Append("ID, \r\n            T.AssayStandardID AS AssayGroupStandardTestResult_AssayStandar");
            viewString.Append("dID, \r\n            T.SampleCategoryID AS AssayGroupStandardTestResult_SampleCate");
            viewString.Append("goryID, \r\n            T.SampleStateID AS AssayGroupStandardTestResult_SampleStat");
            viewString.Append("eID, \r\n            T.SampleTypeID AS AssayGroupStandardTestResult_SampleTypeID, ");
            viewString.Append("\r\n            T.LabResultText AS AssayGroupStandardTestResult_LabResultText, \r\n ");
            viewString.Append("           T.LabResult AS AssayGroupStandardTestResult_LabResult, \r\n            ");
            viewString.Append("T.LabBatchNumber AS AssayGroupStandardTestResult_LabBatchNumber, \r\n            T");
            viewString.Append(".Sampled AS AssayGroupStandardTestResult_Sampled, \r\n            T.SampledBy AS A");
            viewString.Append("ssayGroupStandardTestResult_SampledBy, \r\n            T.Version AS AssayGroupStan");
            viewString.Append("dardTestResult_Version, \r\n            T.VersionAntecedentID AS AssayGroupStandar");
            viewString.Append("dTestResult_VersionAntecedentID, \r\n            T.VersionCertainty AS AssayGroupS");
            viewString.Append("tandardTestResult_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS");
            viewString.Append(" AssayGroupStandardTestResult_VersionWorkflowInstanceID, \r\n            T.Version");
            viewString.Append("UpdatedBy AS AssayGroupStandardTestResult_VersionUpdatedBy, \r\n            T.Vers");
            viewString.Append("ionDeletedBy AS AssayGroupStandardTestResult_VersionDeletedBy, \r\n            T.V");
            viewString.Append("ersionOwnerContactID AS AssayGroupStandardTestResult_VersionOwnerContactID, \r\n  ");
            viewString.Append("          T.VersionOwnerCompanyID AS AssayGroupStandardTestResult_VersionOwnerCo");
            viewString.Append("mpanyID, \r\n            T.VersionUpdated AS AssayGroupStandardTestResult_VersionU");
            viewString.Append("pdated, \r\n            T.LabSampleName AS AssayGroupStandardTestResult_LabSampleN");
            viewString.Append("ame, \r\n            T.AddressID AS AssayGroupStandardTestResult_AddressID, \r\n    ");
            viewString.Append("        T.LabResultMinimum AS AssayGroupStandardTestResult_LabResultMinimum, \r\n ");
            viewString.Append("           T.LabResultMaximum AS AssayGroupStandardTestResult_LabResultMaximum, ");
            viewString.Append("\r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContaine");
            viewString.Append("r.X_AssayGroupStandardTestResult AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.AssayGroupStandardTestResults", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.AssayGroupTests
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView403()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2213);
            viewString.Append("\r\n    SELECT VALUE -- Constructing AssayGroupTests\r\n        [NKD.Module.Business");
            viewString.Append("Objects.AssayGroupTest](T1.AssayGroupTest_AssayGroupTestID, T1.AssayGroupTest_As");
            viewString.Append("sayGroupID, T1.AssayGroupTest_AssayTypeName, T1.AssayGroupTest_AssayTestName, T1");
            viewString.Append(".AssayGroupTest_ParameterID, T1.AssayGroupTest_AssayTestPriority, T1.AssayGroupT");
            viewString.Append("est_AssayMethodID, T1.AssayGroupTest_AssayTypeID, T1.AssayGroupTest_Version, T1.");
            viewString.Append("AssayGroupTest_VersionAntecedentID, T1.AssayGroupTest_VersionCertainty, T1.Assay");
            viewString.Append("GroupTest_VersionWorkflowInstanceID, T1.AssayGroupTest_VersionUpdatedBy, T1.Assa");
            viewString.Append("yGroupTest_VersionDeletedBy, T1.AssayGroupTest_VersionOwnerContactID, T1.AssayGr");
            viewString.Append("oupTest_VersionOwnerCompanyID, T1.AssayGroupTest_VersionUpdated, T1.AssayGroupTe");
            viewString.Append("st_AssayComplianceID, T1.AssayGroupTest_AssayTechniqueID)\r\n    FROM (\r\n        S");
            viewString.Append("ELECT \r\n            T.AssayGroupTestID AS AssayGroupTest_AssayGroupTestID, \r\n   ");
            viewString.Append("         T.AssayGroupID AS AssayGroupTest_AssayGroupID, \r\n            T.AssayTyp");
            viewString.Append("eName AS AssayGroupTest_AssayTypeName, \r\n            T.AssayTestName AS AssayGro");
            viewString.Append("upTest_AssayTestName, \r\n            T.ParameterID AS AssayGroupTest_ParameterID,");
            viewString.Append(" \r\n            T.AssayTestPriority AS AssayGroupTest_AssayTestPriority, \r\n      ");
            viewString.Append("      T.AssayMethodID AS AssayGroupTest_AssayMethodID, \r\n            T.AssayType");
            viewString.Append("ID AS AssayGroupTest_AssayTypeID, \r\n            T.Version AS AssayGroupTest_Vers");
            viewString.Append("ion, \r\n            T.VersionAntecedentID AS AssayGroupTest_VersionAntecedentID, ");
            viewString.Append("\r\n            T.VersionCertainty AS AssayGroupTest_VersionCertainty, \r\n         ");
            viewString.Append("   T.VersionWorkflowInstanceID AS AssayGroupTest_VersionWorkflowInstanceID, \r\n  ");
            viewString.Append("          T.VersionUpdatedBy AS AssayGroupTest_VersionUpdatedBy, \r\n            T");
            viewString.Append(".VersionDeletedBy AS AssayGroupTest_VersionDeletedBy, \r\n            T.VersionOwn");
            viewString.Append("erContactID AS AssayGroupTest_VersionOwnerContactID, \r\n            T.VersionOwne");
            viewString.Append("rCompanyID AS AssayGroupTest_VersionOwnerCompanyID, \r\n            T.VersionUpdat");
            viewString.Append("ed AS AssayGroupTest_VersionUpdated, \r\n            T.AssayComplianceID AS AssayG");
            viewString.Append("roupTest_AssayComplianceID, \r\n            T.AssayTechniqueID AS AssayGroupTest_A");
            viewString.Append("ssayTechniqueID, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObj");
            viewString.Append("ectsStoreContainer.X_AssayGroupTest AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.AssayGroupTests", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.AssayGroupTestResults
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView404()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2672);
            viewString.Append("\r\n    SELECT VALUE -- Constructing AssayGroupTestResults\r\n        [NKD.Module.Bu");
            viewString.Append("sinessObjects.AssayGroupTestResult](T1.AssayGroupTestResult_AssayGroupTestResult");
            viewString.Append("ID, T1.AssayGroupTestResult_SampleID, T1.AssayGroupTestResult_AssayGroupTestID, ");
            viewString.Append("T1.AssayGroupTestResult_LabResultText, T1.AssayGroupTestResult_LabResult, T1.Ass");
            viewString.Append("ayGroupTestResult_LabBatchNumber, T1.AssayGroupTestResult_Sampled, T1.AssayGroup");
            viewString.Append("TestResult_SampledBy, T1.AssayGroupTestResult_Version, T1.AssayGroupTestResult_V");
            viewString.Append("ersionAntecedentID, T1.AssayGroupTestResult_VersionCertainty, T1.AssayGroupTestR");
            viewString.Append("esult_VersionWorkflowInstanceID, T1.AssayGroupTestResult_VersionUpdatedBy, T1.As");
            viewString.Append("sayGroupTestResult_VersionDeletedBy, T1.AssayGroupTestResult_VersionOwnerContact");
            viewString.Append("ID, T1.AssayGroupTestResult_VersionOwnerCompanyID, T1.AssayGroupTestResult_Versi");
            viewString.Append("onUpdated, T1.AssayGroupTestResult_AssayGroupSubsampleID, T1.AssayGroupTestResul");
            viewString.Append("t_LabSampleName, T1.AssayGroupTestResult_LabResultMinimum, T1.AssayGroupTestResu");
            viewString.Append("lt_LabResultMaximum)\r\n    FROM (\r\n        SELECT \r\n            T.AssayGroupTestR");
            viewString.Append("esultID AS AssayGroupTestResult_AssayGroupTestResultID, \r\n            T.SampleID");
            viewString.Append(" AS AssayGroupTestResult_SampleID, \r\n            T.AssayGroupTestID AS AssayGrou");
            viewString.Append("pTestResult_AssayGroupTestID, \r\n            T.LabResultText AS AssayGroupTestRes");
            viewString.Append("ult_LabResultText, \r\n            T.LabResult AS AssayGroupTestResult_LabResult, ");
            viewString.Append("\r\n            T.LabBatchNumber AS AssayGroupTestResult_LabBatchNumber, \r\n       ");
            viewString.Append("     T.Sampled AS AssayGroupTestResult_Sampled, \r\n            T.SampledBy AS Ass");
            viewString.Append("ayGroupTestResult_SampledBy, \r\n            T.Version AS AssayGroupTestResult_Ver");
            viewString.Append("sion, \r\n            T.VersionAntecedentID AS AssayGroupTestResult_VersionAnteced");
            viewString.Append("entID, \r\n            T.VersionCertainty AS AssayGroupTestResult_VersionCertainty");
            viewString.Append(", \r\n            T.VersionWorkflowInstanceID AS AssayGroupTestResult_VersionWorkf");
            viewString.Append("lowInstanceID, \r\n            T.VersionUpdatedBy AS AssayGroupTestResult_VersionU");
            viewString.Append("pdatedBy, \r\n            T.VersionDeletedBy AS AssayGroupTestResult_VersionDelete");
            viewString.Append("dBy, \r\n            T.VersionOwnerContactID AS AssayGroupTestResult_VersionOwnerC");
            viewString.Append("ontactID, \r\n            T.VersionOwnerCompanyID AS AssayGroupTestResult_VersionO");
            viewString.Append("wnerCompanyID, \r\n            T.VersionUpdated AS AssayGroupTestResult_VersionUpd");
            viewString.Append("ated, \r\n            T.AssayGroupSubsampleID AS AssayGroupTestResult_AssayGroupSu");
            viewString.Append("bsampleID, \r\n            T.LabSampleName AS AssayGroupTestResult_LabSampleName, ");
            viewString.Append("\r\n            T.LabResultMinimum AS AssayGroupTestResult_LabResultMinimum, \r\n   ");
            viewString.Append("         T.LabResultMaximum AS AssayGroupTestResult_LabResultMaximum, \r\n        ");
            viewString.Append("    True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_AssayG");
            viewString.Append("roupTestResult AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.AssayGroupTestResults", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.AssayGroupTestResultComments
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView405()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.AssayGroupTestResultComments", "\r\n    SELECT VALUE -- Constructing AssayGroupTestResultComments\r\n        [NKD.Mod" +
                    "ule.BusinessObjects.AssayGroupTestResultComment](T1.AssayGroupTestResultComment_" +
                    "AssayGroupTestResultCommentID, T1.AssayGroupTestResultComment_AssayGroupTestResu" +
                    "ltID, T1.AssayGroupTestResultComment_Comment, T1.AssayGroupTestResultComment_Ver" +
                    "sion, T1.AssayGroupTestResultComment_VersionAntecedentID, T1.AssayGroupTestResul" +
                    "tComment_VersionCertainty, T1.AssayGroupTestResultComment_VersionWorkflowInstanc" +
                    "eID, T1.AssayGroupTestResultComment_VersionUpdatedBy, T1.AssayGroupTestResultCom" +
                    "ment_VersionDeletedBy, T1.AssayGroupTestResultComment_VersionOwnerContactID, T1." +
                    "AssayGroupTestResultComment_VersionOwnerCompanyID, T1.AssayGroupTestResultCommen" +
                    "t_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.AssayGroupTestResu" +
                    "ltCommentID AS AssayGroupTestResultComment_AssayGroupTestResultCommentID, \r\n    " +
                    "        T.AssayGroupTestResultID AS AssayGroupTestResultComment_AssayGroupTestRe" +
                    "sultID, \r\n            T.Comment AS AssayGroupTestResultComment_Comment, \r\n      " +
                    "      T.Version AS AssayGroupTestResultComment_Version, \r\n            T.VersionA" +
                    "ntecedentID AS AssayGroupTestResultComment_VersionAntecedentID, \r\n            T." +
                    "VersionCertainty AS AssayGroupTestResultComment_VersionCertainty, \r\n            " +
                    "T.VersionWorkflowInstanceID AS AssayGroupTestResultComment_VersionWorkflowInstan" +
                    "ceID, \r\n            T.VersionUpdatedBy AS AssayGroupTestResultComment_VersionUpd" +
                    "atedBy, \r\n            T.VersionDeletedBy AS AssayGroupTestResultComment_VersionD" +
                    "eletedBy, \r\n            T.VersionOwnerContactID AS AssayGroupTestResultComment_V" +
                    "ersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS AssayGroupTestRes" +
                    "ultComment_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS AssayGroupTe" +
                    "stResultComment_VersionUpdated, \r\n            True AS _from0\r\n        FROM NKDMo" +
                    "duleBusinessObjectsStoreContainer.X_AssayGroupTestResultComment AS T\r\n    ) AS T" +
                    "1");
        }
        
        /// <Summary>
        /// return view for NKDC.AssayGroupTestResultDuplicates
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView406()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2861);
            viewString.Append("\r\n    SELECT VALUE -- Constructing AssayGroupTestResultDuplicates\r\n        [NKD.");
            viewString.Append("Module.BusinessObjects.AssayGroupTestResultDuplicate](T1.AssayGroupTestResultDup");
            viewString.Append("licate_AssayGroupTestResultDuplicateID, T1.AssayGroupTestResultDuplicate_AssayGr");
            viewString.Append("oupTestResultID, T1.AssayGroupTestResultDuplicate_LabResultText, T1.AssayGroupTe");
            viewString.Append("stResultDuplicate_LabResult, T1.AssayGroupTestResultDuplicate_LabBatchNumber, T1");
            viewString.Append(".AssayGroupTestResultDuplicate_Sampled, T1.AssayGroupTestResultDuplicate_Sampled");
            viewString.Append("By, T1.AssayGroupTestResultDuplicate_Version, T1.AssayGroupTestResultDuplicate_V");
            viewString.Append("ersionAntecedentID, T1.AssayGroupTestResultDuplicate_VersionCertainty, T1.AssayG");
            viewString.Append("roupTestResultDuplicate_VersionWorkflowInstanceID, T1.AssayGroupTestResultDuplic");
            viewString.Append("ate_VersionUpdatedBy, T1.AssayGroupTestResultDuplicate_VersionDeletedBy, T1.Assa");
            viewString.Append("yGroupTestResultDuplicate_VersionOwnerContactID, T1.AssayGroupTestResultDuplicat");
            viewString.Append("e_VersionOwnerCompanyID, T1.AssayGroupTestResultDuplicate_VersionUpdated, T1.Ass");
            viewString.Append("ayGroupTestResultDuplicate_LabSampleName, T1.AssayGroupTestResultDuplicate_LabRe");
            viewString.Append("sultMinimum, T1.AssayGroupTestResultDuplicate_LabResultMaximum)\r\n    FROM (\r\n   ");
            viewString.Append("     SELECT \r\n            T.AssayGroupTestResultDuplicateID AS AssayGroupTestRes");
            viewString.Append("ultDuplicate_AssayGroupTestResultDuplicateID, \r\n            T.AssayGroupTestResu");
            viewString.Append("ltID AS AssayGroupTestResultDuplicate_AssayGroupTestResultID, \r\n            T.La");
            viewString.Append("bResultText AS AssayGroupTestResultDuplicate_LabResultText, \r\n            T.LabR");
            viewString.Append("esult AS AssayGroupTestResultDuplicate_LabResult, \r\n            T.LabBatchNumber");
            viewString.Append(" AS AssayGroupTestResultDuplicate_LabBatchNumber, \r\n            T.Sampled AS Ass");
            viewString.Append("ayGroupTestResultDuplicate_Sampled, \r\n            T.SampledBy AS AssayGroupTestR");
            viewString.Append("esultDuplicate_SampledBy, \r\n            T.Version AS AssayGroupTestResultDuplica");
            viewString.Append("te_Version, \r\n            T.VersionAntecedentID AS AssayGroupTestResultDuplicate");
            viewString.Append("_VersionAntecedentID, \r\n            T.VersionCertainty AS AssayGroupTestResultDu");
            viewString.Append("plicate_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS AssayGrou");
            viewString.Append("pTestResultDuplicate_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy");
            viewString.Append(" AS AssayGroupTestResultDuplicate_VersionUpdatedBy, \r\n            T.VersionDelet");
            viewString.Append("edBy AS AssayGroupTestResultDuplicate_VersionDeletedBy, \r\n            T.VersionO");
            viewString.Append("wnerContactID AS AssayGroupTestResultDuplicate_VersionOwnerContactID, \r\n        ");
            viewString.Append("    T.VersionOwnerCompanyID AS AssayGroupTestResultDuplicate_VersionOwnerCompany");
            viewString.Append("ID, \r\n            T.VersionUpdated AS AssayGroupTestResultDuplicate_VersionUpdat");
            viewString.Append("ed, \r\n            T.LabSampleName AS AssayGroupTestResultDuplicate_LabSampleName");
            viewString.Append(", \r\n            T.LabResultMinimum AS AssayGroupTestResultDuplicate_LabResultMin");
            viewString.Append("imum, \r\n            T.LabResultMaximum AS AssayGroupTestResultDuplicate_LabResul");
            viewString.Append("tMaximum, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjectsSto");
            viewString.Append("reContainer.X_AssayGroupTestResultDuplicate AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.AssayGroupTestResultDuplicates", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.BlockModels
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView407()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(4118);
            viewString.Append("\r\n    SELECT VALUE -- Constructing BlockModels\r\n        [NKD.Module.BusinessObje");
            viewString.Append("cts.BlockModel](T1.BlockModel_BlockModelID, T1.BlockModel_ProjectID, T1.BlockMod");
            viewString.Append("el_Alias, T1.BlockModel_OriginX, T1.BlockModel_OriginY, T1.BlockModel_OriginZ, T");
            viewString.Append("1.BlockModel_IsIJKCalculated, T1.BlockModel_OriginI, T1.BlockModel_OriginJ, T1.B");
            viewString.Append("lockModel_OriginK, T1.BlockModel_MaximumI, T1.BlockModel_MaximumJ, T1.BlockModel");
            viewString.Append("_MaximumK, T1.BlockModel_MinimumI, T1.BlockModel_MinimumJ, T1.BlockModel_Minimum");
            viewString.Append("K, T1.BlockModel_DimensionEasting, T1.BlockModel_DimensionNorthing, T1.BlockMode");
            viewString.Append("l_DimensionElevation, T1.BlockModel_IsOriginNorthPositive, T1.BlockModel_IsOrigi");
            viewString.Append("nEastPositive, T1.BlockModel_IsOriginElevationUpwardsPositive, T1.BlockModel_Cub");
            viewString.Append("eCentroid0OriginOffsetX, T1.BlockModel_CubeCentroid0OriginOffsetY, T1.BlockModel");
            viewString.Append("_CubeCentroid0OriginOffsetZ, T1.BlockModel_UnitIJK, T1.BlockModel_DefaultISize, ");
            viewString.Append("T1.BlockModel_DefaultJSize, T1.BlockModel_DefaultKSize, T1.BlockModel_AuthorCont");
            viewString.Append("actID, T1.BlockModel_ResponsibleContactID, T1.BlockModel_ApproverContactID, T1.B");
            viewString.Append("lockModel_ExternalReviewerContactID, T1.BlockModel_Version, T1.BlockModel_Versio");
            viewString.Append("nAntecedentID, T1.BlockModel_VersionCertainty, T1.BlockModel_VersionWorkflowInst");
            viewString.Append("anceID, T1.BlockModel_VersionUpdatedBy, T1.BlockModel_VersionDeletedBy, T1.Block");
            viewString.Append("Model_VersionOwnerContactID, T1.BlockModel_VersionOwnerCompanyID, T1.BlockModel_");
            viewString.Append("VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.BlockModelID AS Bloc");
            viewString.Append("kModel_BlockModelID, \r\n            T.ProjectID AS BlockModel_ProjectID, \r\n      ");
            viewString.Append("      T.Alias AS BlockModel_Alias, \r\n            T.OriginX AS BlockModel_OriginX");
            viewString.Append(", \r\n            T.OriginY AS BlockModel_OriginY, \r\n            T.OriginZ AS Bloc");
            viewString.Append("kModel_OriginZ, \r\n            T.IsIJKCalculated AS BlockModel_IsIJKCalculated, \r");
            viewString.Append("\n            T.OriginI AS BlockModel_OriginI, \r\n            T.OriginJ AS BlockMo");
            viewString.Append("del_OriginJ, \r\n            T.OriginK AS BlockModel_OriginK, \r\n            T.Maxi");
            viewString.Append("mumI AS BlockModel_MaximumI, \r\n            T.MaximumJ AS BlockModel_MaximumJ, \r\n");
            viewString.Append("            T.MaximumK AS BlockModel_MaximumK, \r\n            T.MinimumI AS Block");
            viewString.Append("Model_MinimumI, \r\n            T.MinimumJ AS BlockModel_MinimumJ, \r\n            T");
            viewString.Append(".MinimumK AS BlockModel_MinimumK, \r\n            T.DimensionEasting AS BlockModel");
            viewString.Append("_DimensionEasting, \r\n            T.DimensionNorthing AS BlockModel_DimensionNort");
            viewString.Append("hing, \r\n            T.DimensionElevation AS BlockModel_DimensionElevation, \r\n   ");
            viewString.Append("         T.IsOriginNorthPositive AS BlockModel_IsOriginNorthPositive, \r\n        ");
            viewString.Append("    T.IsOriginEastPositive AS BlockModel_IsOriginEastPositive, \r\n            T.I");
            viewString.Append("sOriginElevationUpwardsPositive AS BlockModel_IsOriginElevationUpwardsPositive, ");
            viewString.Append("\r\n            T.CubeCentroid0OriginOffsetX AS BlockModel_CubeCentroid0OriginOffs");
            viewString.Append("etX, \r\n            T.CubeCentroid0OriginOffsetY AS BlockModel_CubeCentroid0Origi");
            viewString.Append("nOffsetY, \r\n            T.CubeCentroid0OriginOffsetZ AS BlockModel_CubeCentroid0");
            viewString.Append("OriginOffsetZ, \r\n            T.UnitIJK AS BlockModel_UnitIJK, \r\n            T.De");
            viewString.Append("faultISize AS BlockModel_DefaultISize, \r\n            T.DefaultJSize AS BlockMode");
            viewString.Append("l_DefaultJSize, \r\n            T.DefaultKSize AS BlockModel_DefaultKSize, \r\n     ");
            viewString.Append("       T.AuthorContactID AS BlockModel_AuthorContactID, \r\n            T.Responsi");
            viewString.Append("bleContactID AS BlockModel_ResponsibleContactID, \r\n            T.ApproverContact");
            viewString.Append("ID AS BlockModel_ApproverContactID, \r\n            T.ExternalReviewerContactID AS");
            viewString.Append(" BlockModel_ExternalReviewerContactID, \r\n            T.Version AS BlockModel_Ver");
            viewString.Append("sion, \r\n            T.VersionAntecedentID AS BlockModel_VersionAntecedentID, \r\n ");
            viewString.Append("           T.VersionCertainty AS BlockModel_VersionCertainty, \r\n            T.Ve");
            viewString.Append("rsionWorkflowInstanceID AS BlockModel_VersionWorkflowInstanceID, \r\n            T");
            viewString.Append(".VersionUpdatedBy AS BlockModel_VersionUpdatedBy, \r\n            T.VersionDeleted");
            viewString.Append("By AS BlockModel_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS Bloc");
            viewString.Append("kModel_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS BlockMode");
            viewString.Append("l_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS BlockModel_VersionUpd");
            viewString.Append("ated, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreCo");
            viewString.Append("ntainer.X_BlockModel AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.BlockModels", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.BlockModelBlocks
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView408()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(6662);
            viewString.Append("\r\n    SELECT VALUE -- Constructing BlockModelBlocks\r\n        [NKD.Module.Busines");
            viewString.Append("sObjects.BlockModelBlock](T1.BlockModelBlock_BlockModelBlockID, T1.BlockModelBlo");
            viewString.Append("ck_BlockModelID, T1.BlockModelBlock_Domain, T1.BlockModelBlock_I, T1.BlockModelB");
            viewString.Append("lock_J, T1.BlockModelBlock_K, T1.BlockModelBlock_CentroidX, T1.BlockModelBlock_C");
            viewString.Append("entroidY, T1.BlockModelBlock_CentroidZ, T1.BlockModelBlock_LengthX, T1.BlockMode");
            viewString.Append("lBlock_LengthY, T1.BlockModelBlock_LengthZ, T1.BlockModelBlock_MinimumSamples, T");
            viewString.Append("1.BlockModelBlock_MaximumSamples, T1.BlockModelBlock_EstimationTechnique, T1.Blo");
            viewString.Append("ckModelBlock_KrigingEfficiency, T1.BlockModelBlock_KrigingError, T1.BlockModelBl");
            viewString.Append("ock_KrigingVariance, T1.BlockModelBlock_SlopeOfRegression, T1.BlockModelBlock_De");
            viewString.Append("nsity, T1.BlockModelBlock_ResourceCategory, T1.BlockModelBlock_Numeric1, T1.Bloc");
            viewString.Append("kModelBlock_Numeric2, T1.BlockModelBlock_Numeric3, T1.BlockModelBlock_Numeric4, ");
            viewString.Append("T1.BlockModelBlock_Numeric5, T1.BlockModelBlock_Numeric6, T1.BlockModelBlock_Num");
            viewString.Append("eric7, T1.BlockModelBlock_Numeric8, T1.BlockModelBlock_Numeric9, T1.BlockModelBl");
            viewString.Append("ock_Numeric10, T1.BlockModelBlock_Numeric11, T1.BlockModelBlock_Numeric12, T1.Bl");
            viewString.Append("ockModelBlock_Numeric13, T1.BlockModelBlock_Numeric14, T1.BlockModelBlock_Numeri");
            viewString.Append("c15, T1.BlockModelBlock_Numeric16, T1.BlockModelBlock_Numeric17, T1.BlockModelBl");
            viewString.Append("ock_Numeric18, T1.BlockModelBlock_Numeric19, T1.BlockModelBlock_Numeric20, T1.Bl");
            viewString.Append("ockModelBlock_Numeric21, T1.BlockModelBlock_Numeric22, T1.BlockModelBlock_Numeri");
            viewString.Append("c23, T1.BlockModelBlock_Numeric24, T1.BlockModelBlock_Numeric25, T1.BlockModelBl");
            viewString.Append("ock_Numeric26, T1.BlockModelBlock_Numeric27, T1.BlockModelBlock_Numeric28, T1.Bl");
            viewString.Append("ockModelBlock_Numeric29, T1.BlockModelBlock_Numeric30, T1.BlockModelBlock_Numeri");
            viewString.Append("c31, T1.BlockModelBlock_String1, T1.BlockModelBlock_String2, T1.BlockModelBlock_");
            viewString.Append("String3, T1.BlockModelBlock_String4, T1.BlockModelBlock_String5, T1.BlockModelBl");
            viewString.Append("ock_String6, T1.BlockModelBlock_String7, T1.BlockModelBlock_String8, T1.BlockMod");
            viewString.Append("elBlock_String9, T1.BlockModelBlock_String10, T1.BlockModelBlock_String11, T1.Bl");
            viewString.Append("ockModelBlock_Version, T1.BlockModelBlock_VersionAntecedentID, T1.BlockModelBloc");
            viewString.Append("k_VersionCertainty, T1.BlockModelBlock_VersionWorkflowInstanceID, T1.BlockModelB");
            viewString.Append("lock_VersionUpdatedBy, T1.BlockModelBlock_VersionDeletedBy, T1.BlockModelBlock_V");
            viewString.Append("ersionOwnerContactID, T1.BlockModelBlock_VersionOwnerCompanyID, T1.BlockModelBlo");
            viewString.Append("ck_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.BlockModelBlockID");
            viewString.Append(" AS BlockModelBlock_BlockModelBlockID, \r\n            T.BlockModelID AS BlockMode");
            viewString.Append("lBlock_BlockModelID, \r\n            T.Domain AS BlockModelBlock_Domain, \r\n       ");
            viewString.Append("     T.I AS BlockModelBlock_I, \r\n            T.J AS BlockModelBlock_J, \r\n       ");
            viewString.Append("     T.K AS BlockModelBlock_K, \r\n            T.CentroidX AS BlockModelBlock_Cent");
            viewString.Append("roidX, \r\n            T.CentroidY AS BlockModelBlock_CentroidY, \r\n            T.C");
            viewString.Append("entroidZ AS BlockModelBlock_CentroidZ, \r\n            T.LengthX AS BlockModelBloc");
            viewString.Append("k_LengthX, \r\n            T.LengthY AS BlockModelBlock_LengthY, \r\n            T.L");
            viewString.Append("engthZ AS BlockModelBlock_LengthZ, \r\n            T.MinimumSamples AS BlockModelB");
            viewString.Append("lock_MinimumSamples, \r\n            T.MaximumSamples AS BlockModelBlock_MaximumSa");
            viewString.Append("mples, \r\n            T.EstimationTechnique AS BlockModelBlock_EstimationTechniqu");
            viewString.Append("e, \r\n            T.KrigingEfficiency AS BlockModelBlock_KrigingEfficiency, \r\n   ");
            viewString.Append("         T.KrigingError AS BlockModelBlock_KrigingError, \r\n            T.Kriging");
            viewString.Append("Variance AS BlockModelBlock_KrigingVariance, \r\n            T.SlopeOfRegression A");
            viewString.Append("S BlockModelBlock_SlopeOfRegression, \r\n            T.Density AS BlockModelBlock_");
            viewString.Append("Density, \r\n            T.ResourceCategory AS BlockModelBlock_ResourceCategory, \r");
            viewString.Append("\n            T.Numeric1 AS BlockModelBlock_Numeric1, \r\n            T.Numeric2 AS");
            viewString.Append(" BlockModelBlock_Numeric2, \r\n            T.Numeric3 AS BlockModelBlock_Numeric3,");
            viewString.Append(" \r\n            T.Numeric4 AS BlockModelBlock_Numeric4, \r\n            T.Numeric5 ");
            viewString.Append("AS BlockModelBlock_Numeric5, \r\n            T.Numeric6 AS BlockModelBlock_Numeric");
            viewString.Append("6, \r\n            T.Numeric7 AS BlockModelBlock_Numeric7, \r\n            T.Numeric");
            viewString.Append("8 AS BlockModelBlock_Numeric8, \r\n            T.Numeric9 AS BlockModelBlock_Numer");
            viewString.Append("ic9, \r\n            T.Numeric10 AS BlockModelBlock_Numeric10, \r\n            T.Num");
            viewString.Append("eric11 AS BlockModelBlock_Numeric11, \r\n            T.Numeric12 AS BlockModelBloc");
            viewString.Append("k_Numeric12, \r\n            T.Numeric13 AS BlockModelBlock_Numeric13, \r\n         ");
            viewString.Append("   T.Numeric14 AS BlockModelBlock_Numeric14, \r\n            T.Numeric15 AS BlockM");
            viewString.Append("odelBlock_Numeric15, \r\n            T.Numeric16 AS BlockModelBlock_Numeric16, \r\n ");
            viewString.Append("           T.Numeric17 AS BlockModelBlock_Numeric17, \r\n            T.Numeric18 A");
            viewString.Append("S BlockModelBlock_Numeric18, \r\n            T.Numeric19 AS BlockModelBlock_Numeri");
            viewString.Append("c19, \r\n            T.Numeric20 AS BlockModelBlock_Numeric20, \r\n            T.Num");
            viewString.Append("eric21 AS BlockModelBlock_Numeric21, \r\n            T.Numeric22 AS BlockModelBloc");
            viewString.Append("k_Numeric22, \r\n            T.Numeric23 AS BlockModelBlock_Numeric23, \r\n         ");
            viewString.Append("   T.Numeric24 AS BlockModelBlock_Numeric24, \r\n            T.Numeric25 AS BlockM");
            viewString.Append("odelBlock_Numeric25, \r\n            T.Numeric26 AS BlockModelBlock_Numeric26, \r\n ");
            viewString.Append("           T.Numeric27 AS BlockModelBlock_Numeric27, \r\n            T.Numeric28 A");
            viewString.Append("S BlockModelBlock_Numeric28, \r\n            T.Numeric29 AS BlockModelBlock_Numeri");
            viewString.Append("c29, \r\n            T.Numeric30 AS BlockModelBlock_Numeric30, \r\n            T.Num");
            viewString.Append("eric31 AS BlockModelBlock_Numeric31, \r\n            T.String1 AS BlockModelBlock_");
            viewString.Append("String1, \r\n            T.String2 AS BlockModelBlock_String2, \r\n            T.Str");
            viewString.Append("ing3 AS BlockModelBlock_String3, \r\n            T.String4 AS BlockModelBlock_Stri");
            viewString.Append("ng4, \r\n            T.String5 AS BlockModelBlock_String5, \r\n            T.String6");
            viewString.Append(" AS BlockModelBlock_String6, \r\n            T.String7 AS BlockModelBlock_String7,");
            viewString.Append(" \r\n            T.String8 AS BlockModelBlock_String8, \r\n            T.String9 AS ");
            viewString.Append("BlockModelBlock_String9, \r\n            T.String10 AS BlockModelBlock_String10, \r");
            viewString.Append("\n            T.String11 AS BlockModelBlock_String11, \r\n            T.Version AS ");
            viewString.Append("BlockModelBlock_Version, \r\n            T.VersionAntecedentID AS BlockModelBlock_");
            viewString.Append("VersionAntecedentID, \r\n            T.VersionCertainty AS BlockModelBlock_Version");
            viewString.Append("Certainty, \r\n            T.VersionWorkflowInstanceID AS BlockModelBlock_VersionW");
            viewString.Append("orkflowInstanceID, \r\n            T.VersionUpdatedBy AS BlockModelBlock_VersionUp");
            viewString.Append("datedBy, \r\n            T.VersionDeletedBy AS BlockModelBlock_VersionDeletedBy, \r");
            viewString.Append("\n            T.VersionOwnerContactID AS BlockModelBlock_VersionOwnerContactID, \r");
            viewString.Append("\n            T.VersionOwnerCompanyID AS BlockModelBlock_VersionOwnerCompanyID, \r");
            viewString.Append("\n            T.VersionUpdated AS BlockModelBlock_VersionUpdated, \r\n            T");
            viewString.Append("rue AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_BlockModelB");
            viewString.Append("lock AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.BlockModelBlocks", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.BlockModelBlockDatas
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView409()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2057);
            viewString.Append("\r\n    SELECT VALUE -- Constructing BlockModelBlockDatas\r\n        [NKD.Module.Bus");
            viewString.Append("inessObjects.BlockModelBlockData](T1.BlockModelBlockData_BlockModelBlockDataID, ");
            viewString.Append("T1.BlockModelBlockData_BlockModelID, T1.BlockModelBlockData_BlockModelBlockID, T");
            viewString.Append("1.BlockModelBlockData_ParameterID, T1.BlockModelBlockData_BlockModelBlockDataTex");
            viewString.Append("t, T1.BlockModelBlockData_BlockModelBlockDataValue, T1.BlockModelBlockData_Versi");
            viewString.Append("on, T1.BlockModelBlockData_VersionAntecedentID, T1.BlockModelBlockData_VersionCe");
            viewString.Append("rtainty, T1.BlockModelBlockData_VersionWorkflowInstanceID, T1.BlockModelBlockDat");
            viewString.Append("a_VersionUpdatedBy, T1.BlockModelBlockData_VersionDeletedBy, T1.BlockModelBlockD");
            viewString.Append("ata_VersionOwnerContactID, T1.BlockModelBlockData_VersionOwnerCompanyID, T1.Bloc");
            viewString.Append("kModelBlockData_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.Bloc");
            viewString.Append("kModelBlockDataID AS BlockModelBlockData_BlockModelBlockDataID, \r\n            T.");
            viewString.Append("BlockModelID AS BlockModelBlockData_BlockModelID, \r\n            T.BlockModelBloc");
            viewString.Append("kID AS BlockModelBlockData_BlockModelBlockID, \r\n            T.ParameterID AS Blo");
            viewString.Append("ckModelBlockData_ParameterID, \r\n            T.BlockModelBlockDataText AS BlockMo");
            viewString.Append("delBlockData_BlockModelBlockDataText, \r\n            T.BlockModelBlockDataValue A");
            viewString.Append("S BlockModelBlockData_BlockModelBlockDataValue, \r\n            T.Version AS Block");
            viewString.Append("ModelBlockData_Version, \r\n            T.VersionAntecedentID AS BlockModelBlockDa");
            viewString.Append("ta_VersionAntecedentID, \r\n            T.VersionCertainty AS BlockModelBlockData_");
            viewString.Append("VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS BlockModelBlockDa");
            viewString.Append("ta_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS BlockModelBloc");
            viewString.Append("kData_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS BlockModelBlockData_");
            viewString.Append("VersionDeletedBy, \r\n            T.VersionOwnerContactID AS BlockModelBlockData_V");
            viewString.Append("ersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS BlockModelBlockDa");
            viewString.Append("ta_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS BlockModelBlockData_");
            viewString.Append("VersionUpdated, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObje");
            viewString.Append("ctsStoreContainer.X_BlockModelBlockData AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.BlockModelBlockDatas", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.BlockModelMetadatas
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView410()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.BlockModelMetadatas", "\r\n    SELECT VALUE -- Constructing BlockModelMetadatas\r\n        [NKD.Module.Busin" +
                    "essObjects.BlockModelMetadata](T1.BlockModelMetadata_BlockModelMetadataID, T1.Bl" +
                    "ockModelMetadata_BlockModelID, T1.BlockModelMetadata_ParameterID, T1.BlockModelM" +
                    "etadata_IsColumnData, T1.BlockModelMetadata_BlockModelMetadataText, T1.BlockMode" +
                    "lMetadata_BlockModelMetadataValue, T1.BlockModelMetadata_Version, T1.BlockModelM" +
                    "etadata_VersionAntecedentID, T1.BlockModelMetadata_VersionCertainty, T1.BlockMod" +
                    "elMetadata_VersionWorkflowInstanceID, T1.BlockModelMetadata_VersionUpdatedBy, T1" +
                    ".BlockModelMetadata_VersionDeletedBy, T1.BlockModelMetadata_VersionOwnerContactI" +
                    "D, T1.BlockModelMetadata_VersionOwnerCompanyID, T1.BlockModelMetadata_VersionUpd" +
                    "ated)\r\n    FROM (\r\n        SELECT \r\n            T.BlockModelMetadataID AS BlockM" +
                    "odelMetadata_BlockModelMetadataID, \r\n            T.BlockModelID AS BlockModelMet" +
                    "adata_BlockModelID, \r\n            T.ParameterID AS BlockModelMetadata_ParameterI" +
                    "D, \r\n            T.IsColumnData AS BlockModelMetadata_IsColumnData, \r\n          " +
                    "  T.BlockModelMetadataText AS BlockModelMetadata_BlockModelMetadataText, \r\n     " +
                    "       T.BlockModelMetadataValue AS BlockModelMetadata_BlockModelMetadataValue, " +
                    "\r\n            T.Version AS BlockModelMetadata_Version, \r\n            T.VersionAn" +
                    "tecedentID AS BlockModelMetadata_VersionAntecedentID, \r\n            T.VersionCer" +
                    "tainty AS BlockModelMetadata_VersionCertainty, \r\n            T.VersionWorkflowIn" +
                    "stanceID AS BlockModelMetadata_VersionWorkflowInstanceID, \r\n            T.Versio" +
                    "nUpdatedBy AS BlockModelMetadata_VersionUpdatedBy, \r\n            T.VersionDelete" +
                    "dBy AS BlockModelMetadata_VersionDeletedBy, \r\n            T.VersionOwnerContactI" +
                    "D AS BlockModelMetadata_VersionOwnerContactID, \r\n            T.VersionOwnerCompa" +
                    "nyID AS BlockModelMetadata_VersionOwnerCompanyID, \r\n            T.VersionUpdated" +
                    " AS BlockModelMetadata_VersionUpdated, \r\n            True AS _from0\r\n        FRO" +
                    "M NKDModuleBusinessObjectsStoreContainer.X_BlockModelMetadata AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.Casings
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView411()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2083);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Casings\r\n        [NKD.Module.BusinessObjects.");
            viewString.Append("Casing](T1.Casing_CasingID, T1.Casing_HeaderID, T1.Casing_FromDepth, T1.Casing_T");
            viewString.Append("oDepth, T1.Casing_CasingTypeID, T1.Casing_CasingSize, T1.Casing_CasingSizeUnit, ");
            viewString.Append("T1.Casing_CasingInsideData, T1.Casing_CasingInsideDataUnit, T1.Casing_CasingOuts");
            viewString.Append("ideData, T1.Casing_CasingOutsideDataUnit, T1.Casing_LengthRecovered, T1.Casing_C");
            viewString.Append("omment, T1.Casing_Version, T1.Casing_VersionAntecedentID, T1.Casing_VersionCerta");
            viewString.Append("inty, T1.Casing_VersionWorkflowInstanceID, T1.Casing_VersionUpdatedBy, T1.Casing");
            viewString.Append("_VersionDeletedBy, T1.Casing_VersionOwnerContactID, T1.Casing_VersionOwnerCompan");
            viewString.Append("yID, T1.Casing_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.Casin");
            viewString.Append("gID AS Casing_CasingID, \r\n            T.HeaderID AS Casing_HeaderID, \r\n         ");
            viewString.Append("   T.FromDepth AS Casing_FromDepth, \r\n            T.ToDepth AS Casing_ToDepth, \r");
            viewString.Append("\n            T.CasingTypeID AS Casing_CasingTypeID, \r\n            T.CasingSize A");
            viewString.Append("S Casing_CasingSize, \r\n            T.CasingSizeUnit AS Casing_CasingSizeUnit, \r\n");
            viewString.Append("            T.CasingInsideData AS Casing_CasingInsideData, \r\n            T.Casin");
            viewString.Append("gInsideDataUnit AS Casing_CasingInsideDataUnit, \r\n            T.CasingOutsideDat");
            viewString.Append("a AS Casing_CasingOutsideData, \r\n            T.CasingOutsideDataUnit AS Casing_C");
            viewString.Append("asingOutsideDataUnit, \r\n            T.LengthRecovered AS Casing_LengthRecovered,");
            viewString.Append(" \r\n            T.Comment AS Casing_Comment, \r\n            T.Version AS Casing_Ve");
            viewString.Append("rsion, \r\n            T.VersionAntecedentID AS Casing_VersionAntecedentID, \r\n    ");
            viewString.Append("        T.VersionCertainty AS Casing_VersionCertainty, \r\n            T.VersionWo");
            viewString.Append("rkflowInstanceID AS Casing_VersionWorkflowInstanceID, \r\n            T.VersionUpd");
            viewString.Append("atedBy AS Casing_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS Casing_Ve");
            viewString.Append("rsionDeletedBy, \r\n            T.VersionOwnerContactID AS Casing_VersionOwnerCont");
            viewString.Append("actID, \r\n            T.VersionOwnerCompanyID AS Casing_VersionOwnerCompanyID, \r\n");
            viewString.Append("            T.VersionUpdated AS Casing_VersionUpdated, \r\n            True AS _fr");
            viewString.Append("om0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_Casing AS T\r\n    ) AS");
            viewString.Append(" T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.Casings", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.Cementings
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView412()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.Cementings", "\r\n    SELECT VALUE -- Constructing Cementings\r\n        [NKD.Module.BusinessObject" +
                    "s.Cementing](T1.Cementing_CementingID, T1.Cementing_HeaderID, T1.Cementing_FromD" +
                    "epth, T1.Cementing_ToDepth, T1.Cementing_CementingDate, T1.Cementing_Volume, T1." +
                    "Cementing_Comment, T1.Cementing_Version, T1.Cementing_VersionAntecedentID, T1.Ce" +
                    "menting_VersionCertainty, T1.Cementing_VersionWorkflowInstanceID, T1.Cementing_V" +
                    "ersionUpdatedBy, T1.Cementing_VersionDeletedBy, T1.Cementing_VersionOwnerContact" +
                    "ID, T1.Cementing_VersionOwnerCompanyID, T1.Cementing_VersionUpdated)\r\n    FROM (" +
                    "\r\n        SELECT \r\n            T.CementingID AS Cementing_CementingID, \r\n       " +
                    "     T.HeaderID AS Cementing_HeaderID, \r\n            T.FromDepth AS Cementing_Fr" +
                    "omDepth, \r\n            T.ToDepth AS Cementing_ToDepth, \r\n            T.Cementing" +
                    "Date AS Cementing_CementingDate, \r\n            T.Volume AS Cementing_Volume, \r\n " +
                    "           T.Comment AS Cementing_Comment, \r\n            T.Version AS Cementing_" +
                    "Version, \r\n            T.VersionAntecedentID AS Cementing_VersionAntecedentID, \r" +
                    "\n            T.VersionCertainty AS Cementing_VersionCertainty, \r\n            T.V" +
                    "ersionWorkflowInstanceID AS Cementing_VersionWorkflowInstanceID, \r\n            T" +
                    ".VersionUpdatedBy AS Cementing_VersionUpdatedBy, \r\n            T.VersionDeletedB" +
                    "y AS Cementing_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS Cement" +
                    "ing_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS Cementing_Ve" +
                    "rsionOwnerCompanyID, \r\n            T.VersionUpdated AS Cementing_VersionUpdated," +
                    " \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContain" +
                    "er.X_Cementing AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.Companies
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView413()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.Companies", "\r\n    SELECT VALUE -- Constructing Companies\r\n        [NKD.Module.BusinessObjects" +
                    ".Company](T1.Company_CompanyID, T1.Company_CompanyName, T1.Company_CountryID, T1" +
                    ".Company_PrimaryContactID, T1.Company_Comment, T1.Company_Version, T1.Company_Ve" +
                    "rsionAntecedentID, T1.Company_VersionCertainty, T1.Company_VersionWorkflowInstan" +
                    "ceID, T1.Company_VersionUpdatedBy, T1.Company_VersionDeletedBy, T1.Company_Versi" +
                    "onOwnerContactID, T1.Company_VersionOwnerCompanyID, T1.Company_VersionUpdated, T" +
                    "1.Company_Thumbnail, T1.Company_OriginalFileDataID)\r\n    FROM (\r\n        SELECT " +
                    "\r\n            T.CompanyID AS Company_CompanyID, \r\n            T.CompanyName AS C" +
                    "ompany_CompanyName, \r\n            T.CountryID AS Company_CountryID, \r\n          " +
                    "  T.PrimaryContactID AS Company_PrimaryContactID, \r\n            T.Comment AS Com" +
                    "pany_Comment, \r\n            T.Version AS Company_Version, \r\n            T.Versio" +
                    "nAntecedentID AS Company_VersionAntecedentID, \r\n            T.VersionCertainty A" +
                    "S Company_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS Company" +
                    "_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS Company_VersionU" +
                    "pdatedBy, \r\n            T.VersionDeletedBy AS Company_VersionDeletedBy, \r\n      " +
                    "      T.VersionOwnerContactID AS Company_VersionOwnerContactID, \r\n            T." +
                    "VersionOwnerCompanyID AS Company_VersionOwnerCompanyID, \r\n            T.VersionU" +
                    "pdated AS Company_VersionUpdated, \r\n            T.Thumbnail AS Company_Thumbnail" +
                    ", \r\n            T.OriginalFileDataID AS Company_OriginalFileDataID, \r\n          " +
                    "  True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_Company " +
                    "AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.CompanyAddresses
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView414()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.CompanyAddresses", @"
    SELECT VALUE -- Constructing CompanyAddresses
        [NKD.Module.BusinessObjects.CompanyAddress](T1.CompanyAddress_CompanyAddressID, T1.CompanyAddress_CompanyID, T1.CompanyAddress_AddressID, T1.CompanyAddress_Version, T1.CompanyAddress_VersionAntecedentID, T1.CompanyAddress_VersionCertainty, T1.CompanyAddress_VersionWorkflowInstanceID, T1.CompanyAddress_VersionUpdatedBy, T1.CompanyAddress_VersionDeletedBy, T1.CompanyAddress_VersionOwnerContactID, T1.CompanyAddress_VersionOwnerCompanyID, T1.CompanyAddress_VersionUpdated)
    FROM (
        SELECT 
            T.CompanyAddressID AS CompanyAddress_CompanyAddressID, 
            T.CompanyID AS CompanyAddress_CompanyID, 
            T.AddressID AS CompanyAddress_AddressID, 
            T.Version AS CompanyAddress_Version, 
            T.VersionAntecedentID AS CompanyAddress_VersionAntecedentID, 
            T.VersionCertainty AS CompanyAddress_VersionCertainty, 
            T.VersionWorkflowInstanceID AS CompanyAddress_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS CompanyAddress_VersionUpdatedBy, 
            T.VersionDeletedBy AS CompanyAddress_VersionDeletedBy, 
            T.VersionOwnerContactID AS CompanyAddress_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS CompanyAddress_VersionOwnerCompanyID, 
            T.VersionUpdated AS CompanyAddress_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_CompanyAddress AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.CompanyRelations
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView415()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.CompanyRelations", "\r\n    SELECT VALUE -- Constructing CompanyRelations\r\n        [NKD.Module.Business" +
                    "Objects.CompanyRelation](T1.CompanyRelation_CompanyRelationID, T1.CompanyRelatio" +
                    "n_CompanyID, T1.CompanyRelation_ParentCompanyID, T1.CompanyRelation_IsChildVisib" +
                    "le, T1.CompanyRelation_IsParentVisible, T1.CompanyRelation_Version, T1.CompanyRe" +
                    "lation_VersionAntecedentID, T1.CompanyRelation_VersionCertainty, T1.CompanyRelat" +
                    "ion_VersionWorkflowInstanceID, T1.CompanyRelation_VersionUpdatedBy, T1.CompanyRe" +
                    "lation_VersionDeletedBy, T1.CompanyRelation_VersionOwnerContactID, T1.CompanyRel" +
                    "ation_VersionOwnerCompanyID, T1.CompanyRelation_VersionUpdated)\r\n    FROM (\r\n   " +
                    "     SELECT \r\n            T.CompanyRelationID AS CompanyRelation_CompanyRelation" +
                    "ID, \r\n            T.CompanyID AS CompanyRelation_CompanyID, \r\n            T.Pare" +
                    "ntCompanyID AS CompanyRelation_ParentCompanyID, \r\n            T.IsChildVisible A" +
                    "S CompanyRelation_IsChildVisible, \r\n            T.IsParentVisible AS CompanyRela" +
                    "tion_IsParentVisible, \r\n            T.Version AS CompanyRelation_Version, \r\n    " +
                    "        T.VersionAntecedentID AS CompanyRelation_VersionAntecedentID, \r\n        " +
                    "    T.VersionCertainty AS CompanyRelation_VersionCertainty, \r\n            T.Vers" +
                    "ionWorkflowInstanceID AS CompanyRelation_VersionWorkflowInstanceID, \r\n          " +
                    "  T.VersionUpdatedBy AS CompanyRelation_VersionUpdatedBy, \r\n            T.Versio" +
                    "nDeletedBy AS CompanyRelation_VersionDeletedBy, \r\n            T.VersionOwnerCont" +
                    "actID AS CompanyRelation_VersionOwnerContactID, \r\n            T.VersionOwnerComp" +
                    "anyID AS CompanyRelation_VersionOwnerCompanyID, \r\n            T.VersionUpdated A" +
                    "S CompanyRelation_VersionUpdated, \r\n            True AS _from0\r\n        FROM NKD" +
                    "ModuleBusinessObjectsStoreContainer.X_CompanyRelation AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.Compliances
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView416()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2077);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Compliances\r\n        [NKD.Module.BusinessObje");
            viewString.Append("cts.Compliance](T1.Compliance_ComplianceID, T1.Compliance_ComplianceName, T1.Com");
            viewString.Append("pliance_ComplianceVersion, T1.Compliance_CountryID, T1.Compliance_ProvinceID, T1");
            viewString.Append(".Compliance_ValidFrom, T1.Compliance_Expiry, T1.Compliance_AuthorityCompanyID, T");
            viewString.Append("1.Compliance_MaintainedBy, T1.Compliance_Description, T1.Compliance_ComplianceFo");
            viewString.Append("rm, T1.Compliance_Version, T1.Compliance_VersionAntecedentID, T1.Compliance_Vers");
            viewString.Append("ionCertainty, T1.Compliance_VersionWorkflowInstanceID, T1.Compliance_VersionUpda");
            viewString.Append("tedBy, T1.Compliance_VersionDeletedBy, T1.Compliance_VersionOwnerContactID, T1.C");
            viewString.Append("ompliance_VersionOwnerCompanyID, T1.Compliance_VersionUpdated)\r\n    FROM (\r\n    ");
            viewString.Append("    SELECT \r\n            T.ComplianceID AS Compliance_ComplianceID, \r\n          ");
            viewString.Append("  T.ComplianceName AS Compliance_ComplianceName, \r\n            T.ComplianceVersi");
            viewString.Append("on AS Compliance_ComplianceVersion, \r\n            T.CountryID AS Compliance_Coun");
            viewString.Append("tryID, \r\n            T.ProvinceID AS Compliance_ProvinceID, \r\n            T.Vali");
            viewString.Append("dFrom AS Compliance_ValidFrom, \r\n            T.Expiry AS Compliance_Expiry, \r\n  ");
            viewString.Append("          T.AuthorityCompanyID AS Compliance_AuthorityCompanyID, \r\n            T");
            viewString.Append(".MaintainedBy AS Compliance_MaintainedBy, \r\n            T.Description AS Complia");
            viewString.Append("nce_Description, \r\n            T.ComplianceForm AS Compliance_ComplianceForm, \r\n");
            viewString.Append("            T.Version AS Compliance_Version, \r\n            T.VersionAntecedentID");
            viewString.Append(" AS Compliance_VersionAntecedentID, \r\n            T.VersionCertainty AS Complian");
            viewString.Append("ce_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS Compliance_Ver");
            viewString.Append("sionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS Compliance_VersionUp");
            viewString.Append("datedBy, \r\n            T.VersionDeletedBy AS Compliance_VersionDeletedBy, \r\n    ");
            viewString.Append("        T.VersionOwnerContactID AS Compliance_VersionOwnerContactID, \r\n         ");
            viewString.Append("   T.VersionOwnerCompanyID AS Compliance_VersionOwnerCompanyID, \r\n            T.");
            viewString.Append("VersionUpdated AS Compliance_VersionUpdated, \r\n            True AS _from0\r\n     ");
            viewString.Append("   FROM NKDModuleBusinessObjectsStoreContainer.X_Compliance AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.Compliances", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.ComplianceTasks
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView417()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.ComplianceTasks", "\r\n    SELECT VALUE -- Constructing ComplianceTasks\r\n        [NKD.Module.BusinessO" +
                    "bjects.ComplianceTask](T1.ComplianceTask_ComplianceTaskID, T1.ComplianceTask_Com" +
                    "plianceID, T1.ComplianceTask_TaskID, T1.ComplianceTask_ExecutePrior, T1.Complian" +
                    "ceTask_Version, T1.ComplianceTask_VersionAntecedentID, T1.ComplianceTask_Version" +
                    "Certainty, T1.ComplianceTask_VersionWorkflowInstanceID, T1.ComplianceTask_Versio" +
                    "nUpdatedBy, T1.ComplianceTask_VersionDeletedBy, T1.ComplianceTask_VersionOwnerCo" +
                    "ntactID, T1.ComplianceTask_VersionOwnerCompanyID, T1.ComplianceTask_VersionUpdat" +
                    "ed, T1.ComplianceTask_Sequence)\r\n    FROM (\r\n        SELECT \r\n            T.Comp" +
                    "lianceTaskID AS ComplianceTask_ComplianceTaskID, \r\n            T.ComplianceID AS" +
                    " ComplianceTask_ComplianceID, \r\n            T.TaskID AS ComplianceTask_TaskID, \r" +
                    "\n            T.ExecutePrior AS ComplianceTask_ExecutePrior, \r\n            T.Vers" +
                    "ion AS ComplianceTask_Version, \r\n            T.VersionAntecedentID AS Compliance" +
                    "Task_VersionAntecedentID, \r\n            T.VersionCertainty AS ComplianceTask_Ver" +
                    "sionCertainty, \r\n            T.VersionWorkflowInstanceID AS ComplianceTask_Versi" +
                    "onWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS ComplianceTask_Version" +
                    "UpdatedBy, \r\n            T.VersionDeletedBy AS ComplianceTask_VersionDeletedBy, " +
                    "\r\n            T.VersionOwnerContactID AS ComplianceTask_VersionOwnerContactID, \r" +
                    "\n            T.VersionOwnerCompanyID AS ComplianceTask_VersionOwnerCompanyID, \r\n" +
                    "            T.VersionUpdated AS ComplianceTask_VersionUpdated, \r\n            T.S" +
                    "equence AS ComplianceTask_Sequence, \r\n            True AS _from0\r\n        FROM N" +
                    "KDModuleBusinessObjectsStoreContainer.X_ComplianceTask AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.ComplianceWorkTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView418()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.ComplianceWorkTypes", "\r\n    SELECT VALUE -- Constructing ComplianceWorkTypes\r\n        [NKD.Module.Busin" +
                    "essObjects.ComplianceWorkType](T1.ComplianceWorkType_ComplianceWorkTypeID, T1.Co" +
                    "mplianceWorkType_ComplianceID, T1.ComplianceWorkType_WorkTypeID, T1.ComplianceWo" +
                    "rkType_Version, T1.ComplianceWorkType_VersionAntecedentID, T1.ComplianceWorkType" +
                    "_VersionCertainty, T1.ComplianceWorkType_VersionWorkflowInstanceID, T1.Complianc" +
                    "eWorkType_VersionUpdatedBy, T1.ComplianceWorkType_VersionDeletedBy, T1.Complianc" +
                    "eWorkType_VersionOwnerContactID, T1.ComplianceWorkType_VersionOwnerCompanyID, T1" +
                    ".ComplianceWorkType_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T." +
                    "ComplianceWorkTypeID AS ComplianceWorkType_ComplianceWorkTypeID, \r\n            T" +
                    ".ComplianceID AS ComplianceWorkType_ComplianceID, \r\n            T.WorkTypeID AS " +
                    "ComplianceWorkType_WorkTypeID, \r\n            T.Version AS ComplianceWorkType_Ver" +
                    "sion, \r\n            T.VersionAntecedentID AS ComplianceWorkType_VersionAnteceden" +
                    "tID, \r\n            T.VersionCertainty AS ComplianceWorkType_VersionCertainty, \r\n" +
                    "            T.VersionWorkflowInstanceID AS ComplianceWorkType_VersionWorkflowIns" +
                    "tanceID, \r\n            T.VersionUpdatedBy AS ComplianceWorkType_VersionUpdatedBy" +
                    ", \r\n            T.VersionDeletedBy AS ComplianceWorkType_VersionDeletedBy, \r\n   " +
                    "         T.VersionOwnerContactID AS ComplianceWorkType_VersionOwnerContactID, \r\n" +
                    "            T.VersionOwnerCompanyID AS ComplianceWorkType_VersionOwnerCompanyID," +
                    " \r\n            T.VersionUpdated AS ComplianceWorkType_VersionUpdated, \r\n        " +
                    "    True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_Compli" +
                    "anceWorkType AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.Contacts
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView419()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2621);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Contacts\r\n        [NKD.Module.BusinessObjects");
            viewString.Append(".Contact](T1.Contact_ContactID, T1.Contact_ContactName, T1.Contact_Title, T1.Con");
            viewString.Append("tact_Surname, T1.Contact_Firstname, T1.Contact_Username, T1.Contact_Hash, T1.Con");
            viewString.Append("tact_DefaultEmail, T1.Contact_MiddleNames, T1.Contact_Initials, T1.Contact_DOB, ");
            viewString.Append("T1.Contact_BirthCountryID, T1.Contact_BirthCity, T1.Contact_AspNetUserID, T1.Con");
            viewString.Append("tact_XafUserID, T1.Contact_OAuthID, T1.Contact_Photo, T1.Contact_ShortBiography,");
            viewString.Append(" T1.Contact_Version, T1.Contact_VersionAntecedentID, T1.Contact_VersionCertainty");
            viewString.Append(", T1.Contact_VersionWorkflowInstanceID, T1.Contact_VersionUpdatedBy, T1.Contact_");
            viewString.Append("VersionDeletedBy, T1.Contact_VersionOwnerContactID, T1.Contact_VersionOwnerCompa");
            viewString.Append("nyID, T1.Contact_VersionUpdated, T1.Contact_DefaultMobile, T1.Contact_DefaultEma");
            viewString.Append("ilValidated, T1.Contact_DefaultMobileValidated)\r\n    FROM (\r\n        SELECT \r\n  ");
            viewString.Append("          T.ContactID AS Contact_ContactID, \r\n            T.ContactName AS Conta");
            viewString.Append("ct_ContactName, \r\n            T.Title AS Contact_Title, \r\n            T.Surname ");
            viewString.Append("AS Contact_Surname, \r\n            T.Firstname AS Contact_Firstname, \r\n          ");
            viewString.Append("  T.Username AS Contact_Username, \r\n            T.Hash AS Contact_Hash, \r\n      ");
            viewString.Append("      T.DefaultEmail AS Contact_DefaultEmail, \r\n            T.MiddleNames AS Con");
            viewString.Append("tact_MiddleNames, \r\n            T.Initials AS Contact_Initials, \r\n            T.");
            viewString.Append("DOB AS Contact_DOB, \r\n            T.BirthCountryID AS Contact_BirthCountryID, \r\n");
            viewString.Append("            T.BirthCity AS Contact_BirthCity, \r\n            T.AspNetUserID AS Co");
            viewString.Append("ntact_AspNetUserID, \r\n            T.XafUserID AS Contact_XafUserID, \r\n          ");
            viewString.Append("  T.OAuthID AS Contact_OAuthID, \r\n            T.Photo AS Contact_Photo, \r\n      ");
            viewString.Append("      T.ShortBiography AS Contact_ShortBiography, \r\n            T.Version AS Con");
            viewString.Append("tact_Version, \r\n            T.VersionAntecedentID AS Contact_VersionAntecedentID");
            viewString.Append(", \r\n            T.VersionCertainty AS Contact_VersionCertainty, \r\n            T.");
            viewString.Append("VersionWorkflowInstanceID AS Contact_VersionWorkflowInstanceID, \r\n            T.");
            viewString.Append("VersionUpdatedBy AS Contact_VersionUpdatedBy, \r\n            T.VersionDeletedBy A");
            viewString.Append("S Contact_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS Contact_Ver");
            viewString.Append("sionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS Contact_VersionOwne");
            viewString.Append("rCompanyID, \r\n            T.VersionUpdated AS Contact_VersionUpdated, \r\n        ");
            viewString.Append("    T.DefaultMobile AS Contact_DefaultMobile, \r\n            T.DefaultEmailValida");
            viewString.Append("ted AS Contact_DefaultEmailValidated, \r\n            T.DefaultMobileValidated AS ");
            viewString.Append("Contact_DefaultMobileValidated, \r\n            True AS _from0\r\n        FROM NKDMo");
            viewString.Append("duleBusinessObjectsStoreContainer.X_Contact AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.Contacts", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.ContactAddresses
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView420()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.ContactAddresses", @"
    SELECT VALUE -- Constructing ContactAddresses
        [NKD.Module.BusinessObjects.ContactAddress](T1.ContactAddress_ContactAddressID, T1.ContactAddress_ContactID, T1.ContactAddress_AddressID, T1.ContactAddress_Version, T1.ContactAddress_VersionAntecedentID, T1.ContactAddress_VersionCertainty, T1.ContactAddress_VersionWorkflowInstanceID, T1.ContactAddress_VersionUpdatedBy, T1.ContactAddress_VersionDeletedBy, T1.ContactAddress_VersionOwnerContactID, T1.ContactAddress_VersionOwnerCompanyID, T1.ContactAddress_VersionUpdated)
    FROM (
        SELECT 
            T.ContactAddressID AS ContactAddress_ContactAddressID, 
            T.ContactID AS ContactAddress_ContactID, 
            T.AddressID AS ContactAddress_AddressID, 
            T.Version AS ContactAddress_Version, 
            T.VersionAntecedentID AS ContactAddress_VersionAntecedentID, 
            T.VersionCertainty AS ContactAddress_VersionCertainty, 
            T.VersionWorkflowInstanceID AS ContactAddress_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS ContactAddress_VersionUpdatedBy, 
            T.VersionDeletedBy AS ContactAddress_VersionDeletedBy, 
            T.VersionOwnerContactID AS ContactAddress_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS ContactAddress_VersionOwnerCompanyID, 
            T.VersionUpdated AS ContactAddress_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_ContactAddress AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.Contracts
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView421()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3286);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Contracts\r\n        [NKD.Module.BusinessObject");
            viewString.Append("s.Contract](T1.Contract_ContractID, T1.Contract_ParentContractID, T1.Contract_Co");
            viewString.Append("ntractName, T1.Contract_Description, T1.Contract_ProjectID, T1.Contract_LastDeli");
            viewString.Append("verableID, T1.Contract_ObligeeID, T1.Contract_ObligeeCompanyID, T1.Contract_Obli");
            viewString.Append("gorID, T1.Contract_ObligorCompanyID, T1.Contract_AssigneeID, T1.Contract_Assigne");
            viewString.Append("eCompanyID, T1.Contract_SolicitorID, T1.Contract_SolicitorCompanyID, T1.Contract");
            viewString.Append("_Risk, T1.Contract_RiskStarts, T1.Contract_RiskEnds, T1.Contract_RiskCriticality");
            viewString.Append(", T1.Contract_RiskLikelihood, T1.Contract_Value, T1.Contract_Tax, T1.Contract_St");
            viewString.Append("arted, T1.Contract_Ended, T1.Contract_Completed, T1.Contract_Comment, T1.Contrac");
            viewString.Append("t_FileDataID, T1.Contract_RespondWithinHours, T1.Contract_Version, T1.Contract_V");
            viewString.Append("ersionAntecedentID, T1.Contract_VersionCertainty, T1.Contract_VersionWorkflowIns");
            viewString.Append("tanceID, T1.Contract_VersionUpdatedBy, T1.Contract_VersionDeletedBy, T1.Contract");
            viewString.Append("_VersionOwnerContactID, T1.Contract_VersionOwnerCompanyID, T1.Contract_VersionUp");
            viewString.Append("dated, T1.Contract_ContractText)\r\n    FROM (\r\n        SELECT \r\n            T.Con");
            viewString.Append("tractID AS Contract_ContractID, \r\n            T.ParentContractID AS Contract_Par");
            viewString.Append("entContractID, \r\n            T.ContractName AS Contract_ContractName, \r\n        ");
            viewString.Append("    T.Description AS Contract_Description, \r\n            T.ProjectID AS Contract");
            viewString.Append("_ProjectID, \r\n            T.LastDeliverableID AS Contract_LastDeliverableID, \r\n ");
            viewString.Append("           T.ObligeeID AS Contract_ObligeeID, \r\n            T.ObligeeCompanyID A");
            viewString.Append("S Contract_ObligeeCompanyID, \r\n            T.ObligorID AS Contract_ObligorID, \r\n");
            viewString.Append("            T.ObligorCompanyID AS Contract_ObligorCompanyID, \r\n            T.Ass");
            viewString.Append("igneeID AS Contract_AssigneeID, \r\n            T.AssigneeCompanyID AS Contract_As");
            viewString.Append("signeeCompanyID, \r\n            T.SolicitorID AS Contract_SolicitorID, \r\n        ");
            viewString.Append("    T.SolicitorCompanyID AS Contract_SolicitorCompanyID, \r\n            T.Risk AS");
            viewString.Append(" Contract_Risk, \r\n            T.RiskStarts AS Contract_RiskStarts, \r\n           ");
            viewString.Append(" T.RiskEnds AS Contract_RiskEnds, \r\n            T.RiskCriticality AS Contract_Ri");
            viewString.Append("skCriticality, \r\n            T.RiskLikelihood AS Contract_RiskLikelihood, \r\n    ");
            viewString.Append("        T.[Value] AS Contract_Value, \r\n            T.Tax AS Contract_Tax, \r\n    ");
            viewString.Append("        T.Started AS Contract_Started, \r\n            T.Ended AS Contract_Ended, ");
            viewString.Append("\r\n            T.Completed AS Contract_Completed, \r\n            T.Comment AS Cont");
            viewString.Append("ract_Comment, \r\n            T.FileDataID AS Contract_FileDataID, \r\n            T");
            viewString.Append(".RespondWithinHours AS Contract_RespondWithinHours, \r\n            T.Version AS C");
            viewString.Append("ontract_Version, \r\n            T.VersionAntecedentID AS Contract_VersionAntecede");
            viewString.Append("ntID, \r\n            T.VersionCertainty AS Contract_VersionCertainty, \r\n         ");
            viewString.Append("   T.VersionWorkflowInstanceID AS Contract_VersionWorkflowInstanceID, \r\n        ");
            viewString.Append("    T.VersionUpdatedBy AS Contract_VersionUpdatedBy, \r\n            T.VersionDele");
            viewString.Append("tedBy AS Contract_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS Con");
            viewString.Append("tract_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS Contract_V");
            viewString.Append("ersionOwnerCompanyID, \r\n            T.VersionUpdated AS Contract_VersionUpdated,");
            viewString.Append(" \r\n            T.ContractText AS Contract_ContractText, \r\n            True AS _f");
            viewString.Append("rom0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_Contract AS T\r\n    )");
            viewString.Append(" AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.Contracts", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.ContractConditions
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView422()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2672);
            viewString.Append("\r\n    SELECT VALUE -- Constructing ContractConditions\r\n        [NKD.Module.Busin");
            viewString.Append("essObjects.ContractCondition](T1.ContractCondition_ContractConditionID, T1.Contr");
            viewString.Append("actCondition_ContractID, T1.ContractCondition_ContractConditionTypeID, T1.Contra");
            viewString.Append("ctCondition_IsIncluded, T1.ContractCondition_IsExluded, T1.ContractCondition_Uni");
            viewString.Append("tID, T1.ContractCondition_Maximum, T1.ContractCondition_Minimum, T1.ContractCond");
            viewString.Append("ition_EstimatedValueUpfront, T1.ContractCondition_EstimatedValueOngoingUnitID, T");
            viewString.Append("1.ContractCondition_EstimatedValueOngoing, T1.ContractCondition_Version, T1.Cont");
            viewString.Append("ractCondition_VersionAntecedentID, T1.ContractCondition_VersionCertainty, T1.Con");
            viewString.Append("tractCondition_VersionWorkflowInstanceID, T1.ContractCondition_VersionUpdatedBy,");
            viewString.Append(" T1.ContractCondition_VersionDeletedBy, T1.ContractCondition_VersionOwnerContact");
            viewString.Append("ID, T1.ContractCondition_VersionOwnerCompanyID, T1.ContractCondition_VersionUpda");
            viewString.Append("ted, T1.ContractCondition_ContractConditionText, T1.ContractCondition_Comment)\r\n");
            viewString.Append("    FROM (\r\n        SELECT \r\n            T.ContractConditionID AS ContractCondit");
            viewString.Append("ion_ContractConditionID, \r\n            T.ContractID AS ContractCondition_Contrac");
            viewString.Append("tID, \r\n            T.ContractConditionTypeID AS ContractCondition_ContractCondit");
            viewString.Append("ionTypeID, \r\n            T.IsIncluded AS ContractCondition_IsIncluded, \r\n       ");
            viewString.Append("     T.IsExluded AS ContractCondition_IsExluded, \r\n            T.UnitID AS Contr");
            viewString.Append("actCondition_UnitID, \r\n            T.Maximum AS ContractCondition_Maximum, \r\n   ");
            viewString.Append("         T.Minimum AS ContractCondition_Minimum, \r\n            T.EstimatedValueU");
            viewString.Append("pfront AS ContractCondition_EstimatedValueUpfront, \r\n            T.EstimatedValu");
            viewString.Append("eOngoingUnitID AS ContractCondition_EstimatedValueOngoingUnitID, \r\n            T");
            viewString.Append(".EstimatedValueOngoing AS ContractCondition_EstimatedValueOngoing, \r\n           ");
            viewString.Append(" T.Version AS ContractCondition_Version, \r\n            T.VersionAntecedentID AS ");
            viewString.Append("ContractCondition_VersionAntecedentID, \r\n            T.VersionCertainty AS Contr");
            viewString.Append("actCondition_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS Cont");
            viewString.Append("ractCondition_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS Con");
            viewString.Append("tractCondition_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS ContractCon");
            viewString.Append("dition_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS ContractCondit");
            viewString.Append("ion_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS ContractCond");
            viewString.Append("ition_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS ContractCondition");
            viewString.Append("_VersionUpdated, \r\n            T.ContractConditionText AS ContractCondition_Cont");
            viewString.Append("ractConditionText, \r\n            T.Comment AS ContractCondition_Comment, \r\n     ");
            viewString.Append("       True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_Con");
            viewString.Append("tractCondition AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.ContractConditions", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.ContractConditionModels
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView423()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.ContractConditionModels", "\r\n    SELECT VALUE -- Constructing ContractConditionModels\r\n        [NKD.Module.B" +
                    "usinessObjects.ContractConditionModel](T1.ContractConditionModel_ContractConditi" +
                    "onModelID, T1.ContractConditionModel_ContractConditionID, T1.ContractConditionMo" +
                    "del_ModelID, T1.ContractConditionModel_Version, T1.ContractConditionModel_Versio" +
                    "nAntecedentID, T1.ContractConditionModel_VersionCertainty, T1.ContractConditionM" +
                    "odel_VersionWorkflowInstanceID, T1.ContractConditionModel_VersionUpdatedBy, T1.C" +
                    "ontractConditionModel_VersionDeletedBy, T1.ContractConditionModel_VersionOwnerCo" +
                    "ntactID, T1.ContractConditionModel_VersionOwnerCompanyID, T1.ContractConditionMo" +
                    "del_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.ContractConditio" +
                    "nModelID AS ContractConditionModel_ContractConditionModelID, \r\n            T.Con" +
                    "tractConditionID AS ContractConditionModel_ContractConditionID, \r\n            T." +
                    "ModelID AS ContractConditionModel_ModelID, \r\n            T.Version AS ContractCo" +
                    "nditionModel_Version, \r\n            T.VersionAntecedentID AS ContractConditionMo" +
                    "del_VersionAntecedentID, \r\n            T.VersionCertainty AS ContractConditionMo" +
                    "del_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS ContractCondi" +
                    "tionModel_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS Contrac" +
                    "tConditionModel_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS ContractCo" +
                    "nditionModel_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS Contract" +
                    "ConditionModel_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS C" +
                    "ontractConditionModel_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS C" +
                    "ontractConditionModel_VersionUpdated, \r\n            True AS _from0\r\n        FROM" +
                    " NKDModuleBusinessObjectsStoreContainer.X_ContractConditionModel AS T\r\n    ) AS " +
                    "T1");
        }
        
        /// <Summary>
        /// return view for NKDC.ContractConditionParts
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView424()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.ContractConditionParts", "\r\n    SELECT VALUE -- Constructing ContractConditionParts\r\n        [NKD.Module.Bu" +
                    "sinessObjects.ContractConditionPart](T1.ContractConditionPart_ContractConditionP" +
                    "artID, T1.ContractConditionPart_ContractConditionID, T1.ContractConditionPart_Pa" +
                    "rtID, T1.ContractConditionPart_Version, T1.ContractConditionPart_VersionAntecede" +
                    "ntID, T1.ContractConditionPart_VersionCertainty, T1.ContractConditionPart_Versio" +
                    "nWorkflowInstanceID, T1.ContractConditionPart_VersionUpdatedBy, T1.ContractCondi" +
                    "tionPart_VersionDeletedBy, T1.ContractConditionPart_VersionOwnerContactID, T1.Co" +
                    "ntractConditionPart_VersionOwnerCompanyID, T1.ContractConditionPart_VersionUpdat" +
                    "ed)\r\n    FROM (\r\n        SELECT \r\n            T.ContractConditionPartID AS Contr" +
                    "actConditionPart_ContractConditionPartID, \r\n            T.ContractConditionID AS" +
                    " ContractConditionPart_ContractConditionID, \r\n            T.PartID AS ContractCo" +
                    "nditionPart_PartID, \r\n            T.Version AS ContractConditionPart_Version, \r\n" +
                    "            T.VersionAntecedentID AS ContractConditionPart_VersionAntecedentID, " +
                    "\r\n            T.VersionCertainty AS ContractConditionPart_VersionCertainty, \r\n  " +
                    "          T.VersionWorkflowInstanceID AS ContractConditionPart_VersionWorkflowIn" +
                    "stanceID, \r\n            T.VersionUpdatedBy AS ContractConditionPart_VersionUpdat" +
                    "edBy, \r\n            T.VersionDeletedBy AS ContractConditionPart_VersionDeletedBy" +
                    ", \r\n            T.VersionOwnerContactID AS ContractConditionPart_VersionOwnerCon" +
                    "tactID, \r\n            T.VersionOwnerCompanyID AS ContractConditionPart_VersionOw" +
                    "nerCompanyID, \r\n            T.VersionUpdated AS ContractConditionPart_VersionUpd" +
                    "ated, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreCo" +
                    "ntainer.X_ContractConditionPart AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.CostEstimateModels
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView425()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2621);
            viewString.Append("\r\n    SELECT VALUE -- Constructing CostEstimateModels\r\n        [NKD.Module.Busin");
            viewString.Append("essObjects.CostEstimateModel](T1.CostEstimateModel_CostEstimateModelID, T1.CostE");
            viewString.Append("stimateModel_ParentCostEstimateModelID, T1.CostEstimateModel_ContractID, T1.Cost");
            viewString.Append("EstimateModel_ModelID, T1.CostEstimateModel_CostTypeID, T1.CostEstimateModel_Pro");
            viewString.Append("RataUnitID, T1.CostEstimateModel_ProRataUnits, T1.CostEstimateModel_ProRataCost,");
            viewString.Append(" T1.CostEstimateModel_IsAccruableWithParentCost, T1.CostEstimateModel_AccruedQua");
            viewString.Append("ntumSIUnitID, T1.CostEstimateModel_Accrued, T1.CostEstimateModel_Source, T1.Cost");
            viewString.Append("EstimateModel_Note, T1.CostEstimateModel_Version, T1.CostEstimateModel_VersionAn");
            viewString.Append("tecedentID, T1.CostEstimateModel_VersionCertainty, T1.CostEstimateModel_VersionW");
            viewString.Append("orkflowInstanceID, T1.CostEstimateModel_VersionUpdatedBy, T1.CostEstimateModel_V");
            viewString.Append("ersionDeletedBy, T1.CostEstimateModel_VersionOwnerContactID, T1.CostEstimateMode");
            viewString.Append("l_VersionOwnerCompanyID, T1.CostEstimateModel_VersionUpdated)\r\n    FROM (\r\n     ");
            viewString.Append("   SELECT \r\n            T.CostEstimateModelID AS CostEstimateModel_CostEstimateM");
            viewString.Append("odelID, \r\n            T.ParentCostEstimateModelID AS CostEstimateModel_ParentCos");
            viewString.Append("tEstimateModelID, \r\n            T.ContractID AS CostEstimateModel_ContractID, \r\n");
            viewString.Append("            T.ModelID AS CostEstimateModel_ModelID, \r\n            T.CostTypeID A");
            viewString.Append("S CostEstimateModel_CostTypeID, \r\n            T.ProRataUnitID AS CostEstimateMod");
            viewString.Append("el_ProRataUnitID, \r\n            T.ProRataUnits AS CostEstimateModel_ProRataUnits");
            viewString.Append(", \r\n            T.ProRataCost AS CostEstimateModel_ProRataCost, \r\n            T.");
            viewString.Append("IsAccruableWithParentCost AS CostEstimateModel_IsAccruableWithParentCost, \r\n    ");
            viewString.Append("        T.AccruedQuantumSIUnitID AS CostEstimateModel_AccruedQuantumSIUnitID, \r\n");
            viewString.Append("            T.Accrued AS CostEstimateModel_Accrued, \r\n            T.Source AS Co");
            viewString.Append("stEstimateModel_Source, \r\n            T.Note AS CostEstimateModel_Note, \r\n      ");
            viewString.Append("      T.Version AS CostEstimateModel_Version, \r\n            T.VersionAntecedentI");
            viewString.Append("D AS CostEstimateModel_VersionAntecedentID, \r\n            T.VersionCertainty AS ");
            viewString.Append("CostEstimateModel_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS");
            viewString.Append(" CostEstimateModel_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy A");
            viewString.Append("S CostEstimateModel_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS CostEs");
            viewString.Append("timateModel_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS CostEstim");
            viewString.Append("ateModel_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS CostEst");
            viewString.Append("imateModel_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS CostEstimate");
            viewString.Append("Model_VersionUpdated, \r\n            True AS _from0\r\n        FROM NKDModuleBusine");
            viewString.Append("ssObjectsStoreContainer.X_CostEstimateModel AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.CostEstimateModels", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.Defects
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView426()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(4908);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Defects\r\n        [NKD.Module.BusinessObjects.");
            viewString.Append("Defect](T1.Defect_DefectID, T1.Defect_HeaderID, T1.Defect_FromDepth, T1.Defect_T");
            viewString.Append("oDepth, T1.Defect_WeatheringID, T1.Defect_RockMassUnitTypeID, T1.Defect_Alterati");
            viewString.Append("onID, T1.Defect_EstimatedStrengthID, T1.Defect_BedSpacingID, T1.Defect_BedDip, T");
            viewString.Append("1.Defect_MoistureSensitivityID, T1.Defect_PlasticityID, T1.Defect_DefectDepth, T");
            viewString.Append("1.Defect_DefectLength, T1.Defect_NumberOfDefects, T1.Defect_DefectsSpacing, T1.D");
            viewString.Append("efect_DefectTypeID, T1.Defect_DefectCompletenessID, T1.Defect_DefectContinuityID");
            viewString.Append(", T1.Defect_DefectDip, T1.Defect_MinimumDipBrokenZone, T1.Defect_MaximumDipBroke");
            viewString.Append("nZone, T1.Defect_DipOrientation, T1.Defect_DipOrientationMethodID, T1.Defect_Sha");
            viewString.Append("peID, T1.Defect_RoughnessID, T1.Defect_JointRoughnessCoefficient, T1.Defect_Perp");
            viewString.Append("endicularWidth, T1.Defect_PrimaryInfillTypeID, T1.Defect_SecondaryInfillTypeID, ");
            viewString.Append("T1.Defect_InfillModeID, T1.Defect_InfillEstimatedStrengthID, T1.Defect_InfillPla");
            viewString.Append("sticityID, T1.Defect_Comment, T1.Defect_Version, T1.Defect_VersionAntecedentID, ");
            viewString.Append("T1.Defect_VersionCertainty, T1.Defect_VersionWorkflowInstanceID, T1.Defect_Versi");
            viewString.Append("onUpdatedBy, T1.Defect_VersionDeletedBy, T1.Defect_VersionOwnerContactID, T1.Def");
            viewString.Append("ect_VersionOwnerCompanyID, T1.Defect_VersionUpdated, T1.Defect_GeotechLithologyT");
            viewString.Append("ypeID, T1.Defect_GeotechLithologyQualifierID, T1.Defect_GeotechColourID, T1.Defe");
            viewString.Append("ct_FriabilityTypeID, T1.Defect_BedDevelopmentID, T1.Defect_NumberOfStructureSets");
            viewString.Append(", T1.Defect_SurfaceWeatheringID, T1.Defect_AlterationJointTypeID, T1.Defect_Stru");
            viewString.Append("ctureSetID, T1.Defect_NumberOfFractures)\r\n    FROM (\r\n        SELECT \r\n         ");
            viewString.Append("   T.DefectID AS Defect_DefectID, \r\n            T.HeaderID AS Defect_HeaderID, \r");
            viewString.Append("\n            T.FromDepth AS Defect_FromDepth, \r\n            T.ToDepth AS Defect_");
            viewString.Append("ToDepth, \r\n            T.WeatheringID AS Defect_WeatheringID, \r\n            T.Ro");
            viewString.Append("ckMassUnitTypeID AS Defect_RockMassUnitTypeID, \r\n            T.AlterationID AS D");
            viewString.Append("efect_AlterationID, \r\n            T.EstimatedStrengthID AS Defect_EstimatedStren");
            viewString.Append("gthID, \r\n            T.BedSpacingID AS Defect_BedSpacingID, \r\n            T.BedD");
            viewString.Append("ip AS Defect_BedDip, \r\n            T.MoistureSensitivityID AS Defect_MoistureSen");
            viewString.Append("sitivityID, \r\n            T.PlasticityID AS Defect_PlasticityID, \r\n            T");
            viewString.Append(".DefectDepth AS Defect_DefectDepth, \r\n            T.DefectLength AS Defect_Defec");
            viewString.Append("tLength, \r\n            T.NumberOfDefects AS Defect_NumberOfDefects, \r\n          ");
            viewString.Append("  T.DefectsSpacing AS Defect_DefectsSpacing, \r\n            T.DefectTypeID AS Def");
            viewString.Append("ect_DefectTypeID, \r\n            T.DefectCompletenessID AS Defect_DefectCompleten");
            viewString.Append("essID, \r\n            T.DefectContinuityID AS Defect_DefectContinuityID, \r\n      ");
            viewString.Append("      T.DefectDip AS Defect_DefectDip, \r\n            T.MinimumDipBrokenZone AS D");
            viewString.Append("efect_MinimumDipBrokenZone, \r\n            T.MaximumDipBrokenZone AS Defect_Maxim");
            viewString.Append("umDipBrokenZone, \r\n            T.DipOrientation AS Defect_DipOrientation, \r\n    ");
            viewString.Append("        T.DipOrientationMethodID AS Defect_DipOrientationMethodID, \r\n           ");
            viewString.Append(" T.ShapeID AS Defect_ShapeID, \r\n            T.RoughnessID AS Defect_RoughnessID,");
            viewString.Append(" \r\n            T.JointRoughnessCoefficient AS Defect_JointRoughnessCoefficient, ");
            viewString.Append("\r\n            T.PerpendicularWidth AS Defect_PerpendicularWidth, \r\n            T");
            viewString.Append(".PrimaryInfillTypeID AS Defect_PrimaryInfillTypeID, \r\n            T.SecondaryInf");
            viewString.Append("illTypeID AS Defect_SecondaryInfillTypeID, \r\n            T.InfillModeID AS Defec");
            viewString.Append("t_InfillModeID, \r\n            T.InfillEstimatedStrengthID AS Defect_InfillEstima");
            viewString.Append("tedStrengthID, \r\n            T.InfillPlasticityID AS Defect_InfillPlasticityID, ");
            viewString.Append("\r\n            T.Comment AS Defect_Comment, \r\n            T.Version AS Defect_Ver");
            viewString.Append("sion, \r\n            T.VersionAntecedentID AS Defect_VersionAntecedentID, \r\n     ");
            viewString.Append("       T.VersionCertainty AS Defect_VersionCertainty, \r\n            T.VersionWor");
            viewString.Append("kflowInstanceID AS Defect_VersionWorkflowInstanceID, \r\n            T.VersionUpda");
            viewString.Append("tedBy AS Defect_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS Defect_Ver");
            viewString.Append("sionDeletedBy, \r\n            T.VersionOwnerContactID AS Defect_VersionOwnerConta");
            viewString.Append("ctID, \r\n            T.VersionOwnerCompanyID AS Defect_VersionOwnerCompanyID, \r\n ");
            viewString.Append("           T.VersionUpdated AS Defect_VersionUpdated, \r\n            T.GeotechLit");
            viewString.Append("hologyTypeID AS Defect_GeotechLithologyTypeID, \r\n            T.GeotechLithologyQ");
            viewString.Append("ualifierID AS Defect_GeotechLithologyQualifierID, \r\n            T.GeotechColourI");
            viewString.Append("D AS Defect_GeotechColourID, \r\n            T.FriabilityTypeID AS Defect_Friabili");
            viewString.Append("tyTypeID, \r\n            T.BedDevelopmentID AS Defect_BedDevelopmentID, \r\n       ");
            viewString.Append("     T.NumberOfStructureSets AS Defect_NumberOfStructureSets, \r\n            T.Su");
            viewString.Append("rfaceWeatheringID AS Defect_SurfaceWeatheringID, \r\n            T.AlterationJoint");
            viewString.Append("TypeID AS Defect_AlterationJointTypeID, \r\n            T.StructureSetID AS Defect");
            viewString.Append("_StructureSetID, \r\n            T.NumberOfFractures AS Defect_NumberOfFractures, ");
            viewString.Append("\r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContaine");
            viewString.Append("r.X_Defect AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.Defects", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.Desurveys
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView427()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.Desurveys", @"
    SELECT VALUE -- Constructing Desurveys
        [NKD.Module.BusinessObjects.Desurvey](T1.Desurvey_DesurveyID, T1.Desurvey_SurveyID, T1.Desurvey_DesurveyAlgorithmTypeID, T1.Desurvey_Version, T1.Desurvey_VersionAntecedentID, T1.Desurvey_VersionCertainty, T1.Desurvey_VersionWorkflowInstanceID, T1.Desurvey_VersionUpdatedBy, T1.Desurvey_VersionDeletedBy, T1.Desurvey_VersionOwnerContactID, T1.Desurvey_VersionOwnerCompanyID, T1.Desurvey_VersionUpdated)
    FROM (
        SELECT 
            T.DesurveyID AS Desurvey_DesurveyID, 
            T.SurveyID AS Desurvey_SurveyID, 
            T.DesurveyAlgorithmTypeID AS Desurvey_DesurveyAlgorithmTypeID, 
            T.Version AS Desurvey_Version, 
            T.VersionAntecedentID AS Desurvey_VersionAntecedentID, 
            T.VersionCertainty AS Desurvey_VersionCertainty, 
            T.VersionWorkflowInstanceID AS Desurvey_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS Desurvey_VersionUpdatedBy, 
            T.VersionDeletedBy AS Desurvey_VersionDeletedBy, 
            T.VersionOwnerContactID AS Desurvey_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS Desurvey_VersionOwnerCompanyID, 
            T.VersionUpdated AS Desurvey_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_Desurvey AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryAdjectives
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView428()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2348);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryAdjectives\r\n        [NKD.Module.Bus");
            viewString.Append("inessObjects.DictionaryAdjective](T1.DictionaryAdjective_AdjectiveID, T1.Diction");
            viewString.Append("aryAdjective_StandardAdjectiveName, T1.DictionaryAdjective_CoalAdjectiveName, T1");
            viewString.Append(".DictionaryAdjective_GoldAdjectiveName, T1.DictionaryAdjective_CustomAdjectiveNa");
            viewString.Append("me, T1.DictionaryAdjective_Description, T1.DictionaryAdjective_FullDescription, ");
            viewString.Append("T1.DictionaryAdjective_Thumbnail, T1.DictionaryAdjective_OriginalFileDataID, T1.");
            viewString.Append("DictionaryAdjective_Version, T1.DictionaryAdjective_VersionAntecedentID, T1.Dict");
            viewString.Append("ionaryAdjective_VersionCertainty, T1.DictionaryAdjective_VersionWorkflowInstance");
            viewString.Append("ID, T1.DictionaryAdjective_VersionUpdatedBy, T1.DictionaryAdjective_VersionDelet");
            viewString.Append("edBy, T1.DictionaryAdjective_VersionOwnerContactID, T1.DictionaryAdjective_Versi");
            viewString.Append("onOwnerCompanyID, T1.DictionaryAdjective_VersionUpdated)\r\n    FROM (\r\n        SE");
            viewString.Append("LECT \r\n            T.AdjectiveID AS DictionaryAdjective_AdjectiveID, \r\n         ");
            viewString.Append("   T.StandardAdjectiveName AS DictionaryAdjective_StandardAdjectiveName, \r\n     ");
            viewString.Append("       T.CoalAdjectiveName AS DictionaryAdjective_CoalAdjectiveName, \r\n         ");
            viewString.Append("   T.GoldAdjectiveName AS DictionaryAdjective_GoldAdjectiveName, \r\n            T");
            viewString.Append(".CustomAdjectiveName AS DictionaryAdjective_CustomAdjectiveName, \r\n            T");
            viewString.Append(".Description AS DictionaryAdjective_Description, \r\n            T.FullDescription");
            viewString.Append(" AS DictionaryAdjective_FullDescription, \r\n            T.Thumbnail AS Dictionary");
            viewString.Append("Adjective_Thumbnail, \r\n            T.OriginalFileDataID AS DictionaryAdjective_O");
            viewString.Append("riginalFileDataID, \r\n            T.Version AS DictionaryAdjective_Version, \r\n   ");
            viewString.Append("         T.VersionAntecedentID AS DictionaryAdjective_VersionAntecedentID, \r\n   ");
            viewString.Append("         T.VersionCertainty AS DictionaryAdjective_VersionCertainty, \r\n         ");
            viewString.Append("   T.VersionWorkflowInstanceID AS DictionaryAdjective_VersionWorkflowInstanceID,");
            viewString.Append(" \r\n            T.VersionUpdatedBy AS DictionaryAdjective_VersionUpdatedBy, \r\n   ");
            viewString.Append("         T.VersionDeletedBy AS DictionaryAdjective_VersionDeletedBy, \r\n         ");
            viewString.Append("   T.VersionOwnerContactID AS DictionaryAdjective_VersionOwnerContactID, \r\n     ");
            viewString.Append("       T.VersionOwnerCompanyID AS DictionaryAdjective_VersionOwnerCompanyID, \r\n ");
            viewString.Append("           T.VersionUpdated AS DictionaryAdjective_VersionUpdated, \r\n           ");
            viewString.Append(" True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_Dictionar");
            viewString.Append("yAdjective AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryAdjectives", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryAlterations
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView429()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2402);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryAlterations\r\n        [NKD.Module.Bu");
            viewString.Append("sinessObjects.DictionaryAlteration](T1.DictionaryAlteration_AlterationID, T1.Dic");
            viewString.Append("tionaryAlteration_StandardAlterationName, T1.DictionaryAlteration_CoalAlteration");
            viewString.Append("Name, T1.DictionaryAlteration_GoldAlterationName, T1.DictionaryAlteration_Custom");
            viewString.Append("AlterationName, T1.DictionaryAlteration_Description, T1.DictionaryAlteration_Ful");
            viewString.Append("lDescription, T1.DictionaryAlteration_Thumbnail, T1.DictionaryAlteration_Origina");
            viewString.Append("lFileDataID, T1.DictionaryAlteration_Version, T1.DictionaryAlteration_VersionAnt");
            viewString.Append("ecedentID, T1.DictionaryAlteration_VersionCertainty, T1.DictionaryAlteration_Ver");
            viewString.Append("sionWorkflowInstanceID, T1.DictionaryAlteration_VersionUpdatedBy, T1.DictionaryA");
            viewString.Append("lteration_VersionDeletedBy, T1.DictionaryAlteration_VersionOwnerContactID, T1.Di");
            viewString.Append("ctionaryAlteration_VersionOwnerCompanyID, T1.DictionaryAlteration_VersionUpdated");
            viewString.Append(")\r\n    FROM (\r\n        SELECT \r\n            T.AlterationID AS DictionaryAlterati");
            viewString.Append("on_AlterationID, \r\n            T.StandardAlterationName AS DictionaryAlteration_");
            viewString.Append("StandardAlterationName, \r\n            T.CoalAlterationName AS DictionaryAlterati");
            viewString.Append("on_CoalAlterationName, \r\n            T.GoldAlterationName AS DictionaryAlteratio");
            viewString.Append("n_GoldAlterationName, \r\n            T.CustomAlterationName AS DictionaryAlterati");
            viewString.Append("on_CustomAlterationName, \r\n            T.Description AS DictionaryAlteration_Des");
            viewString.Append("cription, \r\n            T.FullDescription AS DictionaryAlteration_FullDescriptio");
            viewString.Append("n, \r\n            T.Thumbnail AS DictionaryAlteration_Thumbnail, \r\n            T.");
            viewString.Append("OriginalFileDataID AS DictionaryAlteration_OriginalFileDataID, \r\n            T.V");
            viewString.Append("ersion AS DictionaryAlteration_Version, \r\n            T.VersionAntecedentID AS D");
            viewString.Append("ictionaryAlteration_VersionAntecedentID, \r\n            T.VersionCertainty AS Dic");
            viewString.Append("tionaryAlteration_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS");
            viewString.Append(" DictionaryAlteration_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedB");
            viewString.Append("y AS DictionaryAlteration_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS ");
            viewString.Append("DictionaryAlteration_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS ");
            viewString.Append("DictionaryAlteration_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyI");
            viewString.Append("D AS DictionaryAlteration_VersionOwnerCompanyID, \r\n            T.VersionUpdated ");
            viewString.Append("AS DictionaryAlteration_VersionUpdated, \r\n            True AS _from0\r\n        FR");
            viewString.Append("OM NKDModuleBusinessObjectsStoreContainer.X_DictionaryAlteration AS T\r\n    ) AS ");
            viewString.Append("T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryAlterations", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryAssayMethods
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView430()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2456);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryAssayMethods\r\n        [NKD.Module.B");
            viewString.Append("usinessObjects.DictionaryAssayMethod](T1.DictionaryAssayMethod_AssayMethodID, T1");
            viewString.Append(".DictionaryAssayMethod_StandardAssayMethodName, T1.DictionaryAssayMethod_CoalAss");
            viewString.Append("ayMethodName, T1.DictionaryAssayMethod_GoldAssayMethodName, T1.DictionaryAssayMe");
            viewString.Append("thod_CustomAssayMethodName, T1.DictionaryAssayMethod_Description, T1.DictionaryA");
            viewString.Append("ssayMethod_FullDescription, T1.DictionaryAssayMethod_Thumbnail, T1.DictionaryAss");
            viewString.Append("ayMethod_OriginalFileDataID, T1.DictionaryAssayMethod_Version, T1.DictionaryAssa");
            viewString.Append("yMethod_VersionAntecedentID, T1.DictionaryAssayMethod_VersionCertainty, T1.Dicti");
            viewString.Append("onaryAssayMethod_VersionWorkflowInstanceID, T1.DictionaryAssayMethod_VersionUpda");
            viewString.Append("tedBy, T1.DictionaryAssayMethod_VersionDeletedBy, T1.DictionaryAssayMethod_Versi");
            viewString.Append("onOwnerContactID, T1.DictionaryAssayMethod_VersionOwnerCompanyID, T1.DictionaryA");
            viewString.Append("ssayMethod_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.AssayMeth");
            viewString.Append("odID AS DictionaryAssayMethod_AssayMethodID, \r\n            T.StandardAssayMethod");
            viewString.Append("Name AS DictionaryAssayMethod_StandardAssayMethodName, \r\n            T.CoalAssay");
            viewString.Append("MethodName AS DictionaryAssayMethod_CoalAssayMethodName, \r\n            T.GoldAss");
            viewString.Append("ayMethodName AS DictionaryAssayMethod_GoldAssayMethodName, \r\n            T.Custo");
            viewString.Append("mAssayMethodName AS DictionaryAssayMethod_CustomAssayMethodName, \r\n            T");
            viewString.Append(".Description AS DictionaryAssayMethod_Description, \r\n            T.FullDescripti");
            viewString.Append("on AS DictionaryAssayMethod_FullDescription, \r\n            T.Thumbnail AS Dictio");
            viewString.Append("naryAssayMethod_Thumbnail, \r\n            T.OriginalFileDataID AS DictionaryAssay");
            viewString.Append("Method_OriginalFileDataID, \r\n            T.Version AS DictionaryAssayMethod_Vers");
            viewString.Append("ion, \r\n            T.VersionAntecedentID AS DictionaryAssayMethod_VersionAnteced");
            viewString.Append("entID, \r\n            T.VersionCertainty AS DictionaryAssayMethod_VersionCertaint");
            viewString.Append("y, \r\n            T.VersionWorkflowInstanceID AS DictionaryAssayMethod_VersionWor");
            viewString.Append("kflowInstanceID, \r\n            T.VersionUpdatedBy AS DictionaryAssayMethod_Versi");
            viewString.Append("onUpdatedBy, \r\n            T.VersionDeletedBy AS DictionaryAssayMethod_VersionDe");
            viewString.Append("letedBy, \r\n            T.VersionOwnerContactID AS DictionaryAssayMethod_VersionO");
            viewString.Append("wnerContactID, \r\n            T.VersionOwnerCompanyID AS DictionaryAssayMethod_Ve");
            viewString.Append("rsionOwnerCompanyID, \r\n            T.VersionUpdated AS DictionaryAssayMethod_Ver");
            viewString.Append("sionUpdated, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjects");
            viewString.Append("StoreContainer.X_DictionaryAssayMethod AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryAssayMethods", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryAssayStandards
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView431()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2564);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryAssayStandards\r\n        [NKD.Module");
            viewString.Append(".BusinessObjects.DictionaryAssayStandard](T1.DictionaryAssayStandard_AssayStanda");
            viewString.Append("rdID, T1.DictionaryAssayStandard_StandardAssayStandardName, T1.DictionaryAssaySt");
            viewString.Append("andard_CoalAssayStandardName, T1.DictionaryAssayStandard_GoldAssayStandardName, ");
            viewString.Append("T1.DictionaryAssayStandard_CustomAssayStandardName, T1.DictionaryAssayStandard_D");
            viewString.Append("escription, T1.DictionaryAssayStandard_FullDescription, T1.DictionaryAssayStanda");
            viewString.Append("rd_Thumbnail, T1.DictionaryAssayStandard_OriginalFileDataID, T1.DictionaryAssayS");
            viewString.Append("tandard_Version, T1.DictionaryAssayStandard_VersionAntecedentID, T1.DictionaryAs");
            viewString.Append("sayStandard_VersionCertainty, T1.DictionaryAssayStandard_VersionWorkflowInstance");
            viewString.Append("ID, T1.DictionaryAssayStandard_VersionUpdatedBy, T1.DictionaryAssayStandard_Vers");
            viewString.Append("ionDeletedBy, T1.DictionaryAssayStandard_VersionOwnerContactID, T1.DictionaryAss");
            viewString.Append("ayStandard_VersionOwnerCompanyID, T1.DictionaryAssayStandard_VersionUpdated)\r\n  ");
            viewString.Append("  FROM (\r\n        SELECT \r\n            T.AssayStandardID AS DictionaryAssayStand");
            viewString.Append("ard_AssayStandardID, \r\n            T.StandardAssayStandardName AS DictionaryAssa");
            viewString.Append("yStandard_StandardAssayStandardName, \r\n            T.CoalAssayStandardName AS Di");
            viewString.Append("ctionaryAssayStandard_CoalAssayStandardName, \r\n            T.GoldAssayStandardNa");
            viewString.Append("me AS DictionaryAssayStandard_GoldAssayStandardName, \r\n            T.CustomAssay");
            viewString.Append("StandardName AS DictionaryAssayStandard_CustomAssayStandardName, \r\n            T");
            viewString.Append(".Description AS DictionaryAssayStandard_Description, \r\n            T.FullDescrip");
            viewString.Append("tion AS DictionaryAssayStandard_FullDescription, \r\n            T.Thumbnail AS Di");
            viewString.Append("ctionaryAssayStandard_Thumbnail, \r\n            T.OriginalFileDataID AS Dictionar");
            viewString.Append("yAssayStandard_OriginalFileDataID, \r\n            T.Version AS DictionaryAssaySta");
            viewString.Append("ndard_Version, \r\n            T.VersionAntecedentID AS DictionaryAssayStandard_Ve");
            viewString.Append("rsionAntecedentID, \r\n            T.VersionCertainty AS DictionaryAssayStandard_V");
            viewString.Append("ersionCertainty, \r\n            T.VersionWorkflowInstanceID AS DictionaryAssaySta");
            viewString.Append("ndard_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS DictionaryA");
            viewString.Append("ssayStandard_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS DictionaryAss");
            viewString.Append("ayStandard_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS Dictionary");
            viewString.Append("AssayStandard_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS Di");
            viewString.Append("ctionaryAssayStandard_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS D");
            viewString.Append("ictionaryAssayStandard_VersionUpdated, \r\n            True AS _from0\r\n        FRO");
            viewString.Append("M NKDModuleBusinessObjectsStoreContainer.X_DictionaryAssayStandard AS T\r\n    ) A");
            viewString.Append("S T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryAssayStandards", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryAssayTests
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView432()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2348);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryAssayTests\r\n        [NKD.Module.Bus");
            viewString.Append("inessObjects.DictionaryAssayTest](T1.DictionaryAssayTest_AssayTestID, T1.Diction");
            viewString.Append("aryAssayTest_StandardAssayTestName, T1.DictionaryAssayTest_CoalAssayTestName, T1");
            viewString.Append(".DictionaryAssayTest_GoldAssayTestName, T1.DictionaryAssayTest_CustomAssayTestNa");
            viewString.Append("me, T1.DictionaryAssayTest_Description, T1.DictionaryAssayTest_FullDescription, ");
            viewString.Append("T1.DictionaryAssayTest_Thumbnail, T1.DictionaryAssayTest_OriginalFileDataID, T1.");
            viewString.Append("DictionaryAssayTest_Version, T1.DictionaryAssayTest_VersionAntecedentID, T1.Dict");
            viewString.Append("ionaryAssayTest_VersionCertainty, T1.DictionaryAssayTest_VersionWorkflowInstance");
            viewString.Append("ID, T1.DictionaryAssayTest_VersionUpdatedBy, T1.DictionaryAssayTest_VersionDelet");
            viewString.Append("edBy, T1.DictionaryAssayTest_VersionOwnerContactID, T1.DictionaryAssayTest_Versi");
            viewString.Append("onOwnerCompanyID, T1.DictionaryAssayTest_VersionUpdated)\r\n    FROM (\r\n        SE");
            viewString.Append("LECT \r\n            T.AssayTestID AS DictionaryAssayTest_AssayTestID, \r\n         ");
            viewString.Append("   T.StandardAssayTestName AS DictionaryAssayTest_StandardAssayTestName, \r\n     ");
            viewString.Append("       T.CoalAssayTestName AS DictionaryAssayTest_CoalAssayTestName, \r\n         ");
            viewString.Append("   T.GoldAssayTestName AS DictionaryAssayTest_GoldAssayTestName, \r\n            T");
            viewString.Append(".CustomAssayTestName AS DictionaryAssayTest_CustomAssayTestName, \r\n            T");
            viewString.Append(".Description AS DictionaryAssayTest_Description, \r\n            T.FullDescription");
            viewString.Append(" AS DictionaryAssayTest_FullDescription, \r\n            T.Thumbnail AS Dictionary");
            viewString.Append("AssayTest_Thumbnail, \r\n            T.OriginalFileDataID AS DictionaryAssayTest_O");
            viewString.Append("riginalFileDataID, \r\n            T.Version AS DictionaryAssayTest_Version, \r\n   ");
            viewString.Append("         T.VersionAntecedentID AS DictionaryAssayTest_VersionAntecedentID, \r\n   ");
            viewString.Append("         T.VersionCertainty AS DictionaryAssayTest_VersionCertainty, \r\n         ");
            viewString.Append("   T.VersionWorkflowInstanceID AS DictionaryAssayTest_VersionWorkflowInstanceID,");
            viewString.Append(" \r\n            T.VersionUpdatedBy AS DictionaryAssayTest_VersionUpdatedBy, \r\n   ");
            viewString.Append("         T.VersionDeletedBy AS DictionaryAssayTest_VersionDeletedBy, \r\n         ");
            viewString.Append("   T.VersionOwnerContactID AS DictionaryAssayTest_VersionOwnerContactID, \r\n     ");
            viewString.Append("       T.VersionOwnerCompanyID AS DictionaryAssayTest_VersionOwnerCompanyID, \r\n ");
            viewString.Append("           T.VersionUpdated AS DictionaryAssayTest_VersionUpdated, \r\n           ");
            viewString.Append(" True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_Dictionar");
            viewString.Append("yAssayTest AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryAssayTests", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryAssayTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView433()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2348);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryAssayTypes\r\n        [NKD.Module.Bus");
            viewString.Append("inessObjects.DictionaryAssayType](T1.DictionaryAssayType_AssayTypeID, T1.Diction");
            viewString.Append("aryAssayType_StandardAssayTypeName, T1.DictionaryAssayType_CoalAssayTypeName, T1");
            viewString.Append(".DictionaryAssayType_GoldAssayTypeName, T1.DictionaryAssayType_CustomAssayTypeNa");
            viewString.Append("me, T1.DictionaryAssayType_Description, T1.DictionaryAssayType_FullDescription, ");
            viewString.Append("T1.DictionaryAssayType_Thumbnail, T1.DictionaryAssayType_OriginalFileDataID, T1.");
            viewString.Append("DictionaryAssayType_Version, T1.DictionaryAssayType_VersionAntecedentID, T1.Dict");
            viewString.Append("ionaryAssayType_VersionCertainty, T1.DictionaryAssayType_VersionWorkflowInstance");
            viewString.Append("ID, T1.DictionaryAssayType_VersionUpdatedBy, T1.DictionaryAssayType_VersionDelet");
            viewString.Append("edBy, T1.DictionaryAssayType_VersionOwnerContactID, T1.DictionaryAssayType_Versi");
            viewString.Append("onOwnerCompanyID, T1.DictionaryAssayType_VersionUpdated)\r\n    FROM (\r\n        SE");
            viewString.Append("LECT \r\n            T.AssayTypeID AS DictionaryAssayType_AssayTypeID, \r\n         ");
            viewString.Append("   T.StandardAssayTypeName AS DictionaryAssayType_StandardAssayTypeName, \r\n     ");
            viewString.Append("       T.CoalAssayTypeName AS DictionaryAssayType_CoalAssayTypeName, \r\n         ");
            viewString.Append("   T.GoldAssayTypeName AS DictionaryAssayType_GoldAssayTypeName, \r\n            T");
            viewString.Append(".CustomAssayTypeName AS DictionaryAssayType_CustomAssayTypeName, \r\n            T");
            viewString.Append(".Description AS DictionaryAssayType_Description, \r\n            T.FullDescription");
            viewString.Append(" AS DictionaryAssayType_FullDescription, \r\n            T.Thumbnail AS Dictionary");
            viewString.Append("AssayType_Thumbnail, \r\n            T.OriginalFileDataID AS DictionaryAssayType_O");
            viewString.Append("riginalFileDataID, \r\n            T.Version AS DictionaryAssayType_Version, \r\n   ");
            viewString.Append("         T.VersionAntecedentID AS DictionaryAssayType_VersionAntecedentID, \r\n   ");
            viewString.Append("         T.VersionCertainty AS DictionaryAssayType_VersionCertainty, \r\n         ");
            viewString.Append("   T.VersionWorkflowInstanceID AS DictionaryAssayType_VersionWorkflowInstanceID,");
            viewString.Append(" \r\n            T.VersionUpdatedBy AS DictionaryAssayType_VersionUpdatedBy, \r\n   ");
            viewString.Append("         T.VersionDeletedBy AS DictionaryAssayType_VersionDeletedBy, \r\n         ");
            viewString.Append("   T.VersionOwnerContactID AS DictionaryAssayType_VersionOwnerContactID, \r\n     ");
            viewString.Append("       T.VersionOwnerCompanyID AS DictionaryAssayType_VersionOwnerCompanyID, \r\n ");
            viewString.Append("           T.VersionUpdated AS DictionaryAssayType_VersionUpdated, \r\n           ");
            viewString.Append(" True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_Dictionar");
            viewString.Append("yAssayType AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryAssayTypes", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryBasalContacts
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView434()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2510);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryBasalContacts\r\n        [NKD.Module.");
            viewString.Append("BusinessObjects.DictionaryBasalContact](T1.DictionaryBasalContact_BasalContactID");
            viewString.Append(", T1.DictionaryBasalContact_StandardBasalContactName, T1.DictionaryBasalContact_");
            viewString.Append("CoalBasalContactName, T1.DictionaryBasalContact_GoldBasalContactName, T1.Diction");
            viewString.Append("aryBasalContact_CustomBasalContactName, T1.DictionaryBasalContact_Description, T");
            viewString.Append("1.DictionaryBasalContact_FullDescription, T1.DictionaryBasalContact_Thumbnail, T");
            viewString.Append("1.DictionaryBasalContact_OriginalFileDataID, T1.DictionaryBasalContact_Version, ");
            viewString.Append("T1.DictionaryBasalContact_VersionAntecedentID, T1.DictionaryBasalContact_Version");
            viewString.Append("Certainty, T1.DictionaryBasalContact_VersionWorkflowInstanceID, T1.DictionaryBas");
            viewString.Append("alContact_VersionUpdatedBy, T1.DictionaryBasalContact_VersionDeletedBy, T1.Dicti");
            viewString.Append("onaryBasalContact_VersionOwnerContactID, T1.DictionaryBasalContact_VersionOwnerC");
            viewString.Append("ompanyID, T1.DictionaryBasalContact_VersionUpdated)\r\n    FROM (\r\n        SELECT ");
            viewString.Append("\r\n            T.BasalContactID AS DictionaryBasalContact_BasalContactID, \r\n     ");
            viewString.Append("       T.StandardBasalContactName AS DictionaryBasalContact_StandardBasalContact");
            viewString.Append("Name, \r\n            T.CoalBasalContactName AS DictionaryBasalContact_CoalBasalCo");
            viewString.Append("ntactName, \r\n            T.GoldBasalContactName AS DictionaryBasalContact_GoldBa");
            viewString.Append("salContactName, \r\n            T.CustomBasalContactName AS DictionaryBasalContact");
            viewString.Append("_CustomBasalContactName, \r\n            T.Description AS DictionaryBasalContact_D");
            viewString.Append("escription, \r\n            T.FullDescription AS DictionaryBasalContact_FullDescri");
            viewString.Append("ption, \r\n            T.Thumbnail AS DictionaryBasalContact_Thumbnail, \r\n        ");
            viewString.Append("    T.OriginalFileDataID AS DictionaryBasalContact_OriginalFileDataID, \r\n       ");
            viewString.Append("     T.Version AS DictionaryBasalContact_Version, \r\n            T.VersionAnteced");
            viewString.Append("entID AS DictionaryBasalContact_VersionAntecedentID, \r\n            T.VersionCert");
            viewString.Append("ainty AS DictionaryBasalContact_VersionCertainty, \r\n            T.VersionWorkflo");
            viewString.Append("wInstanceID AS DictionaryBasalContact_VersionWorkflowInstanceID, \r\n            T");
            viewString.Append(".VersionUpdatedBy AS DictionaryBasalContact_VersionUpdatedBy, \r\n            T.Ve");
            viewString.Append("rsionDeletedBy AS DictionaryBasalContact_VersionDeletedBy, \r\n            T.Versi");
            viewString.Append("onOwnerContactID AS DictionaryBasalContact_VersionOwnerContactID, \r\n            ");
            viewString.Append("T.VersionOwnerCompanyID AS DictionaryBasalContact_VersionOwnerCompanyID, \r\n     ");
            viewString.Append("       T.VersionUpdated AS DictionaryBasalContact_VersionUpdated, \r\n            ");
            viewString.Append("True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_Dictionary");
            viewString.Append("BasalContact AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryBasalContacts", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryBedSpacings
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView435()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2402);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryBedSpacings\r\n        [NKD.Module.Bu");
            viewString.Append("sinessObjects.DictionaryBedSpacing](T1.DictionaryBedSpacing_BedSpacingID, T1.Dic");
            viewString.Append("tionaryBedSpacing_StandardBedSpacingName, T1.DictionaryBedSpacing_CoalBedSpacing");
            viewString.Append("Name, T1.DictionaryBedSpacing_GoldBedSpacingName, T1.DictionaryBedSpacing_Custom");
            viewString.Append("BedSpacingName, T1.DictionaryBedSpacing_Description, T1.DictionaryBedSpacing_Ful");
            viewString.Append("lDescription, T1.DictionaryBedSpacing_Thumbnail, T1.DictionaryBedSpacing_Origina");
            viewString.Append("lFileDataID, T1.DictionaryBedSpacing_Version, T1.DictionaryBedSpacing_VersionAnt");
            viewString.Append("ecedentID, T1.DictionaryBedSpacing_VersionCertainty, T1.DictionaryBedSpacing_Ver");
            viewString.Append("sionWorkflowInstanceID, T1.DictionaryBedSpacing_VersionUpdatedBy, T1.DictionaryB");
            viewString.Append("edSpacing_VersionDeletedBy, T1.DictionaryBedSpacing_VersionOwnerContactID, T1.Di");
            viewString.Append("ctionaryBedSpacing_VersionOwnerCompanyID, T1.DictionaryBedSpacing_VersionUpdated");
            viewString.Append(")\r\n    FROM (\r\n        SELECT \r\n            T.BedSpacingID AS DictionaryBedSpaci");
            viewString.Append("ng_BedSpacingID, \r\n            T.StandardBedSpacingName AS DictionaryBedSpacing_");
            viewString.Append("StandardBedSpacingName, \r\n            T.CoalBedSpacingName AS DictionaryBedSpaci");
            viewString.Append("ng_CoalBedSpacingName, \r\n            T.GoldBedSpacingName AS DictionaryBedSpacin");
            viewString.Append("g_GoldBedSpacingName, \r\n            T.CustomBedSpacingName AS DictionaryBedSpaci");
            viewString.Append("ng_CustomBedSpacingName, \r\n            T.Description AS DictionaryBedSpacing_Des");
            viewString.Append("cription, \r\n            T.FullDescription AS DictionaryBedSpacing_FullDescriptio");
            viewString.Append("n, \r\n            T.Thumbnail AS DictionaryBedSpacing_Thumbnail, \r\n            T.");
            viewString.Append("OriginalFileDataID AS DictionaryBedSpacing_OriginalFileDataID, \r\n            T.V");
            viewString.Append("ersion AS DictionaryBedSpacing_Version, \r\n            T.VersionAntecedentID AS D");
            viewString.Append("ictionaryBedSpacing_VersionAntecedentID, \r\n            T.VersionCertainty AS Dic");
            viewString.Append("tionaryBedSpacing_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS");
            viewString.Append(" DictionaryBedSpacing_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedB");
            viewString.Append("y AS DictionaryBedSpacing_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS ");
            viewString.Append("DictionaryBedSpacing_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS ");
            viewString.Append("DictionaryBedSpacing_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyI");
            viewString.Append("D AS DictionaryBedSpacing_VersionOwnerCompanyID, \r\n            T.VersionUpdated ");
            viewString.Append("AS DictionaryBedSpacing_VersionUpdated, \r\n            True AS _from0\r\n        FR");
            viewString.Append("OM NKDModuleBusinessObjectsStoreContainer.X_DictionaryBedSpacing AS T\r\n    ) AS ");
            viewString.Append("T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryBedSpacings", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryCharacteristics
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView436()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2564);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryCharacteristics\r\n        [NKD.Modul");
            viewString.Append("e.BusinessObjects.DictionaryCharacteristic](T1.DictionaryCharacteristic_Characte");
            viewString.Append("risticID, T1.DictionaryCharacteristic_StandardCharacteristicName, T1.DictionaryC");
            viewString.Append("haracteristic_CustomCharacteristicName, T1.DictionaryCharacteristic_UnitID, T1.D");
            viewString.Append("ictionaryCharacteristic_CharacteristicTypeID, T1.DictionaryCharacteristic_Descri");
            viewString.Append("ption, T1.DictionaryCharacteristic_FullDescription, T1.DictionaryCharacteristic_");
            viewString.Append("Thumbnail, T1.DictionaryCharacteristic_OriginalFileDataID, T1.DictionaryCharacte");
            viewString.Append("ristic_Version, T1.DictionaryCharacteristic_VersionAntecedentID, T1.DictionaryCh");
            viewString.Append("aracteristic_VersionCertainty, T1.DictionaryCharacteristic_VersionWorkflowInstan");
            viewString.Append("ceID, T1.DictionaryCharacteristic_VersionUpdatedBy, T1.DictionaryCharacteristic_");
            viewString.Append("VersionDeletedBy, T1.DictionaryCharacteristic_VersionOwnerContactID, T1.Dictiona");
            viewString.Append("ryCharacteristic_VersionOwnerCompanyID, T1.DictionaryCharacteristic_VersionUpdat");
            viewString.Append("ed)\r\n    FROM (\r\n        SELECT \r\n            T.CharacteristicID AS DictionaryCh");
            viewString.Append("aracteristic_CharacteristicID, \r\n            T.StandardCharacteristicName AS Dic");
            viewString.Append("tionaryCharacteristic_StandardCharacteristicName, \r\n            T.CustomCharacte");
            viewString.Append("risticName AS DictionaryCharacteristic_CustomCharacteristicName, \r\n            T");
            viewString.Append(".UnitID AS DictionaryCharacteristic_UnitID, \r\n            T.CharacteristicTypeID");
            viewString.Append(" AS DictionaryCharacteristic_CharacteristicTypeID, \r\n            T.Description A");
            viewString.Append("S DictionaryCharacteristic_Description, \r\n            T.FullDescription AS Dicti");
            viewString.Append("onaryCharacteristic_FullDescription, \r\n            T.Thumbnail AS DictionaryChar");
            viewString.Append("acteristic_Thumbnail, \r\n            T.OriginalFileDataID AS DictionaryCharacteri");
            viewString.Append("stic_OriginalFileDataID, \r\n            T.Version AS DictionaryCharacteristic_Ver");
            viewString.Append("sion, \r\n            T.VersionAntecedentID AS DictionaryCharacteristic_VersionAnt");
            viewString.Append("ecedentID, \r\n            T.VersionCertainty AS DictionaryCharacteristic_VersionC");
            viewString.Append("ertainty, \r\n            T.VersionWorkflowInstanceID AS DictionaryCharacteristic_");
            viewString.Append("VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS DictionaryCharact");
            viewString.Append("eristic_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS DictionaryCharacte");
            viewString.Append("ristic_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS DictionaryChar");
            viewString.Append("acteristic_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS Dicti");
            viewString.Append("onaryCharacteristic_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS Dic");
            viewString.Append("tionaryCharacteristic_VersionUpdated, \r\n            True AS _from0\r\n        FROM");
            viewString.Append(" NKDModuleBusinessObjectsStoreContainer.X_DictionaryCharacteristic AS T\r\n    ) A");
            viewString.Append("S T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryCharacteristics", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryCharacteristicTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView437()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2508);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryCharacteristicTypes\r\n        [NKD.M");
            viewString.Append("odule.BusinessObjects.DictionaryCharacteristicType](T1.DictionaryCharacteristicT");
            viewString.Append("ype_CharacteristicTypeID, T1.DictionaryCharacteristicType_StandardCharacteristic");
            viewString.Append("TypeName, T1.DictionaryCharacteristicType_CustomCharacteristicTypeName, T1.Dicti");
            viewString.Append("onaryCharacteristicType_Description, T1.DictionaryCharacteristicType_FullDescrip");
            viewString.Append("tion, T1.DictionaryCharacteristicType_Thumbnail, T1.DictionaryCharacteristicType");
            viewString.Append("_OriginalFileDataID, T1.DictionaryCharacteristicType_Version, T1.DictionaryChara");
            viewString.Append("cteristicType_VersionAntecedentID, T1.DictionaryCharacteristicType_VersionCertai");
            viewString.Append("nty, T1.DictionaryCharacteristicType_VersionWorkflowInstanceID, T1.DictionaryCha");
            viewString.Append("racteristicType_VersionUpdatedBy, T1.DictionaryCharacteristicType_VersionDeleted");
            viewString.Append("By, T1.DictionaryCharacteristicType_VersionOwnerContactID, T1.DictionaryCharacte");
            viewString.Append("risticType_VersionOwnerCompanyID, T1.DictionaryCharacteristicType_VersionUpdated");
            viewString.Append(")\r\n    FROM (\r\n        SELECT \r\n            T.CharacteristicTypeID AS Dictionary");
            viewString.Append("CharacteristicType_CharacteristicTypeID, \r\n            T.StandardCharacteristicT");
            viewString.Append("ypeName AS DictionaryCharacteristicType_StandardCharacteristicTypeName, \r\n      ");
            viewString.Append("      T.CustomCharacteristicTypeName AS DictionaryCharacteristicType_CustomChara");
            viewString.Append("cteristicTypeName, \r\n            T.Description AS DictionaryCharacteristicType_D");
            viewString.Append("escription, \r\n            T.FullDescription AS DictionaryCharacteristicType_Full");
            viewString.Append("Description, \r\n            T.Thumbnail AS DictionaryCharacteristicType_Thumbnail");
            viewString.Append(", \r\n            T.OriginalFileDataID AS DictionaryCharacteristicType_OriginalFil");
            viewString.Append("eDataID, \r\n            T.Version AS DictionaryCharacteristicType_Version, \r\n    ");
            viewString.Append("        T.VersionAntecedentID AS DictionaryCharacteristicType_VersionAntecedentI");
            viewString.Append("D, \r\n            T.VersionCertainty AS DictionaryCharacteristicType_VersionCerta");
            viewString.Append("inty, \r\n            T.VersionWorkflowInstanceID AS DictionaryCharacteristicType_");
            viewString.Append("VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS DictionaryCharact");
            viewString.Append("eristicType_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS DictionaryChar");
            viewString.Append("acteristicType_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS Dictio");
            viewString.Append("naryCharacteristicType_VersionOwnerContactID, \r\n            T.VersionOwnerCompan");
            viewString.Append("yID AS DictionaryCharacteristicType_VersionOwnerCompanyID, \r\n            T.Versi");
            viewString.Append("onUpdated AS DictionaryCharacteristicType_VersionUpdated, \r\n            True AS ");
            viewString.Append("_from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryCharacte");
            viewString.Append("risticType AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryCharacteristicTypes", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryColours
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView438()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2186);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryColours\r\n        [NKD.Module.Busine");
            viewString.Append("ssObjects.DictionaryColour](T1.DictionaryColour_ColourID, T1.DictionaryColour_St");
            viewString.Append("andardColourName, T1.DictionaryColour_CoalColourName, T1.DictionaryColour_GoldCo");
            viewString.Append("lourName, T1.DictionaryColour_CustomColourName, T1.DictionaryColour_Description,");
            viewString.Append(" T1.DictionaryColour_FullDescription, T1.DictionaryColour_Thumbnail, T1.Dictiona");
            viewString.Append("ryColour_OriginalFileDataID, T1.DictionaryColour_Version, T1.DictionaryColour_Ve");
            viewString.Append("rsionAntecedentID, T1.DictionaryColour_VersionCertainty, T1.DictionaryColour_Ver");
            viewString.Append("sionWorkflowInstanceID, T1.DictionaryColour_VersionUpdatedBy, T1.DictionaryColou");
            viewString.Append("r_VersionDeletedBy, T1.DictionaryColour_VersionOwnerContactID, T1.DictionaryColo");
            viewString.Append("ur_VersionOwnerCompanyID, T1.DictionaryColour_VersionUpdated)\r\n    FROM (\r\n     ");
            viewString.Append("   SELECT \r\n            T.ColourID AS DictionaryColour_ColourID, \r\n            T");
            viewString.Append(".StandardColourName AS DictionaryColour_StandardColourName, \r\n            T.Coal");
            viewString.Append("ColourName AS DictionaryColour_CoalColourName, \r\n            T.GoldColourName AS");
            viewString.Append(" DictionaryColour_GoldColourName, \r\n            T.CustomColourName AS Dictionary");
            viewString.Append("Colour_CustomColourName, \r\n            T.Description AS DictionaryColour_Descrip");
            viewString.Append("tion, \r\n            T.FullDescription AS DictionaryColour_FullDescription, \r\n   ");
            viewString.Append("         T.Thumbnail AS DictionaryColour_Thumbnail, \r\n            T.OriginalFile");
            viewString.Append("DataID AS DictionaryColour_OriginalFileDataID, \r\n            T.Version AS Dictio");
            viewString.Append("naryColour_Version, \r\n            T.VersionAntecedentID AS DictionaryColour_Vers");
            viewString.Append("ionAntecedentID, \r\n            T.VersionCertainty AS DictionaryColour_VersionCer");
            viewString.Append("tainty, \r\n            T.VersionWorkflowInstanceID AS DictionaryColour_VersionWor");
            viewString.Append("kflowInstanceID, \r\n            T.VersionUpdatedBy AS DictionaryColour_VersionUpd");
            viewString.Append("atedBy, \r\n            T.VersionDeletedBy AS DictionaryColour_VersionDeletedBy, \r");
            viewString.Append("\n            T.VersionOwnerContactID AS DictionaryColour_VersionOwnerContactID, ");
            viewString.Append("\r\n            T.VersionOwnerCompanyID AS DictionaryColour_VersionOwnerCompanyID,");
            viewString.Append(" \r\n            T.VersionUpdated AS DictionaryColour_VersionUpdated, \r\n          ");
            viewString.Append("  True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_Dictiona");
            viewString.Append("ryColour AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryColours", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryCommodities
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView439()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2349);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryCommodities\r\n        [NKD.Module.Bu");
            viewString.Append("sinessObjects.DictionaryCommodity](T1.DictionaryCommodity_CommodityID, T1.Dictio");
            viewString.Append("naryCommodity_StandardCommodityName, T1.DictionaryCommodity_CoalCommodityName, T");
            viewString.Append("1.DictionaryCommodity_GoldCommodityName, T1.DictionaryCommodity_CustomCommodityN");
            viewString.Append("ame, T1.DictionaryCommodity_Description, T1.DictionaryCommodity_FullDescription,");
            viewString.Append(" T1.DictionaryCommodity_Thumbnail, T1.DictionaryCommodity_OriginalFileDataID, T1");
            viewString.Append(".DictionaryCommodity_Version, T1.DictionaryCommodity_VersionAntecedentID, T1.Dic");
            viewString.Append("tionaryCommodity_VersionCertainty, T1.DictionaryCommodity_VersionWorkflowInstanc");
            viewString.Append("eID, T1.DictionaryCommodity_VersionUpdatedBy, T1.DictionaryCommodity_VersionDele");
            viewString.Append("tedBy, T1.DictionaryCommodity_VersionOwnerContactID, T1.DictionaryCommodity_Vers");
            viewString.Append("ionOwnerCompanyID, T1.DictionaryCommodity_VersionUpdated)\r\n    FROM (\r\n        S");
            viewString.Append("ELECT \r\n            T.CommodityID AS DictionaryCommodity_CommodityID, \r\n        ");
            viewString.Append("    T.StandardCommodityName AS DictionaryCommodity_StandardCommodityName, \r\n    ");
            viewString.Append("        T.CoalCommodityName AS DictionaryCommodity_CoalCommodityName, \r\n        ");
            viewString.Append("    T.GoldCommodityName AS DictionaryCommodity_GoldCommodityName, \r\n            ");
            viewString.Append("T.CustomCommodityName AS DictionaryCommodity_CustomCommodityName, \r\n            ");
            viewString.Append("T.Description AS DictionaryCommodity_Description, \r\n            T.FullDescriptio");
            viewString.Append("n AS DictionaryCommodity_FullDescription, \r\n            T.Thumbnail AS Dictionar");
            viewString.Append("yCommodity_Thumbnail, \r\n            T.OriginalFileDataID AS DictionaryCommodity_");
            viewString.Append("OriginalFileDataID, \r\n            T.Version AS DictionaryCommodity_Version, \r\n  ");
            viewString.Append("          T.VersionAntecedentID AS DictionaryCommodity_VersionAntecedentID, \r\n  ");
            viewString.Append("          T.VersionCertainty AS DictionaryCommodity_VersionCertainty, \r\n        ");
            viewString.Append("    T.VersionWorkflowInstanceID AS DictionaryCommodity_VersionWorkflowInstanceID");
            viewString.Append(", \r\n            T.VersionUpdatedBy AS DictionaryCommodity_VersionUpdatedBy, \r\n  ");
            viewString.Append("          T.VersionDeletedBy AS DictionaryCommodity_VersionDeletedBy, \r\n        ");
            viewString.Append("    T.VersionOwnerContactID AS DictionaryCommodity_VersionOwnerContactID, \r\n    ");
            viewString.Append("        T.VersionOwnerCompanyID AS DictionaryCommodity_VersionOwnerCompanyID, \r\n");
            viewString.Append("            T.VersionUpdated AS DictionaryCommodity_VersionUpdated, \r\n          ");
            viewString.Append("  True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_Dictiona");
            viewString.Append("ryCommodity AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryCommodities", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryContractConditionTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView440()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2640);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryContractConditionTypes\r\n        [NK");
            viewString.Append("D.Module.BusinessObjects.DictionaryContractConditionType](T1.DictionaryContractC");
            viewString.Append("onditionType_ContractConditionTypeID, T1.DictionaryContractConditionType_Standar");
            viewString.Append("dContractConditionTypeName, T1.DictionaryContractConditionType_CustomContractCon");
            viewString.Append("ditionTypeName, T1.DictionaryContractConditionType_Description, T1.DictionaryCon");
            viewString.Append("tractConditionType_FullDescription, T1.DictionaryContractConditionType_Thumbnail");
            viewString.Append(", T1.DictionaryContractConditionType_OriginalFileDataID, T1.DictionaryContractCo");
            viewString.Append("nditionType_Version, T1.DictionaryContractConditionType_VersionAntecedentID, T1.");
            viewString.Append("DictionaryContractConditionType_VersionCertainty, T1.DictionaryContractCondition");
            viewString.Append("Type_VersionWorkflowInstanceID, T1.DictionaryContractConditionType_VersionUpdate");
            viewString.Append("dBy, T1.DictionaryContractConditionType_VersionDeletedBy, T1.DictionaryContractC");
            viewString.Append("onditionType_VersionOwnerContactID, T1.DictionaryContractConditionType_VersionOw");
            viewString.Append("nerCompanyID, T1.DictionaryContractConditionType_VersionUpdated)\r\n    FROM (\r\n  ");
            viewString.Append("      SELECT \r\n            T.ContractConditionTypeID AS DictionaryContractCondit");
            viewString.Append("ionType_ContractConditionTypeID, \r\n            T.StandardContractConditionTypeNa");
            viewString.Append("me AS DictionaryContractConditionType_StandardContractConditionTypeName, \r\n     ");
            viewString.Append("       T.CustomContractConditionTypeName AS DictionaryContractConditionType_Cust");
            viewString.Append("omContractConditionTypeName, \r\n            T.Description AS DictionaryContractCo");
            viewString.Append("nditionType_Description, \r\n            T.FullDescription AS DictionaryContractCo");
            viewString.Append("nditionType_FullDescription, \r\n            T.Thumbnail AS DictionaryContractCond");
            viewString.Append("itionType_Thumbnail, \r\n            T.OriginalFileDataID AS DictionaryContractCon");
            viewString.Append("ditionType_OriginalFileDataID, \r\n            T.Version AS DictionaryContractCond");
            viewString.Append("itionType_Version, \r\n            T.VersionAntecedentID AS DictionaryContractCond");
            viewString.Append("itionType_VersionAntecedentID, \r\n            T.VersionCertainty AS DictionaryCon");
            viewString.Append("tractConditionType_VersionCertainty, \r\n            T.VersionWorkflowInstanceID A");
            viewString.Append("S DictionaryContractConditionType_VersionWorkflowInstanceID, \r\n            T.Ver");
            viewString.Append("sionUpdatedBy AS DictionaryContractConditionType_VersionUpdatedBy, \r\n           ");
            viewString.Append(" T.VersionDeletedBy AS DictionaryContractConditionType_VersionDeletedBy, \r\n     ");
            viewString.Append("       T.VersionOwnerContactID AS DictionaryContractConditionType_VersionOwnerCo");
            viewString.Append("ntactID, \r\n            T.VersionOwnerCompanyID AS DictionaryContractConditionTyp");
            viewString.Append("e_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS DictionaryContractCon");
            viewString.Append("ditionType_VersionUpdated, \r\n            True AS _from0\r\n        FROM NKDModuleB");
            viewString.Append("usinessObjectsStoreContainer.X_DictionaryContractConditionType AS T\r\n    ) AS T1");
            viewString.Append("");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryContractConditionTypes", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryCoreStates
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView441()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2348);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryCoreStates\r\n        [NKD.Module.Bus");
            viewString.Append("inessObjects.DictionaryCoreState](T1.DictionaryCoreState_CoreStateID, T1.Diction");
            viewString.Append("aryCoreState_StandardCoreStateName, T1.DictionaryCoreState_CoalCoreStateName, T1");
            viewString.Append(".DictionaryCoreState_GoldCoreStateName, T1.DictionaryCoreState_CustomCoreStateNa");
            viewString.Append("me, T1.DictionaryCoreState_Description, T1.DictionaryCoreState_FullDescription, ");
            viewString.Append("T1.DictionaryCoreState_Thumbnail, T1.DictionaryCoreState_OriginalFileDataID, T1.");
            viewString.Append("DictionaryCoreState_Version, T1.DictionaryCoreState_VersionAntecedentID, T1.Dict");
            viewString.Append("ionaryCoreState_VersionCertainty, T1.DictionaryCoreState_VersionWorkflowInstance");
            viewString.Append("ID, T1.DictionaryCoreState_VersionUpdatedBy, T1.DictionaryCoreState_VersionDelet");
            viewString.Append("edBy, T1.DictionaryCoreState_VersionOwnerContactID, T1.DictionaryCoreState_Versi");
            viewString.Append("onOwnerCompanyID, T1.DictionaryCoreState_VersionUpdated)\r\n    FROM (\r\n        SE");
            viewString.Append("LECT \r\n            T.CoreStateID AS DictionaryCoreState_CoreStateID, \r\n         ");
            viewString.Append("   T.StandardCoreStateName AS DictionaryCoreState_StandardCoreStateName, \r\n     ");
            viewString.Append("       T.CoalCoreStateName AS DictionaryCoreState_CoalCoreStateName, \r\n         ");
            viewString.Append("   T.GoldCoreStateName AS DictionaryCoreState_GoldCoreStateName, \r\n            T");
            viewString.Append(".CustomCoreStateName AS DictionaryCoreState_CustomCoreStateName, \r\n            T");
            viewString.Append(".Description AS DictionaryCoreState_Description, \r\n            T.FullDescription");
            viewString.Append(" AS DictionaryCoreState_FullDescription, \r\n            T.Thumbnail AS Dictionary");
            viewString.Append("CoreState_Thumbnail, \r\n            T.OriginalFileDataID AS DictionaryCoreState_O");
            viewString.Append("riginalFileDataID, \r\n            T.Version AS DictionaryCoreState_Version, \r\n   ");
            viewString.Append("         T.VersionAntecedentID AS DictionaryCoreState_VersionAntecedentID, \r\n   ");
            viewString.Append("         T.VersionCertainty AS DictionaryCoreState_VersionCertainty, \r\n         ");
            viewString.Append("   T.VersionWorkflowInstanceID AS DictionaryCoreState_VersionWorkflowInstanceID,");
            viewString.Append(" \r\n            T.VersionUpdatedBy AS DictionaryCoreState_VersionUpdatedBy, \r\n   ");
            viewString.Append("         T.VersionDeletedBy AS DictionaryCoreState_VersionDeletedBy, \r\n         ");
            viewString.Append("   T.VersionOwnerContactID AS DictionaryCoreState_VersionOwnerContactID, \r\n     ");
            viewString.Append("       T.VersionOwnerCompanyID AS DictionaryCoreState_VersionOwnerCompanyID, \r\n ");
            viewString.Append("           T.VersionUpdated AS DictionaryCoreState_VersionUpdated, \r\n           ");
            viewString.Append(" True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_Dictionar");
            viewString.Append("yCoreState AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryCoreStates", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryCostTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView442()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2068);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryCostTypes\r\n        [NKD.Module.Busi");
            viewString.Append("nessObjects.DictionaryCostType](T1.DictionaryCostType_CostTypeID, T1.DictionaryC");
            viewString.Append("ostType_StandardCostTypeName, T1.DictionaryCostType_CustomCostTypeName, T1.Dicti");
            viewString.Append("onaryCostType_Description, T1.DictionaryCostType_FullDescription, T1.DictionaryC");
            viewString.Append("ostType_Thumbnail, T1.DictionaryCostType_OriginalFileDataID, T1.DictionaryCostTy");
            viewString.Append("pe_Version, T1.DictionaryCostType_VersionAntecedentID, T1.DictionaryCostType_Ver");
            viewString.Append("sionCertainty, T1.DictionaryCostType_VersionWorkflowInstanceID, T1.DictionaryCos");
            viewString.Append("tType_VersionUpdatedBy, T1.DictionaryCostType_VersionDeletedBy, T1.DictionaryCos");
            viewString.Append("tType_VersionOwnerContactID, T1.DictionaryCostType_VersionOwnerCompanyID, T1.Dic");
            viewString.Append("tionaryCostType_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.Cost");
            viewString.Append("TypeID AS DictionaryCostType_CostTypeID, \r\n            T.StandardCostTypeName AS");
            viewString.Append(" DictionaryCostType_StandardCostTypeName, \r\n            T.CustomCostTypeName AS ");
            viewString.Append("DictionaryCostType_CustomCostTypeName, \r\n            T.Description AS Dictionary");
            viewString.Append("CostType_Description, \r\n            T.FullDescription AS DictionaryCostType_Full");
            viewString.Append("Description, \r\n            T.Thumbnail AS DictionaryCostType_Thumbnail, \r\n      ");
            viewString.Append("      T.OriginalFileDataID AS DictionaryCostType_OriginalFileDataID, \r\n         ");
            viewString.Append("   T.Version AS DictionaryCostType_Version, \r\n            T.VersionAntecedentID ");
            viewString.Append("AS DictionaryCostType_VersionAntecedentID, \r\n            T.VersionCertainty AS D");
            viewString.Append("ictionaryCostType_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS");
            viewString.Append(" DictionaryCostType_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy ");
            viewString.Append("AS DictionaryCostType_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS Dict");
            viewString.Append("ionaryCostType_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS Dictio");
            viewString.Append("naryCostType_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS Dic");
            viewString.Append("tionaryCostType_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS Diction");
            viewString.Append("aryCostType_VersionUpdated, \r\n            True AS _from0\r\n        FROM NKDModule");
            viewString.Append("BusinessObjectsStoreContainer.X_DictionaryCostType AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryCostTypes", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryCountries
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView443()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2541);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryCountries\r\n        [NKD.Module.Busi");
            viewString.Append("nessObjects.DictionaryCountry](T1.DictionaryCountry_CountryID, T1.DictionaryCoun");
            viewString.Append("try_StandardCountryName, T1.DictionaryCountry_CoalCountryName, T1.DictionaryCoun");
            viewString.Append("try_GoldCountryName, T1.DictionaryCountry_CustomCountryName, T1.DictionaryCountr");
            viewString.Append("y_CurrencyCode, T1.DictionaryCountry_CurrencyFormat, T1.DictionaryCountry_Descri");
            viewString.Append("ption, T1.DictionaryCountry_FullDescription, T1.DictionaryCountry_Thumbnail, T1.");
            viewString.Append("DictionaryCountry_OriginalFileDataID, T1.DictionaryCountry_Version, T1.Dictionar");
            viewString.Append("yCountry_VersionAntecedentID, T1.DictionaryCountry_VersionCertainty, T1.Dictiona");
            viewString.Append("ryCountry_VersionWorkflowInstanceID, T1.DictionaryCountry_VersionUpdatedBy, T1.D");
            viewString.Append("ictionaryCountry_VersionDeletedBy, T1.DictionaryCountry_VersionOwnerContactID, T");
            viewString.Append("1.DictionaryCountry_VersionOwnerCompanyID, T1.DictionaryCountry_VersionUpdated, ");
            viewString.Append("T1.DictionaryCountry_CountryGUID)\r\n    FROM (\r\n        SELECT \r\n            T.Co");
            viewString.Append("untryID AS DictionaryCountry_CountryID, \r\n            T.StandardCountryName AS D");
            viewString.Append("ictionaryCountry_StandardCountryName, \r\n            T.CoalCountryName AS Diction");
            viewString.Append("aryCountry_CoalCountryName, \r\n            T.GoldCountryName AS DictionaryCountry");
            viewString.Append("_GoldCountryName, \r\n            T.CustomCountryName AS DictionaryCountry_CustomC");
            viewString.Append("ountryName, \r\n            T.CurrencyCode AS DictionaryCountry_CurrencyCode, \r\n  ");
            viewString.Append("          T.CurrencyFormat AS DictionaryCountry_CurrencyFormat, \r\n            T.");
            viewString.Append("Description AS DictionaryCountry_Description, \r\n            T.FullDescription AS");
            viewString.Append(" DictionaryCountry_FullDescription, \r\n            T.Thumbnail AS DictionaryCount");
            viewString.Append("ry_Thumbnail, \r\n            T.OriginalFileDataID AS DictionaryCountry_OriginalFi");
            viewString.Append("leDataID, \r\n            T.Version AS DictionaryCountry_Version, \r\n            T.");
            viewString.Append("VersionAntecedentID AS DictionaryCountry_VersionAntecedentID, \r\n            T.Ve");
            viewString.Append("rsionCertainty AS DictionaryCountry_VersionCertainty, \r\n            T.VersionWor");
            viewString.Append("kflowInstanceID AS DictionaryCountry_VersionWorkflowInstanceID, \r\n            T.");
            viewString.Append("VersionUpdatedBy AS DictionaryCountry_VersionUpdatedBy, \r\n            T.VersionD");
            viewString.Append("eletedBy AS DictionaryCountry_VersionDeletedBy, \r\n            T.VersionOwnerCont");
            viewString.Append("actID AS DictionaryCountry_VersionOwnerContactID, \r\n            T.VersionOwnerCo");
            viewString.Append("mpanyID AS DictionaryCountry_VersionOwnerCompanyID, \r\n            T.VersionUpdat");
            viewString.Append("ed AS DictionaryCountry_VersionUpdated, \r\n            T.CountryGUID AS Dictionar");
            viewString.Append("yCountry_CountryGUID, \r\n            True AS _from0\r\n        FROM NKDModuleBusine");
            viewString.Append("ssObjectsStoreContainer.X_DictionaryCountry AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryCountries", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryCountryStates
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView444()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2610);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryCountryStates\r\n        [NKD.Module.");
            viewString.Append("BusinessObjects.DictionaryCountryState](T1.DictionaryCountryState_CountryStateID");
            viewString.Append(", T1.DictionaryCountryState_CountryID, T1.DictionaryCountryState_StandardCountry");
            viewString.Append("StateName, T1.DictionaryCountryState_CoalCountryStateName, T1.DictionaryCountryS");
            viewString.Append("tate_GoldCountryStateName, T1.DictionaryCountryState_CustomCountryStateName, T1.");
            viewString.Append("DictionaryCountryState_Description, T1.DictionaryCountryState_FullDescription, T");
            viewString.Append("1.DictionaryCountryState_Thumbnail, T1.DictionaryCountryState_OriginalFileDataID");
            viewString.Append(", T1.DictionaryCountryState_Version, T1.DictionaryCountryState_VersionAntecedent");
            viewString.Append("ID, T1.DictionaryCountryState_VersionCertainty, T1.DictionaryCountryState_Versio");
            viewString.Append("nWorkflowInstanceID, T1.DictionaryCountryState_VersionUpdatedBy, T1.DictionaryCo");
            viewString.Append("untryState_VersionDeletedBy, T1.DictionaryCountryState_VersionOwnerContactID, T1");
            viewString.Append(".DictionaryCountryState_VersionOwnerCompanyID, T1.DictionaryCountryState_Version");
            viewString.Append("Updated)\r\n    FROM (\r\n        SELECT \r\n            T.CountryStateID AS Dictionar");
            viewString.Append("yCountryState_CountryStateID, \r\n            T.CountryID AS DictionaryCountryStat");
            viewString.Append("e_CountryID, \r\n            T.StandardCountryStateName AS DictionaryCountryState_");
            viewString.Append("StandardCountryStateName, \r\n            T.CoalCountryStateName AS DictionaryCoun");
            viewString.Append("tryState_CoalCountryStateName, \r\n            T.GoldCountryStateName AS Dictionar");
            viewString.Append("yCountryState_GoldCountryStateName, \r\n            T.CustomCountryStateName AS Di");
            viewString.Append("ctionaryCountryState_CustomCountryStateName, \r\n            T.Description AS Dict");
            viewString.Append("ionaryCountryState_Description, \r\n            T.FullDescription AS DictionaryCou");
            viewString.Append("ntryState_FullDescription, \r\n            T.Thumbnail AS DictionaryCountryState_T");
            viewString.Append("humbnail, \r\n            T.OriginalFileDataID AS DictionaryCountryState_OriginalF");
            viewString.Append("ileDataID, \r\n            T.Version AS DictionaryCountryState_Version, \r\n        ");
            viewString.Append("    T.VersionAntecedentID AS DictionaryCountryState_VersionAntecedentID, \r\n     ");
            viewString.Append("       T.VersionCertainty AS DictionaryCountryState_VersionCertainty, \r\n        ");
            viewString.Append("    T.VersionWorkflowInstanceID AS DictionaryCountryState_VersionWorkflowInstanc");
            viewString.Append("eID, \r\n            T.VersionUpdatedBy AS DictionaryCountryState_VersionUpdatedBy");
            viewString.Append(", \r\n            T.VersionDeletedBy AS DictionaryCountryState_VersionDeletedBy, \r");
            viewString.Append("\n            T.VersionOwnerContactID AS DictionaryCountryState_VersionOwnerConta");
            viewString.Append("ctID, \r\n            T.VersionOwnerCompanyID AS DictionaryCountryState_VersionOwn");
            viewString.Append("erCompanyID, \r\n            T.VersionUpdated AS DictionaryCountryState_VersionUpd");
            viewString.Append("ated, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreCo");
            viewString.Append("ntainer.X_DictionaryCountryState AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryCountryStates", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryDataStatus
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView445()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2401);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryDataStatus\r\n        [NKD.Module.Bus");
            viewString.Append("inessObjects.DictionaryDataStatus](T1.DictionaryDataStatus_DataStatusID, T1.Dict");
            viewString.Append("ionaryDataStatus_StandardDataStatusName, T1.DictionaryDataStatus_CoalDataStatusN");
            viewString.Append("ame, T1.DictionaryDataStatus_GoldDataStatusName, T1.DictionaryDataStatus_CustomD");
            viewString.Append("ataStatusName, T1.DictionaryDataStatus_Description, T1.DictionaryDataStatus_Full");
            viewString.Append("Description, T1.DictionaryDataStatus_Thumbnail, T1.DictionaryDataStatus_Original");
            viewString.Append("FileDataID, T1.DictionaryDataStatus_Version, T1.DictionaryDataStatus_VersionAnte");
            viewString.Append("cedentID, T1.DictionaryDataStatus_VersionCertainty, T1.DictionaryDataStatus_Vers");
            viewString.Append("ionWorkflowInstanceID, T1.DictionaryDataStatus_VersionUpdatedBy, T1.DictionaryDa");
            viewString.Append("taStatus_VersionDeletedBy, T1.DictionaryDataStatus_VersionOwnerContactID, T1.Dic");
            viewString.Append("tionaryDataStatus_VersionOwnerCompanyID, T1.DictionaryDataStatus_VersionUpdated)");
            viewString.Append("\r\n    FROM (\r\n        SELECT \r\n            T.DataStatusID AS DictionaryDataStatu");
            viewString.Append("s_DataStatusID, \r\n            T.StandardDataStatusName AS DictionaryDataStatus_S");
            viewString.Append("tandardDataStatusName, \r\n            T.CoalDataStatusName AS DictionaryDataStatu");
            viewString.Append("s_CoalDataStatusName, \r\n            T.GoldDataStatusName AS DictionaryDataStatus");
            viewString.Append("_GoldDataStatusName, \r\n            T.CustomDataStatusName AS DictionaryDataStatu");
            viewString.Append("s_CustomDataStatusName, \r\n            T.Description AS DictionaryDataStatus_Desc");
            viewString.Append("ription, \r\n            T.FullDescription AS DictionaryDataStatus_FullDescription");
            viewString.Append(", \r\n            T.Thumbnail AS DictionaryDataStatus_Thumbnail, \r\n            T.O");
            viewString.Append("riginalFileDataID AS DictionaryDataStatus_OriginalFileDataID, \r\n            T.Ve");
            viewString.Append("rsion AS DictionaryDataStatus_Version, \r\n            T.VersionAntecedentID AS Di");
            viewString.Append("ctionaryDataStatus_VersionAntecedentID, \r\n            T.VersionCertainty AS Dict");
            viewString.Append("ionaryDataStatus_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS ");
            viewString.Append("DictionaryDataStatus_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy");
            viewString.Append(" AS DictionaryDataStatus_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS D");
            viewString.Append("ictionaryDataStatus_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS D");
            viewString.Append("ictionaryDataStatus_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID");
            viewString.Append(" AS DictionaryDataStatus_VersionOwnerCompanyID, \r\n            T.VersionUpdated A");
            viewString.Append("S DictionaryDataStatus_VersionUpdated, \r\n            True AS _from0\r\n        FRO");
            viewString.Append("M NKDModuleBusinessObjectsStoreContainer.X_DictionaryDataStatus AS T\r\n    ) AS T");
            viewString.Append("1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryDataStatus", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryDefectCompletenesses
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView446()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2835);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryDefectCompletenesses\r\n        [NKD.");
            viewString.Append("Module.BusinessObjects.DictionaryDefectCompleteness](T1.DictionaryDefectComplete");
            viewString.Append("ness_DefectCompletenessID, T1.DictionaryDefectCompleteness_StandardDefectComplet");
            viewString.Append("enessName, T1.DictionaryDefectCompleteness_CoalDefectCompletenessName, T1.Dictio");
            viewString.Append("naryDefectCompleteness_GoldDefectCompletenessName, T1.DictionaryDefectCompletene");
            viewString.Append("ss_CustomDefectCompletenessName, T1.DictionaryDefectCompleteness_Description, T1");
            viewString.Append(".DictionaryDefectCompleteness_FullDescription, T1.DictionaryDefectCompleteness_T");
            viewString.Append("humbnail, T1.DictionaryDefectCompleteness_OriginalFileDataID, T1.DictionaryDefec");
            viewString.Append("tCompleteness_Version, T1.DictionaryDefectCompleteness_VersionAntecedentID, T1.D");
            viewString.Append("ictionaryDefectCompleteness_VersionCertainty, T1.DictionaryDefectCompleteness_Ve");
            viewString.Append("rsionWorkflowInstanceID, T1.DictionaryDefectCompleteness_VersionUpdatedBy, T1.Di");
            viewString.Append("ctionaryDefectCompleteness_VersionDeletedBy, T1.DictionaryDefectCompleteness_Ver");
            viewString.Append("sionOwnerContactID, T1.DictionaryDefectCompleteness_VersionOwnerCompanyID, T1.Di");
            viewString.Append("ctionaryDefectCompleteness_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n       ");
            viewString.Append("     T.DefectCompletenessID AS DictionaryDefectCompleteness_DefectCompletenessID");
            viewString.Append(", \r\n            T.StandardDefectCompletenessName AS DictionaryDefectCompleteness");
            viewString.Append("_StandardDefectCompletenessName, \r\n            T.CoalDefectCompletenessName AS D");
            viewString.Append("ictionaryDefectCompleteness_CoalDefectCompletenessName, \r\n            T.GoldDefe");
            viewString.Append("ctCompletenessName AS DictionaryDefectCompleteness_GoldDefectCompletenessName, \r");
            viewString.Append("\n            T.CustomDefectCompletenessName AS DictionaryDefectCompleteness_Cust");
            viewString.Append("omDefectCompletenessName, \r\n            T.Description AS DictionaryDefectComplet");
            viewString.Append("eness_Description, \r\n            T.FullDescription AS DictionaryDefectCompletene");
            viewString.Append("ss_FullDescription, \r\n            T.Thumbnail AS DictionaryDefectCompleteness_Th");
            viewString.Append("umbnail, \r\n            T.OriginalFileDataID AS DictionaryDefectCompleteness_Orig");
            viewString.Append("inalFileDataID, \r\n            T.Version AS DictionaryDefectCompleteness_Version,");
            viewString.Append(" \r\n            T.VersionAntecedentID AS DictionaryDefectCompleteness_VersionAnte");
            viewString.Append("cedentID, \r\n            T.VersionCertainty AS DictionaryDefectCompleteness_Versi");
            viewString.Append("onCertainty, \r\n            T.VersionWorkflowInstanceID AS DictionaryDefectComple");
            viewString.Append("teness_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS Dictionary");
            viewString.Append("DefectCompleteness_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS Diction");
            viewString.Append("aryDefectCompleteness_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS");
            viewString.Append(" DictionaryDefectCompleteness_VersionOwnerContactID, \r\n            T.VersionOwne");
            viewString.Append("rCompanyID AS DictionaryDefectCompleteness_VersionOwnerCompanyID, \r\n            ");
            viewString.Append("T.VersionUpdated AS DictionaryDefectCompleteness_VersionUpdated, \r\n            T");
            viewString.Append("rue AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryD");
            viewString.Append("efectCompleteness AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryDefectCompletenesses", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryDefectContinuities
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView447()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2727);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryDefectContinuities\r\n        [NKD.Mo");
            viewString.Append("dule.BusinessObjects.DictionaryDefectContinuity](T1.DictionaryDefectContinuity_D");
            viewString.Append("efectContinuityID, T1.DictionaryDefectContinuity_StandardDefectContinuityName, T");
            viewString.Append("1.DictionaryDefectContinuity_CoalDefectContinuityName, T1.DictionaryDefectContin");
            viewString.Append("uity_GoldDefectContinuityName, T1.DictionaryDefectContinuity_CustomDefectContinu");
            viewString.Append("ityName, T1.DictionaryDefectContinuity_Description, T1.DictionaryDefectContinuit");
            viewString.Append("y_FullDescription, T1.DictionaryDefectContinuity_Thumbnail, T1.DictionaryDefectC");
            viewString.Append("ontinuity_OriginalFileDataID, T1.DictionaryDefectContinuity_Version, T1.Dictiona");
            viewString.Append("ryDefectContinuity_VersionAntecedentID, T1.DictionaryDefectContinuity_VersionCer");
            viewString.Append("tainty, T1.DictionaryDefectContinuity_VersionWorkflowInstanceID, T1.DictionaryDe");
            viewString.Append("fectContinuity_VersionUpdatedBy, T1.DictionaryDefectContinuity_VersionDeletedBy,");
            viewString.Append(" T1.DictionaryDefectContinuity_VersionOwnerContactID, T1.DictionaryDefectContinu");
            viewString.Append("ity_VersionOwnerCompanyID, T1.DictionaryDefectContinuity_VersionUpdated)\r\n    FR");
            viewString.Append("OM (\r\n        SELECT \r\n            T.DefectContinuityID AS DictionaryDefectConti");
            viewString.Append("nuity_DefectContinuityID, \r\n            T.StandardDefectContinuityName AS Dictio");
            viewString.Append("naryDefectContinuity_StandardDefectContinuityName, \r\n            T.CoalDefectCon");
            viewString.Append("tinuityName AS DictionaryDefectContinuity_CoalDefectContinuityName, \r\n          ");
            viewString.Append("  T.GoldDefectContinuityName AS DictionaryDefectContinuity_GoldDefectContinuityN");
            viewString.Append("ame, \r\n            T.CustomDefectContinuityName AS DictionaryDefectContinuity_Cu");
            viewString.Append("stomDefectContinuityName, \r\n            T.Description AS DictionaryDefectContinu");
            viewString.Append("ity_Description, \r\n            T.FullDescription AS DictionaryDefectContinuity_F");
            viewString.Append("ullDescription, \r\n            T.Thumbnail AS DictionaryDefectContinuity_Thumbnai");
            viewString.Append("l, \r\n            T.OriginalFileDataID AS DictionaryDefectContinuity_OriginalFile");
            viewString.Append("DataID, \r\n            T.Version AS DictionaryDefectContinuity_Version, \r\n       ");
            viewString.Append("     T.VersionAntecedentID AS DictionaryDefectContinuity_VersionAntecedentID, \r\n");
            viewString.Append("            T.VersionCertainty AS DictionaryDefectContinuity_VersionCertainty, \r");
            viewString.Append("\n            T.VersionWorkflowInstanceID AS DictionaryDefectContinuity_VersionWo");
            viewString.Append("rkflowInstanceID, \r\n            T.VersionUpdatedBy AS DictionaryDefectContinuity");
            viewString.Append("_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS DictionaryDefectContinuit");
            viewString.Append("y_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS DictionaryDefectCon");
            viewString.Append("tinuity_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS Dictiona");
            viewString.Append("ryDefectContinuity_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS Dict");
            viewString.Append("ionaryDefectContinuity_VersionUpdated, \r\n            True AS _from0\r\n        FRO");
            viewString.Append("M NKDModuleBusinessObjectsStoreContainer.X_DictionaryDefectContinuity AS T\r\n    ");
            viewString.Append(") AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryDefectContinuities", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryDefectSpacings
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView448()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2564);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryDefectSpacings\r\n        [NKD.Module");
            viewString.Append(".BusinessObjects.DictionaryDefectSpacing](T1.DictionaryDefectSpacing_DefectSpaci");
            viewString.Append("ngID, T1.DictionaryDefectSpacing_StandardDefectSpacingName, T1.DictionaryDefectS");
            viewString.Append("pacing_CoalDefectSpacingName, T1.DictionaryDefectSpacing_GoldDefectSpacingName, ");
            viewString.Append("T1.DictionaryDefectSpacing_CustomDefectSpacingName, T1.DictionaryDefectSpacing_D");
            viewString.Append("escription, T1.DictionaryDefectSpacing_FullDescription, T1.DictionaryDefectSpaci");
            viewString.Append("ng_Thumbnail, T1.DictionaryDefectSpacing_OriginalFileDataID, T1.DictionaryDefect");
            viewString.Append("Spacing_Version, T1.DictionaryDefectSpacing_VersionAntecedentID, T1.DictionaryDe");
            viewString.Append("fectSpacing_VersionCertainty, T1.DictionaryDefectSpacing_VersionWorkflowInstance");
            viewString.Append("ID, T1.DictionaryDefectSpacing_VersionUpdatedBy, T1.DictionaryDefectSpacing_Vers");
            viewString.Append("ionDeletedBy, T1.DictionaryDefectSpacing_VersionOwnerContactID, T1.DictionaryDef");
            viewString.Append("ectSpacing_VersionOwnerCompanyID, T1.DictionaryDefectSpacing_VersionUpdated)\r\n  ");
            viewString.Append("  FROM (\r\n        SELECT \r\n            T.DefectSpacingID AS DictionaryDefectSpac");
            viewString.Append("ing_DefectSpacingID, \r\n            T.StandardDefectSpacingName AS DictionaryDefe");
            viewString.Append("ctSpacing_StandardDefectSpacingName, \r\n            T.CoalDefectSpacingName AS Di");
            viewString.Append("ctionaryDefectSpacing_CoalDefectSpacingName, \r\n            T.GoldDefectSpacingNa");
            viewString.Append("me AS DictionaryDefectSpacing_GoldDefectSpacingName, \r\n            T.CustomDefec");
            viewString.Append("tSpacingName AS DictionaryDefectSpacing_CustomDefectSpacingName, \r\n            T");
            viewString.Append(".Description AS DictionaryDefectSpacing_Description, \r\n            T.FullDescrip");
            viewString.Append("tion AS DictionaryDefectSpacing_FullDescription, \r\n            T.Thumbnail AS Di");
            viewString.Append("ctionaryDefectSpacing_Thumbnail, \r\n            T.OriginalFileDataID AS Dictionar");
            viewString.Append("yDefectSpacing_OriginalFileDataID, \r\n            T.Version AS DictionaryDefectSp");
            viewString.Append("acing_Version, \r\n            T.VersionAntecedentID AS DictionaryDefectSpacing_Ve");
            viewString.Append("rsionAntecedentID, \r\n            T.VersionCertainty AS DictionaryDefectSpacing_V");
            viewString.Append("ersionCertainty, \r\n            T.VersionWorkflowInstanceID AS DictionaryDefectSp");
            viewString.Append("acing_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS DictionaryD");
            viewString.Append("efectSpacing_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS DictionaryDef");
            viewString.Append("ectSpacing_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS Dictionary");
            viewString.Append("DefectSpacing_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS Di");
            viewString.Append("ctionaryDefectSpacing_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS D");
            viewString.Append("ictionaryDefectSpacing_VersionUpdated, \r\n            True AS _from0\r\n        FRO");
            viewString.Append("M NKDModuleBusinessObjectsStoreContainer.X_DictionaryDefectSpacing AS T\r\n    ) A");
            viewString.Append("S T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryDefectSpacings", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryDefectTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView449()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2402);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryDefectTypes\r\n        [NKD.Module.Bu");
            viewString.Append("sinessObjects.DictionaryDefectType](T1.DictionaryDefectType_DefectTypeID, T1.Dic");
            viewString.Append("tionaryDefectType_StandardDefectTypeName, T1.DictionaryDefectType_CoalDefectType");
            viewString.Append("Name, T1.DictionaryDefectType_GoldDefectTypeName, T1.DictionaryDefectType_Custom");
            viewString.Append("DefectTypeName, T1.DictionaryDefectType_Description, T1.DictionaryDefectType_Ful");
            viewString.Append("lDescription, T1.DictionaryDefectType_Thumbnail, T1.DictionaryDefectType_Origina");
            viewString.Append("lFileDataID, T1.DictionaryDefectType_Version, T1.DictionaryDefectType_VersionAnt");
            viewString.Append("ecedentID, T1.DictionaryDefectType_VersionCertainty, T1.DictionaryDefectType_Ver");
            viewString.Append("sionWorkflowInstanceID, T1.DictionaryDefectType_VersionUpdatedBy, T1.DictionaryD");
            viewString.Append("efectType_VersionDeletedBy, T1.DictionaryDefectType_VersionOwnerContactID, T1.Di");
            viewString.Append("ctionaryDefectType_VersionOwnerCompanyID, T1.DictionaryDefectType_VersionUpdated");
            viewString.Append(")\r\n    FROM (\r\n        SELECT \r\n            T.DefectTypeID AS DictionaryDefectTy");
            viewString.Append("pe_DefectTypeID, \r\n            T.StandardDefectTypeName AS DictionaryDefectType_");
            viewString.Append("StandardDefectTypeName, \r\n            T.CoalDefectTypeName AS DictionaryDefectTy");
            viewString.Append("pe_CoalDefectTypeName, \r\n            T.GoldDefectTypeName AS DictionaryDefectTyp");
            viewString.Append("e_GoldDefectTypeName, \r\n            T.CustomDefectTypeName AS DictionaryDefectTy");
            viewString.Append("pe_CustomDefectTypeName, \r\n            T.Description AS DictionaryDefectType_Des");
            viewString.Append("cription, \r\n            T.FullDescription AS DictionaryDefectType_FullDescriptio");
            viewString.Append("n, \r\n            T.Thumbnail AS DictionaryDefectType_Thumbnail, \r\n            T.");
            viewString.Append("OriginalFileDataID AS DictionaryDefectType_OriginalFileDataID, \r\n            T.V");
            viewString.Append("ersion AS DictionaryDefectType_Version, \r\n            T.VersionAntecedentID AS D");
            viewString.Append("ictionaryDefectType_VersionAntecedentID, \r\n            T.VersionCertainty AS Dic");
            viewString.Append("tionaryDefectType_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS");
            viewString.Append(" DictionaryDefectType_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedB");
            viewString.Append("y AS DictionaryDefectType_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS ");
            viewString.Append("DictionaryDefectType_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS ");
            viewString.Append("DictionaryDefectType_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyI");
            viewString.Append("D AS DictionaryDefectType_VersionOwnerCompanyID, \r\n            T.VersionUpdated ");
            viewString.Append("AS DictionaryDefectType_VersionUpdated, \r\n            True AS _from0\r\n        FR");
            viewString.Append("OM NKDModuleBusinessObjectsStoreContainer.X_DictionaryDefectType AS T\r\n    ) AS ");
            viewString.Append("T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryDefectTypes", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryDesurveyAlgorithmTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView450()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2996);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryDesurveyAlgorithmTypes\r\n        [NK");
            viewString.Append("D.Module.BusinessObjects.DictionaryDesurveyAlgorithmType](T1.DictionaryDesurveyA");
            viewString.Append("lgorithmType_DesurveyAlgorithmTypeID, T1.DictionaryDesurveyAlgorithmType_Standar");
            viewString.Append("dDesurveyAlgorithmTypeName, T1.DictionaryDesurveyAlgorithmType_CoalDesurveyAlgor");
            viewString.Append("ithmTypeName, T1.DictionaryDesurveyAlgorithmType_GoldDesurveyAlgorithmTypeName, ");
            viewString.Append("T1.DictionaryDesurveyAlgorithmType_CustomDesurveyAlgorithmTypeName, T1.Dictionar");
            viewString.Append("yDesurveyAlgorithmType_Description, T1.DictionaryDesurveyAlgorithmType_FullDescr");
            viewString.Append("iption, T1.DictionaryDesurveyAlgorithmType_Thumbnail, T1.DictionaryDesurveyAlgor");
            viewString.Append("ithmType_OriginalFileDataID, T1.DictionaryDesurveyAlgorithmType_Version, T1.Dict");
            viewString.Append("ionaryDesurveyAlgorithmType_VersionAntecedentID, T1.DictionaryDesurveyAlgorithmT");
            viewString.Append("ype_VersionCertainty, T1.DictionaryDesurveyAlgorithmType_VersionWorkflowInstance");
            viewString.Append("ID, T1.DictionaryDesurveyAlgorithmType_VersionUpdatedBy, T1.DictionaryDesurveyAl");
            viewString.Append("gorithmType_VersionDeletedBy, T1.DictionaryDesurveyAlgorithmType_VersionOwnerCon");
            viewString.Append("tactID, T1.DictionaryDesurveyAlgorithmType_VersionOwnerCompanyID, T1.DictionaryD");
            viewString.Append("esurveyAlgorithmType_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T");
            viewString.Append(".DesurveyAlgorithmTypeID AS DictionaryDesurveyAlgorithmType_DesurveyAlgorithmTyp");
            viewString.Append("eID, \r\n            T.StandardDesurveyAlgorithmTypeName AS DictionaryDesurveyAlgo");
            viewString.Append("rithmType_StandardDesurveyAlgorithmTypeName, \r\n            T.CoalDesurveyAlgorit");
            viewString.Append("hmTypeName AS DictionaryDesurveyAlgorithmType_CoalDesurveyAlgorithmTypeName, \r\n ");
            viewString.Append("           T.GoldDesurveyAlgorithmTypeName AS DictionaryDesurveyAlgorithmType_Go");
            viewString.Append("ldDesurveyAlgorithmTypeName, \r\n            T.CustomDesurveyAlgorithmTypeName AS ");
            viewString.Append("DictionaryDesurveyAlgorithmType_CustomDesurveyAlgorithmTypeName, \r\n            T");
            viewString.Append(".Description AS DictionaryDesurveyAlgorithmType_Description, \r\n            T.Ful");
            viewString.Append("lDescription AS DictionaryDesurveyAlgorithmType_FullDescription, \r\n            T");
            viewString.Append(".Thumbnail AS DictionaryDesurveyAlgorithmType_Thumbnail, \r\n            T.Origina");
            viewString.Append("lFileDataID AS DictionaryDesurveyAlgorithmType_OriginalFileDataID, \r\n           ");
            viewString.Append(" T.Version AS DictionaryDesurveyAlgorithmType_Version, \r\n            T.VersionAn");
            viewString.Append("tecedentID AS DictionaryDesurveyAlgorithmType_VersionAntecedentID, \r\n           ");
            viewString.Append(" T.VersionCertainty AS DictionaryDesurveyAlgorithmType_VersionCertainty, \r\n     ");
            viewString.Append("       T.VersionWorkflowInstanceID AS DictionaryDesurveyAlgorithmType_VersionWor");
            viewString.Append("kflowInstanceID, \r\n            T.VersionUpdatedBy AS DictionaryDesurveyAlgorithm");
            viewString.Append("Type_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS DictionaryDesurveyAlg");
            viewString.Append("orithmType_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS Dictionary");
            viewString.Append("DesurveyAlgorithmType_VersionOwnerContactID, \r\n            T.VersionOwnerCompany");
            viewString.Append("ID AS DictionaryDesurveyAlgorithmType_VersionOwnerCompanyID, \r\n            T.Ver");
            viewString.Append("sionUpdated AS DictionaryDesurveyAlgorithmType_VersionUpdated, \r\n            Tru");
            viewString.Append("e AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryDes");
            viewString.Append("urveyAlgorithmType AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryDesurveyAlgorithmTypes", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryDimensions
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView451()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2454);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryDimensions\r\n        [NKD.Module.Bus");
            viewString.Append("inessObjects.DictionaryDimension](T1.DictionaryDimension_DimensionID, T1.Diction");
            viewString.Append("aryDimension_StandardDimensionName, T1.DictionaryDimension_CoalDimensionName, T1");
            viewString.Append(".DictionaryDimension_GoldDimensionName, T1.DictionaryDimension_CustomDimensionNa");
            viewString.Append("me, T1.DictionaryDimension_Description, T1.DictionaryDimension_FullDescription, ");
            viewString.Append("T1.DictionaryDimension_Thumbnail, T1.DictionaryDimension_OriginalFileDataID, T1.");
            viewString.Append("DictionaryDimension_Version, T1.DictionaryDimension_VersionAntecedentID, T1.Dict");
            viewString.Append("ionaryDimension_VersionCertainty, T1.DictionaryDimension_VersionWorkflowInstance");
            viewString.Append("ID, T1.DictionaryDimension_VersionUpdatedBy, T1.DictionaryDimension_VersionDelet");
            viewString.Append("edBy, T1.DictionaryDimension_VersionOwnerContactID, T1.DictionaryDimension_Versi");
            viewString.Append("onOwnerCompanyID, T1.DictionaryDimension_VersionUpdated, T1.DictionaryDimension_");
            viewString.Append("DimensionGUID)\r\n    FROM (\r\n        SELECT \r\n            T.DimensionID AS Dictio");
            viewString.Append("naryDimension_DimensionID, \r\n            T.StandardDimensionName AS DictionaryDi");
            viewString.Append("mension_StandardDimensionName, \r\n            T.CoalDimensionName AS DictionaryDi");
            viewString.Append("mension_CoalDimensionName, \r\n            T.GoldDimensionName AS DictionaryDimens");
            viewString.Append("ion_GoldDimensionName, \r\n            T.CustomDimensionName AS DictionaryDimensio");
            viewString.Append("n_CustomDimensionName, \r\n            T.Description AS DictionaryDimension_Descri");
            viewString.Append("ption, \r\n            T.FullDescription AS DictionaryDimension_FullDescription, \r");
            viewString.Append("\n            T.Thumbnail AS DictionaryDimension_Thumbnail, \r\n            T.Origi");
            viewString.Append("nalFileDataID AS DictionaryDimension_OriginalFileDataID, \r\n            T.Version");
            viewString.Append(" AS DictionaryDimension_Version, \r\n            T.VersionAntecedentID AS Dictiona");
            viewString.Append("ryDimension_VersionAntecedentID, \r\n            T.VersionCertainty AS DictionaryD");
            viewString.Append("imension_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS Dictiona");
            viewString.Append("ryDimension_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS Dicti");
            viewString.Append("onaryDimension_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS DictionaryD");
            viewString.Append("imension_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS DictionaryDi");
            viewString.Append("mension_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS Dictiona");
            viewString.Append("ryDimension_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS DictionaryD");
            viewString.Append("imension_VersionUpdated, \r\n            T.DimensionGUID AS DictionaryDimension_Di");
            viewString.Append("mensionGUID, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjects");
            viewString.Append("StoreContainer.X_DictionaryDimension AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryDimensions", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryDipOrientationMethods
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView452()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2942);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryDipOrientationMethods\r\n        [NKD");
            viewString.Append(".Module.BusinessObjects.DictionaryDipOrientationMethod](T1.DictionaryDipOrientat");
            viewString.Append("ionMethod_DipOrientationMethodID, T1.DictionaryDipOrientationMethod_StandardDipO");
            viewString.Append("rientationMethodName, T1.DictionaryDipOrientationMethod_CoalDipOrientationMethod");
            viewString.Append("Name, T1.DictionaryDipOrientationMethod_GoldDipOrientationMethodName, T1.Diction");
            viewString.Append("aryDipOrientationMethod_CustomDipOrientationMethodName, T1.DictionaryDipOrientat");
            viewString.Append("ionMethod_Description, T1.DictionaryDipOrientationMethod_FullDescription, T1.Dic");
            viewString.Append("tionaryDipOrientationMethod_Thumbnail, T1.DictionaryDipOrientationMethod_Origina");
            viewString.Append("lFileDataID, T1.DictionaryDipOrientationMethod_Version, T1.DictionaryDipOrientat");
            viewString.Append("ionMethod_VersionAntecedentID, T1.DictionaryDipOrientationMethod_VersionCertaint");
            viewString.Append("y, T1.DictionaryDipOrientationMethod_VersionWorkflowInstanceID, T1.DictionaryDip");
            viewString.Append("OrientationMethod_VersionUpdatedBy, T1.DictionaryDipOrientationMethod_VersionDel");
            viewString.Append("etedBy, T1.DictionaryDipOrientationMethod_VersionOwnerContactID, T1.DictionaryDi");
            viewString.Append("pOrientationMethod_VersionOwnerCompanyID, T1.DictionaryDipOrientationMethod_Vers");
            viewString.Append("ionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.DipOrientationMethodID A");
            viewString.Append("S DictionaryDipOrientationMethod_DipOrientationMethodID, \r\n            T.Standar");
            viewString.Append("dDipOrientationMethodName AS DictionaryDipOrientationMethod_StandardDipOrientati");
            viewString.Append("onMethodName, \r\n            T.CoalDipOrientationMethodName AS DictionaryDipOrien");
            viewString.Append("tationMethod_CoalDipOrientationMethodName, \r\n            T.GoldDipOrientationMet");
            viewString.Append("hodName AS DictionaryDipOrientationMethod_GoldDipOrientationMethodName, \r\n      ");
            viewString.Append("      T.CustomDipOrientationMethodName AS DictionaryDipOrientationMethod_CustomD");
            viewString.Append("ipOrientationMethodName, \r\n            T.Description AS DictionaryDipOrientation");
            viewString.Append("Method_Description, \r\n            T.FullDescription AS DictionaryDipOrientationM");
            viewString.Append("ethod_FullDescription, \r\n            T.Thumbnail AS DictionaryDipOrientationMeth");
            viewString.Append("od_Thumbnail, \r\n            T.OriginalFileDataID AS DictionaryDipOrientationMeth");
            viewString.Append("od_OriginalFileDataID, \r\n            T.Version AS DictionaryDipOrientationMethod");
            viewString.Append("_Version, \r\n            T.VersionAntecedentID AS DictionaryDipOrientationMethod_");
            viewString.Append("VersionAntecedentID, \r\n            T.VersionCertainty AS DictionaryDipOrientatio");
            viewString.Append("nMethod_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS Dictionar");
            viewString.Append("yDipOrientationMethod_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedB");
            viewString.Append("y AS DictionaryDipOrientationMethod_VersionUpdatedBy, \r\n            T.VersionDel");
            viewString.Append("etedBy AS DictionaryDipOrientationMethod_VersionDeletedBy, \r\n            T.Versi");
            viewString.Append("onOwnerContactID AS DictionaryDipOrientationMethod_VersionOwnerContactID, \r\n    ");
            viewString.Append("        T.VersionOwnerCompanyID AS DictionaryDipOrientationMethod_VersionOwnerCo");
            viewString.Append("mpanyID, \r\n            T.VersionUpdated AS DictionaryDipOrientationMethod_Versio");
            viewString.Append("nUpdated, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjectsSto");
            viewString.Append("reContainer.X_DictionaryDipOrientationMethod AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryDipOrientationMethods", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryDomains
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView453()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryDomains", "\r\n    SELECT VALUE -- Constructing DictionaryDomains\r\n        [NKD.Module.Busines" +
                    "sObjects.DictionaryDomain](T1.DictionaryDomain_DomainID, T1.DictionaryDomain_Sta" +
                    "ndardDomainName, T1.DictionaryDomain_Description, T1.DictionaryDomain_FullDescri" +
                    "ption, T1.DictionaryDomain_Thumbnail, T1.DictionaryDomain_OriginalFileDataID, T1" +
                    ".DictionaryDomain_Version, T1.DictionaryDomain_VersionAntecedentID, T1.Dictionar" +
                    "yDomain_VersionCertainty, T1.DictionaryDomain_VersionWorkflowInstanceID, T1.Dict" +
                    "ionaryDomain_VersionUpdatedBy, T1.DictionaryDomain_VersionDeletedBy, T1.Dictiona" +
                    "ryDomain_VersionOwnerContactID, T1.DictionaryDomain_VersionOwnerCompanyID, T1.Di" +
                    "ctionaryDomain_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.Domai" +
                    "nID AS DictionaryDomain_DomainID, \r\n            T.StandardDomainName AS Dictiona" +
                    "ryDomain_StandardDomainName, \r\n            T.Description AS DictionaryDomain_Des" +
                    "cription, \r\n            T.FullDescription AS DictionaryDomain_FullDescription, \r" +
                    "\n            T.Thumbnail AS DictionaryDomain_Thumbnail, \r\n            T.Original" +
                    "FileDataID AS DictionaryDomain_OriginalFileDataID, \r\n            T.Version AS Di" +
                    "ctionaryDomain_Version, \r\n            T.VersionAntecedentID AS DictionaryDomain_" +
                    "VersionAntecedentID, \r\n            T.VersionCertainty AS DictionaryDomain_Versio" +
                    "nCertainty, \r\n            T.VersionWorkflowInstanceID AS DictionaryDomain_Versio" +
                    "nWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS DictionaryDomain_Versio" +
                    "nUpdatedBy, \r\n            T.VersionDeletedBy AS DictionaryDomain_VersionDeletedB" +
                    "y, \r\n            T.VersionOwnerContactID AS DictionaryDomain_VersionOwnerContact" +
                    "ID, \r\n            T.VersionOwnerCompanyID AS DictionaryDomain_VersionOwnerCompan" +
                    "yID, \r\n            T.VersionUpdated AS DictionaryDomain_VersionUpdated, \r\n      " +
                    "      True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_Dict" +
                    "ionaryDomain AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryDomainAlias
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView454()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryDomainAlias", "\r\n    SELECT VALUE -- Constructing DictionaryDomainAlias\r\n        [NKD.Module.Bus" +
                    "inessObjects.DictionaryDomainAlias](T1.DictionaryDomainAlias_DomainAliasID, T1.D" +
                    "ictionaryDomainAlias_DomainID, T1.DictionaryDomainAlias_CustomDomainName, T1.Dic" +
                    "tionaryDomainAlias_FullDescription, T1.DictionaryDomainAlias_Thumbnail, T1.Dicti" +
                    "onaryDomainAlias_OriginalFileDataID, T1.DictionaryDomainAlias_Version, T1.Dictio" +
                    "naryDomainAlias_VersionAntecedentID, T1.DictionaryDomainAlias_VersionCertainty, " +
                    "T1.DictionaryDomainAlias_VersionWorkflowInstanceID, T1.DictionaryDomainAlias_Ver" +
                    "sionUpdatedBy, T1.DictionaryDomainAlias_VersionDeletedBy, T1.DictionaryDomainAli" +
                    "as_VersionOwnerContactID, T1.DictionaryDomainAlias_VersionOwnerCompanyID, T1.Dic" +
                    "tionaryDomainAlias_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.D" +
                    "omainAliasID AS DictionaryDomainAlias_DomainAliasID, \r\n            T.DomainID AS" +
                    " DictionaryDomainAlias_DomainID, \r\n            T.CustomDomainName AS DictionaryD" +
                    "omainAlias_CustomDomainName, \r\n            T.FullDescription AS DictionaryDomain" +
                    "Alias_FullDescription, \r\n            T.Thumbnail AS DictionaryDomainAlias_Thumbn" +
                    "ail, \r\n            T.OriginalFileDataID AS DictionaryDomainAlias_OriginalFileDat" +
                    "aID, \r\n            T.Version AS DictionaryDomainAlias_Version, \r\n            T.V" +
                    "ersionAntecedentID AS DictionaryDomainAlias_VersionAntecedentID, \r\n            T" +
                    ".VersionCertainty AS DictionaryDomainAlias_VersionCertainty, \r\n            T.Ver" +
                    "sionWorkflowInstanceID AS DictionaryDomainAlias_VersionWorkflowInstanceID, \r\n   " +
                    "         T.VersionUpdatedBy AS DictionaryDomainAlias_VersionUpdatedBy, \r\n       " +
                    "     T.VersionDeletedBy AS DictionaryDomainAlias_VersionDeletedBy, \r\n           " +
                    " T.VersionOwnerContactID AS DictionaryDomainAlias_VersionOwnerContactID, \r\n     " +
                    "       T.VersionOwnerCompanyID AS DictionaryDomainAlias_VersionOwnerCompanyID, \r" +
                    "\n            T.VersionUpdated AS DictionaryDomainAlias_VersionUpdated, \r\n       " +
                    "     True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_Dicti" +
                    "onaryDomainAlias AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryDrillBitTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView455()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2510);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryDrillBitTypes\r\n        [NKD.Module.");
            viewString.Append("BusinessObjects.DictionaryDrillBitType](T1.DictionaryDrillBitType_DrillBitTypeID");
            viewString.Append(", T1.DictionaryDrillBitType_StandardDrillBitTypeName, T1.DictionaryDrillBitType_");
            viewString.Append("CoalDrillBitTypeName, T1.DictionaryDrillBitType_GoldDrillBitTypeName, T1.Diction");
            viewString.Append("aryDrillBitType_CustomDrillBitTypeName, T1.DictionaryDrillBitType_Description, T");
            viewString.Append("1.DictionaryDrillBitType_FullDescription, T1.DictionaryDrillBitType_Thumbnail, T");
            viewString.Append("1.DictionaryDrillBitType_OriginalFileDataID, T1.DictionaryDrillBitType_Version, ");
            viewString.Append("T1.DictionaryDrillBitType_VersionAntecedentID, T1.DictionaryDrillBitType_Version");
            viewString.Append("Certainty, T1.DictionaryDrillBitType_VersionWorkflowInstanceID, T1.DictionaryDri");
            viewString.Append("llBitType_VersionUpdatedBy, T1.DictionaryDrillBitType_VersionDeletedBy, T1.Dicti");
            viewString.Append("onaryDrillBitType_VersionOwnerContactID, T1.DictionaryDrillBitType_VersionOwnerC");
            viewString.Append("ompanyID, T1.DictionaryDrillBitType_VersionUpdated)\r\n    FROM (\r\n        SELECT ");
            viewString.Append("\r\n            T.DrillBitTypeID AS DictionaryDrillBitType_DrillBitTypeID, \r\n     ");
            viewString.Append("       T.StandardDrillBitTypeName AS DictionaryDrillBitType_StandardDrillBitType");
            viewString.Append("Name, \r\n            T.CoalDrillBitTypeName AS DictionaryDrillBitType_CoalDrillBi");
            viewString.Append("tTypeName, \r\n            T.GoldDrillBitTypeName AS DictionaryDrillBitType_GoldDr");
            viewString.Append("illBitTypeName, \r\n            T.CustomDrillBitTypeName AS DictionaryDrillBitType");
            viewString.Append("_CustomDrillBitTypeName, \r\n            T.Description AS DictionaryDrillBitType_D");
            viewString.Append("escription, \r\n            T.FullDescription AS DictionaryDrillBitType_FullDescri");
            viewString.Append("ption, \r\n            T.Thumbnail AS DictionaryDrillBitType_Thumbnail, \r\n        ");
            viewString.Append("    T.OriginalFileDataID AS DictionaryDrillBitType_OriginalFileDataID, \r\n       ");
            viewString.Append("     T.Version AS DictionaryDrillBitType_Version, \r\n            T.VersionAnteced");
            viewString.Append("entID AS DictionaryDrillBitType_VersionAntecedentID, \r\n            T.VersionCert");
            viewString.Append("ainty AS DictionaryDrillBitType_VersionCertainty, \r\n            T.VersionWorkflo");
            viewString.Append("wInstanceID AS DictionaryDrillBitType_VersionWorkflowInstanceID, \r\n            T");
            viewString.Append(".VersionUpdatedBy AS DictionaryDrillBitType_VersionUpdatedBy, \r\n            T.Ve");
            viewString.Append("rsionDeletedBy AS DictionaryDrillBitType_VersionDeletedBy, \r\n            T.Versi");
            viewString.Append("onOwnerContactID AS DictionaryDrillBitType_VersionOwnerContactID, \r\n            ");
            viewString.Append("T.VersionOwnerCompanyID AS DictionaryDrillBitType_VersionOwnerCompanyID, \r\n     ");
            viewString.Append("       T.VersionUpdated AS DictionaryDrillBitType_VersionUpdated, \r\n            ");
            viewString.Append("True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_Dictionary");
            viewString.Append("DrillBitType AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryDrillBitTypes", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryDrillCasingTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView456()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2672);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryDrillCasingTypes\r\n        [NKD.Modu");
            viewString.Append("le.BusinessObjects.DictionaryDrillCasingType](T1.DictionaryDrillCasingType_Drill");
            viewString.Append("CasingTypeID, T1.DictionaryDrillCasingType_StandardDrillCasingTypeName, T1.Dicti");
            viewString.Append("onaryDrillCasingType_CoalDrillCasingTypeName, T1.DictionaryDrillCasingType_GoldD");
            viewString.Append("rillCasingTypeName, T1.DictionaryDrillCasingType_CustomDrillCasingTypeName, T1.D");
            viewString.Append("ictionaryDrillCasingType_Description, T1.DictionaryDrillCasingType_FullDescripti");
            viewString.Append("on, T1.DictionaryDrillCasingType_Thumbnail, T1.DictionaryDrillCasingType_Origina");
            viewString.Append("lFileDataID, T1.DictionaryDrillCasingType_Version, T1.DictionaryDrillCasingType_");
            viewString.Append("VersionAntecedentID, T1.DictionaryDrillCasingType_VersionCertainty, T1.Dictionar");
            viewString.Append("yDrillCasingType_VersionWorkflowInstanceID, T1.DictionaryDrillCasingType_Version");
            viewString.Append("UpdatedBy, T1.DictionaryDrillCasingType_VersionDeletedBy, T1.DictionaryDrillCasi");
            viewString.Append("ngType_VersionOwnerContactID, T1.DictionaryDrillCasingType_VersionOwnerCompanyID");
            viewString.Append(", T1.DictionaryDrillCasingType_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n   ");
            viewString.Append("         T.DrillCasingTypeID AS DictionaryDrillCasingType_DrillCasingTypeID, \r\n ");
            viewString.Append("           T.StandardDrillCasingTypeName AS DictionaryDrillCasingType_StandardDr");
            viewString.Append("illCasingTypeName, \r\n            T.CoalDrillCasingTypeName AS DictionaryDrillCas");
            viewString.Append("ingType_CoalDrillCasingTypeName, \r\n            T.GoldDrillCasingTypeName AS Dict");
            viewString.Append("ionaryDrillCasingType_GoldDrillCasingTypeName, \r\n            T.CustomDrillCasing");
            viewString.Append("TypeName AS DictionaryDrillCasingType_CustomDrillCasingTypeName, \r\n            T");
            viewString.Append(".Description AS DictionaryDrillCasingType_Description, \r\n            T.FullDescr");
            viewString.Append("iption AS DictionaryDrillCasingType_FullDescription, \r\n            T.Thumbnail A");
            viewString.Append("S DictionaryDrillCasingType_Thumbnail, \r\n            T.OriginalFileDataID AS Dic");
            viewString.Append("tionaryDrillCasingType_OriginalFileDataID, \r\n            T.Version AS Dictionary");
            viewString.Append("DrillCasingType_Version, \r\n            T.VersionAntecedentID AS DictionaryDrillC");
            viewString.Append("asingType_VersionAntecedentID, \r\n            T.VersionCertainty AS DictionaryDri");
            viewString.Append("llCasingType_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS Dict");
            viewString.Append("ionaryDrillCasingType_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedB");
            viewString.Append("y AS DictionaryDrillCasingType_VersionUpdatedBy, \r\n            T.VersionDeletedB");
            viewString.Append("y AS DictionaryDrillCasingType_VersionDeletedBy, \r\n            T.VersionOwnerCon");
            viewString.Append("tactID AS DictionaryDrillCasingType_VersionOwnerContactID, \r\n            T.Versi");
            viewString.Append("onOwnerCompanyID AS DictionaryDrillCasingType_VersionOwnerCompanyID, \r\n         ");
            viewString.Append("   T.VersionUpdated AS DictionaryDrillCasingType_VersionUpdated, \r\n            T");
            viewString.Append("rue AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryD");
            viewString.Append("rillCasingType AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryDrillCasingTypes", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryDrillFluids
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView457()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2402);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryDrillFluids\r\n        [NKD.Module.Bu");
            viewString.Append("sinessObjects.DictionaryDrillFluid](T1.DictionaryDrillFluid_DrillFluidID, T1.Dic");
            viewString.Append("tionaryDrillFluid_StandardDrillFluidName, T1.DictionaryDrillFluid_CoalDrillFluid");
            viewString.Append("Name, T1.DictionaryDrillFluid_GoldDrillFluidName, T1.DictionaryDrillFluid_Custom");
            viewString.Append("DrillFluidName, T1.DictionaryDrillFluid_Description, T1.DictionaryDrillFluid_Ful");
            viewString.Append("lDescription, T1.DictionaryDrillFluid_Thumbnail, T1.DictionaryDrillFluid_Origina");
            viewString.Append("lFileDataID, T1.DictionaryDrillFluid_Version, T1.DictionaryDrillFluid_VersionAnt");
            viewString.Append("ecedentID, T1.DictionaryDrillFluid_VersionCertainty, T1.DictionaryDrillFluid_Ver");
            viewString.Append("sionWorkflowInstanceID, T1.DictionaryDrillFluid_VersionUpdatedBy, T1.DictionaryD");
            viewString.Append("rillFluid_VersionDeletedBy, T1.DictionaryDrillFluid_VersionOwnerContactID, T1.Di");
            viewString.Append("ctionaryDrillFluid_VersionOwnerCompanyID, T1.DictionaryDrillFluid_VersionUpdated");
            viewString.Append(")\r\n    FROM (\r\n        SELECT \r\n            T.DrillFluidID AS DictionaryDrillFlu");
            viewString.Append("id_DrillFluidID, \r\n            T.StandardDrillFluidName AS DictionaryDrillFluid_");
            viewString.Append("StandardDrillFluidName, \r\n            T.CoalDrillFluidName AS DictionaryDrillFlu");
            viewString.Append("id_CoalDrillFluidName, \r\n            T.GoldDrillFluidName AS DictionaryDrillFlui");
            viewString.Append("d_GoldDrillFluidName, \r\n            T.CustomDrillFluidName AS DictionaryDrillFlu");
            viewString.Append("id_CustomDrillFluidName, \r\n            T.Description AS DictionaryDrillFluid_Des");
            viewString.Append("cription, \r\n            T.FullDescription AS DictionaryDrillFluid_FullDescriptio");
            viewString.Append("n, \r\n            T.Thumbnail AS DictionaryDrillFluid_Thumbnail, \r\n            T.");
            viewString.Append("OriginalFileDataID AS DictionaryDrillFluid_OriginalFileDataID, \r\n            T.V");
            viewString.Append("ersion AS DictionaryDrillFluid_Version, \r\n            T.VersionAntecedentID AS D");
            viewString.Append("ictionaryDrillFluid_VersionAntecedentID, \r\n            T.VersionCertainty AS Dic");
            viewString.Append("tionaryDrillFluid_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS");
            viewString.Append(" DictionaryDrillFluid_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedB");
            viewString.Append("y AS DictionaryDrillFluid_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS ");
            viewString.Append("DictionaryDrillFluid_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS ");
            viewString.Append("DictionaryDrillFluid_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyI");
            viewString.Append("D AS DictionaryDrillFluid_VersionOwnerCompanyID, \r\n            T.VersionUpdated ");
            viewString.Append("AS DictionaryDrillFluid_VersionUpdated, \r\n            True AS _from0\r\n        FR");
            viewString.Append("OM NKDModuleBusinessObjectsStoreContainer.X_DictionaryDrillFluid AS T\r\n    ) AS ");
            viewString.Append("T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryDrillFluids", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryDrillRigTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView458()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2510);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryDrillRigTypes\r\n        [NKD.Module.");
            viewString.Append("BusinessObjects.DictionaryDrillRigType](T1.DictionaryDrillRigType_DrillRigTypeID");
            viewString.Append(", T1.DictionaryDrillRigType_StandardDrillRigTypeName, T1.DictionaryDrillRigType_");
            viewString.Append("CoalDrillRigTypeName, T1.DictionaryDrillRigType_GoldDrillRigTypeName, T1.Diction");
            viewString.Append("aryDrillRigType_CustomDrillRigTypeName, T1.DictionaryDrillRigType_Description, T");
            viewString.Append("1.DictionaryDrillRigType_FullDescription, T1.DictionaryDrillRigType_Thumbnail, T");
            viewString.Append("1.DictionaryDrillRigType_OriginalFileDataID, T1.DictionaryDrillRigType_Version, ");
            viewString.Append("T1.DictionaryDrillRigType_VersionAntecedentID, T1.DictionaryDrillRigType_Version");
            viewString.Append("Certainty, T1.DictionaryDrillRigType_VersionWorkflowInstanceID, T1.DictionaryDri");
            viewString.Append("llRigType_VersionUpdatedBy, T1.DictionaryDrillRigType_VersionDeletedBy, T1.Dicti");
            viewString.Append("onaryDrillRigType_VersionOwnerContactID, T1.DictionaryDrillRigType_VersionOwnerC");
            viewString.Append("ompanyID, T1.DictionaryDrillRigType_VersionUpdated)\r\n    FROM (\r\n        SELECT ");
            viewString.Append("\r\n            T.DrillRigTypeID AS DictionaryDrillRigType_DrillRigTypeID, \r\n     ");
            viewString.Append("       T.StandardDrillRigTypeName AS DictionaryDrillRigType_StandardDrillRigType");
            viewString.Append("Name, \r\n            T.CoalDrillRigTypeName AS DictionaryDrillRigType_CoalDrillRi");
            viewString.Append("gTypeName, \r\n            T.GoldDrillRigTypeName AS DictionaryDrillRigType_GoldDr");
            viewString.Append("illRigTypeName, \r\n            T.CustomDrillRigTypeName AS DictionaryDrillRigType");
            viewString.Append("_CustomDrillRigTypeName, \r\n            T.Description AS DictionaryDrillRigType_D");
            viewString.Append("escription, \r\n            T.FullDescription AS DictionaryDrillRigType_FullDescri");
            viewString.Append("ption, \r\n            T.Thumbnail AS DictionaryDrillRigType_Thumbnail, \r\n        ");
            viewString.Append("    T.OriginalFileDataID AS DictionaryDrillRigType_OriginalFileDataID, \r\n       ");
            viewString.Append("     T.Version AS DictionaryDrillRigType_Version, \r\n            T.VersionAnteced");
            viewString.Append("entID AS DictionaryDrillRigType_VersionAntecedentID, \r\n            T.VersionCert");
            viewString.Append("ainty AS DictionaryDrillRigType_VersionCertainty, \r\n            T.VersionWorkflo");
            viewString.Append("wInstanceID AS DictionaryDrillRigType_VersionWorkflowInstanceID, \r\n            T");
            viewString.Append(".VersionUpdatedBy AS DictionaryDrillRigType_VersionUpdatedBy, \r\n            T.Ve");
            viewString.Append("rsionDeletedBy AS DictionaryDrillRigType_VersionDeletedBy, \r\n            T.Versi");
            viewString.Append("onOwnerContactID AS DictionaryDrillRigType_VersionOwnerContactID, \r\n            ");
            viewString.Append("T.VersionOwnerCompanyID AS DictionaryDrillRigType_VersionOwnerCompanyID, \r\n     ");
            viewString.Append("       T.VersionUpdated AS DictionaryDrillRigType_VersionUpdated, \r\n            ");
            viewString.Append("True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_Dictionary");
            viewString.Append("DrillRigType AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryDrillRigTypes", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryDrillSizes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView459()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2348);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryDrillSizes\r\n        [NKD.Module.Bus");
            viewString.Append("inessObjects.DictionaryDrillSize](T1.DictionaryDrillSize_DrillSizeID, T1.Diction");
            viewString.Append("aryDrillSize_StandardDrillSizeName, T1.DictionaryDrillSize_CoalDrillSizeName, T1");
            viewString.Append(".DictionaryDrillSize_GoldDrillSizeName, T1.DictionaryDrillSize_CustomDrillSizeNa");
            viewString.Append("me, T1.DictionaryDrillSize_Description, T1.DictionaryDrillSize_FullDescription, ");
            viewString.Append("T1.DictionaryDrillSize_Thumbnail, T1.DictionaryDrillSize_OriginalFileDataID, T1.");
            viewString.Append("DictionaryDrillSize_Version, T1.DictionaryDrillSize_VersionAntecedentID, T1.Dict");
            viewString.Append("ionaryDrillSize_VersionCertainty, T1.DictionaryDrillSize_VersionWorkflowInstance");
            viewString.Append("ID, T1.DictionaryDrillSize_VersionUpdatedBy, T1.DictionaryDrillSize_VersionDelet");
            viewString.Append("edBy, T1.DictionaryDrillSize_VersionOwnerContactID, T1.DictionaryDrillSize_Versi");
            viewString.Append("onOwnerCompanyID, T1.DictionaryDrillSize_VersionUpdated)\r\n    FROM (\r\n        SE");
            viewString.Append("LECT \r\n            T.DrillSizeID AS DictionaryDrillSize_DrillSizeID, \r\n         ");
            viewString.Append("   T.StandardDrillSizeName AS DictionaryDrillSize_StandardDrillSizeName, \r\n     ");
            viewString.Append("       T.CoalDrillSizeName AS DictionaryDrillSize_CoalDrillSizeName, \r\n         ");
            viewString.Append("   T.GoldDrillSizeName AS DictionaryDrillSize_GoldDrillSizeName, \r\n            T");
            viewString.Append(".CustomDrillSizeName AS DictionaryDrillSize_CustomDrillSizeName, \r\n            T");
            viewString.Append(".Description AS DictionaryDrillSize_Description, \r\n            T.FullDescription");
            viewString.Append(" AS DictionaryDrillSize_FullDescription, \r\n            T.Thumbnail AS Dictionary");
            viewString.Append("DrillSize_Thumbnail, \r\n            T.OriginalFileDataID AS DictionaryDrillSize_O");
            viewString.Append("riginalFileDataID, \r\n            T.Version AS DictionaryDrillSize_Version, \r\n   ");
            viewString.Append("         T.VersionAntecedentID AS DictionaryDrillSize_VersionAntecedentID, \r\n   ");
            viewString.Append("         T.VersionCertainty AS DictionaryDrillSize_VersionCertainty, \r\n         ");
            viewString.Append("   T.VersionWorkflowInstanceID AS DictionaryDrillSize_VersionWorkflowInstanceID,");
            viewString.Append(" \r\n            T.VersionUpdatedBy AS DictionaryDrillSize_VersionUpdatedBy, \r\n   ");
            viewString.Append("         T.VersionDeletedBy AS DictionaryDrillSize_VersionDeletedBy, \r\n         ");
            viewString.Append("   T.VersionOwnerContactID AS DictionaryDrillSize_VersionOwnerContactID, \r\n     ");
            viewString.Append("       T.VersionOwnerCompanyID AS DictionaryDrillSize_VersionOwnerCompanyID, \r\n ");
            viewString.Append("           T.VersionUpdated AS DictionaryDrillSize_VersionUpdated, \r\n           ");
            viewString.Append(" True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_Dictionar");
            viewString.Append("yDrillSize AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryDrillSizes", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryEstimatedStrengths
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView460()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2780);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryEstimatedStrengths\r\n        [NKD.Mo");
            viewString.Append("dule.BusinessObjects.DictionaryEstimatedStrength](T1.DictionaryEstimatedStrength");
            viewString.Append("_EstimatedStrengthID, T1.DictionaryEstimatedStrength_StandardEstimatedStrengthNa");
            viewString.Append("me, T1.DictionaryEstimatedStrength_CoalEstimatedStrengthName, T1.DictionaryEstim");
            viewString.Append("atedStrength_GoldEstimatedStrengthName, T1.DictionaryEstimatedStrength_CustomEst");
            viewString.Append("imatedStrengthName, T1.DictionaryEstimatedStrength_Description, T1.DictionaryEst");
            viewString.Append("imatedStrength_FullDescription, T1.DictionaryEstimatedStrength_Thumbnail, T1.Dic");
            viewString.Append("tionaryEstimatedStrength_OriginalFileDataID, T1.DictionaryEstimatedStrength_Vers");
            viewString.Append("ion, T1.DictionaryEstimatedStrength_VersionAntecedentID, T1.DictionaryEstimatedS");
            viewString.Append("trength_VersionCertainty, T1.DictionaryEstimatedStrength_VersionWorkflowInstance");
            viewString.Append("ID, T1.DictionaryEstimatedStrength_VersionUpdatedBy, T1.DictionaryEstimatedStren");
            viewString.Append("gth_VersionDeletedBy, T1.DictionaryEstimatedStrength_VersionOwnerContactID, T1.D");
            viewString.Append("ictionaryEstimatedStrength_VersionOwnerCompanyID, T1.DictionaryEstimatedStrength");
            viewString.Append("_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.EstimatedStrengthID");
            viewString.Append(" AS DictionaryEstimatedStrength_EstimatedStrengthID, \r\n            T.StandardEst");
            viewString.Append("imatedStrengthName AS DictionaryEstimatedStrength_StandardEstimatedStrengthName,");
            viewString.Append(" \r\n            T.CoalEstimatedStrengthName AS DictionaryEstimatedStrength_CoalEs");
            viewString.Append("timatedStrengthName, \r\n            T.GoldEstimatedStrengthName AS DictionaryEsti");
            viewString.Append("matedStrength_GoldEstimatedStrengthName, \r\n            T.CustomEstimatedStrength");
            viewString.Append("Name AS DictionaryEstimatedStrength_CustomEstimatedStrengthName, \r\n            T");
            viewString.Append(".Description AS DictionaryEstimatedStrength_Description, \r\n            T.FullDes");
            viewString.Append("cription AS DictionaryEstimatedStrength_FullDescription, \r\n            T.Thumbna");
            viewString.Append("il AS DictionaryEstimatedStrength_Thumbnail, \r\n            T.OriginalFileDataID ");
            viewString.Append("AS DictionaryEstimatedStrength_OriginalFileDataID, \r\n            T.Version AS Di");
            viewString.Append("ctionaryEstimatedStrength_Version, \r\n            T.VersionAntecedentID AS Dictio");
            viewString.Append("naryEstimatedStrength_VersionAntecedentID, \r\n            T.VersionCertainty AS D");
            viewString.Append("ictionaryEstimatedStrength_VersionCertainty, \r\n            T.VersionWorkflowInst");
            viewString.Append("anceID AS DictionaryEstimatedStrength_VersionWorkflowInstanceID, \r\n            T");
            viewString.Append(".VersionUpdatedBy AS DictionaryEstimatedStrength_VersionUpdatedBy, \r\n           ");
            viewString.Append(" T.VersionDeletedBy AS DictionaryEstimatedStrength_VersionDeletedBy, \r\n         ");
            viewString.Append("   T.VersionOwnerContactID AS DictionaryEstimatedStrength_VersionOwnerContactID,");
            viewString.Append(" \r\n            T.VersionOwnerCompanyID AS DictionaryEstimatedStrength_VersionOwn");
            viewString.Append("erCompanyID, \r\n            T.VersionUpdated AS DictionaryEstimatedStrength_Versi");
            viewString.Append("onUpdated, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjectsSt");
            viewString.Append("oreContainer.X_DictionaryEstimatedStrength AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryEstimatedStrengths", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryFailureModes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView461()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2456);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryFailureModes\r\n        [NKD.Module.B");
            viewString.Append("usinessObjects.DictionaryFailureMode](T1.DictionaryFailureMode_FailureModeID, T1");
            viewString.Append(".DictionaryFailureMode_StandardFailureModeName, T1.DictionaryFailureMode_CoalFai");
            viewString.Append("lureModeName, T1.DictionaryFailureMode_GoldFailureModeName, T1.DictionaryFailure");
            viewString.Append("Mode_CustomFailureModeName, T1.DictionaryFailureMode_Description, T1.DictionaryF");
            viewString.Append("ailureMode_FullDescription, T1.DictionaryFailureMode_Thumbnail, T1.DictionaryFai");
            viewString.Append("lureMode_OriginalFileDataID, T1.DictionaryFailureMode_Version, T1.DictionaryFail");
            viewString.Append("ureMode_VersionAntecedentID, T1.DictionaryFailureMode_VersionCertainty, T1.Dicti");
            viewString.Append("onaryFailureMode_VersionWorkflowInstanceID, T1.DictionaryFailureMode_VersionUpda");
            viewString.Append("tedBy, T1.DictionaryFailureMode_VersionDeletedBy, T1.DictionaryFailureMode_Versi");
            viewString.Append("onOwnerContactID, T1.DictionaryFailureMode_VersionOwnerCompanyID, T1.DictionaryF");
            viewString.Append("ailureMode_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.FailureMo");
            viewString.Append("deID AS DictionaryFailureMode_FailureModeID, \r\n            T.StandardFailureMode");
            viewString.Append("Name AS DictionaryFailureMode_StandardFailureModeName, \r\n            T.CoalFailu");
            viewString.Append("reModeName AS DictionaryFailureMode_CoalFailureModeName, \r\n            T.GoldFai");
            viewString.Append("lureModeName AS DictionaryFailureMode_GoldFailureModeName, \r\n            T.Custo");
            viewString.Append("mFailureModeName AS DictionaryFailureMode_CustomFailureModeName, \r\n            T");
            viewString.Append(".Description AS DictionaryFailureMode_Description, \r\n            T.FullDescripti");
            viewString.Append("on AS DictionaryFailureMode_FullDescription, \r\n            T.Thumbnail AS Dictio");
            viewString.Append("naryFailureMode_Thumbnail, \r\n            T.OriginalFileDataID AS DictionaryFailu");
            viewString.Append("reMode_OriginalFileDataID, \r\n            T.Version AS DictionaryFailureMode_Vers");
            viewString.Append("ion, \r\n            T.VersionAntecedentID AS DictionaryFailureMode_VersionAnteced");
            viewString.Append("entID, \r\n            T.VersionCertainty AS DictionaryFailureMode_VersionCertaint");
            viewString.Append("y, \r\n            T.VersionWorkflowInstanceID AS DictionaryFailureMode_VersionWor");
            viewString.Append("kflowInstanceID, \r\n            T.VersionUpdatedBy AS DictionaryFailureMode_Versi");
            viewString.Append("onUpdatedBy, \r\n            T.VersionDeletedBy AS DictionaryFailureMode_VersionDe");
            viewString.Append("letedBy, \r\n            T.VersionOwnerContactID AS DictionaryFailureMode_VersionO");
            viewString.Append("wnerContactID, \r\n            T.VersionOwnerCompanyID AS DictionaryFailureMode_Ve");
            viewString.Append("rsionOwnerCompanyID, \r\n            T.VersionUpdated AS DictionaryFailureMode_Ver");
            viewString.Append("sionUpdated, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjects");
            viewString.Append("StoreContainer.X_DictionaryFailureMode AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryFailureModes", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryFileTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView462()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2273);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryFileTypes\r\n        [NKD.Module.Busi");
            viewString.Append("nessObjects.DictionaryFileType](T1.DictionaryFileType_FileTypeID, T1.DictionaryF");
            viewString.Append("ileType_ParentFileTypeID, T1.DictionaryFileType_CompanyID, T1.DictionaryFileType");
            viewString.Append("_StandardFileTypeName, T1.DictionaryFileType_CustomFileTypeName, T1.DictionaryFi");
            viewString.Append("leType_Description, T1.DictionaryFileType_FullDescription, T1.DictionaryFileType");
            viewString.Append("_Thumbnail, T1.DictionaryFileType_OriginalFileDataID, T1.DictionaryFileType_Vers");
            viewString.Append("ion, T1.DictionaryFileType_VersionAntecedentID, T1.DictionaryFileType_VersionCer");
            viewString.Append("tainty, T1.DictionaryFileType_VersionWorkflowInstanceID, T1.DictionaryFileType_V");
            viewString.Append("ersionUpdatedBy, T1.DictionaryFileType_VersionDeletedBy, T1.DictionaryFileType_V");
            viewString.Append("ersionOwnerContactID, T1.DictionaryFileType_VersionOwnerCompanyID, T1.Dictionary");
            viewString.Append("FileType_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.FileTypeID ");
            viewString.Append("AS DictionaryFileType_FileTypeID, \r\n            T.ParentFileTypeID AS Dictionary");
            viewString.Append("FileType_ParentFileTypeID, \r\n            T.CompanyID AS DictionaryFileType_Compa");
            viewString.Append("nyID, \r\n            T.StandardFileTypeName AS DictionaryFileType_StandardFileTyp");
            viewString.Append("eName, \r\n            T.CustomFileTypeName AS DictionaryFileType_CustomFileTypeNa");
            viewString.Append("me, \r\n            T.Description AS DictionaryFileType_Description, \r\n           ");
            viewString.Append(" T.FullDescription AS DictionaryFileType_FullDescription, \r\n            T.Thumbn");
            viewString.Append("ail AS DictionaryFileType_Thumbnail, \r\n            T.OriginalFileDataID AS Dicti");
            viewString.Append("onaryFileType_OriginalFileDataID, \r\n            T.Version AS DictionaryFileType_");
            viewString.Append("Version, \r\n            T.VersionAntecedentID AS DictionaryFileType_VersionAntece");
            viewString.Append("dentID, \r\n            T.VersionCertainty AS DictionaryFileType_VersionCertainty,");
            viewString.Append(" \r\n            T.VersionWorkflowInstanceID AS DictionaryFileType_VersionWorkflow");
            viewString.Append("InstanceID, \r\n            T.VersionUpdatedBy AS DictionaryFileType_VersionUpdate");
            viewString.Append("dBy, \r\n            T.VersionDeletedBy AS DictionaryFileType_VersionDeletedBy, \r\n");
            viewString.Append("            T.VersionOwnerContactID AS DictionaryFileType_VersionOwnerContactID,");
            viewString.Append(" \r\n            T.VersionOwnerCompanyID AS DictionaryFileType_VersionOwnerCompany");
            viewString.Append("ID, \r\n            T.VersionUpdated AS DictionaryFileType_VersionUpdated, \r\n     ");
            viewString.Append("       True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_Dic");
            viewString.Append("tionaryFileType AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryFileTypes", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryFlowTestTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView463()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2510);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryFlowTestTypes\r\n        [NKD.Module.");
            viewString.Append("BusinessObjects.DictionaryFlowTestType](T1.DictionaryFlowTestType_FlowTestTypeID");
            viewString.Append(", T1.DictionaryFlowTestType_StandardFlowTestTypeName, T1.DictionaryFlowTestType_");
            viewString.Append("CoalFlowTestTypeName, T1.DictionaryFlowTestType_GoldFlowTestTypeName, T1.Diction");
            viewString.Append("aryFlowTestType_CustomFlowTestTypeName, T1.DictionaryFlowTestType_Description, T");
            viewString.Append("1.DictionaryFlowTestType_FullDescription, T1.DictionaryFlowTestType_Thumbnail, T");
            viewString.Append("1.DictionaryFlowTestType_OriginalFileDataID, T1.DictionaryFlowTestType_Version, ");
            viewString.Append("T1.DictionaryFlowTestType_VersionAntecedentID, T1.DictionaryFlowTestType_Version");
            viewString.Append("Certainty, T1.DictionaryFlowTestType_VersionWorkflowInstanceID, T1.DictionaryFlo");
            viewString.Append("wTestType_VersionUpdatedBy, T1.DictionaryFlowTestType_VersionDeletedBy, T1.Dicti");
            viewString.Append("onaryFlowTestType_VersionOwnerContactID, T1.DictionaryFlowTestType_VersionOwnerC");
            viewString.Append("ompanyID, T1.DictionaryFlowTestType_VersionUpdated)\r\n    FROM (\r\n        SELECT ");
            viewString.Append("\r\n            T.FlowTestTypeID AS DictionaryFlowTestType_FlowTestTypeID, \r\n     ");
            viewString.Append("       T.StandardFlowTestTypeName AS DictionaryFlowTestType_StandardFlowTestType");
            viewString.Append("Name, \r\n            T.CoalFlowTestTypeName AS DictionaryFlowTestType_CoalFlowTes");
            viewString.Append("tTypeName, \r\n            T.GoldFlowTestTypeName AS DictionaryFlowTestType_GoldFl");
            viewString.Append("owTestTypeName, \r\n            T.CustomFlowTestTypeName AS DictionaryFlowTestType");
            viewString.Append("_CustomFlowTestTypeName, \r\n            T.Description AS DictionaryFlowTestType_D");
            viewString.Append("escription, \r\n            T.FullDescription AS DictionaryFlowTestType_FullDescri");
            viewString.Append("ption, \r\n            T.Thumbnail AS DictionaryFlowTestType_Thumbnail, \r\n        ");
            viewString.Append("    T.OriginalFileDataID AS DictionaryFlowTestType_OriginalFileDataID, \r\n       ");
            viewString.Append("     T.Version AS DictionaryFlowTestType_Version, \r\n            T.VersionAnteced");
            viewString.Append("entID AS DictionaryFlowTestType_VersionAntecedentID, \r\n            T.VersionCert");
            viewString.Append("ainty AS DictionaryFlowTestType_VersionCertainty, \r\n            T.VersionWorkflo");
            viewString.Append("wInstanceID AS DictionaryFlowTestType_VersionWorkflowInstanceID, \r\n            T");
            viewString.Append(".VersionUpdatedBy AS DictionaryFlowTestType_VersionUpdatedBy, \r\n            T.Ve");
            viewString.Append("rsionDeletedBy AS DictionaryFlowTestType_VersionDeletedBy, \r\n            T.Versi");
            viewString.Append("onOwnerContactID AS DictionaryFlowTestType_VersionOwnerContactID, \r\n            ");
            viewString.Append("T.VersionOwnerCompanyID AS DictionaryFlowTestType_VersionOwnerCompanyID, \r\n     ");
            viewString.Append("       T.VersionUpdated AS DictionaryFlowTestType_VersionUpdated, \r\n            ");
            viewString.Append("True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_Dictionary");
            viewString.Append("FlowTestType AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryFlowTestTypes", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryGasDetecteds
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView464()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2456);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryGasDetecteds\r\n        [NKD.Module.B");
            viewString.Append("usinessObjects.DictionaryGasDetected](T1.DictionaryGasDetected_GasDetectedID, T1");
            viewString.Append(".DictionaryGasDetected_StandardGasDetectedName, T1.DictionaryGasDetected_CoalGas");
            viewString.Append("DetectedName, T1.DictionaryGasDetected_GoldGasDetectedName, T1.DictionaryGasDete");
            viewString.Append("cted_CustomGasDetectedName, T1.DictionaryGasDetected_Description, T1.DictionaryG");
            viewString.Append("asDetected_FullDescription, T1.DictionaryGasDetected_Thumbnail, T1.DictionaryGas");
            viewString.Append("Detected_OriginalFileDataID, T1.DictionaryGasDetected_Version, T1.DictionaryGasD");
            viewString.Append("etected_VersionAntecedentID, T1.DictionaryGasDetected_VersionCertainty, T1.Dicti");
            viewString.Append("onaryGasDetected_VersionWorkflowInstanceID, T1.DictionaryGasDetected_VersionUpda");
            viewString.Append("tedBy, T1.DictionaryGasDetected_VersionDeletedBy, T1.DictionaryGasDetected_Versi");
            viewString.Append("onOwnerContactID, T1.DictionaryGasDetected_VersionOwnerCompanyID, T1.DictionaryG");
            viewString.Append("asDetected_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.GasDetect");
            viewString.Append("edID AS DictionaryGasDetected_GasDetectedID, \r\n            T.StandardGasDetected");
            viewString.Append("Name AS DictionaryGasDetected_StandardGasDetectedName, \r\n            T.CoalGasDe");
            viewString.Append("tectedName AS DictionaryGasDetected_CoalGasDetectedName, \r\n            T.GoldGas");
            viewString.Append("DetectedName AS DictionaryGasDetected_GoldGasDetectedName, \r\n            T.Custo");
            viewString.Append("mGasDetectedName AS DictionaryGasDetected_CustomGasDetectedName, \r\n            T");
            viewString.Append(".Description AS DictionaryGasDetected_Description, \r\n            T.FullDescripti");
            viewString.Append("on AS DictionaryGasDetected_FullDescription, \r\n            T.Thumbnail AS Dictio");
            viewString.Append("naryGasDetected_Thumbnail, \r\n            T.OriginalFileDataID AS DictionaryGasDe");
            viewString.Append("tected_OriginalFileDataID, \r\n            T.Version AS DictionaryGasDetected_Vers");
            viewString.Append("ion, \r\n            T.VersionAntecedentID AS DictionaryGasDetected_VersionAnteced");
            viewString.Append("entID, \r\n            T.VersionCertainty AS DictionaryGasDetected_VersionCertaint");
            viewString.Append("y, \r\n            T.VersionWorkflowInstanceID AS DictionaryGasDetected_VersionWor");
            viewString.Append("kflowInstanceID, \r\n            T.VersionUpdatedBy AS DictionaryGasDetected_Versi");
            viewString.Append("onUpdatedBy, \r\n            T.VersionDeletedBy AS DictionaryGasDetected_VersionDe");
            viewString.Append("letedBy, \r\n            T.VersionOwnerContactID AS DictionaryGasDetected_VersionO");
            viewString.Append("wnerContactID, \r\n            T.VersionOwnerCompanyID AS DictionaryGasDetected_Ve");
            viewString.Append("rsionOwnerCompanyID, \r\n            T.VersionUpdated AS DictionaryGasDetected_Ver");
            viewString.Append("sionUpdated, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjects");
            viewString.Append("StoreContainer.X_DictionaryGasDetected AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryGasDetecteds", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryGeodeticDatums
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView465()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2564);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryGeodeticDatums\r\n        [NKD.Module");
            viewString.Append(".BusinessObjects.DictionaryGeodeticDatum](T1.DictionaryGeodeticDatum_GeodeticDat");
            viewString.Append("umID, T1.DictionaryGeodeticDatum_StandardGeodeticDatumName, T1.DictionaryGeodeti");
            viewString.Append("cDatum_CoalGeodeticDatumName, T1.DictionaryGeodeticDatum_GoldGeodeticDatumName, ");
            viewString.Append("T1.DictionaryGeodeticDatum_CustomGeodeticDatumName, T1.DictionaryGeodeticDatum_D");
            viewString.Append("escription, T1.DictionaryGeodeticDatum_FullDescription, T1.DictionaryGeodeticDat");
            viewString.Append("um_Thumbnail, T1.DictionaryGeodeticDatum_OriginalFileDataID, T1.DictionaryGeodet");
            viewString.Append("icDatum_Version, T1.DictionaryGeodeticDatum_VersionAntecedentID, T1.DictionaryGe");
            viewString.Append("odeticDatum_VersionCertainty, T1.DictionaryGeodeticDatum_VersionWorkflowInstance");
            viewString.Append("ID, T1.DictionaryGeodeticDatum_VersionUpdatedBy, T1.DictionaryGeodeticDatum_Vers");
            viewString.Append("ionDeletedBy, T1.DictionaryGeodeticDatum_VersionOwnerContactID, T1.DictionaryGeo");
            viewString.Append("deticDatum_VersionOwnerCompanyID, T1.DictionaryGeodeticDatum_VersionUpdated)\r\n  ");
            viewString.Append("  FROM (\r\n        SELECT \r\n            T.GeodeticDatumID AS DictionaryGeodeticDa");
            viewString.Append("tum_GeodeticDatumID, \r\n            T.StandardGeodeticDatumName AS DictionaryGeod");
            viewString.Append("eticDatum_StandardGeodeticDatumName, \r\n            T.CoalGeodeticDatumName AS Di");
            viewString.Append("ctionaryGeodeticDatum_CoalGeodeticDatumName, \r\n            T.GoldGeodeticDatumNa");
            viewString.Append("me AS DictionaryGeodeticDatum_GoldGeodeticDatumName, \r\n            T.CustomGeode");
            viewString.Append("ticDatumName AS DictionaryGeodeticDatum_CustomGeodeticDatumName, \r\n            T");
            viewString.Append(".Description AS DictionaryGeodeticDatum_Description, \r\n            T.FullDescrip");
            viewString.Append("tion AS DictionaryGeodeticDatum_FullDescription, \r\n            T.Thumbnail AS Di");
            viewString.Append("ctionaryGeodeticDatum_Thumbnail, \r\n            T.OriginalFileDataID AS Dictionar");
            viewString.Append("yGeodeticDatum_OriginalFileDataID, \r\n            T.Version AS DictionaryGeodetic");
            viewString.Append("Datum_Version, \r\n            T.VersionAntecedentID AS DictionaryGeodeticDatum_Ve");
            viewString.Append("rsionAntecedentID, \r\n            T.VersionCertainty AS DictionaryGeodeticDatum_V");
            viewString.Append("ersionCertainty, \r\n            T.VersionWorkflowInstanceID AS DictionaryGeodetic");
            viewString.Append("Datum_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS DictionaryG");
            viewString.Append("eodeticDatum_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS DictionaryGeo");
            viewString.Append("deticDatum_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS Dictionary");
            viewString.Append("GeodeticDatum_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS Di");
            viewString.Append("ctionaryGeodeticDatum_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS D");
            viewString.Append("ictionaryGeodeticDatum_VersionUpdated, \r\n            True AS _from0\r\n        FRO");
            viewString.Append("M NKDModuleBusinessObjectsStoreContainer.X_DictionaryGeodeticDatum AS T\r\n    ) A");
            viewString.Append("S T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryGeodeticDatums", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryGeophysicalLogTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView466()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2834);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryGeophysicalLogTypes\r\n        [NKD.M");
            viewString.Append("odule.BusinessObjects.DictionaryGeophysicalLogType](T1.DictionaryGeophysicalLogT");
            viewString.Append("ype_GeophysicalLogTypeID, T1.DictionaryGeophysicalLogType_StandardGeophysicalLog");
            viewString.Append("TypeName, T1.DictionaryGeophysicalLogType_CoalGeophysicalLogTypeName, T1.Diction");
            viewString.Append("aryGeophysicalLogType_GoldGeophysicalLogTypeName, T1.DictionaryGeophysicalLogTyp");
            viewString.Append("e_CustomGeophysicalLogTypeName, T1.DictionaryGeophysicalLogType_Description, T1.");
            viewString.Append("DictionaryGeophysicalLogType_FullDescription, T1.DictionaryGeophysicalLogType_Th");
            viewString.Append("umbnail, T1.DictionaryGeophysicalLogType_OriginalFileDataID, T1.DictionaryGeophy");
            viewString.Append("sicalLogType_Version, T1.DictionaryGeophysicalLogType_VersionAntecedentID, T1.Di");
            viewString.Append("ctionaryGeophysicalLogType_VersionCertainty, T1.DictionaryGeophysicalLogType_Ver");
            viewString.Append("sionWorkflowInstanceID, T1.DictionaryGeophysicalLogType_VersionUpdatedBy, T1.Dic");
            viewString.Append("tionaryGeophysicalLogType_VersionDeletedBy, T1.DictionaryGeophysicalLogType_Vers");
            viewString.Append("ionOwnerContactID, T1.DictionaryGeophysicalLogType_VersionOwnerCompanyID, T1.Dic");
            viewString.Append("tionaryGeophysicalLogType_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n        ");
            viewString.Append("    T.GeophysicalLogTypeID AS DictionaryGeophysicalLogType_GeophysicalLogTypeID,");
            viewString.Append(" \r\n            T.StandardGeophysicalLogTypeName AS DictionaryGeophysicalLogType_");
            viewString.Append("StandardGeophysicalLogTypeName, \r\n            T.CoalGeophysicalLogTypeName AS Di");
            viewString.Append("ctionaryGeophysicalLogType_CoalGeophysicalLogTypeName, \r\n            T.GoldGeoph");
            viewString.Append("ysicalLogTypeName AS DictionaryGeophysicalLogType_GoldGeophysicalLogTypeName, \r\n");
            viewString.Append("            T.CustomGeophysicalLogTypeName AS DictionaryGeophysicalLogType_Custo");
            viewString.Append("mGeophysicalLogTypeName, \r\n            T.Description AS DictionaryGeophysicalLog");
            viewString.Append("Type_Description, \r\n            T.FullDescription AS DictionaryGeophysicalLogTyp");
            viewString.Append("e_FullDescription, \r\n            T.Thumbnail AS DictionaryGeophysicalLogType_Thu");
            viewString.Append("mbnail, \r\n            T.OriginalFileDataID AS DictionaryGeophysicalLogType_Origi");
            viewString.Append("nalFileDataID, \r\n            T.Version AS DictionaryGeophysicalLogType_Version, ");
            viewString.Append("\r\n            T.VersionAntecedentID AS DictionaryGeophysicalLogType_VersionAntec");
            viewString.Append("edentID, \r\n            T.VersionCertainty AS DictionaryGeophysicalLogType_Versio");
            viewString.Append("nCertainty, \r\n            T.VersionWorkflowInstanceID AS DictionaryGeophysicalLo");
            viewString.Append("gType_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS DictionaryG");
            viewString.Append("eophysicalLogType_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS Dictiona");
            viewString.Append("ryGeophysicalLogType_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS ");
            viewString.Append("DictionaryGeophysicalLogType_VersionOwnerContactID, \r\n            T.VersionOwner");
            viewString.Append("CompanyID AS DictionaryGeophysicalLogType_VersionOwnerCompanyID, \r\n            T");
            viewString.Append(".VersionUpdated AS DictionaryGeophysicalLogType_VersionUpdated, \r\n            Tr");
            viewString.Append("ue AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryGe");
            viewString.Append("ophysicalLogType AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryGeophysicalLogTypes", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryGroups
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView467()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2132);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryGroups\r\n        [NKD.Module.Busines");
            viewString.Append("sObjects.DictionaryGroup](T1.DictionaryGroup_GroupID, T1.DictionaryGroup_Standar");
            viewString.Append("dGroupName, T1.DictionaryGroup_CoalGroupName, T1.DictionaryGroup_GoldGroupName, ");
            viewString.Append("T1.DictionaryGroup_CustomGroupName, T1.DictionaryGroup_Description, T1.Dictionar");
            viewString.Append("yGroup_FullDescription, T1.DictionaryGroup_Thumbnail, T1.DictionaryGroup_Origina");
            viewString.Append("lFileDataID, T1.DictionaryGroup_Version, T1.DictionaryGroup_VersionAntecedentID,");
            viewString.Append(" T1.DictionaryGroup_VersionCertainty, T1.DictionaryGroup_VersionWorkflowInstance");
            viewString.Append("ID, T1.DictionaryGroup_VersionUpdatedBy, T1.DictionaryGroup_VersionDeletedBy, T1");
            viewString.Append(".DictionaryGroup_VersionOwnerContactID, T1.DictionaryGroup_VersionOwnerCompanyID");
            viewString.Append(", T1.DictionaryGroup_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T");
            viewString.Append(".GroupID AS DictionaryGroup_GroupID, \r\n            T.StandardGroupName AS Dictio");
            viewString.Append("naryGroup_StandardGroupName, \r\n            T.CoalGroupName AS DictionaryGroup_Co");
            viewString.Append("alGroupName, \r\n            T.GoldGroupName AS DictionaryGroup_GoldGroupName, \r\n ");
            viewString.Append("           T.CustomGroupName AS DictionaryGroup_CustomGroupName, \r\n            T");
            viewString.Append(".Description AS DictionaryGroup_Description, \r\n            T.FullDescription AS ");
            viewString.Append("DictionaryGroup_FullDescription, \r\n            T.Thumbnail AS DictionaryGroup_Th");
            viewString.Append("umbnail, \r\n            T.OriginalFileDataID AS DictionaryGroup_OriginalFileDataI");
            viewString.Append("D, \r\n            T.Version AS DictionaryGroup_Version, \r\n            T.VersionAn");
            viewString.Append("tecedentID AS DictionaryGroup_VersionAntecedentID, \r\n            T.VersionCertai");
            viewString.Append("nty AS DictionaryGroup_VersionCertainty, \r\n            T.VersionWorkflowInstance");
            viewString.Append("ID AS DictionaryGroup_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedB");
            viewString.Append("y AS DictionaryGroup_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS Dicti");
            viewString.Append("onaryGroup_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS Dictionary");
            viewString.Append("Group_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS Dictionary");
            viewString.Append("Group_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS DictionaryGroup_V");
            viewString.Append("ersionUpdated, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjec");
            viewString.Append("tsStoreContainer.X_DictionaryGroup AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryGroups", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryGroupMemberships
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView468()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2183);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryGroupMemberships\r\n        [NKD.Modu");
            viewString.Append("le.BusinessObjects.DictionaryGroupMembership](T1.DictionaryGroupMembership_Group");
            viewString.Append("MembershipID, T1.DictionaryGroupMembership_ParentGroupID, T1.DictionaryGroupMemb");
            viewString.Append("ership_ChildGroupID, T1.DictionaryGroupMembership_FullDescription, T1.Dictionary");
            viewString.Append("GroupMembership_Thumbnail, T1.DictionaryGroupMembership_OriginalFileDataID, T1.D");
            viewString.Append("ictionaryGroupMembership_Version, T1.DictionaryGroupMembership_VersionAntecedent");
            viewString.Append("ID, T1.DictionaryGroupMembership_VersionCertainty, T1.DictionaryGroupMembership_");
            viewString.Append("VersionWorkflowInstanceID, T1.DictionaryGroupMembership_VersionUpdatedBy, T1.Dic");
            viewString.Append("tionaryGroupMembership_VersionDeletedBy, T1.DictionaryGroupMembership_VersionOwn");
            viewString.Append("erContactID, T1.DictionaryGroupMembership_VersionOwnerCompanyID, T1.DictionaryGr");
            viewString.Append("oupMembership_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.GroupM");
            viewString.Append("embershipID AS DictionaryGroupMembership_GroupMembershipID, \r\n            T.Pare");
            viewString.Append("ntGroupID AS DictionaryGroupMembership_ParentGroupID, \r\n            T.ChildGroup");
            viewString.Append("ID AS DictionaryGroupMembership_ChildGroupID, \r\n            T.FullDescription AS");
            viewString.Append(" DictionaryGroupMembership_FullDescription, \r\n            T.Thumbnail AS Diction");
            viewString.Append("aryGroupMembership_Thumbnail, \r\n            T.OriginalFileDataID AS DictionaryGr");
            viewString.Append("oupMembership_OriginalFileDataID, \r\n            T.Version AS DictionaryGroupMemb");
            viewString.Append("ership_Version, \r\n            T.VersionAntecedentID AS DictionaryGroupMembership");
            viewString.Append("_VersionAntecedentID, \r\n            T.VersionCertainty AS DictionaryGroupMembers");
            viewString.Append("hip_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS DictionaryGro");
            viewString.Append("upMembership_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS Dict");
            viewString.Append("ionaryGroupMembership_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS Dict");
            viewString.Append("ionaryGroupMembership_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS");
            viewString.Append(" DictionaryGroupMembership_VersionOwnerContactID, \r\n            T.VersionOwnerCo");
            viewString.Append("mpanyID AS DictionaryGroupMembership_VersionOwnerCompanyID, \r\n            T.Vers");
            viewString.Append("ionUpdated AS DictionaryGroupMembership_VersionUpdated, \r\n            True AS _f");
            viewString.Append("rom0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryGroupMembe");
            viewString.Append("rship AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryGroupMemberships", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryHeightDatums
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView469()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2456);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryHeightDatums\r\n        [NKD.Module.B");
            viewString.Append("usinessObjects.DictionaryHeightDatum](T1.DictionaryHeightDatum_HeightDatumID, T1");
            viewString.Append(".DictionaryHeightDatum_StandardHeightDatumName, T1.DictionaryHeightDatum_CoalHei");
            viewString.Append("ghtDatumName, T1.DictionaryHeightDatum_GoldHeightDatumName, T1.DictionaryHeightD");
            viewString.Append("atum_CustomHeightDatumName, T1.DictionaryHeightDatum_Description, T1.DictionaryH");
            viewString.Append("eightDatum_FullDescription, T1.DictionaryHeightDatum_Thumbnail, T1.DictionaryHei");
            viewString.Append("ghtDatum_OriginalFileDataID, T1.DictionaryHeightDatum_Version, T1.DictionaryHeig");
            viewString.Append("htDatum_VersionAntecedentID, T1.DictionaryHeightDatum_VersionCertainty, T1.Dicti");
            viewString.Append("onaryHeightDatum_VersionWorkflowInstanceID, T1.DictionaryHeightDatum_VersionUpda");
            viewString.Append("tedBy, T1.DictionaryHeightDatum_VersionDeletedBy, T1.DictionaryHeightDatum_Versi");
            viewString.Append("onOwnerContactID, T1.DictionaryHeightDatum_VersionOwnerCompanyID, T1.DictionaryH");
            viewString.Append("eightDatum_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.HeightDat");
            viewString.Append("umID AS DictionaryHeightDatum_HeightDatumID, \r\n            T.StandardHeightDatum");
            viewString.Append("Name AS DictionaryHeightDatum_StandardHeightDatumName, \r\n            T.CoalHeigh");
            viewString.Append("tDatumName AS DictionaryHeightDatum_CoalHeightDatumName, \r\n            T.GoldHei");
            viewString.Append("ghtDatumName AS DictionaryHeightDatum_GoldHeightDatumName, \r\n            T.Custo");
            viewString.Append("mHeightDatumName AS DictionaryHeightDatum_CustomHeightDatumName, \r\n            T");
            viewString.Append(".Description AS DictionaryHeightDatum_Description, \r\n            T.FullDescripti");
            viewString.Append("on AS DictionaryHeightDatum_FullDescription, \r\n            T.Thumbnail AS Dictio");
            viewString.Append("naryHeightDatum_Thumbnail, \r\n            T.OriginalFileDataID AS DictionaryHeigh");
            viewString.Append("tDatum_OriginalFileDataID, \r\n            T.Version AS DictionaryHeightDatum_Vers");
            viewString.Append("ion, \r\n            T.VersionAntecedentID AS DictionaryHeightDatum_VersionAnteced");
            viewString.Append("entID, \r\n            T.VersionCertainty AS DictionaryHeightDatum_VersionCertaint");
            viewString.Append("y, \r\n            T.VersionWorkflowInstanceID AS DictionaryHeightDatum_VersionWor");
            viewString.Append("kflowInstanceID, \r\n            T.VersionUpdatedBy AS DictionaryHeightDatum_Versi");
            viewString.Append("onUpdatedBy, \r\n            T.VersionDeletedBy AS DictionaryHeightDatum_VersionDe");
            viewString.Append("letedBy, \r\n            T.VersionOwnerContactID AS DictionaryHeightDatum_VersionO");
            viewString.Append("wnerContactID, \r\n            T.VersionOwnerCompanyID AS DictionaryHeightDatum_Ve");
            viewString.Append("rsionOwnerCompanyID, \r\n            T.VersionUpdated AS DictionaryHeightDatum_Ver");
            viewString.Append("sionUpdated, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjects");
            viewString.Append("StoreContainer.X_DictionaryHeightDatum AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryHeightDatums", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryHolePurposes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView470()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2456);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryHolePurposes\r\n        [NKD.Module.B");
            viewString.Append("usinessObjects.DictionaryHolePurpose](T1.DictionaryHolePurpose_HolePurposeID, T1");
            viewString.Append(".DictionaryHolePurpose_StandardHolePurposeName, T1.DictionaryHolePurpose_CoalHol");
            viewString.Append("ePurposeName, T1.DictionaryHolePurpose_GoldHolePurposeName, T1.DictionaryHolePur");
            viewString.Append("pose_CustomHolePurposeName, T1.DictionaryHolePurpose_Description, T1.DictionaryH");
            viewString.Append("olePurpose_FullDescription, T1.DictionaryHolePurpose_Thumbnail, T1.DictionaryHol");
            viewString.Append("ePurpose_OriginalFileDataID, T1.DictionaryHolePurpose_Version, T1.DictionaryHole");
            viewString.Append("Purpose_VersionAntecedentID, T1.DictionaryHolePurpose_VersionCertainty, T1.Dicti");
            viewString.Append("onaryHolePurpose_VersionWorkflowInstanceID, T1.DictionaryHolePurpose_VersionUpda");
            viewString.Append("tedBy, T1.DictionaryHolePurpose_VersionDeletedBy, T1.DictionaryHolePurpose_Versi");
            viewString.Append("onOwnerContactID, T1.DictionaryHolePurpose_VersionOwnerCompanyID, T1.DictionaryH");
            viewString.Append("olePurpose_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.HolePurpo");
            viewString.Append("seID AS DictionaryHolePurpose_HolePurposeID, \r\n            T.StandardHolePurpose");
            viewString.Append("Name AS DictionaryHolePurpose_StandardHolePurposeName, \r\n            T.CoalHoleP");
            viewString.Append("urposeName AS DictionaryHolePurpose_CoalHolePurposeName, \r\n            T.GoldHol");
            viewString.Append("ePurposeName AS DictionaryHolePurpose_GoldHolePurposeName, \r\n            T.Custo");
            viewString.Append("mHolePurposeName AS DictionaryHolePurpose_CustomHolePurposeName, \r\n            T");
            viewString.Append(".Description AS DictionaryHolePurpose_Description, \r\n            T.FullDescripti");
            viewString.Append("on AS DictionaryHolePurpose_FullDescription, \r\n            T.Thumbnail AS Dictio");
            viewString.Append("naryHolePurpose_Thumbnail, \r\n            T.OriginalFileDataID AS DictionaryHoleP");
            viewString.Append("urpose_OriginalFileDataID, \r\n            T.Version AS DictionaryHolePurpose_Vers");
            viewString.Append("ion, \r\n            T.VersionAntecedentID AS DictionaryHolePurpose_VersionAnteced");
            viewString.Append("entID, \r\n            T.VersionCertainty AS DictionaryHolePurpose_VersionCertaint");
            viewString.Append("y, \r\n            T.VersionWorkflowInstanceID AS DictionaryHolePurpose_VersionWor");
            viewString.Append("kflowInstanceID, \r\n            T.VersionUpdatedBy AS DictionaryHolePurpose_Versi");
            viewString.Append("onUpdatedBy, \r\n            T.VersionDeletedBy AS DictionaryHolePurpose_VersionDe");
            viewString.Append("letedBy, \r\n            T.VersionOwnerContactID AS DictionaryHolePurpose_VersionO");
            viewString.Append("wnerContactID, \r\n            T.VersionOwnerCompanyID AS DictionaryHolePurpose_Ve");
            viewString.Append("rsionOwnerCompanyID, \r\n            T.VersionUpdated AS DictionaryHolePurpose_Ver");
            viewString.Append("sionUpdated, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjects");
            viewString.Append("StoreContainer.X_DictionaryHolePurpose AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryHolePurposes", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryHoleStatus
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView471()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2401);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryHoleStatus\r\n        [NKD.Module.Bus");
            viewString.Append("inessObjects.DictionaryHoleStatus](T1.DictionaryHoleStatus_HoleStatusID, T1.Dict");
            viewString.Append("ionaryHoleStatus_StandardHoleStatusName, T1.DictionaryHoleStatus_CoalHoleStatusN");
            viewString.Append("ame, T1.DictionaryHoleStatus_GoldHoleStatusName, T1.DictionaryHoleStatus_CustomH");
            viewString.Append("oleStatusName, T1.DictionaryHoleStatus_Description, T1.DictionaryHoleStatus_Full");
            viewString.Append("Description, T1.DictionaryHoleStatus_Thumbnail, T1.DictionaryHoleStatus_Original");
            viewString.Append("FileDataID, T1.DictionaryHoleStatus_Version, T1.DictionaryHoleStatus_VersionAnte");
            viewString.Append("cedentID, T1.DictionaryHoleStatus_VersionCertainty, T1.DictionaryHoleStatus_Vers");
            viewString.Append("ionWorkflowInstanceID, T1.DictionaryHoleStatus_VersionUpdatedBy, T1.DictionaryHo");
            viewString.Append("leStatus_VersionDeletedBy, T1.DictionaryHoleStatus_VersionOwnerContactID, T1.Dic");
            viewString.Append("tionaryHoleStatus_VersionOwnerCompanyID, T1.DictionaryHoleStatus_VersionUpdated)");
            viewString.Append("\r\n    FROM (\r\n        SELECT \r\n            T.HoleStatusID AS DictionaryHoleStatu");
            viewString.Append("s_HoleStatusID, \r\n            T.StandardHoleStatusName AS DictionaryHoleStatus_S");
            viewString.Append("tandardHoleStatusName, \r\n            T.CoalHoleStatusName AS DictionaryHoleStatu");
            viewString.Append("s_CoalHoleStatusName, \r\n            T.GoldHoleStatusName AS DictionaryHoleStatus");
            viewString.Append("_GoldHoleStatusName, \r\n            T.CustomHoleStatusName AS DictionaryHoleStatu");
            viewString.Append("s_CustomHoleStatusName, \r\n            T.Description AS DictionaryHoleStatus_Desc");
            viewString.Append("ription, \r\n            T.FullDescription AS DictionaryHoleStatus_FullDescription");
            viewString.Append(", \r\n            T.Thumbnail AS DictionaryHoleStatus_Thumbnail, \r\n            T.O");
            viewString.Append("riginalFileDataID AS DictionaryHoleStatus_OriginalFileDataID, \r\n            T.Ve");
            viewString.Append("rsion AS DictionaryHoleStatus_Version, \r\n            T.VersionAntecedentID AS Di");
            viewString.Append("ctionaryHoleStatus_VersionAntecedentID, \r\n            T.VersionCertainty AS Dict");
            viewString.Append("ionaryHoleStatus_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS ");
            viewString.Append("DictionaryHoleStatus_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy");
            viewString.Append(" AS DictionaryHoleStatus_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS D");
            viewString.Append("ictionaryHoleStatus_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS D");
            viewString.Append("ictionaryHoleStatus_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID");
            viewString.Append(" AS DictionaryHoleStatus_VersionOwnerCompanyID, \r\n            T.VersionUpdated A");
            viewString.Append("S DictionaryHoleStatus_VersionUpdated, \r\n            True AS _from0\r\n        FRO");
            viewString.Append("M NKDModuleBusinessObjectsStoreContainer.X_DictionaryHoleStatus AS T\r\n    ) AS T");
            viewString.Append("1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryHoleStatus", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryHoleTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView472()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2294);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryHoleTypes\r\n        [NKD.Module.Busi");
            viewString.Append("nessObjects.DictionaryHoleType](T1.DictionaryHoleType_HoleTypeID, T1.DictionaryH");
            viewString.Append("oleType_StandardHoleTypeName, T1.DictionaryHoleType_CoalHoleTypeName, T1.Diction");
            viewString.Append("aryHoleType_GoldHoleTypeName, T1.DictionaryHoleType_CustomHoleTypeName, T1.Dicti");
            viewString.Append("onaryHoleType_Description, T1.DictionaryHoleType_FullDescription, T1.DictionaryH");
            viewString.Append("oleType_Thumbnail, T1.DictionaryHoleType_OriginalFileDataID, T1.DictionaryHoleTy");
            viewString.Append("pe_Version, T1.DictionaryHoleType_VersionAntecedentID, T1.DictionaryHoleType_Ver");
            viewString.Append("sionCertainty, T1.DictionaryHoleType_VersionWorkflowInstanceID, T1.DictionaryHol");
            viewString.Append("eType_VersionUpdatedBy, T1.DictionaryHoleType_VersionDeletedBy, T1.DictionaryHol");
            viewString.Append("eType_VersionOwnerContactID, T1.DictionaryHoleType_VersionOwnerCompanyID, T1.Dic");
            viewString.Append("tionaryHoleType_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.Hole");
            viewString.Append("TypeID AS DictionaryHoleType_HoleTypeID, \r\n            T.StandardHoleTypeName AS");
            viewString.Append(" DictionaryHoleType_StandardHoleTypeName, \r\n            T.CoalHoleTypeName AS Di");
            viewString.Append("ctionaryHoleType_CoalHoleTypeName, \r\n            T.GoldHoleTypeName AS Dictionar");
            viewString.Append("yHoleType_GoldHoleTypeName, \r\n            T.CustomHoleTypeName AS DictionaryHole");
            viewString.Append("Type_CustomHoleTypeName, \r\n            T.Description AS DictionaryHoleType_Descr");
            viewString.Append("iption, \r\n            T.FullDescription AS DictionaryHoleType_FullDescription, \r");
            viewString.Append("\n            T.Thumbnail AS DictionaryHoleType_Thumbnail, \r\n            T.Origin");
            viewString.Append("alFileDataID AS DictionaryHoleType_OriginalFileDataID, \r\n            T.Version A");
            viewString.Append("S DictionaryHoleType_Version, \r\n            T.VersionAntecedentID AS DictionaryH");
            viewString.Append("oleType_VersionAntecedentID, \r\n            T.VersionCertainty AS DictionaryHoleT");
            viewString.Append("ype_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS DictionaryHol");
            viewString.Append("eType_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS DictionaryH");
            viewString.Append("oleType_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS DictionaryHoleType");
            viewString.Append("_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS DictionaryHoleType_V");
            viewString.Append("ersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS DictionaryHoleTyp");
            viewString.Append("e_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS DictionaryHoleType_Ve");
            viewString.Append("rsionUpdated, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObject");
            viewString.Append("sStoreContainer.X_DictionaryHoleType AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryHoleTypes", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryHorizons
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView473()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2240);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryHorizons\r\n        [NKD.Module.Busin");
            viewString.Append("essObjects.DictionaryHorizon](T1.DictionaryHorizon_HorizonID, T1.DictionaryHoriz");
            viewString.Append("on_StandardHorizonName, T1.DictionaryHorizon_CoalHorizonName, T1.DictionaryHoriz");
            viewString.Append("on_GoldHorizonName, T1.DictionaryHorizon_CustomHorizonName, T1.DictionaryHorizon");
            viewString.Append("_Description, T1.DictionaryHorizon_FullDescription, T1.DictionaryHorizon_Thumbna");
            viewString.Append("il, T1.DictionaryHorizon_OriginalFileDataID, T1.DictionaryHorizon_Version, T1.Di");
            viewString.Append("ctionaryHorizon_VersionAntecedentID, T1.DictionaryHorizon_VersionCertainty, T1.D");
            viewString.Append("ictionaryHorizon_VersionWorkflowInstanceID, T1.DictionaryHorizon_VersionUpdatedB");
            viewString.Append("y, T1.DictionaryHorizon_VersionDeletedBy, T1.DictionaryHorizon_VersionOwnerConta");
            viewString.Append("ctID, T1.DictionaryHorizon_VersionOwnerCompanyID, T1.DictionaryHorizon_VersionUp");
            viewString.Append("dated)\r\n    FROM (\r\n        SELECT \r\n            T.HorizonID AS DictionaryHorizo");
            viewString.Append("n_HorizonID, \r\n            T.StandardHorizonName AS DictionaryHorizon_StandardHo");
            viewString.Append("rizonName, \r\n            T.CoalHorizonName AS DictionaryHorizon_CoalHorizonName,");
            viewString.Append(" \r\n            T.GoldHorizonName AS DictionaryHorizon_GoldHorizonName, \r\n       ");
            viewString.Append("     T.CustomHorizonName AS DictionaryHorizon_CustomHorizonName, \r\n            T");
            viewString.Append(".Description AS DictionaryHorizon_Description, \r\n            T.FullDescription A");
            viewString.Append("S DictionaryHorizon_FullDescription, \r\n            T.Thumbnail AS DictionaryHori");
            viewString.Append("zon_Thumbnail, \r\n            T.OriginalFileDataID AS DictionaryHorizon_OriginalF");
            viewString.Append("ileDataID, \r\n            T.Version AS DictionaryHorizon_Version, \r\n            T");
            viewString.Append(".VersionAntecedentID AS DictionaryHorizon_VersionAntecedentID, \r\n            T.V");
            viewString.Append("ersionCertainty AS DictionaryHorizon_VersionCertainty, \r\n            T.VersionWo");
            viewString.Append("rkflowInstanceID AS DictionaryHorizon_VersionWorkflowInstanceID, \r\n            T");
            viewString.Append(".VersionUpdatedBy AS DictionaryHorizon_VersionUpdatedBy, \r\n            T.Version");
            viewString.Append("DeletedBy AS DictionaryHorizon_VersionDeletedBy, \r\n            T.VersionOwnerCon");
            viewString.Append("tactID AS DictionaryHorizon_VersionOwnerContactID, \r\n            T.VersionOwnerC");
            viewString.Append("ompanyID AS DictionaryHorizon_VersionOwnerCompanyID, \r\n            T.VersionUpda");
            viewString.Append("ted AS DictionaryHorizon_VersionUpdated, \r\n            True AS _from0\r\n        F");
            viewString.Append("ROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryHorizon AS T\r\n    ) AS T1");
            viewString.Append("");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryHorizons", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryHues
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView474()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryHues", "\r\n    SELECT VALUE -- Constructing DictionaryHues\r\n        [NKD.Module.BusinessOb" +
                    "jects.DictionaryHue](T1.DictionaryHue_HueID, T1.DictionaryHue_StandardHueName, T" +
                    "1.DictionaryHue_CoalHueName, T1.DictionaryHue_GoldHueName, T1.DictionaryHue_Cust" +
                    "omHueName, T1.DictionaryHue_Description, T1.DictionaryHue_FullDescription, T1.Di" +
                    "ctionaryHue_Thumbnail, T1.DictionaryHue_OriginalFileDataID, T1.DictionaryHue_Ver" +
                    "sion, T1.DictionaryHue_VersionAntecedentID, T1.DictionaryHue_VersionCertainty, T" +
                    "1.DictionaryHue_VersionWorkflowInstanceID, T1.DictionaryHue_VersionUpdatedBy, T1" +
                    ".DictionaryHue_VersionDeletedBy, T1.DictionaryHue_VersionOwnerContactID, T1.Dict" +
                    "ionaryHue_VersionOwnerCompanyID, T1.DictionaryHue_VersionUpdated)\r\n    FROM (\r\n " +
                    "       SELECT \r\n            T.HueID AS DictionaryHue_HueID, \r\n            T.Stan" +
                    "dardHueName AS DictionaryHue_StandardHueName, \r\n            T.CoalHueName AS Dic" +
                    "tionaryHue_CoalHueName, \r\n            T.GoldHueName AS DictionaryHue_GoldHueName" +
                    ", \r\n            T.CustomHueName AS DictionaryHue_CustomHueName, \r\n            T." +
                    "Description AS DictionaryHue_Description, \r\n            T.FullDescription AS Dic" +
                    "tionaryHue_FullDescription, \r\n            T.Thumbnail AS DictionaryHue_Thumbnail" +
                    ", \r\n            T.OriginalFileDataID AS DictionaryHue_OriginalFileDataID, \r\n    " +
                    "        T.Version AS DictionaryHue_Version, \r\n            T.VersionAntecedentID " +
                    "AS DictionaryHue_VersionAntecedentID, \r\n            T.VersionCertainty AS Dictio" +
                    "naryHue_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS Dictionar" +
                    "yHue_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS DictionaryHu" +
                    "e_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS DictionaryHue_VersionDel" +
                    "etedBy, \r\n            T.VersionOwnerContactID AS DictionaryHue_VersionOwnerConta" +
                    "ctID, \r\n            T.VersionOwnerCompanyID AS DictionaryHue_VersionOwnerCompany" +
                    "ID, \r\n            T.VersionUpdated AS DictionaryHue_VersionUpdated, \r\n          " +
                    "  True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_Dictiona" +
                    "ryHue AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryInfillModes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView475()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2402);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryInfillModes\r\n        [NKD.Module.Bu");
            viewString.Append("sinessObjects.DictionaryInfillMode](T1.DictionaryInfillMode_InfillModeID, T1.Dic");
            viewString.Append("tionaryInfillMode_StandardInfillModeName, T1.DictionaryInfillMode_CoalInfillMode");
            viewString.Append("Name, T1.DictionaryInfillMode_GoldInfillModeName, T1.DictionaryInfillMode_Custom");
            viewString.Append("InfillModeName, T1.DictionaryInfillMode_Description, T1.DictionaryInfillMode_Ful");
            viewString.Append("lDescription, T1.DictionaryInfillMode_Thumbnail, T1.DictionaryInfillMode_Origina");
            viewString.Append("lFileDataID, T1.DictionaryInfillMode_Version, T1.DictionaryInfillMode_VersionAnt");
            viewString.Append("ecedentID, T1.DictionaryInfillMode_VersionCertainty, T1.DictionaryInfillMode_Ver");
            viewString.Append("sionWorkflowInstanceID, T1.DictionaryInfillMode_VersionUpdatedBy, T1.DictionaryI");
            viewString.Append("nfillMode_VersionDeletedBy, T1.DictionaryInfillMode_VersionOwnerContactID, T1.Di");
            viewString.Append("ctionaryInfillMode_VersionOwnerCompanyID, T1.DictionaryInfillMode_VersionUpdated");
            viewString.Append(")\r\n    FROM (\r\n        SELECT \r\n            T.InfillModeID AS DictionaryInfillMo");
            viewString.Append("de_InfillModeID, \r\n            T.StandardInfillModeName AS DictionaryInfillMode_");
            viewString.Append("StandardInfillModeName, \r\n            T.CoalInfillModeName AS DictionaryInfillMo");
            viewString.Append("de_CoalInfillModeName, \r\n            T.GoldInfillModeName AS DictionaryInfillMod");
            viewString.Append("e_GoldInfillModeName, \r\n            T.CustomInfillModeName AS DictionaryInfillMo");
            viewString.Append("de_CustomInfillModeName, \r\n            T.Description AS DictionaryInfillMode_Des");
            viewString.Append("cription, \r\n            T.FullDescription AS DictionaryInfillMode_FullDescriptio");
            viewString.Append("n, \r\n            T.Thumbnail AS DictionaryInfillMode_Thumbnail, \r\n            T.");
            viewString.Append("OriginalFileDataID AS DictionaryInfillMode_OriginalFileDataID, \r\n            T.V");
            viewString.Append("ersion AS DictionaryInfillMode_Version, \r\n            T.VersionAntecedentID AS D");
            viewString.Append("ictionaryInfillMode_VersionAntecedentID, \r\n            T.VersionCertainty AS Dic");
            viewString.Append("tionaryInfillMode_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS");
            viewString.Append(" DictionaryInfillMode_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedB");
            viewString.Append("y AS DictionaryInfillMode_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS ");
            viewString.Append("DictionaryInfillMode_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS ");
            viewString.Append("DictionaryInfillMode_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyI");
            viewString.Append("D AS DictionaryInfillMode_VersionOwnerCompanyID, \r\n            T.VersionUpdated ");
            viewString.Append("AS DictionaryInfillMode_VersionUpdated, \r\n            True AS _from0\r\n        FR");
            viewString.Append("OM NKDModuleBusinessObjectsStoreContainer.X_DictionaryInfillMode AS T\r\n    ) AS ");
            viewString.Append("T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryInfillModes", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryInfillTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView476()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2402);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryInfillTypes\r\n        [NKD.Module.Bu");
            viewString.Append("sinessObjects.DictionaryInfillType](T1.DictionaryInfillType_InfillTypeID, T1.Dic");
            viewString.Append("tionaryInfillType_StandardInfillTypeName, T1.DictionaryInfillType_CoalInfillType");
            viewString.Append("Name, T1.DictionaryInfillType_GoldInfillTypeName, T1.DictionaryInfillType_Custom");
            viewString.Append("InfillTypeName, T1.DictionaryInfillType_Description, T1.DictionaryInfillType_Ful");
            viewString.Append("lDescription, T1.DictionaryInfillType_Thumbnail, T1.DictionaryInfillType_Origina");
            viewString.Append("lFileDataID, T1.DictionaryInfillType_Version, T1.DictionaryInfillType_VersionAnt");
            viewString.Append("ecedentID, T1.DictionaryInfillType_VersionCertainty, T1.DictionaryInfillType_Ver");
            viewString.Append("sionWorkflowInstanceID, T1.DictionaryInfillType_VersionUpdatedBy, T1.DictionaryI");
            viewString.Append("nfillType_VersionDeletedBy, T1.DictionaryInfillType_VersionOwnerContactID, T1.Di");
            viewString.Append("ctionaryInfillType_VersionOwnerCompanyID, T1.DictionaryInfillType_VersionUpdated");
            viewString.Append(")\r\n    FROM (\r\n        SELECT \r\n            T.InfillTypeID AS DictionaryInfillTy");
            viewString.Append("pe_InfillTypeID, \r\n            T.StandardInfillTypeName AS DictionaryInfillType_");
            viewString.Append("StandardInfillTypeName, \r\n            T.CoalInfillTypeName AS DictionaryInfillTy");
            viewString.Append("pe_CoalInfillTypeName, \r\n            T.GoldInfillTypeName AS DictionaryInfillTyp");
            viewString.Append("e_GoldInfillTypeName, \r\n            T.CustomInfillTypeName AS DictionaryInfillTy");
            viewString.Append("pe_CustomInfillTypeName, \r\n            T.Description AS DictionaryInfillType_Des");
            viewString.Append("cription, \r\n            T.FullDescription AS DictionaryInfillType_FullDescriptio");
            viewString.Append("n, \r\n            T.Thumbnail AS DictionaryInfillType_Thumbnail, \r\n            T.");
            viewString.Append("OriginalFileDataID AS DictionaryInfillType_OriginalFileDataID, \r\n            T.V");
            viewString.Append("ersion AS DictionaryInfillType_Version, \r\n            T.VersionAntecedentID AS D");
            viewString.Append("ictionaryInfillType_VersionAntecedentID, \r\n            T.VersionCertainty AS Dic");
            viewString.Append("tionaryInfillType_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS");
            viewString.Append(" DictionaryInfillType_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedB");
            viewString.Append("y AS DictionaryInfillType_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS ");
            viewString.Append("DictionaryInfillType_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS ");
            viewString.Append("DictionaryInfillType_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyI");
            viewString.Append("D AS DictionaryInfillType_VersionOwnerCompanyID, \r\n            T.VersionUpdated ");
            viewString.Append("AS DictionaryInfillType_VersionUpdated, \r\n            True AS _from0\r\n        FR");
            viewString.Append("OM NKDModuleBusinessObjectsStoreContainer.X_DictionaryInfillType AS T\r\n    ) AS ");
            viewString.Append("T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryInfillTypes", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryIntervalStatus
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView477()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2617);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryIntervalStatus\r\n        [NKD.Module");
            viewString.Append(".BusinessObjects.DictionaryIntervalStatus](T1.DictionaryIntervalStatus_IntervalS");
            viewString.Append("tatusID, T1.DictionaryIntervalStatus_StandardIntervalStatusName, T1.DictionaryIn");
            viewString.Append("tervalStatus_CoalIntervalStatusName, T1.DictionaryIntervalStatus_GoldIntervalSta");
            viewString.Append("tusName, T1.DictionaryIntervalStatus_CustomIntervalStatusName, T1.DictionaryInte");
            viewString.Append("rvalStatus_Description, T1.DictionaryIntervalStatus_FullDescription, T1.Dictiona");
            viewString.Append("ryIntervalStatus_Thumbnail, T1.DictionaryIntervalStatus_OriginalFileDataID, T1.D");
            viewString.Append("ictionaryIntervalStatus_Version, T1.DictionaryIntervalStatus_VersionAntecedentID");
            viewString.Append(", T1.DictionaryIntervalStatus_VersionCertainty, T1.DictionaryIntervalStatus_Vers");
            viewString.Append("ionWorkflowInstanceID, T1.DictionaryIntervalStatus_VersionUpdatedBy, T1.Dictiona");
            viewString.Append("ryIntervalStatus_VersionDeletedBy, T1.DictionaryIntervalStatus_VersionOwnerConta");
            viewString.Append("ctID, T1.DictionaryIntervalStatus_VersionOwnerCompanyID, T1.DictionaryIntervalSt");
            viewString.Append("atus_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.IntervalStatusI");
            viewString.Append("D AS DictionaryIntervalStatus_IntervalStatusID, \r\n            T.StandardInterval");
            viewString.Append("StatusName AS DictionaryIntervalStatus_StandardIntervalStatusName, \r\n           ");
            viewString.Append(" T.CoalIntervalStatusName AS DictionaryIntervalStatus_CoalIntervalStatusName, \r\n");
            viewString.Append("            T.GoldIntervalStatusName AS DictionaryIntervalStatus_GoldIntervalSta");
            viewString.Append("tusName, \r\n            T.CustomIntervalStatusName AS DictionaryIntervalStatus_Cu");
            viewString.Append("stomIntervalStatusName, \r\n            T.Description AS DictionaryIntervalStatus_");
            viewString.Append("Description, \r\n            T.FullDescription AS DictionaryIntervalStatus_FullDes");
            viewString.Append("cription, \r\n            T.Thumbnail AS DictionaryIntervalStatus_Thumbnail, \r\n   ");
            viewString.Append("         T.OriginalFileDataID AS DictionaryIntervalStatus_OriginalFileDataID, \r\n");
            viewString.Append("            T.Version AS DictionaryIntervalStatus_Version, \r\n            T.Versi");
            viewString.Append("onAntecedentID AS DictionaryIntervalStatus_VersionAntecedentID, \r\n            T.");
            viewString.Append("VersionCertainty AS DictionaryIntervalStatus_VersionCertainty, \r\n            T.V");
            viewString.Append("ersionWorkflowInstanceID AS DictionaryIntervalStatus_VersionWorkflowInstanceID, ");
            viewString.Append("\r\n            T.VersionUpdatedBy AS DictionaryIntervalStatus_VersionUpdatedBy, \r");
            viewString.Append("\n            T.VersionDeletedBy AS DictionaryIntervalStatus_VersionDeletedBy, \r\n");
            viewString.Append("            T.VersionOwnerContactID AS DictionaryIntervalStatus_VersionOwnerCont");
            viewString.Append("actID, \r\n            T.VersionOwnerCompanyID AS DictionaryIntervalStatus_Version");
            viewString.Append("OwnerCompanyID, \r\n            T.VersionUpdated AS DictionaryIntervalStatus_Versi");
            viewString.Append("onUpdated, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjectsSt");
            viewString.Append("oreContainer.X_DictionaryIntervalStatus AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryIntervalStatus", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryLeaseApplicationTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView478()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2942);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryLeaseApplicationTypes\r\n        [NKD");
            viewString.Append(".Module.BusinessObjects.DictionaryLeaseApplicationType](T1.DictionaryLeaseApplic");
            viewString.Append("ationType_LeaseApplicationTypeID, T1.DictionaryLeaseApplicationType_StandardLeas");
            viewString.Append("eApplicationTypeName, T1.DictionaryLeaseApplicationType_CoalLeaseApplicationType");
            viewString.Append("Name, T1.DictionaryLeaseApplicationType_GoldLeaseApplicationTypeName, T1.Diction");
            viewString.Append("aryLeaseApplicationType_CustomLeaseApplicationTypeName, T1.DictionaryLeaseApplic");
            viewString.Append("ationType_Description, T1.DictionaryLeaseApplicationType_FullDescription, T1.Dic");
            viewString.Append("tionaryLeaseApplicationType_Thumbnail, T1.DictionaryLeaseApplicationType_Origina");
            viewString.Append("lFileDataID, T1.DictionaryLeaseApplicationType_Version, T1.DictionaryLeaseApplic");
            viewString.Append("ationType_VersionAntecedentID, T1.DictionaryLeaseApplicationType_VersionCertaint");
            viewString.Append("y, T1.DictionaryLeaseApplicationType_VersionWorkflowInstanceID, T1.DictionaryLea");
            viewString.Append("seApplicationType_VersionUpdatedBy, T1.DictionaryLeaseApplicationType_VersionDel");
            viewString.Append("etedBy, T1.DictionaryLeaseApplicationType_VersionOwnerContactID, T1.DictionaryLe");
            viewString.Append("aseApplicationType_VersionOwnerCompanyID, T1.DictionaryLeaseApplicationType_Vers");
            viewString.Append("ionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.LeaseApplicationTypeID A");
            viewString.Append("S DictionaryLeaseApplicationType_LeaseApplicationTypeID, \r\n            T.Standar");
            viewString.Append("dLeaseApplicationTypeName AS DictionaryLeaseApplicationType_StandardLeaseApplica");
            viewString.Append("tionTypeName, \r\n            T.CoalLeaseApplicationTypeName AS DictionaryLeaseApp");
            viewString.Append("licationType_CoalLeaseApplicationTypeName, \r\n            T.GoldLeaseApplicationT");
            viewString.Append("ypeName AS DictionaryLeaseApplicationType_GoldLeaseApplicationTypeName, \r\n      ");
            viewString.Append("      T.CustomLeaseApplicationTypeName AS DictionaryLeaseApplicationType_CustomL");
            viewString.Append("easeApplicationTypeName, \r\n            T.Description AS DictionaryLeaseApplicati");
            viewString.Append("onType_Description, \r\n            T.FullDescription AS DictionaryLeaseApplicatio");
            viewString.Append("nType_FullDescription, \r\n            T.Thumbnail AS DictionaryLeaseApplicationTy");
            viewString.Append("pe_Thumbnail, \r\n            T.OriginalFileDataID AS DictionaryLeaseApplicationTy");
            viewString.Append("pe_OriginalFileDataID, \r\n            T.Version AS DictionaryLeaseApplicationType");
            viewString.Append("_Version, \r\n            T.VersionAntecedentID AS DictionaryLeaseApplicationType_");
            viewString.Append("VersionAntecedentID, \r\n            T.VersionCertainty AS DictionaryLeaseApplicat");
            viewString.Append("ionType_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS Dictionar");
            viewString.Append("yLeaseApplicationType_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedB");
            viewString.Append("y AS DictionaryLeaseApplicationType_VersionUpdatedBy, \r\n            T.VersionDel");
            viewString.Append("etedBy AS DictionaryLeaseApplicationType_VersionDeletedBy, \r\n            T.Versi");
            viewString.Append("onOwnerContactID AS DictionaryLeaseApplicationType_VersionOwnerContactID, \r\n    ");
            viewString.Append("        T.VersionOwnerCompanyID AS DictionaryLeaseApplicationType_VersionOwnerCo");
            viewString.Append("mpanyID, \r\n            T.VersionUpdated AS DictionaryLeaseApplicationType_Versio");
            viewString.Append("nUpdated, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjectsSto");
            viewString.Append("reContainer.X_DictionaryLeaseApplicationType AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryLeaseApplicationTypes", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryLicenseTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView479()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2200);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryLicenseTypes\r\n        [NKD.Module.B");
            viewString.Append("usinessObjects.DictionaryLicenseType](T1.DictionaryLicenseType_LicenseTypeID, T1");
            viewString.Append(".DictionaryLicenseType_StandardLicenseTypeName, T1.DictionaryLicenseType_CustomL");
            viewString.Append("icenseTypeName, T1.DictionaryLicenseType_Description, T1.DictionaryLicenseType_F");
            viewString.Append("ullDescription, T1.DictionaryLicenseType_Thumbnail, T1.DictionaryLicenseType_Ori");
            viewString.Append("ginalFileDataID, T1.DictionaryLicenseType_Version, T1.DictionaryLicenseType_Vers");
            viewString.Append("ionAntecedentID, T1.DictionaryLicenseType_VersionCertainty, T1.DictionaryLicense");
            viewString.Append("Type_VersionWorkflowInstanceID, T1.DictionaryLicenseType_VersionUpdatedBy, T1.Di");
            viewString.Append("ctionaryLicenseType_VersionDeletedBy, T1.DictionaryLicenseType_VersionOwnerConta");
            viewString.Append("ctID, T1.DictionaryLicenseType_VersionOwnerCompanyID, T1.DictionaryLicenseType_V");
            viewString.Append("ersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.LicenseTypeID AS Dict");
            viewString.Append("ionaryLicenseType_LicenseTypeID, \r\n            T.StandardLicenseTypeName AS Dict");
            viewString.Append("ionaryLicenseType_StandardLicenseTypeName, \r\n            T.CustomLicenseTypeName");
            viewString.Append(" AS DictionaryLicenseType_CustomLicenseTypeName, \r\n            T.Description AS ");
            viewString.Append("DictionaryLicenseType_Description, \r\n            T.FullDescription AS Dictionary");
            viewString.Append("LicenseType_FullDescription, \r\n            T.Thumbnail AS DictionaryLicenseType_");
            viewString.Append("Thumbnail, \r\n            T.OriginalFileDataID AS DictionaryLicenseType_OriginalF");
            viewString.Append("ileDataID, \r\n            T.Version AS DictionaryLicenseType_Version, \r\n         ");
            viewString.Append("   T.VersionAntecedentID AS DictionaryLicenseType_VersionAntecedentID, \r\n       ");
            viewString.Append("     T.VersionCertainty AS DictionaryLicenseType_VersionCertainty, \r\n           ");
            viewString.Append(" T.VersionWorkflowInstanceID AS DictionaryLicenseType_VersionWorkflowInstanceID,");
            viewString.Append(" \r\n            T.VersionUpdatedBy AS DictionaryLicenseType_VersionUpdatedBy, \r\n ");
            viewString.Append("           T.VersionDeletedBy AS DictionaryLicenseType_VersionDeletedBy, \r\n     ");
            viewString.Append("       T.VersionOwnerContactID AS DictionaryLicenseType_VersionOwnerContactID, \r");
            viewString.Append("\n            T.VersionOwnerCompanyID AS DictionaryLicenseType_VersionOwnerCompan");
            viewString.Append("yID, \r\n            T.VersionUpdated AS DictionaryLicenseType_VersionUpdated, \r\n ");
            viewString.Append("           True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X");
            viewString.Append("_DictionaryLicenseType AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryLicenseTypes", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryLithologyInterrelations
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView480()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3050);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryLithologyInterrelations\r\n        [N");
            viewString.Append("KD.Module.BusinessObjects.DictionaryLithologyInterrelation](T1.DictionaryLitholo");
            viewString.Append("gyInterrelation_StandardLithologyInterrelationName, T1.DictionaryLithologyInterr");
            viewString.Append("elation_CoalLithologyInterrelationName, T1.DictionaryLithologyInterrelation_Gold");
            viewString.Append("LithologyInterrelationName, T1.DictionaryLithologyInterrelation_CustomLithologyI");
            viewString.Append("nterrelationName, T1.DictionaryLithologyInterrelation_Description, T1.Dictionary");
            viewString.Append("LithologyInterrelation_FullDescription, T1.DictionaryLithologyInterrelation_Thum");
            viewString.Append("bnail, T1.DictionaryLithologyInterrelation_OriginalFileDataID, T1.DictionaryLith");
            viewString.Append("ologyInterrelation_Version, T1.DictionaryLithologyInterrelation_VersionAnteceden");
            viewString.Append("tID, T1.DictionaryLithologyInterrelation_VersionCertainty, T1.DictionaryLitholog");
            viewString.Append("yInterrelation_VersionWorkflowInstanceID, T1.DictionaryLithologyInterrelation_Ve");
            viewString.Append("rsionUpdatedBy, T1.DictionaryLithologyInterrelation_VersionDeletedBy, T1.Diction");
            viewString.Append("aryLithologyInterrelation_VersionOwnerContactID, T1.DictionaryLithologyInterrela");
            viewString.Append("tion_VersionOwnerCompanyID, T1.DictionaryLithologyInterrelation_VersionUpdated, ");
            viewString.Append("T1.DictionaryLithologyInterrelation_LithologyInterrelationID)\r\n    FROM (\r\n     ");
            viewString.Append("   SELECT \r\n            T.StandardLithologyInterrelationName AS DictionaryLithol");
            viewString.Append("ogyInterrelation_StandardLithologyInterrelationName, \r\n            T.CoalLitholo");
            viewString.Append("gyInterrelationName AS DictionaryLithologyInterrelation_CoalLithologyInterrelati");
            viewString.Append("onName, \r\n            T.GoldLithologyInterrelationName AS DictionaryLithologyInt");
            viewString.Append("errelation_GoldLithologyInterrelationName, \r\n            T.CustomLithologyInterr");
            viewString.Append("elationName AS DictionaryLithologyInterrelation_CustomLithologyInterrelationName");
            viewString.Append(", \r\n            T.Description AS DictionaryLithologyInterrelation_Description, \r");
            viewString.Append("\n            T.FullDescription AS DictionaryLithologyInterrelation_FullDescripti");
            viewString.Append("on, \r\n            T.Thumbnail AS DictionaryLithologyInterrelation_Thumbnail, \r\n ");
            viewString.Append("           T.OriginalFileDataID AS DictionaryLithologyInterrelation_OriginalFile");
            viewString.Append("DataID, \r\n            T.Version AS DictionaryLithologyInterrelation_Version, \r\n ");
            viewString.Append("           T.VersionAntecedentID AS DictionaryLithologyInterrelation_VersionAnte");
            viewString.Append("cedentID, \r\n            T.VersionCertainty AS DictionaryLithologyInterrelation_V");
            viewString.Append("ersionCertainty, \r\n            T.VersionWorkflowInstanceID AS DictionaryLitholog");
            viewString.Append("yInterrelation_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS Di");
            viewString.Append("ctionaryLithologyInterrelation_VersionUpdatedBy, \r\n            T.VersionDeletedB");
            viewString.Append("y AS DictionaryLithologyInterrelation_VersionDeletedBy, \r\n            T.VersionO");
            viewString.Append("wnerContactID AS DictionaryLithologyInterrelation_VersionOwnerContactID, \r\n     ");
            viewString.Append("       T.VersionOwnerCompanyID AS DictionaryLithologyInterrelation_VersionOwnerC");
            viewString.Append("ompanyID, \r\n            T.VersionUpdated AS DictionaryLithologyInterrelation_Ver");
            viewString.Append("sionUpdated, \r\n            T.LithologyInterrelationID AS DictionaryLithologyInte");
            viewString.Append("rrelation_LithologyInterrelationID, \r\n            True AS _from0\r\n        FROM N");
            viewString.Append("KDModuleBusinessObjectsStoreContainer.X_DictionaryLithologyInterrelation AS T\r\n ");
            viewString.Append("   ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryLithologyInterrelations", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryLithologyQualifiers
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView481()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2834);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryLithologyQualifiers\r\n        [NKD.M");
            viewString.Append("odule.BusinessObjects.DictionaryLithologyQualifier](T1.DictionaryLithologyQualif");
            viewString.Append("ier_LithologyQualifierID, T1.DictionaryLithologyQualifier_StandardLithologyQuali");
            viewString.Append("fierName, T1.DictionaryLithologyQualifier_CoalLithologyQualifierName, T1.Diction");
            viewString.Append("aryLithologyQualifier_GoldLithologyQualifierName, T1.DictionaryLithologyQualifie");
            viewString.Append("r_CustomLithologyQualifierName, T1.DictionaryLithologyQualifier_Description, T1.");
            viewString.Append("DictionaryLithologyQualifier_FullDescription, T1.DictionaryLithologyQualifier_Th");
            viewString.Append("umbnail, T1.DictionaryLithologyQualifier_OriginalFileDataID, T1.DictionaryLithol");
            viewString.Append("ogyQualifier_Version, T1.DictionaryLithologyQualifier_VersionAntecedentID, T1.Di");
            viewString.Append("ctionaryLithologyQualifier_VersionCertainty, T1.DictionaryLithologyQualifier_Ver");
            viewString.Append("sionWorkflowInstanceID, T1.DictionaryLithologyQualifier_VersionUpdatedBy, T1.Dic");
            viewString.Append("tionaryLithologyQualifier_VersionDeletedBy, T1.DictionaryLithologyQualifier_Vers");
            viewString.Append("ionOwnerContactID, T1.DictionaryLithologyQualifier_VersionOwnerCompanyID, T1.Dic");
            viewString.Append("tionaryLithologyQualifier_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n        ");
            viewString.Append("    T.LithologyQualifierID AS DictionaryLithologyQualifier_LithologyQualifierID,");
            viewString.Append(" \r\n            T.StandardLithologyQualifierName AS DictionaryLithologyQualifier_");
            viewString.Append("StandardLithologyQualifierName, \r\n            T.CoalLithologyQualifierName AS Di");
            viewString.Append("ctionaryLithologyQualifier_CoalLithologyQualifierName, \r\n            T.GoldLitho");
            viewString.Append("logyQualifierName AS DictionaryLithologyQualifier_GoldLithologyQualifierName, \r\n");
            viewString.Append("            T.CustomLithologyQualifierName AS DictionaryLithologyQualifier_Custo");
            viewString.Append("mLithologyQualifierName, \r\n            T.Description AS DictionaryLithologyQuali");
            viewString.Append("fier_Description, \r\n            T.FullDescription AS DictionaryLithologyQualifie");
            viewString.Append("r_FullDescription, \r\n            T.Thumbnail AS DictionaryLithologyQualifier_Thu");
            viewString.Append("mbnail, \r\n            T.OriginalFileDataID AS DictionaryLithologyQualifier_Origi");
            viewString.Append("nalFileDataID, \r\n            T.Version AS DictionaryLithologyQualifier_Version, ");
            viewString.Append("\r\n            T.VersionAntecedentID AS DictionaryLithologyQualifier_VersionAntec");
            viewString.Append("edentID, \r\n            T.VersionCertainty AS DictionaryLithologyQualifier_Versio");
            viewString.Append("nCertainty, \r\n            T.VersionWorkflowInstanceID AS DictionaryLithologyQual");
            viewString.Append("ifier_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS DictionaryL");
            viewString.Append("ithologyQualifier_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS Dictiona");
            viewString.Append("ryLithologyQualifier_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS ");
            viewString.Append("DictionaryLithologyQualifier_VersionOwnerContactID, \r\n            T.VersionOwner");
            viewString.Append("CompanyID AS DictionaryLithologyQualifier_VersionOwnerCompanyID, \r\n            T");
            viewString.Append(".VersionUpdated AS DictionaryLithologyQualifier_VersionUpdated, \r\n            Tr");
            viewString.Append("ue AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryLi");
            viewString.Append("thologyQualifier AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryLithologyQualifiers", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryLithologyTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView482()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2564);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryLithologyTypes\r\n        [NKD.Module");
            viewString.Append(".BusinessObjects.DictionaryLithologyType](T1.DictionaryLithologyType_LithologyTy");
            viewString.Append("peID, T1.DictionaryLithologyType_StandardLithologyTypeName, T1.DictionaryLitholo");
            viewString.Append("gyType_CoalLithologyTypeName, T1.DictionaryLithologyType_GoldLithologyTypeName, ");
            viewString.Append("T1.DictionaryLithologyType_CustomLithologyTypeName, T1.DictionaryLithologyType_D");
            viewString.Append("escription, T1.DictionaryLithologyType_FullDescription, T1.DictionaryLithologyTy");
            viewString.Append("pe_Thumbnail, T1.DictionaryLithologyType_OriginalFileDataID, T1.DictionaryLithol");
            viewString.Append("ogyType_Version, T1.DictionaryLithologyType_VersionAntecedentID, T1.DictionaryLi");
            viewString.Append("thologyType_VersionCertainty, T1.DictionaryLithologyType_VersionWorkflowInstance");
            viewString.Append("ID, T1.DictionaryLithologyType_VersionUpdatedBy, T1.DictionaryLithologyType_Vers");
            viewString.Append("ionDeletedBy, T1.DictionaryLithologyType_VersionOwnerContactID, T1.DictionaryLit");
            viewString.Append("hologyType_VersionOwnerCompanyID, T1.DictionaryLithologyType_VersionUpdated)\r\n  ");
            viewString.Append("  FROM (\r\n        SELECT \r\n            T.LithologyTypeID AS DictionaryLithologyT");
            viewString.Append("ype_LithologyTypeID, \r\n            T.StandardLithologyTypeName AS DictionaryLith");
            viewString.Append("ologyType_StandardLithologyTypeName, \r\n            T.CoalLithologyTypeName AS Di");
            viewString.Append("ctionaryLithologyType_CoalLithologyTypeName, \r\n            T.GoldLithologyTypeNa");
            viewString.Append("me AS DictionaryLithologyType_GoldLithologyTypeName, \r\n            T.CustomLitho");
            viewString.Append("logyTypeName AS DictionaryLithologyType_CustomLithologyTypeName, \r\n            T");
            viewString.Append(".Description AS DictionaryLithologyType_Description, \r\n            T.FullDescrip");
            viewString.Append("tion AS DictionaryLithologyType_FullDescription, \r\n            T.Thumbnail AS Di");
            viewString.Append("ctionaryLithologyType_Thumbnail, \r\n            T.OriginalFileDataID AS Dictionar");
            viewString.Append("yLithologyType_OriginalFileDataID, \r\n            T.Version AS DictionaryLitholog");
            viewString.Append("yType_Version, \r\n            T.VersionAntecedentID AS DictionaryLithologyType_Ve");
            viewString.Append("rsionAntecedentID, \r\n            T.VersionCertainty AS DictionaryLithologyType_V");
            viewString.Append("ersionCertainty, \r\n            T.VersionWorkflowInstanceID AS DictionaryLitholog");
            viewString.Append("yType_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS DictionaryL");
            viewString.Append("ithologyType_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS DictionaryLit");
            viewString.Append("hologyType_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS Dictionary");
            viewString.Append("LithologyType_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS Di");
            viewString.Append("ctionaryLithologyType_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS D");
            viewString.Append("ictionaryLithologyType_VersionUpdated, \r\n            True AS _from0\r\n        FRO");
            viewString.Append("M NKDModuleBusinessObjectsStoreContainer.X_DictionaryLithologyType AS T\r\n    ) A");
            viewString.Append("S T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryLithologyTypes", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryLocationTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView483()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2510);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryLocationTypes\r\n        [NKD.Module.");
            viewString.Append("BusinessObjects.DictionaryLocationType](T1.DictionaryLocationType_LocationTypeID");
            viewString.Append(", T1.DictionaryLocationType_StandardLocationTypeName, T1.DictionaryLocationType_");
            viewString.Append("CoalLocationTypeName, T1.DictionaryLocationType_GoldLocationTypeName, T1.Diction");
            viewString.Append("aryLocationType_CustomLocationTypeName, T1.DictionaryLocationType_Description, T");
            viewString.Append("1.DictionaryLocationType_FullDescription, T1.DictionaryLocationType_Thumbnail, T");
            viewString.Append("1.DictionaryLocationType_OriginalFileDataID, T1.DictionaryLocationType_Version, ");
            viewString.Append("T1.DictionaryLocationType_VersionAntecedentID, T1.DictionaryLocationType_Version");
            viewString.Append("Certainty, T1.DictionaryLocationType_VersionWorkflowInstanceID, T1.DictionaryLoc");
            viewString.Append("ationType_VersionUpdatedBy, T1.DictionaryLocationType_VersionDeletedBy, T1.Dicti");
            viewString.Append("onaryLocationType_VersionOwnerContactID, T1.DictionaryLocationType_VersionOwnerC");
            viewString.Append("ompanyID, T1.DictionaryLocationType_VersionUpdated)\r\n    FROM (\r\n        SELECT ");
            viewString.Append("\r\n            T.LocationTypeID AS DictionaryLocationType_LocationTypeID, \r\n     ");
            viewString.Append("       T.StandardLocationTypeName AS DictionaryLocationType_StandardLocationType");
            viewString.Append("Name, \r\n            T.CoalLocationTypeName AS DictionaryLocationType_CoalLocatio");
            viewString.Append("nTypeName, \r\n            T.GoldLocationTypeName AS DictionaryLocationType_GoldLo");
            viewString.Append("cationTypeName, \r\n            T.CustomLocationTypeName AS DictionaryLocationType");
            viewString.Append("_CustomLocationTypeName, \r\n            T.Description AS DictionaryLocationType_D");
            viewString.Append("escription, \r\n            T.FullDescription AS DictionaryLocationType_FullDescri");
            viewString.Append("ption, \r\n            T.Thumbnail AS DictionaryLocationType_Thumbnail, \r\n        ");
            viewString.Append("    T.OriginalFileDataID AS DictionaryLocationType_OriginalFileDataID, \r\n       ");
            viewString.Append("     T.Version AS DictionaryLocationType_Version, \r\n            T.VersionAnteced");
            viewString.Append("entID AS DictionaryLocationType_VersionAntecedentID, \r\n            T.VersionCert");
            viewString.Append("ainty AS DictionaryLocationType_VersionCertainty, \r\n            T.VersionWorkflo");
            viewString.Append("wInstanceID AS DictionaryLocationType_VersionWorkflowInstanceID, \r\n            T");
            viewString.Append(".VersionUpdatedBy AS DictionaryLocationType_VersionUpdatedBy, \r\n            T.Ve");
            viewString.Append("rsionDeletedBy AS DictionaryLocationType_VersionDeletedBy, \r\n            T.Versi");
            viewString.Append("onOwnerContactID AS DictionaryLocationType_VersionOwnerContactID, \r\n            ");
            viewString.Append("T.VersionOwnerCompanyID AS DictionaryLocationType_VersionOwnerCompanyID, \r\n     ");
            viewString.Append("       T.VersionUpdated AS DictionaryLocationType_VersionUpdated, \r\n            ");
            viewString.Append("True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_Dictionary");
            viewString.Append("LocationType AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryLocationTypes", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryMechanicalStates
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView484()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2672);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryMechanicalStates\r\n        [NKD.Modu");
            viewString.Append("le.BusinessObjects.DictionaryMechanicalState](T1.DictionaryMechanicalState_Mecha");
            viewString.Append("nicalStateID, T1.DictionaryMechanicalState_StandardMechanicalStateName, T1.Dicti");
            viewString.Append("onaryMechanicalState_CoalMechanicalStateName, T1.DictionaryMechanicalState_GoldM");
            viewString.Append("echanicalStateName, T1.DictionaryMechanicalState_CustomMechanicalStateName, T1.D");
            viewString.Append("ictionaryMechanicalState_Description, T1.DictionaryMechanicalState_FullDescripti");
            viewString.Append("on, T1.DictionaryMechanicalState_Thumbnail, T1.DictionaryMechanicalState_Origina");
            viewString.Append("lFileDataID, T1.DictionaryMechanicalState_Version, T1.DictionaryMechanicalState_");
            viewString.Append("VersionAntecedentID, T1.DictionaryMechanicalState_VersionCertainty, T1.Dictionar");
            viewString.Append("yMechanicalState_VersionWorkflowInstanceID, T1.DictionaryMechanicalState_Version");
            viewString.Append("UpdatedBy, T1.DictionaryMechanicalState_VersionDeletedBy, T1.DictionaryMechanica");
            viewString.Append("lState_VersionOwnerContactID, T1.DictionaryMechanicalState_VersionOwnerCompanyID");
            viewString.Append(", T1.DictionaryMechanicalState_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n   ");
            viewString.Append("         T.MechanicalStateID AS DictionaryMechanicalState_MechanicalStateID, \r\n ");
            viewString.Append("           T.StandardMechanicalStateName AS DictionaryMechanicalState_StandardMe");
            viewString.Append("chanicalStateName, \r\n            T.CoalMechanicalStateName AS DictionaryMechanic");
            viewString.Append("alState_CoalMechanicalStateName, \r\n            T.GoldMechanicalStateName AS Dict");
            viewString.Append("ionaryMechanicalState_GoldMechanicalStateName, \r\n            T.CustomMechanicalS");
            viewString.Append("tateName AS DictionaryMechanicalState_CustomMechanicalStateName, \r\n            T");
            viewString.Append(".Description AS DictionaryMechanicalState_Description, \r\n            T.FullDescr");
            viewString.Append("iption AS DictionaryMechanicalState_FullDescription, \r\n            T.Thumbnail A");
            viewString.Append("S DictionaryMechanicalState_Thumbnail, \r\n            T.OriginalFileDataID AS Dic");
            viewString.Append("tionaryMechanicalState_OriginalFileDataID, \r\n            T.Version AS Dictionary");
            viewString.Append("MechanicalState_Version, \r\n            T.VersionAntecedentID AS DictionaryMechan");
            viewString.Append("icalState_VersionAntecedentID, \r\n            T.VersionCertainty AS DictionaryMec");
            viewString.Append("hanicalState_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS Dict");
            viewString.Append("ionaryMechanicalState_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedB");
            viewString.Append("y AS DictionaryMechanicalState_VersionUpdatedBy, \r\n            T.VersionDeletedB");
            viewString.Append("y AS DictionaryMechanicalState_VersionDeletedBy, \r\n            T.VersionOwnerCon");
            viewString.Append("tactID AS DictionaryMechanicalState_VersionOwnerContactID, \r\n            T.Versi");
            viewString.Append("onOwnerCompanyID AS DictionaryMechanicalState_VersionOwnerCompanyID, \r\n         ");
            viewString.Append("   T.VersionUpdated AS DictionaryMechanicalState_VersionUpdated, \r\n            T");
            viewString.Append("rue AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryM");
            viewString.Append("echanicalState AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryMechanicalStates", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryMineralAbundances
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView485()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2726);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryMineralAbundances\r\n        [NKD.Mod");
            viewString.Append("ule.BusinessObjects.DictionaryMineralAbundance](T1.DictionaryMineralAbundance_Mi");
            viewString.Append("neralAbundanceID, T1.DictionaryMineralAbundance_StandardMineralAbundanceName, T1");
            viewString.Append(".DictionaryMineralAbundance_CoalMineralAbundanceName, T1.DictionaryMineralAbunda");
            viewString.Append("nce_GoldMineralAbundanceName, T1.DictionaryMineralAbundance_CustomMineralAbundan");
            viewString.Append("ceName, T1.DictionaryMineralAbundance_Description, T1.DictionaryMineralAbundance");
            viewString.Append("_FullDescription, T1.DictionaryMineralAbundance_Thumbnail, T1.DictionaryMineralA");
            viewString.Append("bundance_OriginalFileDataID, T1.DictionaryMineralAbundance_Version, T1.Dictionar");
            viewString.Append("yMineralAbundance_VersionAntecedentID, T1.DictionaryMineralAbundance_VersionCert");
            viewString.Append("ainty, T1.DictionaryMineralAbundance_VersionWorkflowInstanceID, T1.DictionaryMin");
            viewString.Append("eralAbundance_VersionUpdatedBy, T1.DictionaryMineralAbundance_VersionDeletedBy, ");
            viewString.Append("T1.DictionaryMineralAbundance_VersionOwnerContactID, T1.DictionaryMineralAbundan");
            viewString.Append("ce_VersionOwnerCompanyID, T1.DictionaryMineralAbundance_VersionUpdated)\r\n    FRO");
            viewString.Append("M (\r\n        SELECT \r\n            T.MineralAbundanceID AS DictionaryMineralAbund");
            viewString.Append("ance_MineralAbundanceID, \r\n            T.StandardMineralAbundanceName AS Diction");
            viewString.Append("aryMineralAbundance_StandardMineralAbundanceName, \r\n            T.CoalMineralAbu");
            viewString.Append("ndanceName AS DictionaryMineralAbundance_CoalMineralAbundanceName, \r\n           ");
            viewString.Append(" T.GoldMineralAbundanceName AS DictionaryMineralAbundance_GoldMineralAbundanceNa");
            viewString.Append("me, \r\n            T.CustomMineralAbundanceName AS DictionaryMineralAbundance_Cus");
            viewString.Append("tomMineralAbundanceName, \r\n            T.Description AS DictionaryMineralAbundan");
            viewString.Append("ce_Description, \r\n            T.FullDescription AS DictionaryMineralAbundance_Fu");
            viewString.Append("llDescription, \r\n            T.Thumbnail AS DictionaryMineralAbundance_Thumbnail");
            viewString.Append(", \r\n            T.OriginalFileDataID AS DictionaryMineralAbundance_OriginalFileD");
            viewString.Append("ataID, \r\n            T.Version AS DictionaryMineralAbundance_Version, \r\n        ");
            viewString.Append("    T.VersionAntecedentID AS DictionaryMineralAbundance_VersionAntecedentID, \r\n ");
            viewString.Append("           T.VersionCertainty AS DictionaryMineralAbundance_VersionCertainty, \r\n");
            viewString.Append("            T.VersionWorkflowInstanceID AS DictionaryMineralAbundance_VersionWor");
            viewString.Append("kflowInstanceID, \r\n            T.VersionUpdatedBy AS DictionaryMineralAbundance_");
            viewString.Append("VersionUpdatedBy, \r\n            T.VersionDeletedBy AS DictionaryMineralAbundance");
            viewString.Append("_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS DictionaryMineralAbu");
            viewString.Append("ndance_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS Dictionar");
            viewString.Append("yMineralAbundance_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS Dicti");
            viewString.Append("onaryMineralAbundance_VersionUpdated, \r\n            True AS _from0\r\n        FROM");
            viewString.Append(" NKDModuleBusinessObjectsStoreContainer.X_DictionaryMineralAbundance AS T\r\n    )");
            viewString.Append(" AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryMineralAbundances", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryMineralAndFossilAbundances
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView486()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3212);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryMineralAndFossilAbundances\r\n       ");
            viewString.Append(" [NKD.Module.BusinessObjects.DictionaryMineralAndFossilAbundance](T1.DictionaryM");
            viewString.Append("ineralAndFossilAbundance_MineralAndFossilAbundanceID, T1.DictionaryMineralAndFos");
            viewString.Append("silAbundance_StandardMineralAndFossilAbundanceName, T1.DictionaryMineralAndFossi");
            viewString.Append("lAbundance_CoalMineralAndFossilAbundanceName, T1.DictionaryMineralAndFossilAbund");
            viewString.Append("ance_GoldMineralAndFossilAbundanceName, T1.DictionaryMineralAndFossilAbundance_C");
            viewString.Append("ustomMineralAndFossilAbundanceName, T1.DictionaryMineralAndFossilAbundance_Descr");
            viewString.Append("iption, T1.DictionaryMineralAndFossilAbundance_FullDescription, T1.DictionaryMin");
            viewString.Append("eralAndFossilAbundance_Thumbnail, T1.DictionaryMineralAndFossilAbundance_Origina");
            viewString.Append("lFileDataID, T1.DictionaryMineralAndFossilAbundance_Version, T1.DictionaryMinera");
            viewString.Append("lAndFossilAbundance_VersionAntecedentID, T1.DictionaryMineralAndFossilAbundance_");
            viewString.Append("VersionCertainty, T1.DictionaryMineralAndFossilAbundance_VersionWorkflowInstance");
            viewString.Append("ID, T1.DictionaryMineralAndFossilAbundance_VersionUpdatedBy, T1.DictionaryMinera");
            viewString.Append("lAndFossilAbundance_VersionDeletedBy, T1.DictionaryMineralAndFossilAbundance_Ver");
            viewString.Append("sionOwnerContactID, T1.DictionaryMineralAndFossilAbundance_VersionOwnerCompanyID");
            viewString.Append(", T1.DictionaryMineralAndFossilAbundance_VersionUpdated)\r\n    FROM (\r\n        SE");
            viewString.Append("LECT \r\n            T.MineralAndFossilAbundanceID AS DictionaryMineralAndFossilAb");
            viewString.Append("undance_MineralAndFossilAbundanceID, \r\n            T.StandardMineralAndFossilAbu");
            viewString.Append("ndanceName AS DictionaryMineralAndFossilAbundance_StandardMineralAndFossilAbunda");
            viewString.Append("nceName, \r\n            T.CoalMineralAndFossilAbundanceName AS DictionaryMineralA");
            viewString.Append("ndFossilAbundance_CoalMineralAndFossilAbundanceName, \r\n            T.GoldMineral");
            viewString.Append("AndFossilAbundanceName AS DictionaryMineralAndFossilAbundance_GoldMineralAndFoss");
            viewString.Append("ilAbundanceName, \r\n            T.CustomMineralAndFossilAbundanceName AS Dictiona");
            viewString.Append("ryMineralAndFossilAbundance_CustomMineralAndFossilAbundanceName, \r\n            T");
            viewString.Append(".Description AS DictionaryMineralAndFossilAbundance_Description, \r\n            T");
            viewString.Append(".FullDescription AS DictionaryMineralAndFossilAbundance_FullDescription, \r\n     ");
            viewString.Append("       T.Thumbnail AS DictionaryMineralAndFossilAbundance_Thumbnail, \r\n         ");
            viewString.Append("   T.OriginalFileDataID AS DictionaryMineralAndFossilAbundance_OriginalFileDataI");
            viewString.Append("D, \r\n            T.Version AS DictionaryMineralAndFossilAbundance_Version, \r\n   ");
            viewString.Append("         T.VersionAntecedentID AS DictionaryMineralAndFossilAbundance_VersionAnt");
            viewString.Append("ecedentID, \r\n            T.VersionCertainty AS DictionaryMineralAndFossilAbundan");
            viewString.Append("ce_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS DictionaryMine");
            viewString.Append("ralAndFossilAbundance_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedB");
            viewString.Append("y AS DictionaryMineralAndFossilAbundance_VersionUpdatedBy, \r\n            T.Versi");
            viewString.Append("onDeletedBy AS DictionaryMineralAndFossilAbundance_VersionDeletedBy, \r\n         ");
            viewString.Append("   T.VersionOwnerContactID AS DictionaryMineralAndFossilAbundance_VersionOwnerCo");
            viewString.Append("ntactID, \r\n            T.VersionOwnerCompanyID AS DictionaryMineralAndFossilAbun");
            viewString.Append("dance_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS DictionaryMineral");
            viewString.Append("AndFossilAbundance_VersionUpdated, \r\n            True AS _from0\r\n        FROM NK");
            viewString.Append("DModuleBusinessObjectsStoreContainer.X_DictionaryMineralAndFossilAbundance AS T\r");
            viewString.Append("\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryMineralAndFossilAbundances", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryMineralAndFossilAssociations
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView487()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3320);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryMineralAndFossilAssociations\r\n     ");
            viewString.Append("   [NKD.Module.BusinessObjects.DictionaryMineralAndFossilAssociation](T1.Diction");
            viewString.Append("aryMineralAndFossilAssociation_MineralAndFossilAssociationID, T1.DictionaryMiner");
            viewString.Append("alAndFossilAssociation_StandardMineralAndFossilAssociationName, T1.DictionaryMin");
            viewString.Append("eralAndFossilAssociation_CoalMineralAndFossilAssociationName, T1.DictionaryMiner");
            viewString.Append("alAndFossilAssociation_GoldMineralAndFossilAssociationName, T1.DictionaryMineral");
            viewString.Append("AndFossilAssociation_CustomMineralAndFossilAssociationName, T1.DictionaryMineral");
            viewString.Append("AndFossilAssociation_Description, T1.DictionaryMineralAndFossilAssociation_FullD");
            viewString.Append("escription, T1.DictionaryMineralAndFossilAssociation_Thumbnail, T1.DictionaryMin");
            viewString.Append("eralAndFossilAssociation_OriginalFileDataID, T1.DictionaryMineralAndFossilAssoci");
            viewString.Append("ation_Version, T1.DictionaryMineralAndFossilAssociation_VersionAntecedentID, T1.");
            viewString.Append("DictionaryMineralAndFossilAssociation_VersionCertainty, T1.DictionaryMineralAndF");
            viewString.Append("ossilAssociation_VersionWorkflowInstanceID, T1.DictionaryMineralAndFossilAssocia");
            viewString.Append("tion_VersionUpdatedBy, T1.DictionaryMineralAndFossilAssociation_VersionDeletedBy");
            viewString.Append(", T1.DictionaryMineralAndFossilAssociation_VersionOwnerContactID, T1.DictionaryM");
            viewString.Append("ineralAndFossilAssociation_VersionOwnerCompanyID, T1.DictionaryMineralAndFossilA");
            viewString.Append("ssociation_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.MineralAn");
            viewString.Append("dFossilAssociationID AS DictionaryMineralAndFossilAssociation_MineralAndFossilAs");
            viewString.Append("sociationID, \r\n            T.StandardMineralAndFossilAssociationName AS Dictiona");
            viewString.Append("ryMineralAndFossilAssociation_StandardMineralAndFossilAssociationName, \r\n       ");
            viewString.Append("     T.CoalMineralAndFossilAssociationName AS DictionaryMineralAndFossilAssociat");
            viewString.Append("ion_CoalMineralAndFossilAssociationName, \r\n            T.GoldMineralAndFossilAss");
            viewString.Append("ociationName AS DictionaryMineralAndFossilAssociation_GoldMineralAndFossilAssoci");
            viewString.Append("ationName, \r\n            T.CustomMineralAndFossilAssociationName AS DictionaryMi");
            viewString.Append("neralAndFossilAssociation_CustomMineralAndFossilAssociationName, \r\n            T");
            viewString.Append(".Description AS DictionaryMineralAndFossilAssociation_Description, \r\n           ");
            viewString.Append(" T.FullDescription AS DictionaryMineralAndFossilAssociation_FullDescription, \r\n ");
            viewString.Append("           T.Thumbnail AS DictionaryMineralAndFossilAssociation_Thumbnail, \r\n   ");
            viewString.Append("         T.OriginalFileDataID AS DictionaryMineralAndFossilAssociation_OriginalF");
            viewString.Append("ileDataID, \r\n            T.Version AS DictionaryMineralAndFossilAssociation_Vers");
            viewString.Append("ion, \r\n            T.VersionAntecedentID AS DictionaryMineralAndFossilAssociatio");
            viewString.Append("n_VersionAntecedentID, \r\n            T.VersionCertainty AS DictionaryMineralAndF");
            viewString.Append("ossilAssociation_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS ");
            viewString.Append("DictionaryMineralAndFossilAssociation_VersionWorkflowInstanceID, \r\n            T");
            viewString.Append(".VersionUpdatedBy AS DictionaryMineralAndFossilAssociation_VersionUpdatedBy, \r\n ");
            viewString.Append("           T.VersionDeletedBy AS DictionaryMineralAndFossilAssociation_VersionDe");
            viewString.Append("letedBy, \r\n            T.VersionOwnerContactID AS DictionaryMineralAndFossilAsso");
            viewString.Append("ciation_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS Dictiona");
            viewString.Append("ryMineralAndFossilAssociation_VersionOwnerCompanyID, \r\n            T.VersionUpda");
            viewString.Append("ted AS DictionaryMineralAndFossilAssociation_VersionUpdated, \r\n            True ");
            viewString.Append("AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryMiner");
            viewString.Append("alAndFossilAssociation AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryMineralAndFossilAssociations", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryMineralAndFossilTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView488()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2942);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryMineralAndFossilTypes\r\n        [NKD");
            viewString.Append(".Module.BusinessObjects.DictionaryMineralAndFossilType](T1.DictionaryMineralAndF");
            viewString.Append("ossilType_MineralAndFossilTypeID, T1.DictionaryMineralAndFossilType_StandardMine");
            viewString.Append("ralAndFossilTypeName, T1.DictionaryMineralAndFossilType_CoalMineralAndFossilType");
            viewString.Append("Name, T1.DictionaryMineralAndFossilType_GoldMineralAndFossilTypeName, T1.Diction");
            viewString.Append("aryMineralAndFossilType_CustomMineralAndFossilTypeName, T1.DictionaryMineralAndF");
            viewString.Append("ossilType_Description, T1.DictionaryMineralAndFossilType_FullDescription, T1.Dic");
            viewString.Append("tionaryMineralAndFossilType_Thumbnail, T1.DictionaryMineralAndFossilType_Origina");
            viewString.Append("lFileDataID, T1.DictionaryMineralAndFossilType_Version, T1.DictionaryMineralAndF");
            viewString.Append("ossilType_VersionAntecedentID, T1.DictionaryMineralAndFossilType_VersionCertaint");
            viewString.Append("y, T1.DictionaryMineralAndFossilType_VersionWorkflowInstanceID, T1.DictionaryMin");
            viewString.Append("eralAndFossilType_VersionUpdatedBy, T1.DictionaryMineralAndFossilType_VersionDel");
            viewString.Append("etedBy, T1.DictionaryMineralAndFossilType_VersionOwnerContactID, T1.DictionaryMi");
            viewString.Append("neralAndFossilType_VersionOwnerCompanyID, T1.DictionaryMineralAndFossilType_Vers");
            viewString.Append("ionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.MineralAndFossilTypeID A");
            viewString.Append("S DictionaryMineralAndFossilType_MineralAndFossilTypeID, \r\n            T.Standar");
            viewString.Append("dMineralAndFossilTypeName AS DictionaryMineralAndFossilType_StandardMineralAndFo");
            viewString.Append("ssilTypeName, \r\n            T.CoalMineralAndFossilTypeName AS DictionaryMineralA");
            viewString.Append("ndFossilType_CoalMineralAndFossilTypeName, \r\n            T.GoldMineralAndFossilT");
            viewString.Append("ypeName AS DictionaryMineralAndFossilType_GoldMineralAndFossilTypeName, \r\n      ");
            viewString.Append("      T.CustomMineralAndFossilTypeName AS DictionaryMineralAndFossilType_CustomM");
            viewString.Append("ineralAndFossilTypeName, \r\n            T.Description AS DictionaryMineralAndFoss");
            viewString.Append("ilType_Description, \r\n            T.FullDescription AS DictionaryMineralAndFossi");
            viewString.Append("lType_FullDescription, \r\n            T.Thumbnail AS DictionaryMineralAndFossilTy");
            viewString.Append("pe_Thumbnail, \r\n            T.OriginalFileDataID AS DictionaryMineralAndFossilTy");
            viewString.Append("pe_OriginalFileDataID, \r\n            T.Version AS DictionaryMineralAndFossilType");
            viewString.Append("_Version, \r\n            T.VersionAntecedentID AS DictionaryMineralAndFossilType_");
            viewString.Append("VersionAntecedentID, \r\n            T.VersionCertainty AS DictionaryMineralAndFos");
            viewString.Append("silType_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS Dictionar");
            viewString.Append("yMineralAndFossilType_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedB");
            viewString.Append("y AS DictionaryMineralAndFossilType_VersionUpdatedBy, \r\n            T.VersionDel");
            viewString.Append("etedBy AS DictionaryMineralAndFossilType_VersionDeletedBy, \r\n            T.Versi");
            viewString.Append("onOwnerContactID AS DictionaryMineralAndFossilType_VersionOwnerContactID, \r\n    ");
            viewString.Append("        T.VersionOwnerCompanyID AS DictionaryMineralAndFossilType_VersionOwnerCo");
            viewString.Append("mpanyID, \r\n            T.VersionUpdated AS DictionaryMineralAndFossilType_Versio");
            viewString.Append("nUpdated, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjectsSto");
            viewString.Append("reContainer.X_DictionaryMineralAndFossilType AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryMineralAndFossilTypes", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryMineralForms
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView489()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2456);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryMineralForms\r\n        [NKD.Module.B");
            viewString.Append("usinessObjects.DictionaryMineralForm](T1.DictionaryMineralForm_MineralFormID, T1");
            viewString.Append(".DictionaryMineralForm_StandardMineralFormName, T1.DictionaryMineralForm_CoalMin");
            viewString.Append("eralFormName, T1.DictionaryMineralForm_GoldMineralFormName, T1.DictionaryMineral");
            viewString.Append("Form_CustomMineralFormName, T1.DictionaryMineralForm_Description, T1.DictionaryM");
            viewString.Append("ineralForm_FullDescription, T1.DictionaryMineralForm_Thumbnail, T1.DictionaryMin");
            viewString.Append("eralForm_OriginalFileDataID, T1.DictionaryMineralForm_Version, T1.DictionaryMine");
            viewString.Append("ralForm_VersionAntecedentID, T1.DictionaryMineralForm_VersionCertainty, T1.Dicti");
            viewString.Append("onaryMineralForm_VersionWorkflowInstanceID, T1.DictionaryMineralForm_VersionUpda");
            viewString.Append("tedBy, T1.DictionaryMineralForm_VersionDeletedBy, T1.DictionaryMineralForm_Versi");
            viewString.Append("onOwnerContactID, T1.DictionaryMineralForm_VersionOwnerCompanyID, T1.DictionaryM");
            viewString.Append("ineralForm_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.MineralFo");
            viewString.Append("rmID AS DictionaryMineralForm_MineralFormID, \r\n            T.StandardMineralForm");
            viewString.Append("Name AS DictionaryMineralForm_StandardMineralFormName, \r\n            T.CoalMiner");
            viewString.Append("alFormName AS DictionaryMineralForm_CoalMineralFormName, \r\n            T.GoldMin");
            viewString.Append("eralFormName AS DictionaryMineralForm_GoldMineralFormName, \r\n            T.Custo");
            viewString.Append("mMineralFormName AS DictionaryMineralForm_CustomMineralFormName, \r\n            T");
            viewString.Append(".Description AS DictionaryMineralForm_Description, \r\n            T.FullDescripti");
            viewString.Append("on AS DictionaryMineralForm_FullDescription, \r\n            T.Thumbnail AS Dictio");
            viewString.Append("naryMineralForm_Thumbnail, \r\n            T.OriginalFileDataID AS DictionaryMiner");
            viewString.Append("alForm_OriginalFileDataID, \r\n            T.Version AS DictionaryMineralForm_Vers");
            viewString.Append("ion, \r\n            T.VersionAntecedentID AS DictionaryMineralForm_VersionAnteced");
            viewString.Append("entID, \r\n            T.VersionCertainty AS DictionaryMineralForm_VersionCertaint");
            viewString.Append("y, \r\n            T.VersionWorkflowInstanceID AS DictionaryMineralForm_VersionWor");
            viewString.Append("kflowInstanceID, \r\n            T.VersionUpdatedBy AS DictionaryMineralForm_Versi");
            viewString.Append("onUpdatedBy, \r\n            T.VersionDeletedBy AS DictionaryMineralForm_VersionDe");
            viewString.Append("letedBy, \r\n            T.VersionOwnerContactID AS DictionaryMineralForm_VersionO");
            viewString.Append("wnerContactID, \r\n            T.VersionOwnerCompanyID AS DictionaryMineralForm_Ve");
            viewString.Append("rsionOwnerCompanyID, \r\n            T.VersionUpdated AS DictionaryMineralForm_Ver");
            viewString.Append("sionUpdated, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjects");
            viewString.Append("StoreContainer.X_DictionaryMineralForm AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryMineralForms", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryMineralStyles
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView490()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2510);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryMineralStyles\r\n        [NKD.Module.");
            viewString.Append("BusinessObjects.DictionaryMineralStyle](T1.DictionaryMineralStyle_MineralStyleID");
            viewString.Append(", T1.DictionaryMineralStyle_StandardMineralStyleName, T1.DictionaryMineralStyle_");
            viewString.Append("CoalMineralStyleName, T1.DictionaryMineralStyle_GoldMineralStyleName, T1.Diction");
            viewString.Append("aryMineralStyle_CustomMineralStyleName, T1.DictionaryMineralStyle_Description, T");
            viewString.Append("1.DictionaryMineralStyle_FullDescription, T1.DictionaryMineralStyle_Thumbnail, T");
            viewString.Append("1.DictionaryMineralStyle_OriginalFileDataID, T1.DictionaryMineralStyle_Version, ");
            viewString.Append("T1.DictionaryMineralStyle_VersionAntecedentID, T1.DictionaryMineralStyle_Version");
            viewString.Append("Certainty, T1.DictionaryMineralStyle_VersionWorkflowInstanceID, T1.DictionaryMin");
            viewString.Append("eralStyle_VersionUpdatedBy, T1.DictionaryMineralStyle_VersionDeletedBy, T1.Dicti");
            viewString.Append("onaryMineralStyle_VersionOwnerContactID, T1.DictionaryMineralStyle_VersionOwnerC");
            viewString.Append("ompanyID, T1.DictionaryMineralStyle_VersionUpdated)\r\n    FROM (\r\n        SELECT ");
            viewString.Append("\r\n            T.MineralStyleID AS DictionaryMineralStyle_MineralStyleID, \r\n     ");
            viewString.Append("       T.StandardMineralStyleName AS DictionaryMineralStyle_StandardMineralStyle");
            viewString.Append("Name, \r\n            T.CoalMineralStyleName AS DictionaryMineralStyle_CoalMineral");
            viewString.Append("StyleName, \r\n            T.GoldMineralStyleName AS DictionaryMineralStyle_GoldMi");
            viewString.Append("neralStyleName, \r\n            T.CustomMineralStyleName AS DictionaryMineralStyle");
            viewString.Append("_CustomMineralStyleName, \r\n            T.Description AS DictionaryMineralStyle_D");
            viewString.Append("escription, \r\n            T.FullDescription AS DictionaryMineralStyle_FullDescri");
            viewString.Append("ption, \r\n            T.Thumbnail AS DictionaryMineralStyle_Thumbnail, \r\n        ");
            viewString.Append("    T.OriginalFileDataID AS DictionaryMineralStyle_OriginalFileDataID, \r\n       ");
            viewString.Append("     T.Version AS DictionaryMineralStyle_Version, \r\n            T.VersionAnteced");
            viewString.Append("entID AS DictionaryMineralStyle_VersionAntecedentID, \r\n            T.VersionCert");
            viewString.Append("ainty AS DictionaryMineralStyle_VersionCertainty, \r\n            T.VersionWorkflo");
            viewString.Append("wInstanceID AS DictionaryMineralStyle_VersionWorkflowInstanceID, \r\n            T");
            viewString.Append(".VersionUpdatedBy AS DictionaryMineralStyle_VersionUpdatedBy, \r\n            T.Ve");
            viewString.Append("rsionDeletedBy AS DictionaryMineralStyle_VersionDeletedBy, \r\n            T.Versi");
            viewString.Append("onOwnerContactID AS DictionaryMineralStyle_VersionOwnerContactID, \r\n            ");
            viewString.Append("T.VersionOwnerCompanyID AS DictionaryMineralStyle_VersionOwnerCompanyID, \r\n     ");
            viewString.Append("       T.VersionUpdated AS DictionaryMineralStyle_VersionUpdated, \r\n            ");
            viewString.Append("True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_Dictionary");
            viewString.Append("MineralStyle AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryMineralStyles", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryMineralTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView491()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2456);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryMineralTypes\r\n        [NKD.Module.B");
            viewString.Append("usinessObjects.DictionaryMineralType](T1.DictionaryMineralType_MineralTypeID, T1");
            viewString.Append(".DictionaryMineralType_StandardMineralTypeName, T1.DictionaryMineralType_CoalMin");
            viewString.Append("eralTypeName, T1.DictionaryMineralType_GoldMineralTypeName, T1.DictionaryMineral");
            viewString.Append("Type_CustomMineralTypeName, T1.DictionaryMineralType_Description, T1.DictionaryM");
            viewString.Append("ineralType_FullDescription, T1.DictionaryMineralType_Thumbnail, T1.DictionaryMin");
            viewString.Append("eralType_OriginalFileDataID, T1.DictionaryMineralType_Version, T1.DictionaryMine");
            viewString.Append("ralType_VersionAntecedentID, T1.DictionaryMineralType_VersionCertainty, T1.Dicti");
            viewString.Append("onaryMineralType_VersionWorkflowInstanceID, T1.DictionaryMineralType_VersionUpda");
            viewString.Append("tedBy, T1.DictionaryMineralType_VersionDeletedBy, T1.DictionaryMineralType_Versi");
            viewString.Append("onOwnerContactID, T1.DictionaryMineralType_VersionOwnerCompanyID, T1.DictionaryM");
            viewString.Append("ineralType_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.MineralTy");
            viewString.Append("peID AS DictionaryMineralType_MineralTypeID, \r\n            T.StandardMineralType");
            viewString.Append("Name AS DictionaryMineralType_StandardMineralTypeName, \r\n            T.CoalMiner");
            viewString.Append("alTypeName AS DictionaryMineralType_CoalMineralTypeName, \r\n            T.GoldMin");
            viewString.Append("eralTypeName AS DictionaryMineralType_GoldMineralTypeName, \r\n            T.Custo");
            viewString.Append("mMineralTypeName AS DictionaryMineralType_CustomMineralTypeName, \r\n            T");
            viewString.Append(".Description AS DictionaryMineralType_Description, \r\n            T.FullDescripti");
            viewString.Append("on AS DictionaryMineralType_FullDescription, \r\n            T.Thumbnail AS Dictio");
            viewString.Append("naryMineralType_Thumbnail, \r\n            T.OriginalFileDataID AS DictionaryMiner");
            viewString.Append("alType_OriginalFileDataID, \r\n            T.Version AS DictionaryMineralType_Vers");
            viewString.Append("ion, \r\n            T.VersionAntecedentID AS DictionaryMineralType_VersionAnteced");
            viewString.Append("entID, \r\n            T.VersionCertainty AS DictionaryMineralType_VersionCertaint");
            viewString.Append("y, \r\n            T.VersionWorkflowInstanceID AS DictionaryMineralType_VersionWor");
            viewString.Append("kflowInstanceID, \r\n            T.VersionUpdatedBy AS DictionaryMineralType_Versi");
            viewString.Append("onUpdatedBy, \r\n            T.VersionDeletedBy AS DictionaryMineralType_VersionDe");
            viewString.Append("letedBy, \r\n            T.VersionOwnerContactID AS DictionaryMineralType_VersionO");
            viewString.Append("wnerContactID, \r\n            T.VersionOwnerCompanyID AS DictionaryMineralType_Ve");
            viewString.Append("rsionOwnerCompanyID, \r\n            T.VersionUpdated AS DictionaryMineralType_Ver");
            viewString.Append("sionUpdated, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjects");
            viewString.Append("StoreContainer.X_DictionaryMineralType AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryMineralTypes", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryModels
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView492()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3627);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryModels\r\n        [NKD.Module.Busines");
            viewString.Append("sObjects.DictionaryModel](T1.DictionaryModel_ModelID, T1.DictionaryModel_ParentM");
            viewString.Append("odelID, T1.DictionaryModel_StandardModelName, T1.DictionaryModel_EcriModelName, ");
            viewString.Append("T1.DictionaryModel_CustomModelName, T1.DictionaryModel_CompanyID, T1.DictionaryM");
            viewString.Append("odel_OriginalManufacturerName, T1.DictionaryModel_ModelStatusID, T1.DictionaryMo");
            viewString.Append("del_DeviceTypeID, T1.DictionaryModel_IsMake, T1.DictionaryModel_ManufacturedFrom");
            viewString.Append(", T1.DictionaryModel_ManufacturedUntil, T1.DictionaryModel_SupportedUntil, T1.Di");
            viewString.Append("ctionaryModel_EstimatedLifetimeUnitID, T1.DictionaryModel_EstimatedLifetime, T1.");
            viewString.Append("DictionaryModel_Description, T1.DictionaryModel_FullDescription, T1.DictionaryMo");
            viewString.Append("del_Thumbnail, T1.DictionaryModel_OriginalFileDataID, T1.DictionaryModel_Version");
            viewString.Append(", T1.DictionaryModel_VersionAntecedentID, T1.DictionaryModel_VersionCertainty, T");
            viewString.Append("1.DictionaryModel_VersionWorkflowInstanceID, T1.DictionaryModel_VersionUpdatedBy");
            viewString.Append(", T1.DictionaryModel_VersionDeletedBy, T1.DictionaryModel_VersionOwnerContactID,");
            viewString.Append(" T1.DictionaryModel_VersionOwnerCompanyID, T1.DictionaryModel_VersionUpdated, T1");
            viewString.Append(".DictionaryModel_UserGuideFileDataID, T1.DictionaryModel_DefaultLicenseTypeID, T");
            viewString.Append("1.DictionaryModel_SecureFileDataID, T1.DictionaryModel_SecureRedirectURL)\r\n    F");
            viewString.Append("ROM (\r\n        SELECT \r\n            T.ModelID AS DictionaryModel_ModelID, \r\n    ");
            viewString.Append("        T.ParentModelID AS DictionaryModel_ParentModelID, \r\n            T.Standa");
            viewString.Append("rdModelName AS DictionaryModel_StandardModelName, \r\n            T.EcriModelName ");
            viewString.Append("AS DictionaryModel_EcriModelName, \r\n            T.CustomModelName AS DictionaryM");
            viewString.Append("odel_CustomModelName, \r\n            T.CompanyID AS DictionaryModel_CompanyID, \r\n");
            viewString.Append("            T.OriginalManufacturerName AS DictionaryModel_OriginalManufacturerNa");
            viewString.Append("me, \r\n            T.ModelStatusID AS DictionaryModel_ModelStatusID, \r\n          ");
            viewString.Append("  T.DeviceTypeID AS DictionaryModel_DeviceTypeID, \r\n            T.IsMake AS Dict");
            viewString.Append("ionaryModel_IsMake, \r\n            T.ManufacturedFrom AS DictionaryModel_Manufact");
            viewString.Append("uredFrom, \r\n            T.ManufacturedUntil AS DictionaryModel_ManufacturedUntil");
            viewString.Append(", \r\n            T.SupportedUntil AS DictionaryModel_SupportedUntil, \r\n          ");
            viewString.Append("  T.EstimatedLifetimeUnitID AS DictionaryModel_EstimatedLifetimeUnitID, \r\n      ");
            viewString.Append("      T.EstimatedLifetime AS DictionaryModel_EstimatedLifetime, \r\n            T.");
            viewString.Append("Description AS DictionaryModel_Description, \r\n            T.FullDescription AS D");
            viewString.Append("ictionaryModel_FullDescription, \r\n            T.Thumbnail AS DictionaryModel_Thu");
            viewString.Append("mbnail, \r\n            T.OriginalFileDataID AS DictionaryModel_OriginalFileDataID");
            viewString.Append(", \r\n            T.Version AS DictionaryModel_Version, \r\n            T.VersionAnt");
            viewString.Append("ecedentID AS DictionaryModel_VersionAntecedentID, \r\n            T.VersionCertain");
            viewString.Append("ty AS DictionaryModel_VersionCertainty, \r\n            T.VersionWorkflowInstanceI");
            viewString.Append("D AS DictionaryModel_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy");
            viewString.Append(" AS DictionaryModel_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS Dictio");
            viewString.Append("naryModel_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS DictionaryM");
            viewString.Append("odel_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS DictionaryM");
            viewString.Append("odel_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS DictionaryModel_Ve");
            viewString.Append("rsionUpdated, \r\n            T.UserGuideFileDataID AS DictionaryModel_UserGuideFi");
            viewString.Append("leDataID, \r\n            T.DefaultLicenseTypeID AS DictionaryModel_DefaultLicense");
            viewString.Append("TypeID, \r\n            T.SecureFileDataID AS DictionaryModel_SecureFileDataID, \r\n");
            viewString.Append("            T.SecureRedirectURL AS DictionaryModel_SecureRedirectURL, \r\n        ");
            viewString.Append("    True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_Dictio");
            viewString.Append("naryModel AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryModels", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryModelCategories
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView493()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryModelCategories", "\r\n    SELECT VALUE -- Constructing DictionaryModelCategories\r\n        [NKD.Module" +
                    ".BusinessObjects.DictionaryModelCategory](T1.DictionaryModelCategory_ModelCatego" +
                    "ryID, T1.DictionaryModelCategory_ModelID, T1.DictionaryModelCategory_CategoryDev" +
                    "iceTypeID, T1.DictionaryModelCategory_Version, T1.DictionaryModelCategory_Versio" +
                    "nAntecedentID, T1.DictionaryModelCategory_VersionCertainty, T1.DictionaryModelCa" +
                    "tegory_VersionWorkflowInstanceID, T1.DictionaryModelCategory_VersionUpdatedBy, T" +
                    "1.DictionaryModelCategory_VersionDeletedBy, T1.DictionaryModelCategory_VersionOw" +
                    "nerContactID, T1.DictionaryModelCategory_VersionOwnerCompanyID, T1.DictionaryMod" +
                    "elCategory_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.ModelCate" +
                    "goryID AS DictionaryModelCategory_ModelCategoryID, \r\n            T.ModelID AS Di" +
                    "ctionaryModelCategory_ModelID, \r\n            T.CategoryDeviceTypeID AS Dictionar" +
                    "yModelCategory_CategoryDeviceTypeID, \r\n            T.Version AS DictionaryModelC" +
                    "ategory_Version, \r\n            T.VersionAntecedentID AS DictionaryModelCategory_" +
                    "VersionAntecedentID, \r\n            T.VersionCertainty AS DictionaryModelCategory" +
                    "_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS DictionaryModelC" +
                    "ategory_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS Dictionar" +
                    "yModelCategory_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS DictionaryM" +
                    "odelCategory_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS Dictiona" +
                    "ryModelCategory_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS " +
                    "DictionaryModelCategory_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS" +
                    " DictionaryModelCategory_VersionUpdated, \r\n            True AS _from0\r\n        F" +
                    "ROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryModelCategory AS T\r\n    )" +
                    " AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryModelRelations
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView494()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryModelRelations", "\r\n    SELECT VALUE -- Constructing DictionaryModelRelations\r\n        [NKD.Module." +
                    "BusinessObjects.DictionaryModelRelation](T1.DictionaryModelRelation_ModelRelatio" +
                    "nID, T1.DictionaryModelRelation_OriginalModelID, T1.DictionaryModelRelation_Rela" +
                    "tedModelID, T1.DictionaryModelRelation_RelationTypeID, T1.DictionaryModelRelatio" +
                    "n_Related, T1.DictionaryModelRelation_Version, T1.DictionaryModelRelation_Versio" +
                    "nAntecedentID, T1.DictionaryModelRelation_VersionCertainty, T1.DictionaryModelRe" +
                    "lation_VersionWorkflowInstanceID, T1.DictionaryModelRelation_VersionUpdatedBy, T" +
                    "1.DictionaryModelRelation_VersionDeletedBy, T1.DictionaryModelRelation_VersionOw" +
                    "nerContactID, T1.DictionaryModelRelation_VersionOwnerCompanyID, T1.DictionaryMod" +
                    "elRelation_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.ModelRela" +
                    "tionID AS DictionaryModelRelation_ModelRelationID, \r\n            T.OriginalModel" +
                    "ID AS DictionaryModelRelation_OriginalModelID, \r\n            T.RelatedModelID AS" +
                    " DictionaryModelRelation_RelatedModelID, \r\n            T.RelationTypeID AS Dicti" +
                    "onaryModelRelation_RelationTypeID, \r\n            T.Related AS DictionaryModelRel" +
                    "ation_Related, \r\n            T.Version AS DictionaryModelRelation_Version, \r\n   " +
                    "         T.VersionAntecedentID AS DictionaryModelRelation_VersionAntecedentID, \r" +
                    "\n            T.VersionCertainty AS DictionaryModelRelation_VersionCertainty, \r\n " +
                    "           T.VersionWorkflowInstanceID AS DictionaryModelRelation_VersionWorkflo" +
                    "wInstanceID, \r\n            T.VersionUpdatedBy AS DictionaryModelRelation_Version" +
                    "UpdatedBy, \r\n            T.VersionDeletedBy AS DictionaryModelRelation_VersionDe" +
                    "letedBy, \r\n            T.VersionOwnerContactID AS DictionaryModelRelation_Versio" +
                    "nOwnerContactID, \r\n            T.VersionOwnerCompanyID AS DictionaryModelRelatio" +
                    "n_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS DictionaryModelRelati" +
                    "on_VersionUpdated, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessO" +
                    "bjectsStoreContainer.X_DictionaryModelRelation AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryModelStatus
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView495()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2199);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryModelStatus\r\n        [NKD.Module.Bu");
            viewString.Append("sinessObjects.DictionaryModelStatus](T1.DictionaryModelStatus_ModelStatusID, T1.");
            viewString.Append("DictionaryModelStatus_StandardModelStatusName, T1.DictionaryModelStatus_CustomMo");
            viewString.Append("delStatusName, T1.DictionaryModelStatus_Description, T1.DictionaryModelStatus_Fu");
            viewString.Append("llDescription, T1.DictionaryModelStatus_Thumbnail, T1.DictionaryModelStatus_Orig");
            viewString.Append("inalFileDataID, T1.DictionaryModelStatus_Version, T1.DictionaryModelStatus_Versi");
            viewString.Append("onAntecedentID, T1.DictionaryModelStatus_VersionCertainty, T1.DictionaryModelSta");
            viewString.Append("tus_VersionWorkflowInstanceID, T1.DictionaryModelStatus_VersionUpdatedBy, T1.Dic");
            viewString.Append("tionaryModelStatus_VersionDeletedBy, T1.DictionaryModelStatus_VersionOwnerContac");
            viewString.Append("tID, T1.DictionaryModelStatus_VersionOwnerCompanyID, T1.DictionaryModelStatus_Ve");
            viewString.Append("rsionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.ModelStatusID AS Dicti");
            viewString.Append("onaryModelStatus_ModelStatusID, \r\n            T.StandardModelStatusName AS Dicti");
            viewString.Append("onaryModelStatus_StandardModelStatusName, \r\n            T.CustomModelStatusName ");
            viewString.Append("AS DictionaryModelStatus_CustomModelStatusName, \r\n            T.Description AS D");
            viewString.Append("ictionaryModelStatus_Description, \r\n            T.FullDescription AS DictionaryM");
            viewString.Append("odelStatus_FullDescription, \r\n            T.Thumbnail AS DictionaryModelStatus_T");
            viewString.Append("humbnail, \r\n            T.OriginalFileDataID AS DictionaryModelStatus_OriginalFi");
            viewString.Append("leDataID, \r\n            T.Version AS DictionaryModelStatus_Version, \r\n          ");
            viewString.Append("  T.VersionAntecedentID AS DictionaryModelStatus_VersionAntecedentID, \r\n        ");
            viewString.Append("    T.VersionCertainty AS DictionaryModelStatus_VersionCertainty, \r\n            ");
            viewString.Append("T.VersionWorkflowInstanceID AS DictionaryModelStatus_VersionWorkflowInstanceID, ");
            viewString.Append("\r\n            T.VersionUpdatedBy AS DictionaryModelStatus_VersionUpdatedBy, \r\n  ");
            viewString.Append("          T.VersionDeletedBy AS DictionaryModelStatus_VersionDeletedBy, \r\n      ");
            viewString.Append("      T.VersionOwnerContactID AS DictionaryModelStatus_VersionOwnerContactID, \r\n");
            viewString.Append("            T.VersionOwnerCompanyID AS DictionaryModelStatus_VersionOwnerCompany");
            viewString.Append("ID, \r\n            T.VersionUpdated AS DictionaryModelStatus_VersionUpdated, \r\n  ");
            viewString.Append("          True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_");
            viewString.Append("DictionaryModelStatus AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryModelStatus", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryMoistureSensitivities
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView496()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2889);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryMoistureSensitivities\r\n        [NKD");
            viewString.Append(".Module.BusinessObjects.DictionaryMoistureSensitivity](T1.DictionaryMoistureSens");
            viewString.Append("itivity_MoistureSensitivityID, T1.DictionaryMoistureSensitivity_StandardMoisture");
            viewString.Append("SensitivityName, T1.DictionaryMoistureSensitivity_CoalMoistureSensitivityName, T");
            viewString.Append("1.DictionaryMoistureSensitivity_GoldMoistureSensitivityName, T1.DictionaryMoistu");
            viewString.Append("reSensitivity_CustomMoistureSensitivityName, T1.DictionaryMoistureSensitivity_De");
            viewString.Append("scription, T1.DictionaryMoistureSensitivity_FullDescription, T1.DictionaryMoistu");
            viewString.Append("reSensitivity_Thumbnail, T1.DictionaryMoistureSensitivity_OriginalFileDataID, T1");
            viewString.Append(".DictionaryMoistureSensitivity_Version, T1.DictionaryMoistureSensitivity_Version");
            viewString.Append("AntecedentID, T1.DictionaryMoistureSensitivity_VersionCertainty, T1.DictionaryMo");
            viewString.Append("istureSensitivity_VersionWorkflowInstanceID, T1.DictionaryMoistureSensitivity_Ve");
            viewString.Append("rsionUpdatedBy, T1.DictionaryMoistureSensitivity_VersionDeletedBy, T1.Dictionary");
            viewString.Append("MoistureSensitivity_VersionOwnerContactID, T1.DictionaryMoistureSensitivity_Vers");
            viewString.Append("ionOwnerCompanyID, T1.DictionaryMoistureSensitivity_VersionUpdated)\r\n    FROM (\r");
            viewString.Append("\n        SELECT \r\n            T.MoistureSensitivityID AS DictionaryMoistureSensi");
            viewString.Append("tivity_MoistureSensitivityID, \r\n            T.StandardMoistureSensitivityName AS");
            viewString.Append(" DictionaryMoistureSensitivity_StandardMoistureSensitivityName, \r\n            T.");
            viewString.Append("CoalMoistureSensitivityName AS DictionaryMoistureSensitivity_CoalMoistureSensiti");
            viewString.Append("vityName, \r\n            T.GoldMoistureSensitivityName AS DictionaryMoistureSensi");
            viewString.Append("tivity_GoldMoistureSensitivityName, \r\n            T.CustomMoistureSensitivityNam");
            viewString.Append("e AS DictionaryMoistureSensitivity_CustomMoistureSensitivityName, \r\n            ");
            viewString.Append("T.Description AS DictionaryMoistureSensitivity_Description, \r\n            T.Full");
            viewString.Append("Description AS DictionaryMoistureSensitivity_FullDescription, \r\n            T.Th");
            viewString.Append("umbnail AS DictionaryMoistureSensitivity_Thumbnail, \r\n            T.OriginalFile");
            viewString.Append("DataID AS DictionaryMoistureSensitivity_OriginalFileDataID, \r\n            T.Vers");
            viewString.Append("ion AS DictionaryMoistureSensitivity_Version, \r\n            T.VersionAntecedentI");
            viewString.Append("D AS DictionaryMoistureSensitivity_VersionAntecedentID, \r\n            T.VersionC");
            viewString.Append("ertainty AS DictionaryMoistureSensitivity_VersionCertainty, \r\n            T.Vers");
            viewString.Append("ionWorkflowInstanceID AS DictionaryMoistureSensitivity_VersionWorkflowInstanceID");
            viewString.Append(", \r\n            T.VersionUpdatedBy AS DictionaryMoistureSensitivity_VersionUpdat");
            viewString.Append("edBy, \r\n            T.VersionDeletedBy AS DictionaryMoistureSensitivity_VersionD");
            viewString.Append("eletedBy, \r\n            T.VersionOwnerContactID AS DictionaryMoistureSensitivity");
            viewString.Append("_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS DictionaryMoist");
            viewString.Append("ureSensitivity_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS Dictiona");
            viewString.Append("ryMoistureSensitivity_VersionUpdated, \r\n            True AS _from0\r\n        FROM");
            viewString.Append(" NKDModuleBusinessObjectsStoreContainer.X_DictionaryMoistureSensitivity AS T\r\n  ");
            viewString.Append("  ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryMoistureSensitivities", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryPartStatus
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView497()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2155);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryPartStatus\r\n        [NKD.Module.Bus");
            viewString.Append("inessObjects.DictionaryPartStatus](T1.DictionaryPartStatus_PartStatusID, T1.Dict");
            viewString.Append("ionaryPartStatus_StandardPartStatusName, T1.DictionaryPartStatus_CustomPartStatu");
            viewString.Append("sName, T1.DictionaryPartStatus_Description, T1.DictionaryPartStatus_FullDescript");
            viewString.Append("ion, T1.DictionaryPartStatus_Thumbnail, T1.DictionaryPartStatus_OriginalFileData");
            viewString.Append("ID, T1.DictionaryPartStatus_Version, T1.DictionaryPartStatus_VersionAntecedentID");
            viewString.Append(", T1.DictionaryPartStatus_VersionCertainty, T1.DictionaryPartStatus_VersionWorkf");
            viewString.Append("lowInstanceID, T1.DictionaryPartStatus_VersionUpdatedBy, T1.DictionaryPartStatus");
            viewString.Append("_VersionDeletedBy, T1.DictionaryPartStatus_VersionOwnerContactID, T1.DictionaryP");
            viewString.Append("artStatus_VersionOwnerCompanyID, T1.DictionaryPartStatus_VersionUpdated)\r\n    FR");
            viewString.Append("OM (\r\n        SELECT \r\n            T.PartStatusID AS DictionaryPartStatus_PartSt");
            viewString.Append("atusID, \r\n            T.StandardPartStatusName AS DictionaryPartStatus_StandardP");
            viewString.Append("artStatusName, \r\n            T.CustomPartStatusName AS DictionaryPartStatus_Cust");
            viewString.Append("omPartStatusName, \r\n            T.Description AS DictionaryPartStatus_Descriptio");
            viewString.Append("n, \r\n            T.FullDescription AS DictionaryPartStatus_FullDescription, \r\n  ");
            viewString.Append("          T.Thumbnail AS DictionaryPartStatus_Thumbnail, \r\n            T.Origina");
            viewString.Append("lFileDataID AS DictionaryPartStatus_OriginalFileDataID, \r\n            T.Version ");
            viewString.Append("AS DictionaryPartStatus_Version, \r\n            T.VersionAntecedentID AS Dictiona");
            viewString.Append("ryPartStatus_VersionAntecedentID, \r\n            T.VersionCertainty AS Dictionary");
            viewString.Append("PartStatus_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS Dictio");
            viewString.Append("naryPartStatus_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS Di");
            viewString.Append("ctionaryPartStatus_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS Diction");
            viewString.Append("aryPartStatus_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS Diction");
            viewString.Append("aryPartStatus_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS Di");
            viewString.Append("ctionaryPartStatus_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS Dict");
            viewString.Append("ionaryPartStatus_VersionUpdated, \r\n            True AS _from0\r\n        FROM NKDM");
            viewString.Append("oduleBusinessObjectsStoreContainer.X_DictionaryPartStatus AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryPartStatus", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryPlasticities
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView498()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2403);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryPlasticities\r\n        [NKD.Module.B");
            viewString.Append("usinessObjects.DictionaryPlasticity](T1.DictionaryPlasticity_PlasticityID, T1.Di");
            viewString.Append("ctionaryPlasticity_StandardPlasticityName, T1.DictionaryPlasticity_CoalPlasticit");
            viewString.Append("yName, T1.DictionaryPlasticity_GoldPlasticityName, T1.DictionaryPlasticity_Custo");
            viewString.Append("mPlasticityName, T1.DictionaryPlasticity_Description, T1.DictionaryPlasticity_Fu");
            viewString.Append("llDescription, T1.DictionaryPlasticity_Thumbnail, T1.DictionaryPlasticity_Origin");
            viewString.Append("alFileDataID, T1.DictionaryPlasticity_Version, T1.DictionaryPlasticity_VersionAn");
            viewString.Append("tecedentID, T1.DictionaryPlasticity_VersionCertainty, T1.DictionaryPlasticity_Ve");
            viewString.Append("rsionWorkflowInstanceID, T1.DictionaryPlasticity_VersionUpdatedBy, T1.Dictionary");
            viewString.Append("Plasticity_VersionDeletedBy, T1.DictionaryPlasticity_VersionOwnerContactID, T1.D");
            viewString.Append("ictionaryPlasticity_VersionOwnerCompanyID, T1.DictionaryPlasticity_VersionUpdate");
            viewString.Append("d)\r\n    FROM (\r\n        SELECT \r\n            T.PlasticityID AS DictionaryPlastic");
            viewString.Append("ity_PlasticityID, \r\n            T.StandardPlasticityName AS DictionaryPlasticity");
            viewString.Append("_StandardPlasticityName, \r\n            T.CoalPlasticityName AS DictionaryPlastic");
            viewString.Append("ity_CoalPlasticityName, \r\n            T.GoldPlasticityName AS DictionaryPlastici");
            viewString.Append("ty_GoldPlasticityName, \r\n            T.CustomPlasticityName AS DictionaryPlastic");
            viewString.Append("ity_CustomPlasticityName, \r\n            T.Description AS DictionaryPlasticity_De");
            viewString.Append("scription, \r\n            T.FullDescription AS DictionaryPlasticity_FullDescripti");
            viewString.Append("on, \r\n            T.Thumbnail AS DictionaryPlasticity_Thumbnail, \r\n            T");
            viewString.Append(".OriginalFileDataID AS DictionaryPlasticity_OriginalFileDataID, \r\n            T.");
            viewString.Append("Version AS DictionaryPlasticity_Version, \r\n            T.VersionAntecedentID AS ");
            viewString.Append("DictionaryPlasticity_VersionAntecedentID, \r\n            T.VersionCertainty AS Di");
            viewString.Append("ctionaryPlasticity_VersionCertainty, \r\n            T.VersionWorkflowInstanceID A");
            viewString.Append("S DictionaryPlasticity_VersionWorkflowInstanceID, \r\n            T.VersionUpdated");
            viewString.Append("By AS DictionaryPlasticity_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS");
            viewString.Append(" DictionaryPlasticity_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS");
            viewString.Append(" DictionaryPlasticity_VersionOwnerContactID, \r\n            T.VersionOwnerCompany");
            viewString.Append("ID AS DictionaryPlasticity_VersionOwnerCompanyID, \r\n            T.VersionUpdated");
            viewString.Append(" AS DictionaryPlasticity_VersionUpdated, \r\n            True AS _from0\r\n        F");
            viewString.Append("ROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryPlasticity AS T\r\n    ) AS");
            viewString.Append(" T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryPlasticities", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryPlies
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView499()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryPlies", "\r\n    SELECT VALUE -- Constructing DictionaryPlies\r\n        [NKD.Module.BusinessO" +
                    "bjects.DictionaryPly](T1.DictionaryPly_PlyID, T1.DictionaryPly_StandardPlyName, " +
                    "T1.DictionaryPly_Description, T1.DictionaryPly_FullDescription, T1.DictionaryPly" +
                    "_Thumbnail, T1.DictionaryPly_OriginalFileDataID, T1.DictionaryPly_Version, T1.Di" +
                    "ctionaryPly_VersionAntecedentID, T1.DictionaryPly_VersionCertainty, T1.Dictionar" +
                    "yPly_VersionWorkflowInstanceID, T1.DictionaryPly_VersionUpdatedBy, T1.Dictionary" +
                    "Ply_VersionDeletedBy, T1.DictionaryPly_VersionOwnerContactID, T1.DictionaryPly_V" +
                    "ersionOwnerCompanyID, T1.DictionaryPly_VersionUpdated, T1.DictionaryPly_CustomPl" +
                    "yName)\r\n    FROM (\r\n        SELECT \r\n            T.PlyID AS DictionaryPly_PlyID," +
                    " \r\n            T.StandardPlyName AS DictionaryPly_StandardPlyName, \r\n           " +
                    " T.Description AS DictionaryPly_Description, \r\n            T.FullDescription AS " +
                    "DictionaryPly_FullDescription, \r\n            T.Thumbnail AS DictionaryPly_Thumbn" +
                    "ail, \r\n            T.OriginalFileDataID AS DictionaryPly_OriginalFileDataID, \r\n " +
                    "           T.Version AS DictionaryPly_Version, \r\n            T.VersionAntecedent" +
                    "ID AS DictionaryPly_VersionAntecedentID, \r\n            T.VersionCertainty AS Dic" +
                    "tionaryPly_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS Dictio" +
                    "naryPly_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS Dictionar" +
                    "yPly_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS DictionaryPly_Version" +
                    "DeletedBy, \r\n            T.VersionOwnerContactID AS DictionaryPly_VersionOwnerCo" +
                    "ntactID, \r\n            T.VersionOwnerCompanyID AS DictionaryPly_VersionOwnerComp" +
                    "anyID, \r\n            T.VersionUpdated AS DictionaryPly_VersionUpdated, \r\n       " +
                    "     T.CustomPlyName AS DictionaryPly_CustomPlyName, \r\n            True AS _from" +
                    "0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryPly AS T\r\n   " +
                    " ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryPlyAlias
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView500()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryPlyAlias", "\r\n    SELECT VALUE -- Constructing DictionaryPlyAlias\r\n        [NKD.Module.Busine" +
                    "ssObjects.DictionaryPlyAlias](T1.DictionaryPlyAlias_PlyAliasID, T1.DictionaryPly" +
                    "Alias_PlyID, T1.DictionaryPlyAlias_CustomPlyName, T1.DictionaryPlyAlias_FullDesc" +
                    "ription, T1.DictionaryPlyAlias_Thumbnail, T1.DictionaryPlyAlias_OriginalFileData" +
                    "ID, T1.DictionaryPlyAlias_Version, T1.DictionaryPlyAlias_VersionAntecedentID, T1" +
                    ".DictionaryPlyAlias_VersionCertainty, T1.DictionaryPlyAlias_VersionWorkflowInsta" +
                    "nceID, T1.DictionaryPlyAlias_VersionUpdatedBy, T1.DictionaryPlyAlias_VersionDele" +
                    "tedBy, T1.DictionaryPlyAlias_VersionOwnerContactID, T1.DictionaryPlyAlias_Versio" +
                    "nOwnerCompanyID, T1.DictionaryPlyAlias_VersionUpdated)\r\n    FROM (\r\n        SELE" +
                    "CT \r\n            T.PlyAliasID AS DictionaryPlyAlias_PlyAliasID, \r\n            T." +
                    "PlyID AS DictionaryPlyAlias_PlyID, \r\n            T.CustomPlyName AS DictionaryPl" +
                    "yAlias_CustomPlyName, \r\n            T.FullDescription AS DictionaryPlyAlias_Full" +
                    "Description, \r\n            T.Thumbnail AS DictionaryPlyAlias_Thumbnail, \r\n      " +
                    "      T.OriginalFileDataID AS DictionaryPlyAlias_OriginalFileDataID, \r\n         " +
                    "   T.Version AS DictionaryPlyAlias_Version, \r\n            T.VersionAntecedentID " +
                    "AS DictionaryPlyAlias_VersionAntecedentID, \r\n            T.VersionCertainty AS D" +
                    "ictionaryPlyAlias_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS" +
                    " DictionaryPlyAlias_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy " +
                    "AS DictionaryPlyAlias_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS Dict" +
                    "ionaryPlyAlias_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS Dictio" +
                    "naryPlyAlias_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS Dic" +
                    "tionaryPlyAlias_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS Diction" +
                    "aryPlyAlias_VersionUpdated, \r\n            True AS _from0\r\n        FROM NKDModule" +
                    "BusinessObjectsStoreContainer.X_DictionaryPlyAlias AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryPointLoadTestTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView501()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2780);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryPointLoadTestTypes\r\n        [NKD.Mo");
            viewString.Append("dule.BusinessObjects.DictionaryPointLoadTestType](T1.DictionaryPointLoadTestType");
            viewString.Append("_PointLoadTestTypeID, T1.DictionaryPointLoadTestType_StandardPointLoadTestTypeNa");
            viewString.Append("me, T1.DictionaryPointLoadTestType_CoalPointLoadTestTypeName, T1.DictionaryPoint");
            viewString.Append("LoadTestType_GoldPointLoadTestTypeName, T1.DictionaryPointLoadTestType_CustomPoi");
            viewString.Append("ntLoadTestTypeName, T1.DictionaryPointLoadTestType_Description, T1.DictionaryPoi");
            viewString.Append("ntLoadTestType_FullDescription, T1.DictionaryPointLoadTestType_Thumbnail, T1.Dic");
            viewString.Append("tionaryPointLoadTestType_OriginalFileDataID, T1.DictionaryPointLoadTestType_Vers");
            viewString.Append("ion, T1.DictionaryPointLoadTestType_VersionAntecedentID, T1.DictionaryPointLoadT");
            viewString.Append("estType_VersionCertainty, T1.DictionaryPointLoadTestType_VersionWorkflowInstance");
            viewString.Append("ID, T1.DictionaryPointLoadTestType_VersionUpdatedBy, T1.DictionaryPointLoadTestT");
            viewString.Append("ype_VersionDeletedBy, T1.DictionaryPointLoadTestType_VersionOwnerContactID, T1.D");
            viewString.Append("ictionaryPointLoadTestType_VersionOwnerCompanyID, T1.DictionaryPointLoadTestType");
            viewString.Append("_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.PointLoadTestTypeID");
            viewString.Append(" AS DictionaryPointLoadTestType_PointLoadTestTypeID, \r\n            T.StandardPoi");
            viewString.Append("ntLoadTestTypeName AS DictionaryPointLoadTestType_StandardPointLoadTestTypeName,");
            viewString.Append(" \r\n            T.CoalPointLoadTestTypeName AS DictionaryPointLoadTestType_CoalPo");
            viewString.Append("intLoadTestTypeName, \r\n            T.GoldPointLoadTestTypeName AS DictionaryPoin");
            viewString.Append("tLoadTestType_GoldPointLoadTestTypeName, \r\n            T.CustomPointLoadTestType");
            viewString.Append("Name AS DictionaryPointLoadTestType_CustomPointLoadTestTypeName, \r\n            T");
            viewString.Append(".Description AS DictionaryPointLoadTestType_Description, \r\n            T.FullDes");
            viewString.Append("cription AS DictionaryPointLoadTestType_FullDescription, \r\n            T.Thumbna");
            viewString.Append("il AS DictionaryPointLoadTestType_Thumbnail, \r\n            T.OriginalFileDataID ");
            viewString.Append("AS DictionaryPointLoadTestType_OriginalFileDataID, \r\n            T.Version AS Di");
            viewString.Append("ctionaryPointLoadTestType_Version, \r\n            T.VersionAntecedentID AS Dictio");
            viewString.Append("naryPointLoadTestType_VersionAntecedentID, \r\n            T.VersionCertainty AS D");
            viewString.Append("ictionaryPointLoadTestType_VersionCertainty, \r\n            T.VersionWorkflowInst");
            viewString.Append("anceID AS DictionaryPointLoadTestType_VersionWorkflowInstanceID, \r\n            T");
            viewString.Append(".VersionUpdatedBy AS DictionaryPointLoadTestType_VersionUpdatedBy, \r\n           ");
            viewString.Append(" T.VersionDeletedBy AS DictionaryPointLoadTestType_VersionDeletedBy, \r\n         ");
            viewString.Append("   T.VersionOwnerContactID AS DictionaryPointLoadTestType_VersionOwnerContactID,");
            viewString.Append(" \r\n            T.VersionOwnerCompanyID AS DictionaryPointLoadTestType_VersionOwn");
            viewString.Append("erCompanyID, \r\n            T.VersionUpdated AS DictionaryPointLoadTestType_Versi");
            viewString.Append("onUpdated, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjectsSt");
            viewString.Append("oreContainer.X_DictionaryPointLoadTestType AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryPointLoadTestTypes", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryPositions
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView502()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2294);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryPositions\r\n        [NKD.Module.Busi");
            viewString.Append("nessObjects.DictionaryPosition](T1.DictionaryPosition_PositionID, T1.DictionaryP");
            viewString.Append("osition_StandardPositionName, T1.DictionaryPosition_CoalPositionName, T1.Diction");
            viewString.Append("aryPosition_GoldPositionName, T1.DictionaryPosition_CustomPositionName, T1.Dicti");
            viewString.Append("onaryPosition_Description, T1.DictionaryPosition_FullDescription, T1.DictionaryP");
            viewString.Append("osition_Thumbnail, T1.DictionaryPosition_OriginalFileDataID, T1.DictionaryPositi");
            viewString.Append("on_Version, T1.DictionaryPosition_VersionAntecedentID, T1.DictionaryPosition_Ver");
            viewString.Append("sionCertainty, T1.DictionaryPosition_VersionWorkflowInstanceID, T1.DictionaryPos");
            viewString.Append("ition_VersionUpdatedBy, T1.DictionaryPosition_VersionDeletedBy, T1.DictionaryPos");
            viewString.Append("ition_VersionOwnerContactID, T1.DictionaryPosition_VersionOwnerCompanyID, T1.Dic");
            viewString.Append("tionaryPosition_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.Posi");
            viewString.Append("tionID AS DictionaryPosition_PositionID, \r\n            T.StandardPositionName AS");
            viewString.Append(" DictionaryPosition_StandardPositionName, \r\n            T.CoalPositionName AS Di");
            viewString.Append("ctionaryPosition_CoalPositionName, \r\n            T.GoldPositionName AS Dictionar");
            viewString.Append("yPosition_GoldPositionName, \r\n            T.CustomPositionName AS DictionaryPosi");
            viewString.Append("tion_CustomPositionName, \r\n            T.Description AS DictionaryPosition_Descr");
            viewString.Append("iption, \r\n            T.FullDescription AS DictionaryPosition_FullDescription, \r");
            viewString.Append("\n            T.Thumbnail AS DictionaryPosition_Thumbnail, \r\n            T.Origin");
            viewString.Append("alFileDataID AS DictionaryPosition_OriginalFileDataID, \r\n            T.Version A");
            viewString.Append("S DictionaryPosition_Version, \r\n            T.VersionAntecedentID AS DictionaryP");
            viewString.Append("osition_VersionAntecedentID, \r\n            T.VersionCertainty AS DictionaryPosit");
            viewString.Append("ion_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS DictionaryPos");
            viewString.Append("ition_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS DictionaryP");
            viewString.Append("osition_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS DictionaryPosition");
            viewString.Append("_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS DictionaryPosition_V");
            viewString.Append("ersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS DictionaryPositio");
            viewString.Append("n_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS DictionaryPosition_Ve");
            viewString.Append("rsionUpdated, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObject");
            viewString.Append("sStoreContainer.X_DictionaryPosition AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryPositions", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryProfessions
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView503()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2402);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryProfessions\r\n        [NKD.Module.Bu");
            viewString.Append("sinessObjects.DictionaryProfession](T1.DictionaryProfession_ProfessionID, T1.Dic");
            viewString.Append("tionaryProfession_StandardProfessionName, T1.DictionaryProfession_CoalProfession");
            viewString.Append("Name, T1.DictionaryProfession_GoldProfessionName, T1.DictionaryProfession_Custom");
            viewString.Append("ProfessionName, T1.DictionaryProfession_Description, T1.DictionaryProfession_Ful");
            viewString.Append("lDescription, T1.DictionaryProfession_Thumbnail, T1.DictionaryProfession_Origina");
            viewString.Append("lFileDataID, T1.DictionaryProfession_Version, T1.DictionaryProfession_VersionAnt");
            viewString.Append("ecedentID, T1.DictionaryProfession_VersionCertainty, T1.DictionaryProfession_Ver");
            viewString.Append("sionWorkflowInstanceID, T1.DictionaryProfession_VersionUpdatedBy, T1.DictionaryP");
            viewString.Append("rofession_VersionDeletedBy, T1.DictionaryProfession_VersionOwnerContactID, T1.Di");
            viewString.Append("ctionaryProfession_VersionOwnerCompanyID, T1.DictionaryProfession_VersionUpdated");
            viewString.Append(")\r\n    FROM (\r\n        SELECT \r\n            T.ProfessionID AS DictionaryProfessi");
            viewString.Append("on_ProfessionID, \r\n            T.StandardProfessionName AS DictionaryProfession_");
            viewString.Append("StandardProfessionName, \r\n            T.CoalProfessionName AS DictionaryProfessi");
            viewString.Append("on_CoalProfessionName, \r\n            T.GoldProfessionName AS DictionaryProfessio");
            viewString.Append("n_GoldProfessionName, \r\n            T.CustomProfessionName AS DictionaryProfessi");
            viewString.Append("on_CustomProfessionName, \r\n            T.Description AS DictionaryProfession_Des");
            viewString.Append("cription, \r\n            T.FullDescription AS DictionaryProfession_FullDescriptio");
            viewString.Append("n, \r\n            T.Thumbnail AS DictionaryProfession_Thumbnail, \r\n            T.");
            viewString.Append("OriginalFileDataID AS DictionaryProfession_OriginalFileDataID, \r\n            T.V");
            viewString.Append("ersion AS DictionaryProfession_Version, \r\n            T.VersionAntecedentID AS D");
            viewString.Append("ictionaryProfession_VersionAntecedentID, \r\n            T.VersionCertainty AS Dic");
            viewString.Append("tionaryProfession_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS");
            viewString.Append(" DictionaryProfession_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedB");
            viewString.Append("y AS DictionaryProfession_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS ");
            viewString.Append("DictionaryProfession_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS ");
            viewString.Append("DictionaryProfession_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyI");
            viewString.Append("D AS DictionaryProfession_VersionOwnerCompanyID, \r\n            T.VersionUpdated ");
            viewString.Append("AS DictionaryProfession_VersionUpdated, \r\n            True AS _from0\r\n        FR");
            viewString.Append("OM NKDModuleBusinessObjectsStoreContainer.X_DictionaryProfession AS T\r\n    ) AS ");
            viewString.Append("T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryProfessions", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryProvinceGroups
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView504()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2699);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryProvinceGroups\r\n        [NKD.Module");
            viewString.Append(".BusinessObjects.DictionaryProvinceGroup](T1.DictionaryProvinceGroup_ProvinceGro");
            viewString.Append("upID, T1.DictionaryProvinceGroup_StandardProvinceGroupName, T1.DictionaryProvinc");
            viewString.Append("eGroup_CoalProvinceGroupName, T1.DictionaryProvinceGroup_GoldProvinceGroupName, ");
            viewString.Append("T1.DictionaryProvinceGroup_CustomProvinceGroupName, T1.DictionaryProvinceGroup_P");
            viewString.Append("arentProvinceTypeID, T1.DictionaryProvinceGroup_Description, T1.DictionaryProvin");
            viewString.Append("ceGroup_FullDescription, T1.DictionaryProvinceGroup_Thumbnail, T1.DictionaryProv");
            viewString.Append("inceGroup_OriginalFileDataID, T1.DictionaryProvinceGroup_Version, T1.DictionaryP");
            viewString.Append("rovinceGroup_VersionAntecedentID, T1.DictionaryProvinceGroup_VersionCertainty, T");
            viewString.Append("1.DictionaryProvinceGroup_VersionWorkflowInstanceID, T1.DictionaryProvinceGroup_");
            viewString.Append("VersionUpdatedBy, T1.DictionaryProvinceGroup_VersionDeletedBy, T1.DictionaryProv");
            viewString.Append("inceGroup_VersionOwnerContactID, T1.DictionaryProvinceGroup_VersionOwnerCompanyI");
            viewString.Append("D, T1.DictionaryProvinceGroup_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n    ");
            viewString.Append("        T.ProvinceGroupID AS DictionaryProvinceGroup_ProvinceGroupID, \r\n        ");
            viewString.Append("    T.StandardProvinceGroupName AS DictionaryProvinceGroup_StandardProvinceGroup");
            viewString.Append("Name, \r\n            T.CoalProvinceGroupName AS DictionaryProvinceGroup_CoalProvi");
            viewString.Append("nceGroupName, \r\n            T.GoldProvinceGroupName AS DictionaryProvinceGroup_G");
            viewString.Append("oldProvinceGroupName, \r\n            T.CustomProvinceGroupName AS DictionaryProvi");
            viewString.Append("nceGroup_CustomProvinceGroupName, \r\n            T.ParentProvinceTypeID AS Dictio");
            viewString.Append("naryProvinceGroup_ParentProvinceTypeID, \r\n            T.Description AS Dictionar");
            viewString.Append("yProvinceGroup_Description, \r\n            T.FullDescription AS DictionaryProvinc");
            viewString.Append("eGroup_FullDescription, \r\n            T.Thumbnail AS DictionaryProvinceGroup_Thu");
            viewString.Append("mbnail, \r\n            T.OriginalFileDataID AS DictionaryProvinceGroup_OriginalFi");
            viewString.Append("leDataID, \r\n            T.Version AS DictionaryProvinceGroup_Version, \r\n        ");
            viewString.Append("    T.VersionAntecedentID AS DictionaryProvinceGroup_VersionAntecedentID, \r\n    ");
            viewString.Append("        T.VersionCertainty AS DictionaryProvinceGroup_VersionCertainty, \r\n      ");
            viewString.Append("      T.VersionWorkflowInstanceID AS DictionaryProvinceGroup_VersionWorkflowInst");
            viewString.Append("anceID, \r\n            T.VersionUpdatedBy AS DictionaryProvinceGroup_VersionUpdat");
            viewString.Append("edBy, \r\n            T.VersionDeletedBy AS DictionaryProvinceGroup_VersionDeleted");
            viewString.Append("By, \r\n            T.VersionOwnerContactID AS DictionaryProvinceGroup_VersionOwne");
            viewString.Append("rContactID, \r\n            T.VersionOwnerCompanyID AS DictionaryProvinceGroup_Ver");
            viewString.Append("sionOwnerCompanyID, \r\n            T.VersionUpdated AS DictionaryProvinceGroup_Ve");
            viewString.Append("rsionUpdated, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObject");
            viewString.Append("sStoreContainer.X_DictionaryProvinceGroup AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryProvinceGroups", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryProvinceTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView505()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2510);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryProvinceTypes\r\n        [NKD.Module.");
            viewString.Append("BusinessObjects.DictionaryProvinceType](T1.DictionaryProvinceType_ProvinceTypeID");
            viewString.Append(", T1.DictionaryProvinceType_StandardProvinceTypeName, T1.DictionaryProvinceType_");
            viewString.Append("CoalProvinceTypeName, T1.DictionaryProvinceType_GoldProvinceTypeName, T1.Diction");
            viewString.Append("aryProvinceType_CustomProvinceTypeName, T1.DictionaryProvinceType_Description, T");
            viewString.Append("1.DictionaryProvinceType_FullDescription, T1.DictionaryProvinceType_Thumbnail, T");
            viewString.Append("1.DictionaryProvinceType_OriginalFileDataID, T1.DictionaryProvinceType_Version, ");
            viewString.Append("T1.DictionaryProvinceType_VersionAntecedentID, T1.DictionaryProvinceType_Version");
            viewString.Append("Certainty, T1.DictionaryProvinceType_VersionWorkflowInstanceID, T1.DictionaryPro");
            viewString.Append("vinceType_VersionUpdatedBy, T1.DictionaryProvinceType_VersionDeletedBy, T1.Dicti");
            viewString.Append("onaryProvinceType_VersionOwnerContactID, T1.DictionaryProvinceType_VersionOwnerC");
            viewString.Append("ompanyID, T1.DictionaryProvinceType_VersionUpdated)\r\n    FROM (\r\n        SELECT ");
            viewString.Append("\r\n            T.ProvinceTypeID AS DictionaryProvinceType_ProvinceTypeID, \r\n     ");
            viewString.Append("       T.StandardProvinceTypeName AS DictionaryProvinceType_StandardProvinceType");
            viewString.Append("Name, \r\n            T.CoalProvinceTypeName AS DictionaryProvinceType_CoalProvinc");
            viewString.Append("eTypeName, \r\n            T.GoldProvinceTypeName AS DictionaryProvinceType_GoldPr");
            viewString.Append("ovinceTypeName, \r\n            T.CustomProvinceTypeName AS DictionaryProvinceType");
            viewString.Append("_CustomProvinceTypeName, \r\n            T.Description AS DictionaryProvinceType_D");
            viewString.Append("escription, \r\n            T.FullDescription AS DictionaryProvinceType_FullDescri");
            viewString.Append("ption, \r\n            T.Thumbnail AS DictionaryProvinceType_Thumbnail, \r\n        ");
            viewString.Append("    T.OriginalFileDataID AS DictionaryProvinceType_OriginalFileDataID, \r\n       ");
            viewString.Append("     T.Version AS DictionaryProvinceType_Version, \r\n            T.VersionAnteced");
            viewString.Append("entID AS DictionaryProvinceType_VersionAntecedentID, \r\n            T.VersionCert");
            viewString.Append("ainty AS DictionaryProvinceType_VersionCertainty, \r\n            T.VersionWorkflo");
            viewString.Append("wInstanceID AS DictionaryProvinceType_VersionWorkflowInstanceID, \r\n            T");
            viewString.Append(".VersionUpdatedBy AS DictionaryProvinceType_VersionUpdatedBy, \r\n            T.Ve");
            viewString.Append("rsionDeletedBy AS DictionaryProvinceType_VersionDeletedBy, \r\n            T.Versi");
            viewString.Append("onOwnerContactID AS DictionaryProvinceType_VersionOwnerContactID, \r\n            ");
            viewString.Append("T.VersionOwnerCompanyID AS DictionaryProvinceType_VersionOwnerCompanyID, \r\n     ");
            viewString.Append("       T.VersionUpdated AS DictionaryProvinceType_VersionUpdated, \r\n            ");
            viewString.Append("True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_Dictionary");
            viewString.Append("ProvinceType AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryProvinceTypes", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryRelationTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView506()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2510);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryRelationTypes\r\n        [NKD.Module.");
            viewString.Append("BusinessObjects.DictionaryRelationType](T1.DictionaryRelationType_RelationTypeID");
            viewString.Append(", T1.DictionaryRelationType_StandardRelationTypeName, T1.DictionaryRelationType_");
            viewString.Append("CoalRelationTypeName, T1.DictionaryRelationType_GoldRelationTypeName, T1.Diction");
            viewString.Append("aryRelationType_CustomRelationTypeName, T1.DictionaryRelationType_Description, T");
            viewString.Append("1.DictionaryRelationType_FullDescription, T1.DictionaryRelationType_Thumbnail, T");
            viewString.Append("1.DictionaryRelationType_OriginalFileDataID, T1.DictionaryRelationType_Version, ");
            viewString.Append("T1.DictionaryRelationType_VersionAntecedentID, T1.DictionaryRelationType_Version");
            viewString.Append("Certainty, T1.DictionaryRelationType_VersionWorkflowInstanceID, T1.DictionaryRel");
            viewString.Append("ationType_VersionUpdatedBy, T1.DictionaryRelationType_VersionDeletedBy, T1.Dicti");
            viewString.Append("onaryRelationType_VersionOwnerContactID, T1.DictionaryRelationType_VersionOwnerC");
            viewString.Append("ompanyID, T1.DictionaryRelationType_VersionUpdated)\r\n    FROM (\r\n        SELECT ");
            viewString.Append("\r\n            T.RelationTypeID AS DictionaryRelationType_RelationTypeID, \r\n     ");
            viewString.Append("       T.StandardRelationTypeName AS DictionaryRelationType_StandardRelationType");
            viewString.Append("Name, \r\n            T.CoalRelationTypeName AS DictionaryRelationType_CoalRelatio");
            viewString.Append("nTypeName, \r\n            T.GoldRelationTypeName AS DictionaryRelationType_GoldRe");
            viewString.Append("lationTypeName, \r\n            T.CustomRelationTypeName AS DictionaryRelationType");
            viewString.Append("_CustomRelationTypeName, \r\n            T.Description AS DictionaryRelationType_D");
            viewString.Append("escription, \r\n            T.FullDescription AS DictionaryRelationType_FullDescri");
            viewString.Append("ption, \r\n            T.Thumbnail AS DictionaryRelationType_Thumbnail, \r\n        ");
            viewString.Append("    T.OriginalFileDataID AS DictionaryRelationType_OriginalFileDataID, \r\n       ");
            viewString.Append("     T.Version AS DictionaryRelationType_Version, \r\n            T.VersionAnteced");
            viewString.Append("entID AS DictionaryRelationType_VersionAntecedentID, \r\n            T.VersionCert");
            viewString.Append("ainty AS DictionaryRelationType_VersionCertainty, \r\n            T.VersionWorkflo");
            viewString.Append("wInstanceID AS DictionaryRelationType_VersionWorkflowInstanceID, \r\n            T");
            viewString.Append(".VersionUpdatedBy AS DictionaryRelationType_VersionUpdatedBy, \r\n            T.Ve");
            viewString.Append("rsionDeletedBy AS DictionaryRelationType_VersionDeletedBy, \r\n            T.Versi");
            viewString.Append("onOwnerContactID AS DictionaryRelationType_VersionOwnerContactID, \r\n            ");
            viewString.Append("T.VersionOwnerCompanyID AS DictionaryRelationType_VersionOwnerCompanyID, \r\n     ");
            viewString.Append("       T.VersionUpdated AS DictionaryRelationType_VersionUpdated, \r\n            ");
            viewString.Append("True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_Dictionary");
            viewString.Append("RelationType AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryRelationTypes", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryRockMassUnitTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView507()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2726);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryRockMassUnitTypes\r\n        [NKD.Mod");
            viewString.Append("ule.BusinessObjects.DictionaryRockMassUnitType](T1.DictionaryRockMassUnitType_Ro");
            viewString.Append("ckMassUnitTypeID, T1.DictionaryRockMassUnitType_StandardRockMassUnitTypeName, T1");
            viewString.Append(".DictionaryRockMassUnitType_CoalRockMassUnitTypeName, T1.DictionaryRockMassUnitT");
            viewString.Append("ype_GoldRockMassUnitTypeName, T1.DictionaryRockMassUnitType_CustomRockMassUnitTy");
            viewString.Append("peName, T1.DictionaryRockMassUnitType_Description, T1.DictionaryRockMassUnitType");
            viewString.Append("_FullDescription, T1.DictionaryRockMassUnitType_Thumbnail, T1.DictionaryRockMass");
            viewString.Append("UnitType_OriginalFileDataID, T1.DictionaryRockMassUnitType_Version, T1.Dictionar");
            viewString.Append("yRockMassUnitType_VersionAntecedentID, T1.DictionaryRockMassUnitType_VersionCert");
            viewString.Append("ainty, T1.DictionaryRockMassUnitType_VersionWorkflowInstanceID, T1.DictionaryRoc");
            viewString.Append("kMassUnitType_VersionUpdatedBy, T1.DictionaryRockMassUnitType_VersionDeletedBy, ");
            viewString.Append("T1.DictionaryRockMassUnitType_VersionOwnerContactID, T1.DictionaryRockMassUnitTy");
            viewString.Append("pe_VersionOwnerCompanyID, T1.DictionaryRockMassUnitType_VersionUpdated)\r\n    FRO");
            viewString.Append("M (\r\n        SELECT \r\n            T.RockMassUnitTypeID AS DictionaryRockMassUnit");
            viewString.Append("Type_RockMassUnitTypeID, \r\n            T.StandardRockMassUnitTypeName AS Diction");
            viewString.Append("aryRockMassUnitType_StandardRockMassUnitTypeName, \r\n            T.CoalRockMassUn");
            viewString.Append("itTypeName AS DictionaryRockMassUnitType_CoalRockMassUnitTypeName, \r\n           ");
            viewString.Append(" T.GoldRockMassUnitTypeName AS DictionaryRockMassUnitType_GoldRockMassUnitTypeNa");
            viewString.Append("me, \r\n            T.CustomRockMassUnitTypeName AS DictionaryRockMassUnitType_Cus");
            viewString.Append("tomRockMassUnitTypeName, \r\n            T.Description AS DictionaryRockMassUnitTy");
            viewString.Append("pe_Description, \r\n            T.FullDescription AS DictionaryRockMassUnitType_Fu");
            viewString.Append("llDescription, \r\n            T.Thumbnail AS DictionaryRockMassUnitType_Thumbnail");
            viewString.Append(", \r\n            T.OriginalFileDataID AS DictionaryRockMassUnitType_OriginalFileD");
            viewString.Append("ataID, \r\n            T.Version AS DictionaryRockMassUnitType_Version, \r\n        ");
            viewString.Append("    T.VersionAntecedentID AS DictionaryRockMassUnitType_VersionAntecedentID, \r\n ");
            viewString.Append("           T.VersionCertainty AS DictionaryRockMassUnitType_VersionCertainty, \r\n");
            viewString.Append("            T.VersionWorkflowInstanceID AS DictionaryRockMassUnitType_VersionWor");
            viewString.Append("kflowInstanceID, \r\n            T.VersionUpdatedBy AS DictionaryRockMassUnitType_");
            viewString.Append("VersionUpdatedBy, \r\n            T.VersionDeletedBy AS DictionaryRockMassUnitType");
            viewString.Append("_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS DictionaryRockMassUn");
            viewString.Append("itType_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS Dictionar");
            viewString.Append("yRockMassUnitType_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS Dicti");
            viewString.Append("onaryRockMassUnitType_VersionUpdated, \r\n            True AS _from0\r\n        FROM");
            viewString.Append(" NKDModuleBusinessObjectsStoreContainer.X_DictionaryRockMassUnitType AS T\r\n    )");
            viewString.Append(" AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryRockMassUnitTypes", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionarySampleCategories
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView508()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2619);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionarySampleCategories\r\n        [NKD.Modu");
            viewString.Append("le.BusinessObjects.DictionarySampleCategory](T1.DictionarySampleCategory_SampleC");
            viewString.Append("ategoryID, T1.DictionarySampleCategory_StandardSampleCategoryName, T1.Dictionary");
            viewString.Append("SampleCategory_CoalSampleCategoryName, T1.DictionarySampleCategory_GoldSampleCat");
            viewString.Append("egoryName, T1.DictionarySampleCategory_CustomSampleCategoryName, T1.DictionarySa");
            viewString.Append("mpleCategory_Description, T1.DictionarySampleCategory_FullDescription, T1.Dictio");
            viewString.Append("narySampleCategory_Thumbnail, T1.DictionarySampleCategory_OriginalFileDataID, T1");
            viewString.Append(".DictionarySampleCategory_Version, T1.DictionarySampleCategory_VersionAntecedent");
            viewString.Append("ID, T1.DictionarySampleCategory_VersionCertainty, T1.DictionarySampleCategory_Ve");
            viewString.Append("rsionWorkflowInstanceID, T1.DictionarySampleCategory_VersionUpdatedBy, T1.Dictio");
            viewString.Append("narySampleCategory_VersionDeletedBy, T1.DictionarySampleCategory_VersionOwnerCon");
            viewString.Append("tactID, T1.DictionarySampleCategory_VersionOwnerCompanyID, T1.DictionarySampleCa");
            viewString.Append("tegory_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.SampleCategor");
            viewString.Append("yID AS DictionarySampleCategory_SampleCategoryID, \r\n            T.StandardSample");
            viewString.Append("CategoryName AS DictionarySampleCategory_StandardSampleCategoryName, \r\n         ");
            viewString.Append("   T.CoalSampleCategoryName AS DictionarySampleCategory_CoalSampleCategoryName, ");
            viewString.Append("\r\n            T.GoldSampleCategoryName AS DictionarySampleCategory_GoldSampleCat");
            viewString.Append("egoryName, \r\n            T.CustomSampleCategoryName AS DictionarySampleCategory_");
            viewString.Append("CustomSampleCategoryName, \r\n            T.Description AS DictionarySampleCategor");
            viewString.Append("y_Description, \r\n            T.FullDescription AS DictionarySampleCategory_FullD");
            viewString.Append("escription, \r\n            T.Thumbnail AS DictionarySampleCategory_Thumbnail, \r\n ");
            viewString.Append("           T.OriginalFileDataID AS DictionarySampleCategory_OriginalFileDataID, ");
            viewString.Append("\r\n            T.Version AS DictionarySampleCategory_Version, \r\n            T.Ver");
            viewString.Append("sionAntecedentID AS DictionarySampleCategory_VersionAntecedentID, \r\n            ");
            viewString.Append("T.VersionCertainty AS DictionarySampleCategory_VersionCertainty, \r\n            T");
            viewString.Append(".VersionWorkflowInstanceID AS DictionarySampleCategory_VersionWorkflowInstanceID");
            viewString.Append(", \r\n            T.VersionUpdatedBy AS DictionarySampleCategory_VersionUpdatedBy,");
            viewString.Append(" \r\n            T.VersionDeletedBy AS DictionarySampleCategory_VersionDeletedBy, ");
            viewString.Append("\r\n            T.VersionOwnerContactID AS DictionarySampleCategory_VersionOwnerCo");
            viewString.Append("ntactID, \r\n            T.VersionOwnerCompanyID AS DictionarySampleCategory_Versi");
            viewString.Append("onOwnerCompanyID, \r\n            T.VersionUpdated AS DictionarySampleCategory_Ver");
            viewString.Append("sionUpdated, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjects");
            viewString.Append("StoreContainer.X_DictionarySampleCategory AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionarySampleCategories", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionarySampleStates
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView509()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2456);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionarySampleStates\r\n        [NKD.Module.B");
            viewString.Append("usinessObjects.DictionarySampleState](T1.DictionarySampleState_SampleStateID, T1");
            viewString.Append(".DictionarySampleState_StandardSampleStateName, T1.DictionarySampleState_CoalSam");
            viewString.Append("pleStateName, T1.DictionarySampleState_GoldSampleStateName, T1.DictionarySampleS");
            viewString.Append("tate_CustomSampleStateName, T1.DictionarySampleState_Description, T1.DictionaryS");
            viewString.Append("ampleState_FullDescription, T1.DictionarySampleState_Thumbnail, T1.DictionarySam");
            viewString.Append("pleState_OriginalFileDataID, T1.DictionarySampleState_Version, T1.DictionarySamp");
            viewString.Append("leState_VersionAntecedentID, T1.DictionarySampleState_VersionCertainty, T1.Dicti");
            viewString.Append("onarySampleState_VersionWorkflowInstanceID, T1.DictionarySampleState_VersionUpda");
            viewString.Append("tedBy, T1.DictionarySampleState_VersionDeletedBy, T1.DictionarySampleState_Versi");
            viewString.Append("onOwnerContactID, T1.DictionarySampleState_VersionOwnerCompanyID, T1.DictionaryS");
            viewString.Append("ampleState_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.SampleSta");
            viewString.Append("teID AS DictionarySampleState_SampleStateID, \r\n            T.StandardSampleState");
            viewString.Append("Name AS DictionarySampleState_StandardSampleStateName, \r\n            T.CoalSampl");
            viewString.Append("eStateName AS DictionarySampleState_CoalSampleStateName, \r\n            T.GoldSam");
            viewString.Append("pleStateName AS DictionarySampleState_GoldSampleStateName, \r\n            T.Custo");
            viewString.Append("mSampleStateName AS DictionarySampleState_CustomSampleStateName, \r\n            T");
            viewString.Append(".Description AS DictionarySampleState_Description, \r\n            T.FullDescripti");
            viewString.Append("on AS DictionarySampleState_FullDescription, \r\n            T.Thumbnail AS Dictio");
            viewString.Append("narySampleState_Thumbnail, \r\n            T.OriginalFileDataID AS DictionarySampl");
            viewString.Append("eState_OriginalFileDataID, \r\n            T.Version AS DictionarySampleState_Vers");
            viewString.Append("ion, \r\n            T.VersionAntecedentID AS DictionarySampleState_VersionAnteced");
            viewString.Append("entID, \r\n            T.VersionCertainty AS DictionarySampleState_VersionCertaint");
            viewString.Append("y, \r\n            T.VersionWorkflowInstanceID AS DictionarySampleState_VersionWor");
            viewString.Append("kflowInstanceID, \r\n            T.VersionUpdatedBy AS DictionarySampleState_Versi");
            viewString.Append("onUpdatedBy, \r\n            T.VersionDeletedBy AS DictionarySampleState_VersionDe");
            viewString.Append("letedBy, \r\n            T.VersionOwnerContactID AS DictionarySampleState_VersionO");
            viewString.Append("wnerContactID, \r\n            T.VersionOwnerCompanyID AS DictionarySampleState_Ve");
            viewString.Append("rsionOwnerCompanyID, \r\n            T.VersionUpdated AS DictionarySampleState_Ver");
            viewString.Append("sionUpdated, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjects");
            viewString.Append("StoreContainer.X_DictionarySampleState AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionarySampleStates", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionarySampleTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView510()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2402);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionarySampleTypes\r\n        [NKD.Module.Bu");
            viewString.Append("sinessObjects.DictionarySampleType](T1.DictionarySampleType_SampleTypeID, T1.Dic");
            viewString.Append("tionarySampleType_StandardSampleTypeName, T1.DictionarySampleType_CoalSampleType");
            viewString.Append("Name, T1.DictionarySampleType_GoldSampleTypeName, T1.DictionarySampleType_Custom");
            viewString.Append("SampleTypeName, T1.DictionarySampleType_Description, T1.DictionarySampleType_Ful");
            viewString.Append("lDescription, T1.DictionarySampleType_Thumbnail, T1.DictionarySampleType_Origina");
            viewString.Append("lFileDataID, T1.DictionarySampleType_Version, T1.DictionarySampleType_VersionAnt");
            viewString.Append("ecedentID, T1.DictionarySampleType_VersionCertainty, T1.DictionarySampleType_Ver");
            viewString.Append("sionWorkflowInstanceID, T1.DictionarySampleType_VersionUpdatedBy, T1.DictionaryS");
            viewString.Append("ampleType_VersionDeletedBy, T1.DictionarySampleType_VersionOwnerContactID, T1.Di");
            viewString.Append("ctionarySampleType_VersionOwnerCompanyID, T1.DictionarySampleType_VersionUpdated");
            viewString.Append(")\r\n    FROM (\r\n        SELECT \r\n            T.SampleTypeID AS DictionarySampleTy");
            viewString.Append("pe_SampleTypeID, \r\n            T.StandardSampleTypeName AS DictionarySampleType_");
            viewString.Append("StandardSampleTypeName, \r\n            T.CoalSampleTypeName AS DictionarySampleTy");
            viewString.Append("pe_CoalSampleTypeName, \r\n            T.GoldSampleTypeName AS DictionarySampleTyp");
            viewString.Append("e_GoldSampleTypeName, \r\n            T.CustomSampleTypeName AS DictionarySampleTy");
            viewString.Append("pe_CustomSampleTypeName, \r\n            T.Description AS DictionarySampleType_Des");
            viewString.Append("cription, \r\n            T.FullDescription AS DictionarySampleType_FullDescriptio");
            viewString.Append("n, \r\n            T.Thumbnail AS DictionarySampleType_Thumbnail, \r\n            T.");
            viewString.Append("OriginalFileDataID AS DictionarySampleType_OriginalFileDataID, \r\n            T.V");
            viewString.Append("ersion AS DictionarySampleType_Version, \r\n            T.VersionAntecedentID AS D");
            viewString.Append("ictionarySampleType_VersionAntecedentID, \r\n            T.VersionCertainty AS Dic");
            viewString.Append("tionarySampleType_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS");
            viewString.Append(" DictionarySampleType_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedB");
            viewString.Append("y AS DictionarySampleType_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS ");
            viewString.Append("DictionarySampleType_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS ");
            viewString.Append("DictionarySampleType_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyI");
            viewString.Append("D AS DictionarySampleType_VersionOwnerCompanyID, \r\n            T.VersionUpdated ");
            viewString.Append("AS DictionarySampleType_VersionUpdated, \r\n            True AS _from0\r\n        FR");
            viewString.Append("OM NKDModuleBusinessObjectsStoreContainer.X_DictionarySampleType AS T\r\n    ) AS ");
            viewString.Append("T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionarySampleTypes", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionarySeams
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView511()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionarySeams", "\r\n    SELECT VALUE -- Constructing DictionarySeams\r\n        [NKD.Module.BusinessO" +
                    "bjects.DictionarySeam](T1.DictionarySeam_SeamID, T1.DictionarySeam_StandardSeamN" +
                    "ame, T1.DictionarySeam_Description, T1.DictionarySeam_FullDescription, T1.Dictio" +
                    "narySeam_Thumbnail, T1.DictionarySeam_OriginalFileDataID, T1.DictionarySeam_Vers" +
                    "ion, T1.DictionarySeam_VersionAntecedentID, T1.DictionarySeam_VersionCertainty, " +
                    "T1.DictionarySeam_VersionWorkflowInstanceID, T1.DictionarySeam_VersionUpdatedBy," +
                    " T1.DictionarySeam_VersionDeletedBy, T1.DictionarySeam_VersionOwnerContactID, T1" +
                    ".DictionarySeam_VersionOwnerCompanyID, T1.DictionarySeam_VersionUpdated, T1.Dict" +
                    "ionarySeam_CustomSeamName)\r\n    FROM (\r\n        SELECT \r\n            T.SeamID AS" +
                    " DictionarySeam_SeamID, \r\n            T.StandardSeamName AS DictionarySeam_Stand" +
                    "ardSeamName, \r\n            T.Description AS DictionarySeam_Description, \r\n      " +
                    "      T.FullDescription AS DictionarySeam_FullDescription, \r\n            T.Thumb" +
                    "nail AS DictionarySeam_Thumbnail, \r\n            T.OriginalFileDataID AS Dictiona" +
                    "rySeam_OriginalFileDataID, \r\n            T.Version AS DictionarySeam_Version, \r\n" +
                    "            T.VersionAntecedentID AS DictionarySeam_VersionAntecedentID, \r\n     " +
                    "       T.VersionCertainty AS DictionarySeam_VersionCertainty, \r\n            T.Ve" +
                    "rsionWorkflowInstanceID AS DictionarySeam_VersionWorkflowInstanceID, \r\n         " +
                    "   T.VersionUpdatedBy AS DictionarySeam_VersionUpdatedBy, \r\n            T.Versio" +
                    "nDeletedBy AS DictionarySeam_VersionDeletedBy, \r\n            T.VersionOwnerConta" +
                    "ctID AS DictionarySeam_VersionOwnerContactID, \r\n            T.VersionOwnerCompan" +
                    "yID AS DictionarySeam_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS D" +
                    "ictionarySeam_VersionUpdated, \r\n            T.CustomSeamName AS DictionarySeam_C" +
                    "ustomSeamName, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjec" +
                    "tsStoreContainer.X_DictionarySeam AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.DictionarySeamAlias
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView512()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionarySeamAlias", "\r\n    SELECT VALUE -- Constructing DictionarySeamAlias\r\n        [NKD.Module.Busin" +
                    "essObjects.DictionarySeamAlias](T1.DictionarySeamAlias_SeamAliasID, T1.Dictionar" +
                    "ySeamAlias_SeamID, T1.DictionarySeamAlias_CustomSeamName, T1.DictionarySeamAlias" +
                    "_FullDescription, T1.DictionarySeamAlias_Thumbnail, T1.DictionarySeamAlias_Origi" +
                    "nalFileDataID, T1.DictionarySeamAlias_Version, T1.DictionarySeamAlias_VersionAnt" +
                    "ecedentID, T1.DictionarySeamAlias_VersionCertainty, T1.DictionarySeamAlias_Versi" +
                    "onWorkflowInstanceID, T1.DictionarySeamAlias_VersionUpdatedBy, T1.DictionarySeam" +
                    "Alias_VersionDeletedBy, T1.DictionarySeamAlias_VersionOwnerContactID, T1.Diction" +
                    "arySeamAlias_VersionOwnerCompanyID, T1.DictionarySeamAlias_VersionUpdated)\r\n    " +
                    "FROM (\r\n        SELECT \r\n            T.SeamAliasID AS DictionarySeamAlias_SeamAl" +
                    "iasID, \r\n            T.SeamID AS DictionarySeamAlias_SeamID, \r\n            T.Cus" +
                    "tomSeamName AS DictionarySeamAlias_CustomSeamName, \r\n            T.FullDescripti" +
                    "on AS DictionarySeamAlias_FullDescription, \r\n            T.Thumbnail AS Dictiona" +
                    "rySeamAlias_Thumbnail, \r\n            T.OriginalFileDataID AS DictionarySeamAlias" +
                    "_OriginalFileDataID, \r\n            T.Version AS DictionarySeamAlias_Version, \r\n " +
                    "           T.VersionAntecedentID AS DictionarySeamAlias_VersionAntecedentID, \r\n " +
                    "           T.VersionCertainty AS DictionarySeamAlias_VersionCertainty, \r\n       " +
                    "     T.VersionWorkflowInstanceID AS DictionarySeamAlias_VersionWorkflowInstanceI" +
                    "D, \r\n            T.VersionUpdatedBy AS DictionarySeamAlias_VersionUpdatedBy, \r\n " +
                    "           T.VersionDeletedBy AS DictionarySeamAlias_VersionDeletedBy, \r\n       " +
                    "     T.VersionOwnerContactID AS DictionarySeamAlias_VersionOwnerContactID, \r\n   " +
                    "         T.VersionOwnerCompanyID AS DictionarySeamAlias_VersionOwnerCompanyID, \r" +
                    "\n            T.VersionUpdated AS DictionarySeamAlias_VersionUpdated, \r\n         " +
                    "   True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_Diction" +
                    "arySeamAlias AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.DictionarySedimentaryFeatures
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView513()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2834);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionarySedimentaryFeatures\r\n        [NKD.M");
            viewString.Append("odule.BusinessObjects.DictionarySedimentaryFeature](T1.DictionarySedimentaryFeat");
            viewString.Append("ure_SedimentaryFeatureID, T1.DictionarySedimentaryFeature_StandardSedimentaryFea");
            viewString.Append("tureName, T1.DictionarySedimentaryFeature_CoalSedimentaryFeatureName, T1.Diction");
            viewString.Append("arySedimentaryFeature_GoldSedimentaryFeatureName, T1.DictionarySedimentaryFeatur");
            viewString.Append("e_CustomSedimentaryFeatureName, T1.DictionarySedimentaryFeature_Description, T1.");
            viewString.Append("DictionarySedimentaryFeature_FullDescription, T1.DictionarySedimentaryFeature_Th");
            viewString.Append("umbnail, T1.DictionarySedimentaryFeature_OriginalFileDataID, T1.DictionarySedime");
            viewString.Append("ntaryFeature_Version, T1.DictionarySedimentaryFeature_VersionAntecedentID, T1.Di");
            viewString.Append("ctionarySedimentaryFeature_VersionCertainty, T1.DictionarySedimentaryFeature_Ver");
            viewString.Append("sionWorkflowInstanceID, T1.DictionarySedimentaryFeature_VersionUpdatedBy, T1.Dic");
            viewString.Append("tionarySedimentaryFeature_VersionDeletedBy, T1.DictionarySedimentaryFeature_Vers");
            viewString.Append("ionOwnerContactID, T1.DictionarySedimentaryFeature_VersionOwnerCompanyID, T1.Dic");
            viewString.Append("tionarySedimentaryFeature_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n        ");
            viewString.Append("    T.SedimentaryFeatureID AS DictionarySedimentaryFeature_SedimentaryFeatureID,");
            viewString.Append(" \r\n            T.StandardSedimentaryFeatureName AS DictionarySedimentaryFeature_");
            viewString.Append("StandardSedimentaryFeatureName, \r\n            T.CoalSedimentaryFeatureName AS Di");
            viewString.Append("ctionarySedimentaryFeature_CoalSedimentaryFeatureName, \r\n            T.GoldSedim");
            viewString.Append("entaryFeatureName AS DictionarySedimentaryFeature_GoldSedimentaryFeatureName, \r\n");
            viewString.Append("            T.CustomSedimentaryFeatureName AS DictionarySedimentaryFeature_Custo");
            viewString.Append("mSedimentaryFeatureName, \r\n            T.Description AS DictionarySedimentaryFea");
            viewString.Append("ture_Description, \r\n            T.FullDescription AS DictionarySedimentaryFeatur");
            viewString.Append("e_FullDescription, \r\n            T.Thumbnail AS DictionarySedimentaryFeature_Thu");
            viewString.Append("mbnail, \r\n            T.OriginalFileDataID AS DictionarySedimentaryFeature_Origi");
            viewString.Append("nalFileDataID, \r\n            T.Version AS DictionarySedimentaryFeature_Version, ");
            viewString.Append("\r\n            T.VersionAntecedentID AS DictionarySedimentaryFeature_VersionAntec");
            viewString.Append("edentID, \r\n            T.VersionCertainty AS DictionarySedimentaryFeature_Versio");
            viewString.Append("nCertainty, \r\n            T.VersionWorkflowInstanceID AS DictionarySedimentaryFe");
            viewString.Append("ature_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS DictionaryS");
            viewString.Append("edimentaryFeature_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS Dictiona");
            viewString.Append("rySedimentaryFeature_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS ");
            viewString.Append("DictionarySedimentaryFeature_VersionOwnerContactID, \r\n            T.VersionOwner");
            viewString.Append("CompanyID AS DictionarySedimentaryFeature_VersionOwnerCompanyID, \r\n            T");
            viewString.Append(".VersionUpdated AS DictionarySedimentaryFeature_VersionUpdated, \r\n            Tr");
            viewString.Append("ue AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionarySe");
            viewString.Append("dimentaryFeature AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionarySedimentaryFeatures", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryShades
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView514()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2132);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryShades\r\n        [NKD.Module.Busines");
            viewString.Append("sObjects.DictionaryShade](T1.DictionaryShade_ShadeID, T1.DictionaryShade_Standar");
            viewString.Append("dShadeName, T1.DictionaryShade_CoalShadeName, T1.DictionaryShade_GoldShadeName, ");
            viewString.Append("T1.DictionaryShade_CustomShadeName, T1.DictionaryShade_Description, T1.Dictionar");
            viewString.Append("yShade_FullDescription, T1.DictionaryShade_Thumbnail, T1.DictionaryShade_Origina");
            viewString.Append("lFileDataID, T1.DictionaryShade_Version, T1.DictionaryShade_VersionAntecedentID,");
            viewString.Append(" T1.DictionaryShade_VersionCertainty, T1.DictionaryShade_VersionWorkflowInstance");
            viewString.Append("ID, T1.DictionaryShade_VersionUpdatedBy, T1.DictionaryShade_VersionDeletedBy, T1");
            viewString.Append(".DictionaryShade_VersionOwnerContactID, T1.DictionaryShade_VersionOwnerCompanyID");
            viewString.Append(", T1.DictionaryShade_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T");
            viewString.Append(".ShadeID AS DictionaryShade_ShadeID, \r\n            T.StandardShadeName AS Dictio");
            viewString.Append("naryShade_StandardShadeName, \r\n            T.CoalShadeName AS DictionaryShade_Co");
            viewString.Append("alShadeName, \r\n            T.GoldShadeName AS DictionaryShade_GoldShadeName, \r\n ");
            viewString.Append("           T.CustomShadeName AS DictionaryShade_CustomShadeName, \r\n            T");
            viewString.Append(".Description AS DictionaryShade_Description, \r\n            T.FullDescription AS ");
            viewString.Append("DictionaryShade_FullDescription, \r\n            T.Thumbnail AS DictionaryShade_Th");
            viewString.Append("umbnail, \r\n            T.OriginalFileDataID AS DictionaryShade_OriginalFileDataI");
            viewString.Append("D, \r\n            T.Version AS DictionaryShade_Version, \r\n            T.VersionAn");
            viewString.Append("tecedentID AS DictionaryShade_VersionAntecedentID, \r\n            T.VersionCertai");
            viewString.Append("nty AS DictionaryShade_VersionCertainty, \r\n            T.VersionWorkflowInstance");
            viewString.Append("ID AS DictionaryShade_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedB");
            viewString.Append("y AS DictionaryShade_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS Dicti");
            viewString.Append("onaryShade_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS Dictionary");
            viewString.Append("Shade_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS Dictionary");
            viewString.Append("Shade_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS DictionaryShade_V");
            viewString.Append("ersionUpdated, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjec");
            viewString.Append("tsStoreContainer.X_DictionaryShade AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryShades", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryShapes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView515()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2132);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryShapes\r\n        [NKD.Module.Busines");
            viewString.Append("sObjects.DictionaryShape](T1.DictionaryShape_ShapeID, T1.DictionaryShape_Standar");
            viewString.Append("dShapeName, T1.DictionaryShape_CoalShapeName, T1.DictionaryShape_GoldShapeName, ");
            viewString.Append("T1.DictionaryShape_CustomShapeName, T1.DictionaryShape_Description, T1.Dictionar");
            viewString.Append("yShape_FullDescription, T1.DictionaryShape_Thumbnail, T1.DictionaryShape_Origina");
            viewString.Append("lFileDataID, T1.DictionaryShape_Version, T1.DictionaryShape_VersionAntecedentID,");
            viewString.Append(" T1.DictionaryShape_VersionCertainty, T1.DictionaryShape_VersionWorkflowInstance");
            viewString.Append("ID, T1.DictionaryShape_VersionUpdatedBy, T1.DictionaryShape_VersionDeletedBy, T1");
            viewString.Append(".DictionaryShape_VersionOwnerContactID, T1.DictionaryShape_VersionOwnerCompanyID");
            viewString.Append(", T1.DictionaryShape_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T");
            viewString.Append(".ShapeID AS DictionaryShape_ShapeID, \r\n            T.StandardShapeName AS Dictio");
            viewString.Append("naryShape_StandardShapeName, \r\n            T.CoalShapeName AS DictionaryShape_Co");
            viewString.Append("alShapeName, \r\n            T.GoldShapeName AS DictionaryShape_GoldShapeName, \r\n ");
            viewString.Append("           T.CustomShapeName AS DictionaryShape_CustomShapeName, \r\n            T");
            viewString.Append(".Description AS DictionaryShape_Description, \r\n            T.FullDescription AS ");
            viewString.Append("DictionaryShape_FullDescription, \r\n            T.Thumbnail AS DictionaryShape_Th");
            viewString.Append("umbnail, \r\n            T.OriginalFileDataID AS DictionaryShape_OriginalFileDataI");
            viewString.Append("D, \r\n            T.Version AS DictionaryShape_Version, \r\n            T.VersionAn");
            viewString.Append("tecedentID AS DictionaryShape_VersionAntecedentID, \r\n            T.VersionCertai");
            viewString.Append("nty AS DictionaryShape_VersionCertainty, \r\n            T.VersionWorkflowInstance");
            viewString.Append("ID AS DictionaryShape_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedB");
            viewString.Append("y AS DictionaryShape_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS Dicti");
            viewString.Append("onaryShape_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS Dictionary");
            viewString.Append("Shape_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS Dictionary");
            viewString.Append("Shape_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS DictionaryShape_V");
            viewString.Append("ersionUpdated, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjec");
            viewString.Append("tsStoreContainer.X_DictionaryShape AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryShapes", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryStratigraphies
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView516()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2511);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryStratigraphies\r\n        [NKD.Module");
            viewString.Append(".BusinessObjects.DictionaryStratigraphy](T1.DictionaryStratigraphy_StratigraphyI");
            viewString.Append("D, T1.DictionaryStratigraphy_StandardStratigraphyName, T1.DictionaryStratigraphy");
            viewString.Append("_CoalStratigraphyName, T1.DictionaryStratigraphy_GoldStratigraphyName, T1.Dictio");
            viewString.Append("naryStratigraphy_CustomStratigraphyName, T1.DictionaryStratigraphy_Description, ");
            viewString.Append("T1.DictionaryStratigraphy_FullDescription, T1.DictionaryStratigraphy_Thumbnail, ");
            viewString.Append("T1.DictionaryStratigraphy_OriginalFileDataID, T1.DictionaryStratigraphy_Version,");
            viewString.Append(" T1.DictionaryStratigraphy_VersionAntecedentID, T1.DictionaryStratigraphy_Versio");
            viewString.Append("nCertainty, T1.DictionaryStratigraphy_VersionWorkflowInstanceID, T1.DictionarySt");
            viewString.Append("ratigraphy_VersionUpdatedBy, T1.DictionaryStratigraphy_VersionDeletedBy, T1.Dict");
            viewString.Append("ionaryStratigraphy_VersionOwnerContactID, T1.DictionaryStratigraphy_VersionOwner");
            viewString.Append("CompanyID, T1.DictionaryStratigraphy_VersionUpdated)\r\n    FROM (\r\n        SELECT");
            viewString.Append(" \r\n            T.StratigraphyID AS DictionaryStratigraphy_StratigraphyID, \r\n    ");
            viewString.Append("        T.StandardStratigraphyName AS DictionaryStratigraphy_StandardStratigraph");
            viewString.Append("yName, \r\n            T.CoalStratigraphyName AS DictionaryStratigraphy_CoalStrati");
            viewString.Append("graphyName, \r\n            T.GoldStratigraphyName AS DictionaryStratigraphy_GoldS");
            viewString.Append("tratigraphyName, \r\n            T.CustomStratigraphyName AS DictionaryStratigraph");
            viewString.Append("y_CustomStratigraphyName, \r\n            T.Description AS DictionaryStratigraphy_");
            viewString.Append("Description, \r\n            T.FullDescription AS DictionaryStratigraphy_FullDescr");
            viewString.Append("iption, \r\n            T.Thumbnail AS DictionaryStratigraphy_Thumbnail, \r\n       ");
            viewString.Append("     T.OriginalFileDataID AS DictionaryStratigraphy_OriginalFileDataID, \r\n      ");
            viewString.Append("      T.Version AS DictionaryStratigraphy_Version, \r\n            T.VersionAntece");
            viewString.Append("dentID AS DictionaryStratigraphy_VersionAntecedentID, \r\n            T.VersionCer");
            viewString.Append("tainty AS DictionaryStratigraphy_VersionCertainty, \r\n            T.VersionWorkfl");
            viewString.Append("owInstanceID AS DictionaryStratigraphy_VersionWorkflowInstanceID, \r\n            ");
            viewString.Append("T.VersionUpdatedBy AS DictionaryStratigraphy_VersionUpdatedBy, \r\n            T.V");
            viewString.Append("ersionDeletedBy AS DictionaryStratigraphy_VersionDeletedBy, \r\n            T.Vers");
            viewString.Append("ionOwnerContactID AS DictionaryStratigraphy_VersionOwnerContactID, \r\n           ");
            viewString.Append(" T.VersionOwnerCompanyID AS DictionaryStratigraphy_VersionOwnerCompanyID, \r\n    ");
            viewString.Append("        T.VersionUpdated AS DictionaryStratigraphy_VersionUpdated, \r\n           ");
            viewString.Append(" True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_Dictionar");
            viewString.Append("yStratigraphy AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryStratigraphies", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionarySurfaceRoughnesses
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView517()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2727);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionarySurfaceRoughnesses\r\n        [NKD.Mo");
            viewString.Append("dule.BusinessObjects.DictionarySurfaceRoughness](T1.DictionarySurfaceRoughness_S");
            viewString.Append("urfaceRoughnessID, T1.DictionarySurfaceRoughness_StandardSurfaceRoughnessName, T");
            viewString.Append("1.DictionarySurfaceRoughness_CoalSurfaceRoughnessName, T1.DictionarySurfaceRough");
            viewString.Append("ness_GoldSurfaceRoughnessName, T1.DictionarySurfaceRoughness_CustomSurfaceRoughn");
            viewString.Append("essName, T1.DictionarySurfaceRoughness_Description, T1.DictionarySurfaceRoughnes");
            viewString.Append("s_FullDescription, T1.DictionarySurfaceRoughness_Thumbnail, T1.DictionarySurface");
            viewString.Append("Roughness_OriginalFileDataID, T1.DictionarySurfaceRoughness_Version, T1.Dictiona");
            viewString.Append("rySurfaceRoughness_VersionAntecedentID, T1.DictionarySurfaceRoughness_VersionCer");
            viewString.Append("tainty, T1.DictionarySurfaceRoughness_VersionWorkflowInstanceID, T1.DictionarySu");
            viewString.Append("rfaceRoughness_VersionUpdatedBy, T1.DictionarySurfaceRoughness_VersionDeletedBy,");
            viewString.Append(" T1.DictionarySurfaceRoughness_VersionOwnerContactID, T1.DictionarySurfaceRoughn");
            viewString.Append("ess_VersionOwnerCompanyID, T1.DictionarySurfaceRoughness_VersionUpdated)\r\n    FR");
            viewString.Append("OM (\r\n        SELECT \r\n            T.SurfaceRoughnessID AS DictionarySurfaceRoug");
            viewString.Append("hness_SurfaceRoughnessID, \r\n            T.StandardSurfaceRoughnessName AS Dictio");
            viewString.Append("narySurfaceRoughness_StandardSurfaceRoughnessName, \r\n            T.CoalSurfaceRo");
            viewString.Append("ughnessName AS DictionarySurfaceRoughness_CoalSurfaceRoughnessName, \r\n          ");
            viewString.Append("  T.GoldSurfaceRoughnessName AS DictionarySurfaceRoughness_GoldSurfaceRoughnessN");
            viewString.Append("ame, \r\n            T.CustomSurfaceRoughnessName AS DictionarySurfaceRoughness_Cu");
            viewString.Append("stomSurfaceRoughnessName, \r\n            T.Description AS DictionarySurfaceRoughn");
            viewString.Append("ess_Description, \r\n            T.FullDescription AS DictionarySurfaceRoughness_F");
            viewString.Append("ullDescription, \r\n            T.Thumbnail AS DictionarySurfaceRoughness_Thumbnai");
            viewString.Append("l, \r\n            T.OriginalFileDataID AS DictionarySurfaceRoughness_OriginalFile");
            viewString.Append("DataID, \r\n            T.Version AS DictionarySurfaceRoughness_Version, \r\n       ");
            viewString.Append("     T.VersionAntecedentID AS DictionarySurfaceRoughness_VersionAntecedentID, \r\n");
            viewString.Append("            T.VersionCertainty AS DictionarySurfaceRoughness_VersionCertainty, \r");
            viewString.Append("\n            T.VersionWorkflowInstanceID AS DictionarySurfaceRoughness_VersionWo");
            viewString.Append("rkflowInstanceID, \r\n            T.VersionUpdatedBy AS DictionarySurfaceRoughness");
            viewString.Append("_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS DictionarySurfaceRoughnes");
            viewString.Append("s_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS DictionarySurfaceRo");
            viewString.Append("ughness_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS Dictiona");
            viewString.Append("rySurfaceRoughness_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS Dict");
            viewString.Append("ionarySurfaceRoughness_VersionUpdated, \r\n            True AS _from0\r\n        FRO");
            viewString.Append("M NKDModuleBusinessObjectsStoreContainer.X_DictionarySurfaceRoughness AS T\r\n    ");
            viewString.Append(") AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionarySurfaceRoughnesses", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionarySurveyAccuracies
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView518()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2619);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionarySurveyAccuracies\r\n        [NKD.Modu");
            viewString.Append("le.BusinessObjects.DictionarySurveyAccuracy](T1.DictionarySurveyAccuracy_SurveyA");
            viewString.Append("ccuracyID, T1.DictionarySurveyAccuracy_StandardSurveyAccuracyName, T1.Dictionary");
            viewString.Append("SurveyAccuracy_CoalSurveyAccuracyName, T1.DictionarySurveyAccuracy_GoldSurveyAcc");
            viewString.Append("uracyName, T1.DictionarySurveyAccuracy_CustomSurveyAccuracyName, T1.DictionarySu");
            viewString.Append("rveyAccuracy_Description, T1.DictionarySurveyAccuracy_FullDescription, T1.Dictio");
            viewString.Append("narySurveyAccuracy_Thumbnail, T1.DictionarySurveyAccuracy_OriginalFileDataID, T1");
            viewString.Append(".DictionarySurveyAccuracy_Version, T1.DictionarySurveyAccuracy_VersionAntecedent");
            viewString.Append("ID, T1.DictionarySurveyAccuracy_VersionCertainty, T1.DictionarySurveyAccuracy_Ve");
            viewString.Append("rsionWorkflowInstanceID, T1.DictionarySurveyAccuracy_VersionUpdatedBy, T1.Dictio");
            viewString.Append("narySurveyAccuracy_VersionDeletedBy, T1.DictionarySurveyAccuracy_VersionOwnerCon");
            viewString.Append("tactID, T1.DictionarySurveyAccuracy_VersionOwnerCompanyID, T1.DictionarySurveyAc");
            viewString.Append("curacy_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.SurveyAccurac");
            viewString.Append("yID AS DictionarySurveyAccuracy_SurveyAccuracyID, \r\n            T.StandardSurvey");
            viewString.Append("AccuracyName AS DictionarySurveyAccuracy_StandardSurveyAccuracyName, \r\n         ");
            viewString.Append("   T.CoalSurveyAccuracyName AS DictionarySurveyAccuracy_CoalSurveyAccuracyName, ");
            viewString.Append("\r\n            T.GoldSurveyAccuracyName AS DictionarySurveyAccuracy_GoldSurveyAcc");
            viewString.Append("uracyName, \r\n            T.CustomSurveyAccuracyName AS DictionarySurveyAccuracy_");
            viewString.Append("CustomSurveyAccuracyName, \r\n            T.Description AS DictionarySurveyAccurac");
            viewString.Append("y_Description, \r\n            T.FullDescription AS DictionarySurveyAccuracy_FullD");
            viewString.Append("escription, \r\n            T.Thumbnail AS DictionarySurveyAccuracy_Thumbnail, \r\n ");
            viewString.Append("           T.OriginalFileDataID AS DictionarySurveyAccuracy_OriginalFileDataID, ");
            viewString.Append("\r\n            T.Version AS DictionarySurveyAccuracy_Version, \r\n            T.Ver");
            viewString.Append("sionAntecedentID AS DictionarySurveyAccuracy_VersionAntecedentID, \r\n            ");
            viewString.Append("T.VersionCertainty AS DictionarySurveyAccuracy_VersionCertainty, \r\n            T");
            viewString.Append(".VersionWorkflowInstanceID AS DictionarySurveyAccuracy_VersionWorkflowInstanceID");
            viewString.Append(", \r\n            T.VersionUpdatedBy AS DictionarySurveyAccuracy_VersionUpdatedBy,");
            viewString.Append(" \r\n            T.VersionDeletedBy AS DictionarySurveyAccuracy_VersionDeletedBy, ");
            viewString.Append("\r\n            T.VersionOwnerContactID AS DictionarySurveyAccuracy_VersionOwnerCo");
            viewString.Append("ntactID, \r\n            T.VersionOwnerCompanyID AS DictionarySurveyAccuracy_Versi");
            viewString.Append("onOwnerCompanyID, \r\n            T.VersionUpdated AS DictionarySurveyAccuracy_Ver");
            viewString.Append("sionUpdated, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjects");
            viewString.Append("StoreContainer.X_DictionarySurveyAccuracy AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionarySurveyAccuracies", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryTextures
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView519()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2240);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryTextures\r\n        [NKD.Module.Busin");
            viewString.Append("essObjects.DictionaryTexture](T1.DictionaryTexture_TextureID, T1.DictionaryTextu");
            viewString.Append("re_StandardTextureName, T1.DictionaryTexture_CoalTextureName, T1.DictionaryTextu");
            viewString.Append("re_GoldTextureName, T1.DictionaryTexture_CustomTextureName, T1.DictionaryTexture");
            viewString.Append("_Description, T1.DictionaryTexture_FullDescription, T1.DictionaryTexture_Thumbna");
            viewString.Append("il, T1.DictionaryTexture_OriginalFileDataID, T1.DictionaryTexture_Version, T1.Di");
            viewString.Append("ctionaryTexture_VersionAntecedentID, T1.DictionaryTexture_VersionCertainty, T1.D");
            viewString.Append("ictionaryTexture_VersionWorkflowInstanceID, T1.DictionaryTexture_VersionUpdatedB");
            viewString.Append("y, T1.DictionaryTexture_VersionDeletedBy, T1.DictionaryTexture_VersionOwnerConta");
            viewString.Append("ctID, T1.DictionaryTexture_VersionOwnerCompanyID, T1.DictionaryTexture_VersionUp");
            viewString.Append("dated)\r\n    FROM (\r\n        SELECT \r\n            T.TextureID AS DictionaryTextur");
            viewString.Append("e_TextureID, \r\n            T.StandardTextureName AS DictionaryTexture_StandardTe");
            viewString.Append("xtureName, \r\n            T.CoalTextureName AS DictionaryTexture_CoalTextureName,");
            viewString.Append(" \r\n            T.GoldTextureName AS DictionaryTexture_GoldTextureName, \r\n       ");
            viewString.Append("     T.CustomTextureName AS DictionaryTexture_CustomTextureName, \r\n            T");
            viewString.Append(".Description AS DictionaryTexture_Description, \r\n            T.FullDescription A");
            viewString.Append("S DictionaryTexture_FullDescription, \r\n            T.Thumbnail AS DictionaryText");
            viewString.Append("ure_Thumbnail, \r\n            T.OriginalFileDataID AS DictionaryTexture_OriginalF");
            viewString.Append("ileDataID, \r\n            T.Version AS DictionaryTexture_Version, \r\n            T");
            viewString.Append(".VersionAntecedentID AS DictionaryTexture_VersionAntecedentID, \r\n            T.V");
            viewString.Append("ersionCertainty AS DictionaryTexture_VersionCertainty, \r\n            T.VersionWo");
            viewString.Append("rkflowInstanceID AS DictionaryTexture_VersionWorkflowInstanceID, \r\n            T");
            viewString.Append(".VersionUpdatedBy AS DictionaryTexture_VersionUpdatedBy, \r\n            T.Version");
            viewString.Append("DeletedBy AS DictionaryTexture_VersionDeletedBy, \r\n            T.VersionOwnerCon");
            viewString.Append("tactID AS DictionaryTexture_VersionOwnerContactID, \r\n            T.VersionOwnerC");
            viewString.Append("ompanyID AS DictionaryTexture_VersionOwnerCompanyID, \r\n            T.VersionUpda");
            viewString.Append("ted AS DictionaryTexture_VersionUpdated, \r\n            True AS _from0\r\n        F");
            viewString.Append("ROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryTexture AS T\r\n    ) AS T1");
            viewString.Append("");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryTextures", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryUnits
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView520()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2474);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryUnits\r\n        [NKD.Module.Business");
            viewString.Append("Objects.DictionaryUnit](T1.DictionaryUnit_UnitID, T1.DictionaryUnit_UnitTypeID, ");
            viewString.Append("T1.DictionaryUnit_StrictlySI, T1.DictionaryUnit_EquivalentMultiplier, T1.Diction");
            viewString.Append("aryUnit_StandardUnitName, T1.DictionaryUnit_CoalUnitName, T1.DictionaryUnit_Gold");
            viewString.Append("UnitName, T1.DictionaryUnit_CustomUnitName, T1.DictionaryUnit_Description, T1.Di");
            viewString.Append("ctionaryUnit_FullDescription, T1.DictionaryUnit_Thumbnail, T1.DictionaryUnit_Ori");
            viewString.Append("ginalFileDataID, T1.DictionaryUnit_Version, T1.DictionaryUnit_VersionAntecedentI");
            viewString.Append("D, T1.DictionaryUnit_VersionCertainty, T1.DictionaryUnit_VersionWorkflowInstance");
            viewString.Append("ID, T1.DictionaryUnit_VersionUpdatedBy, T1.DictionaryUnit_VersionDeletedBy, T1.D");
            viewString.Append("ictionaryUnit_VersionOwnerContactID, T1.DictionaryUnit_VersionOwnerCompanyID, T1");
            viewString.Append(".DictionaryUnit_VersionUpdated, T1.DictionaryUnit_EquivalentUnitID)\r\n    FROM (\r");
            viewString.Append("\n        SELECT \r\n            T.UnitID AS DictionaryUnit_UnitID, \r\n            T");
            viewString.Append(".UnitTypeID AS DictionaryUnit_UnitTypeID, \r\n            T.StrictlySI AS Dictiona");
            viewString.Append("ryUnit_StrictlySI, \r\n            T.EquivalentMultiplier AS DictionaryUnit_Equiva");
            viewString.Append("lentMultiplier, \r\n            T.StandardUnitName AS DictionaryUnit_StandardUnitN");
            viewString.Append("ame, \r\n            T.CoalUnitName AS DictionaryUnit_CoalUnitName, \r\n            ");
            viewString.Append("T.GoldUnitName AS DictionaryUnit_GoldUnitName, \r\n            T.CustomUnitName AS");
            viewString.Append(" DictionaryUnit_CustomUnitName, \r\n            T.Description AS DictionaryUnit_De");
            viewString.Append("scription, \r\n            T.FullDescription AS DictionaryUnit_FullDescription, \r\n");
            viewString.Append("            T.Thumbnail AS DictionaryUnit_Thumbnail, \r\n            T.OriginalFil");
            viewString.Append("eDataID AS DictionaryUnit_OriginalFileDataID, \r\n            T.Version AS Diction");
            viewString.Append("aryUnit_Version, \r\n            T.VersionAntecedentID AS DictionaryUnit_VersionAn");
            viewString.Append("tecedentID, \r\n            T.VersionCertainty AS DictionaryUnit_VersionCertainty,");
            viewString.Append(" \r\n            T.VersionWorkflowInstanceID AS DictionaryUnit_VersionWorkflowInst");
            viewString.Append("anceID, \r\n            T.VersionUpdatedBy AS DictionaryUnit_VersionUpdatedBy, \r\n ");
            viewString.Append("           T.VersionDeletedBy AS DictionaryUnit_VersionDeletedBy, \r\n            ");
            viewString.Append("T.VersionOwnerContactID AS DictionaryUnit_VersionOwnerContactID, \r\n            T");
            viewString.Append(".VersionOwnerCompanyID AS DictionaryUnit_VersionOwnerCompanyID, \r\n            T.");
            viewString.Append("VersionUpdated AS DictionaryUnit_VersionUpdated, \r\n            T.EquivalentUnitI");
            viewString.Append("D AS DictionaryUnit_EquivalentUnitID, \r\n            True AS _from0\r\n        FROM");
            viewString.Append(" NKDModuleBusinessObjectsStoreContainer.X_DictionaryUnit AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryUnits", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryUnitTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView521()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2068);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryUnitTypes\r\n        [NKD.Module.Busi");
            viewString.Append("nessObjects.DictionaryUnitType](T1.DictionaryUnitType_UnitTypeID, T1.DictionaryU");
            viewString.Append("nitType_StandardUnitTypeName, T1.DictionaryUnitType_CustomUnitTypeName, T1.Dicti");
            viewString.Append("onaryUnitType_Description, T1.DictionaryUnitType_FullDescription, T1.DictionaryU");
            viewString.Append("nitType_Thumbnail, T1.DictionaryUnitType_OriginalFileDataID, T1.DictionaryUnitTy");
            viewString.Append("pe_Version, T1.DictionaryUnitType_VersionAntecedentID, T1.DictionaryUnitType_Ver");
            viewString.Append("sionCertainty, T1.DictionaryUnitType_VersionWorkflowInstanceID, T1.DictionaryUni");
            viewString.Append("tType_VersionUpdatedBy, T1.DictionaryUnitType_VersionDeletedBy, T1.DictionaryUni");
            viewString.Append("tType_VersionOwnerContactID, T1.DictionaryUnitType_VersionOwnerCompanyID, T1.Dic");
            viewString.Append("tionaryUnitType_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.Unit");
            viewString.Append("TypeID AS DictionaryUnitType_UnitTypeID, \r\n            T.StandardUnitTypeName AS");
            viewString.Append(" DictionaryUnitType_StandardUnitTypeName, \r\n            T.CustomUnitTypeName AS ");
            viewString.Append("DictionaryUnitType_CustomUnitTypeName, \r\n            T.Description AS Dictionary");
            viewString.Append("UnitType_Description, \r\n            T.FullDescription AS DictionaryUnitType_Full");
            viewString.Append("Description, \r\n            T.Thumbnail AS DictionaryUnitType_Thumbnail, \r\n      ");
            viewString.Append("      T.OriginalFileDataID AS DictionaryUnitType_OriginalFileDataID, \r\n         ");
            viewString.Append("   T.Version AS DictionaryUnitType_Version, \r\n            T.VersionAntecedentID ");
            viewString.Append("AS DictionaryUnitType_VersionAntecedentID, \r\n            T.VersionCertainty AS D");
            viewString.Append("ictionaryUnitType_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS");
            viewString.Append(" DictionaryUnitType_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy ");
            viewString.Append("AS DictionaryUnitType_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS Dict");
            viewString.Append("ionaryUnitType_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS Dictio");
            viewString.Append("naryUnitType_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS Dic");
            viewString.Append("tionaryUnitType_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS Diction");
            viewString.Append("aryUnitType_VersionUpdated, \r\n            True AS _from0\r\n        FROM NKDModule");
            viewString.Append("BusinessObjectsStoreContainer.X_DictionaryUnitType AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryUnitTypes", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryWeatherings
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView522()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2402);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryWeatherings\r\n        [NKD.Module.Bu");
            viewString.Append("sinessObjects.DictionaryWeathering](T1.DictionaryWeathering_WeatheringID, T1.Dic");
            viewString.Append("tionaryWeathering_StandardWeatheringName, T1.DictionaryWeathering_CoalWeathering");
            viewString.Append("Name, T1.DictionaryWeathering_GoldWeatheringName, T1.DictionaryWeathering_Custom");
            viewString.Append("WeatheringName, T1.DictionaryWeathering_Description, T1.DictionaryWeathering_Ful");
            viewString.Append("lDescription, T1.DictionaryWeathering_Thumbnail, T1.DictionaryWeathering_Origina");
            viewString.Append("lFileDataID, T1.DictionaryWeathering_Version, T1.DictionaryWeathering_VersionAnt");
            viewString.Append("ecedentID, T1.DictionaryWeathering_VersionCertainty, T1.DictionaryWeathering_Ver");
            viewString.Append("sionWorkflowInstanceID, T1.DictionaryWeathering_VersionUpdatedBy, T1.DictionaryW");
            viewString.Append("eathering_VersionDeletedBy, T1.DictionaryWeathering_VersionOwnerContactID, T1.Di");
            viewString.Append("ctionaryWeathering_VersionOwnerCompanyID, T1.DictionaryWeathering_VersionUpdated");
            viewString.Append(")\r\n    FROM (\r\n        SELECT \r\n            T.WeatheringID AS DictionaryWeatheri");
            viewString.Append("ng_WeatheringID, \r\n            T.StandardWeatheringName AS DictionaryWeathering_");
            viewString.Append("StandardWeatheringName, \r\n            T.CoalWeatheringName AS DictionaryWeatheri");
            viewString.Append("ng_CoalWeatheringName, \r\n            T.GoldWeatheringName AS DictionaryWeatherin");
            viewString.Append("g_GoldWeatheringName, \r\n            T.CustomWeatheringName AS DictionaryWeatheri");
            viewString.Append("ng_CustomWeatheringName, \r\n            T.Description AS DictionaryWeathering_Des");
            viewString.Append("cription, \r\n            T.FullDescription AS DictionaryWeathering_FullDescriptio");
            viewString.Append("n, \r\n            T.Thumbnail AS DictionaryWeathering_Thumbnail, \r\n            T.");
            viewString.Append("OriginalFileDataID AS DictionaryWeathering_OriginalFileDataID, \r\n            T.V");
            viewString.Append("ersion AS DictionaryWeathering_Version, \r\n            T.VersionAntecedentID AS D");
            viewString.Append("ictionaryWeathering_VersionAntecedentID, \r\n            T.VersionCertainty AS Dic");
            viewString.Append("tionaryWeathering_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS");
            viewString.Append(" DictionaryWeathering_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedB");
            viewString.Append("y AS DictionaryWeathering_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS ");
            viewString.Append("DictionaryWeathering_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS ");
            viewString.Append("DictionaryWeathering_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyI");
            viewString.Append("D AS DictionaryWeathering_VersionOwnerCompanyID, \r\n            T.VersionUpdated ");
            viewString.Append("AS DictionaryWeathering_VersionUpdated, \r\n            True AS _from0\r\n        FR");
            viewString.Append("OM NKDModuleBusinessObjectsStoreContainer.X_DictionaryWeathering AS T\r\n    ) AS ");
            viewString.Append("T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryWeatherings", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryWorkTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView523()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2160);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryWorkTypes\r\n        [NKD.Module.Busi");
            viewString.Append("nessObjects.DictionaryWorkType](T1.DictionaryWorkType_WorkTypeID, T1.DictionaryW");
            viewString.Append("orkType_ProfessionID, T1.DictionaryWorkType_WorkTypeClassID, T1.DictionaryWorkTy");
            viewString.Append("pe_WorkTypeName, T1.DictionaryWorkType_WorkTypeDescription, T1.DictionaryWorkTyp");
            viewString.Append("e_FullDescription, T1.DictionaryWorkType_Thumbnail, T1.DictionaryWorkType_Origin");
            viewString.Append("alFileDataID, T1.DictionaryWorkType_Version, T1.DictionaryWorkType_VersionAntece");
            viewString.Append("dentID, T1.DictionaryWorkType_VersionCertainty, T1.DictionaryWorkType_VersionWor");
            viewString.Append("kflowInstanceID, T1.DictionaryWorkType_VersionUpdatedBy, T1.DictionaryWorkType_V");
            viewString.Append("ersionDeletedBy, T1.DictionaryWorkType_VersionOwnerContactID, T1.DictionaryWorkT");
            viewString.Append("ype_VersionOwnerCompanyID, T1.DictionaryWorkType_VersionUpdated)\r\n    FROM (\r\n  ");
            viewString.Append("      SELECT \r\n            T.WorkTypeID AS DictionaryWorkType_WorkTypeID, \r\n    ");
            viewString.Append("        T.ProfessionID AS DictionaryWorkType_ProfessionID, \r\n            T.WorkT");
            viewString.Append("ypeClassID AS DictionaryWorkType_WorkTypeClassID, \r\n            T.WorkTypeName A");
            viewString.Append("S DictionaryWorkType_WorkTypeName, \r\n            T.WorkTypeDescription AS Dictio");
            viewString.Append("naryWorkType_WorkTypeDescription, \r\n            T.FullDescription AS DictionaryW");
            viewString.Append("orkType_FullDescription, \r\n            T.Thumbnail AS DictionaryWorkType_Thumbna");
            viewString.Append("il, \r\n            T.OriginalFileDataID AS DictionaryWorkType_OriginalFileDataID,");
            viewString.Append(" \r\n            T.Version AS DictionaryWorkType_Version, \r\n            T.VersionA");
            viewString.Append("ntecedentID AS DictionaryWorkType_VersionAntecedentID, \r\n            T.VersionCe");
            viewString.Append("rtainty AS DictionaryWorkType_VersionCertainty, \r\n            T.VersionWorkflowI");
            viewString.Append("nstanceID AS DictionaryWorkType_VersionWorkflowInstanceID, \r\n            T.Versi");
            viewString.Append("onUpdatedBy AS DictionaryWorkType_VersionUpdatedBy, \r\n            T.VersionDelet");
            viewString.Append("edBy AS DictionaryWorkType_VersionDeletedBy, \r\n            T.VersionOwnerContact");
            viewString.Append("ID AS DictionaryWorkType_VersionOwnerContactID, \r\n            T.VersionOwnerComp");
            viewString.Append("anyID AS DictionaryWorkType_VersionOwnerCompanyID, \r\n            T.VersionUpdate");
            viewString.Append("d AS DictionaryWorkType_VersionUpdated, \r\n            True AS _from0\r\n        FR");
            viewString.Append("OM NKDModuleBusinessObjectsStoreContainer.X_DictionaryWorkType AS T\r\n    ) AS T1");
            viewString.Append("");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryWorkTypes", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryWorkTypeClasses
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView524()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2121);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryWorkTypeClasses\r\n        [NKD.Modul");
            viewString.Append("e.BusinessObjects.DictionaryWorkTypeClass](T1.DictionaryWorkTypeClass_WorkTypeCl");
            viewString.Append("assID, T1.DictionaryWorkTypeClass_Description, T1.DictionaryWorkTypeClass_FullDe");
            viewString.Append("scription, T1.DictionaryWorkTypeClass_Thumbnail, T1.DictionaryWorkTypeClass_Orig");
            viewString.Append("inalFileDataID, T1.DictionaryWorkTypeClass_Version, T1.DictionaryWorkTypeClass_V");
            viewString.Append("ersionAntecedentID, T1.DictionaryWorkTypeClass_VersionCertainty, T1.DictionaryWo");
            viewString.Append("rkTypeClass_VersionWorkflowInstanceID, T1.DictionaryWorkTypeClass_VersionUpdated");
            viewString.Append("By, T1.DictionaryWorkTypeClass_VersionDeletedBy, T1.DictionaryWorkTypeClass_Vers");
            viewString.Append("ionOwnerContactID, T1.DictionaryWorkTypeClass_VersionOwnerCompanyID, T1.Dictiona");
            viewString.Append("ryWorkTypeClass_VersionUpdated, T1.DictionaryWorkTypeClass_WorkTypeClassName)\r\n ");
            viewString.Append("   FROM (\r\n        SELECT \r\n            T.WorkTypeClassID AS DictionaryWorkTypeC");
            viewString.Append("lass_WorkTypeClassID, \r\n            T.Description AS DictionaryWorkTypeClass_Des");
            viewString.Append("cription, \r\n            T.FullDescription AS DictionaryWorkTypeClass_FullDescrip");
            viewString.Append("tion, \r\n            T.Thumbnail AS DictionaryWorkTypeClass_Thumbnail, \r\n        ");
            viewString.Append("    T.OriginalFileDataID AS DictionaryWorkTypeClass_OriginalFileDataID, \r\n      ");
            viewString.Append("      T.Version AS DictionaryWorkTypeClass_Version, \r\n            T.VersionAntec");
            viewString.Append("edentID AS DictionaryWorkTypeClass_VersionAntecedentID, \r\n            T.VersionC");
            viewString.Append("ertainty AS DictionaryWorkTypeClass_VersionCertainty, \r\n            T.VersionWor");
            viewString.Append("kflowInstanceID AS DictionaryWorkTypeClass_VersionWorkflowInstanceID, \r\n        ");
            viewString.Append("    T.VersionUpdatedBy AS DictionaryWorkTypeClass_VersionUpdatedBy, \r\n          ");
            viewString.Append("  T.VersionDeletedBy AS DictionaryWorkTypeClass_VersionDeletedBy, \r\n            ");
            viewString.Append("T.VersionOwnerContactID AS DictionaryWorkTypeClass_VersionOwnerContactID, \r\n    ");
            viewString.Append("        T.VersionOwnerCompanyID AS DictionaryWorkTypeClass_VersionOwnerCompanyID");
            viewString.Append(", \r\n            T.VersionUpdated AS DictionaryWorkTypeClass_VersionUpdated, \r\n  ");
            viewString.Append("          T.WorkTypeClassName AS DictionaryWorkTypeClass_WorkTypeClassName, \r\n  ");
            viewString.Append("          True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_");
            viewString.Append("DictionaryWorkTypeClass AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryWorkTypeClasses", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryWorkTypeRelations
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView525()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryWorkTypeRelations", "\r\n    SELECT VALUE -- Constructing DictionaryWorkTypeRelations\r\n        [NKD.Modu" +
                    "le.BusinessObjects.DictionaryWorkTypeRelation](T1.DictionaryWorkTypeRelation_Wor" +
                    "kTypeRelationID, T1.DictionaryWorkTypeRelation_WorkTypeID, T1.DictionaryWorkType" +
                    "Relation_ParentWorkTypeID, T1.DictionaryWorkTypeRelation_Version, T1.DictionaryW" +
                    "orkTypeRelation_VersionAntecedentID, T1.DictionaryWorkTypeRelation_VersionCertai" +
                    "nty, T1.DictionaryWorkTypeRelation_VersionWorkflowInstanceID, T1.DictionaryWorkT" +
                    "ypeRelation_VersionUpdatedBy, T1.DictionaryWorkTypeRelation_VersionDeletedBy, T1" +
                    ".DictionaryWorkTypeRelation_VersionOwnerContactID, T1.DictionaryWorkTypeRelation" +
                    "_VersionOwnerCompanyID, T1.DictionaryWorkTypeRelation_VersionUpdated)\r\n    FROM " +
                    "(\r\n        SELECT \r\n            T.WorkTypeRelationID AS DictionaryWorkTypeRelati" +
                    "on_WorkTypeRelationID, \r\n            T.WorkTypeID AS DictionaryWorkTypeRelation_" +
                    "WorkTypeID, \r\n            T.ParentWorkTypeID AS DictionaryWorkTypeRelation_Paren" +
                    "tWorkTypeID, \r\n            T.Version AS DictionaryWorkTypeRelation_Version, \r\n  " +
                    "          T.VersionAntecedentID AS DictionaryWorkTypeRelation_VersionAntecedentI" +
                    "D, \r\n            T.VersionCertainty AS DictionaryWorkTypeRelation_VersionCertain" +
                    "ty, \r\n            T.VersionWorkflowInstanceID AS DictionaryWorkTypeRelation_Vers" +
                    "ionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS DictionaryWorkTypeRel" +
                    "ation_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS DictionaryWorkTypeRe" +
                    "lation_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS DictionaryWork" +
                    "TypeRelation_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS Dic" +
                    "tionaryWorkTypeRelation_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS" +
                    " DictionaryWorkTypeRelation_VersionUpdated, \r\n            True AS _from0\r\n      " +
                    "  FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryWorkTypeRelation AS T\r" +
                    "\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.Drillings
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView526()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2981);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Drillings\r\n        [NKD.Module.BusinessObject");
            viewString.Append("s.Drilling](T1.Drilling_DrillingID, T1.Drilling_HeaderID, T1.Drilling_RunNumber,");
            viewString.Append(" T1.Drilling_DrillingDate, T1.Drilling_DrillingCompanyID, T1.Drilling_DrillRigNu");
            viewString.Append("mber, T1.Drilling_DrillRigTypeID, T1.Drilling_DrillerID, T1.Drilling_DrillBitTyp");
            viewString.Append("eID, T1.Drilling_DrillFluidID, T1.Drilling_DrillSizeID, T1.Drilling_CoreSize, T1");
            viewString.Append(".Drilling_HoleSize, T1.Drilling_Reamed, T1.Drilling_Comment, T1.Drilling_Version");
            viewString.Append(", T1.Drilling_VersionAntecedentID, T1.Drilling_VersionCertainty, T1.Drilling_Ver");
            viewString.Append("sionWorkflowInstanceID, T1.Drilling_VersionUpdatedBy, T1.Drilling_VersionDeleted");
            viewString.Append("By, T1.Drilling_VersionOwnerContactID, T1.Drilling_VersionOwnerCompanyID, T1.Dri");
            viewString.Append("lling_VersionUpdated, T1.Drilling_GeologistFromDepth, T1.Drilling_GeologistToDep");
            viewString.Append("th, T1.Drilling_GeologistRecoveredLength, T1.Drilling_DrillerFromDepth, T1.Drill");
            viewString.Append("ing_DrillerToDepth, T1.Drilling_DrillerRecoveredLength, T1.Drilling_RockQualityD");
            viewString.Append("esignationLength)\r\n    FROM (\r\n        SELECT \r\n            T.DrillingID AS Dril");
            viewString.Append("ling_DrillingID, \r\n            T.HeaderID AS Drilling_HeaderID, \r\n            T.");
            viewString.Append("RunNumber AS Drilling_RunNumber, \r\n            T.DrillingDate AS Drilling_Drilli");
            viewString.Append("ngDate, \r\n            T.DrillingCompanyID AS Drilling_DrillingCompanyID, \r\n     ");
            viewString.Append("       T.DrillRigNumber AS Drilling_DrillRigNumber, \r\n            T.DrillRigType");
            viewString.Append("ID AS Drilling_DrillRigTypeID, \r\n            T.DrillerID AS Drilling_DrillerID, ");
            viewString.Append("\r\n            T.DrillBitTypeID AS Drilling_DrillBitTypeID, \r\n            T.Drill");
            viewString.Append("FluidID AS Drilling_DrillFluidID, \r\n            T.DrillSizeID AS Drilling_DrillS");
            viewString.Append("izeID, \r\n            T.CoreSize AS Drilling_CoreSize, \r\n            T.HoleSize A");
            viewString.Append("S Drilling_HoleSize, \r\n            T.Reamed AS Drilling_Reamed, \r\n            T.");
            viewString.Append("Comment AS Drilling_Comment, \r\n            T.Version AS Drilling_Version, \r\n    ");
            viewString.Append("        T.VersionAntecedentID AS Drilling_VersionAntecedentID, \r\n            T.V");
            viewString.Append("ersionCertainty AS Drilling_VersionCertainty, \r\n            T.VersionWorkflowIns");
            viewString.Append("tanceID AS Drilling_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy ");
            viewString.Append("AS Drilling_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS Drilling_Versi");
            viewString.Append("onDeletedBy, \r\n            T.VersionOwnerContactID AS Drilling_VersionOwnerConta");
            viewString.Append("ctID, \r\n            T.VersionOwnerCompanyID AS Drilling_VersionOwnerCompanyID, \r");
            viewString.Append("\n            T.VersionUpdated AS Drilling_VersionUpdated, \r\n            T.Geolog");
            viewString.Append("istFromDepth AS Drilling_GeologistFromDepth, \r\n            T.GeologistToDepth AS");
            viewString.Append(" Drilling_GeologistToDepth, \r\n            T.GeologistRecoveredLength AS Drilling");
            viewString.Append("_GeologistRecoveredLength, \r\n            T.DrillerFromDepth AS Drilling_DrillerF");
            viewString.Append("romDepth, \r\n            T.DrillerToDepth AS Drilling_DrillerToDepth, \r\n         ");
            viewString.Append("   T.DrillerRecoveredLength AS Drilling_DrillerRecoveredLength, \r\n            T.");
            viewString.Append("RockQualityDesignationLength AS Drilling_RockQualityDesignationLength, \r\n       ");
            viewString.Append("     True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_Drill");
            viewString.Append("ing AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.Drillings", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.Experiences
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView527()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3770);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Experiences\r\n        [NKD.Module.BusinessObje");
            viewString.Append("cts.Experience](T1.Experience_ExperienceID, T1.Experience_ExperienceName, T1.Exp");
            viewString.Append("erience_ExperienceGroupID, T1.Experience_CompanyID, T1.Experience_ProjectID, T1.");
            viewString.Append("Experience_ContactID, T1.Experience_LocationID, T1.Experience_ProvinceID, T1.Exp");
            viewString.Append("erience_WorkTypeID, T1.Experience_ProfessionID, T1.Experience_PositionID, T1.Exp");
            viewString.Append("erience_ClientAlias, T1.Experience_Division, T1.Experience_OfficeLocationAlias, ");
            viewString.Append("T1.Experience_ExternalProjectCode, T1.Experience_EstimatedDurationDays, T1.Exper");
            viewString.Append("ience_UserExperienceLevel, T1.Experience_AssignedExperienceLevel, T1.Experience_");
            viewString.Append("NormalizedExperienceLevel, T1.Experience_DateStart, T1.Experience_DateFinished, ");
            viewString.Append("T1.Experience_Expiry, T1.Experience_HourlyRate, T1.Experience_DailyRate, T1.Expe");
            viewString.Append("rience_AnnualRate, T1.Experience_BlendedHourlyRate, T1.Experience_BlendedHourlyC");
            viewString.Append("ost, T1.Experience_Comment, T1.Experience_IsApproved, T1.Experience_Version, T1.");
            viewString.Append("Experience_VersionAntecedentID, T1.Experience_VersionCertainty, T1.Experience_Ve");
            viewString.Append("rsionWorkflowInstanceID, T1.Experience_VersionUpdatedBy, T1.Experience_VersionDe");
            viewString.Append("letedBy, T1.Experience_VersionOwnerContactID, T1.Experience_VersionOwnerCompanyI");
            viewString.Append("D, T1.Experience_VersionUpdated, T1.Experience_LinestringID)\r\n    FROM (\r\n      ");
            viewString.Append("  SELECT \r\n            T.ExperienceID AS Experience_ExperienceID, \r\n            ");
            viewString.Append("T.ExperienceName AS Experience_ExperienceName, \r\n            T.ExperienceGroupID");
            viewString.Append(" AS Experience_ExperienceGroupID, \r\n            T.CompanyID AS Experience_Compan");
            viewString.Append("yID, \r\n            T.ProjectID AS Experience_ProjectID, \r\n            T.ContactI");
            viewString.Append("D AS Experience_ContactID, \r\n            T.LocationID AS Experience_LocationID, ");
            viewString.Append("\r\n            T.ProvinceID AS Experience_ProvinceID, \r\n            T.WorkTypeID ");
            viewString.Append("AS Experience_WorkTypeID, \r\n            T.ProfessionID AS Experience_ProfessionI");
            viewString.Append("D, \r\n            T.PositionID AS Experience_PositionID, \r\n            T.ClientAl");
            viewString.Append("ias AS Experience_ClientAlias, \r\n            T.Division AS Experience_Division, ");
            viewString.Append("\r\n            T.OfficeLocationAlias AS Experience_OfficeLocationAlias, \r\n       ");
            viewString.Append("     T.ExternalProjectCode AS Experience_ExternalProjectCode, \r\n            T.Es");
            viewString.Append("timatedDurationDays AS Experience_EstimatedDurationDays, \r\n            T.UserExp");
            viewString.Append("erienceLevel AS Experience_UserExperienceLevel, \r\n            T.AssignedExperien");
            viewString.Append("ceLevel AS Experience_AssignedExperienceLevel, \r\n            T.NormalizedExperie");
            viewString.Append("nceLevel AS Experience_NormalizedExperienceLevel, \r\n            T.DateStart AS E");
            viewString.Append("xperience_DateStart, \r\n            T.DateFinished AS Experience_DateFinished, \r\n");
            viewString.Append("            T.Expiry AS Experience_Expiry, \r\n            T.HourlyRate AS Experie");
            viewString.Append("nce_HourlyRate, \r\n            T.DailyRate AS Experience_DailyRate, \r\n           ");
            viewString.Append(" T.AnnualRate AS Experience_AnnualRate, \r\n            T.BlendedHourlyRate AS Exp");
            viewString.Append("erience_BlendedHourlyRate, \r\n            T.BlendedHourlyCost AS Experience_Blend");
            viewString.Append("edHourlyCost, \r\n            T.Comment AS Experience_Comment, \r\n            T.IsA");
            viewString.Append("pproved AS Experience_IsApproved, \r\n            T.Version AS Experience_Version,");
            viewString.Append(" \r\n            T.VersionAntecedentID AS Experience_VersionAntecedentID, \r\n      ");
            viewString.Append("      T.VersionCertainty AS Experience_VersionCertainty, \r\n            T.Version");
            viewString.Append("WorkflowInstanceID AS Experience_VersionWorkflowInstanceID, \r\n            T.Vers");
            viewString.Append("ionUpdatedBy AS Experience_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS");
            viewString.Append(" Experience_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS Experienc");
            viewString.Append("e_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS Experience_Ver");
            viewString.Append("sionOwnerCompanyID, \r\n            T.VersionUpdated AS Experience_VersionUpdated,");
            viewString.Append(" \r\n            T.LinestringID AS Experience_LinestringID, \r\n            True AS ");
            viewString.Append("_from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_Experience AS T\r\n ");
            viewString.Append("   ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.Experiences", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.FileDatas
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView528()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2204);
            viewString.Append("\r\n    SELECT VALUE -- Constructing FileDatas\r\n        [NKD.Module.BusinessObject");
            viewString.Append("s.FileData](T1.FileData_FileDataID, T1.FileData_ParentFileID, T1.FileData_TableT");
            viewString.Append("ype, T1.FileData_ReferenceID, T1.FileData_WorkerID, T1.FileData_FileTypeID, T1.F");
            viewString.Append("ileData_FileName, T1.FileData_DocumentType, T1.FileData_MimeType, T1.FileData_Au");
            viewString.Append("thor, T1.FileData_FileBytes, T1.FileData_FileContent, T1.FileData_FileChecksum, ");
            viewString.Append("T1.FileData_Comment, T1.FileData_Version, T1.FileData_VersionAntecedentID, T1.Fi");
            viewString.Append("leData_VersionCertainty, T1.FileData_VersionWorkflowInstanceID, T1.FileData_Vers");
            viewString.Append("ionUpdatedBy, T1.FileData_VersionDeletedBy, T1.FileData_VersionOwnerContactID, T");
            viewString.Append("1.FileData_VersionOwnerCompanyID, T1.FileData_VersionUpdated, T1.FileData_FileLe");
            viewString.Append("ngth)\r\n    FROM (\r\n        SELECT \r\n            T.FileDataID AS FileData_FileDat");
            viewString.Append("aID, \r\n            T.ParentFileID AS FileData_ParentFileID, \r\n            T.Tabl");
            viewString.Append("eType AS FileData_TableType, \r\n            T.ReferenceID AS FileData_ReferenceID");
            viewString.Append(", \r\n            T.WorkerID AS FileData_WorkerID, \r\n            T.FileTypeID AS F");
            viewString.Append("ileData_FileTypeID, \r\n            T.FileName AS FileData_FileName, \r\n           ");
            viewString.Append(" T.DocumentType AS FileData_DocumentType, \r\n            T.MimeType AS FileData_M");
            viewString.Append("imeType, \r\n            T.Author AS FileData_Author, \r\n            T.FileBytes AS");
            viewString.Append(" FileData_FileBytes, \r\n            T.FileContent AS FileData_FileContent, \r\n    ");
            viewString.Append("        T.FileChecksum AS FileData_FileChecksum, \r\n            T.Comment AS File");
            viewString.Append("Data_Comment, \r\n            T.Version AS FileData_Version, \r\n            T.Versi");
            viewString.Append("onAntecedentID AS FileData_VersionAntecedentID, \r\n            T.VersionCertainty");
            viewString.Append(" AS FileData_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS File");
            viewString.Append("Data_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS FileData_Ver");
            viewString.Append("sionUpdatedBy, \r\n            T.VersionDeletedBy AS FileData_VersionDeletedBy, \r\n");
            viewString.Append("            T.VersionOwnerContactID AS FileData_VersionOwnerContactID, \r\n       ");
            viewString.Append("     T.VersionOwnerCompanyID AS FileData_VersionOwnerCompanyID, \r\n            T.");
            viewString.Append("VersionUpdated AS FileData_VersionUpdated, \r\n            T.FileLength AS FileDat");
            viewString.Append("a_FileLength, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObject");
            viewString.Append("sStoreContainer.X_FileData AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.FileDatas", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.Geologies
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView529()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.Geologies", "\r\n    SELECT VALUE -- Constructing Geologies\r\n        [NKD.Module.BusinessObjects" +
                    ".Geology](T1.Geology_GeologyID, T1.Geology_HeaderID, T1.Geology_GeologyContactID" +
                    ", T1.Geology_FromDepth, T1.Geology_ToDepth, T1.Geology_Comment, T1.Geology_Versi" +
                    "on, T1.Geology_VersionAntecedentID, T1.Geology_VersionCertainty, T1.Geology_Vers" +
                    "ionWorkflowInstanceID, T1.Geology_VersionUpdatedBy, T1.Geology_VersionDeletedBy," +
                    " T1.Geology_VersionOwnerContactID, T1.Geology_VersionOwnerCompanyID, T1.Geology_" +
                    "VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.GeologyID AS Geology" +
                    "_GeologyID, \r\n            T.HeaderID AS Geology_HeaderID, \r\n            T.Geolog" +
                    "yContactID AS Geology_GeologyContactID, \r\n            T.FromDepth AS Geology_Fro" +
                    "mDepth, \r\n            T.ToDepth AS Geology_ToDepth, \r\n            T.Comment AS G" +
                    "eology_Comment, \r\n            T.Version AS Geology_Version, \r\n            T.Vers" +
                    "ionAntecedentID AS Geology_VersionAntecedentID, \r\n            T.VersionCertainty" +
                    " AS Geology_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS Geolo" +
                    "gy_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS Geology_Versio" +
                    "nUpdatedBy, \r\n            T.VersionDeletedBy AS Geology_VersionDeletedBy, \r\n    " +
                    "        T.VersionOwnerContactID AS Geology_VersionOwnerContactID, \r\n            " +
                    "T.VersionOwnerCompanyID AS Geology_VersionOwnerCompanyID, \r\n            T.Versio" +
                    "nUpdated AS Geology_VersionUpdated, \r\n            True AS _from0\r\n        FROM N" +
                    "KDModuleBusinessObjectsStoreContainer.X_Geology AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.Geophysics
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView530()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.Geophysics", "\r\n    SELECT VALUE -- Constructing Geophysics\r\n        [NKD.Module.BusinessObject" +
                    "s.Geophysics](T1.Geophysics_GeophysicsID, T1.Geophysics_FileName, T1.Geophysics_" +
                    "OriginalFileDataID, T1.Geophysics_HeaderID, T1.Geophysics_DimensionUnitID, T1.Ge" +
                    "ophysics_LasVersion, T1.Geophysics_LasFormat, T1.Geophysics_LasWrap, T1.Geophysi" +
                    "cs_LasDelimiter, T1.Geophysics_LasNullValue, T1.Geophysics_Version, T1.Geophysic" +
                    "s_VersionAntecedentID, T1.Geophysics_VersionCertainty, T1.Geophysics_VersionWork" +
                    "flowInstanceID, T1.Geophysics_VersionUpdatedBy, T1.Geophysics_VersionDeletedBy, " +
                    "T1.Geophysics_VersionOwnerContactID, T1.Geophysics_VersionOwnerCompanyID, T1.Geo" +
                    "physics_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.GeophysicsID" +
                    " AS Geophysics_GeophysicsID, \r\n            T.FileName AS Geophysics_FileName, \r\n" +
                    "            T.OriginalFileDataID AS Geophysics_OriginalFileDataID, \r\n           " +
                    " T.HeaderID AS Geophysics_HeaderID, \r\n            T.DimensionUnitID AS Geophysic" +
                    "s_DimensionUnitID, \r\n            T.LasVersion AS Geophysics_LasVersion, \r\n      " +
                    "      T.LasFormat AS Geophysics_LasFormat, \r\n            T.LasWrap AS Geophysics" +
                    "_LasWrap, \r\n            T.LasDelimiter AS Geophysics_LasDelimiter, \r\n           " +
                    " T.LasNullValue AS Geophysics_LasNullValue, \r\n            T.Version AS Geophysic" +
                    "s_Version, \r\n            T.VersionAntecedentID AS Geophysics_VersionAntecedentID" +
                    ", \r\n            T.VersionCertainty AS Geophysics_VersionCertainty, \r\n           " +
                    " T.VersionWorkflowInstanceID AS Geophysics_VersionWorkflowInstanceID, \r\n        " +
                    "    T.VersionUpdatedBy AS Geophysics_VersionUpdatedBy, \r\n            T.VersionDe" +
                    "letedBy AS Geophysics_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS" +
                    " Geophysics_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS Geop" +
                    "hysics_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS Geophysics_Versi" +
                    "onUpdated, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjectsSt" +
                    "oreContainer.X_Geophysics AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.GeophysicsDatas
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView531()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.GeophysicsDatas", "\r\n    SELECT VALUE -- Constructing GeophysicsDatas\r\n        [NKD.Module.BusinessO" +
                    "bjects.GeophysicsData](T1.GeophysicsData_GeophysicsDataID, T1.GeophysicsData_Geo" +
                    "physicsMetadataID, T1.GeophysicsData_Dimension, T1.GeophysicsData_MeasurementVal" +
                    "ue, T1.GeophysicsData_MeasurementText, T1.GeophysicsData_Version, T1.GeophysicsD" +
                    "ata_VersionAntecedentID, T1.GeophysicsData_VersionCertainty, T1.GeophysicsData_V" +
                    "ersionWorkflowInstanceID, T1.GeophysicsData_VersionUpdatedBy, T1.GeophysicsData_" +
                    "VersionDeletedBy, T1.GeophysicsData_VersionOwnerContactID, T1.GeophysicsData_Ver" +
                    "sionOwnerCompanyID, T1.GeophysicsData_VersionUpdated)\r\n    FROM (\r\n        SELEC" +
                    "T \r\n            T.GeophysicsDataID AS GeophysicsData_GeophysicsDataID, \r\n       " +
                    "     T.GeophysicsMetadataID AS GeophysicsData_GeophysicsMetadataID, \r\n          " +
                    "  T.Dimension AS GeophysicsData_Dimension, \r\n            T.MeasurementValue AS G" +
                    "eophysicsData_MeasurementValue, \r\n            T.MeasurementText AS GeophysicsDat" +
                    "a_MeasurementText, \r\n            T.Version AS GeophysicsData_Version, \r\n        " +
                    "    T.VersionAntecedentID AS GeophysicsData_VersionAntecedentID, \r\n            T" +
                    ".VersionCertainty AS GeophysicsData_VersionCertainty, \r\n            T.VersionWor" +
                    "kflowInstanceID AS GeophysicsData_VersionWorkflowInstanceID, \r\n            T.Ver" +
                    "sionUpdatedBy AS GeophysicsData_VersionUpdatedBy, \r\n            T.VersionDeleted" +
                    "By AS GeophysicsData_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS " +
                    "GeophysicsData_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS G" +
                    "eophysicsData_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS Geophysic" +
                    "sData_VersionUpdated, \r\n            True AS _from0\r\n        FROM NKDModuleBusine" +
                    "ssObjectsStoreContainer.X_GeophysicsData AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.GeophysicsMetadatas
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView532()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2135);
            viewString.Append("\r\n    SELECT VALUE -- Constructing GeophysicsMetadatas\r\n        [NKD.Module.Busi");
            viewString.Append("nessObjects.GeophysicsMetadata](T1.GeophysicsMetadata_GeophysicsMetadataID, T1.G");
            viewString.Append("eophysicsMetadata_GeophysicsID, T1.GeophysicsMetadata_ParameterID, T1.Geophysics");
            viewString.Append("Metadata_Mnemonic, T1.GeophysicsMetadata_Unit, T1.GeophysicsMetadata_Data, T1.Ge");
            viewString.Append("ophysicsMetadata_Code, T1.GeophysicsMetadata_Description, T1.GeophysicsMetadata_");
            viewString.Append("Format, T1.GeophysicsMetadata_Version, T1.GeophysicsMetadata_VersionAntecedentID");
            viewString.Append(", T1.GeophysicsMetadata_VersionCertainty, T1.GeophysicsMetadata_VersionWorkflowI");
            viewString.Append("nstanceID, T1.GeophysicsMetadata_VersionUpdatedBy, T1.GeophysicsMetadata_Version");
            viewString.Append("DeletedBy, T1.GeophysicsMetadata_VersionOwnerContactID, T1.GeophysicsMetadata_Ve");
            viewString.Append("rsionOwnerCompanyID, T1.GeophysicsMetadata_VersionUpdated)\r\n    FROM (\r\n        ");
            viewString.Append("SELECT \r\n            T.GeophysicsMetadataID AS GeophysicsMetadata_GeophysicsMeta");
            viewString.Append("dataID, \r\n            T.GeophysicsID AS GeophysicsMetadata_GeophysicsID, \r\n     ");
            viewString.Append("       T.ParameterID AS GeophysicsMetadata_ParameterID, \r\n            T.Mnemonic");
            viewString.Append(" AS GeophysicsMetadata_Mnemonic, \r\n            T.Unit AS GeophysicsMetadata_Unit");
            viewString.Append(", \r\n            T.Data AS GeophysicsMetadata_Data, \r\n            T.Code AS Geoph");
            viewString.Append("ysicsMetadata_Code, \r\n            T.Description AS GeophysicsMetadata_Descriptio");
            viewString.Append("n, \r\n            T.Format AS GeophysicsMetadata_Format, \r\n            T.Version ");
            viewString.Append("AS GeophysicsMetadata_Version, \r\n            T.VersionAntecedentID AS Geophysics");
            viewString.Append("Metadata_VersionAntecedentID, \r\n            T.VersionCertainty AS GeophysicsMeta");
            viewString.Append("data_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS GeophysicsMe");
            viewString.Append("tadata_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS Geophysics");
            viewString.Append("Metadata_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS GeophysicsMetadat");
            viewString.Append("a_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS GeophysicsMetadata_");
            viewString.Append("VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS GeophysicsMetada");
            viewString.Append("ta_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS GeophysicsMetadata_V");
            viewString.Append("ersionUpdated, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjec");
            viewString.Append("tsStoreContainer.X_GeophysicsMetadata AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.GeophysicsMetadatas", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.Headers
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView533()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3666);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Headers\r\n        [NKD.Module.BusinessObjects.");
            viewString.Append("Header](T1.Header_HeaderID, T1.Header_ProjectID, T1.Header_HoleName, T1.Header_S");
            viewString.Append("ite, T1.Header_HoleTypeID, T1.Header_DataStatusID, T1.Header_PrimaryHolePurposeI");
            viewString.Append("D, T1.Header_SurveyAccuracyID, T1.Header_GeodeticDatumID, T1.Header_UtmZoneNumbe");
            viewString.Append("r, T1.Header_UtmZoneHemisphere, T1.Header_HeightDatumID, T1.Header_EastingUtm, T");
            viewString.Append("1.Header_NorthingUtm, T1.Header_Elevation, T1.Header_Inclination, T1.Header_Azim");
            viewString.Append("uth, T1.Header_LocationID, T1.Header_StartDate, T1.Header_CompleteDate, T1.Heade");
            viewString.Append("r_TotalDepth, T1.Header_HoleRedrilled, T1.Header_GeologyCompanyID, T1.Header_Has");
            viewString.Append("HadGeotechLogs, T1.Header_HasHadCorePhotos, T1.Header_DefaultGeophysicalLoggingC");
            viewString.Append("ompanyID, T1.Header_DefaultGeophysicalLoggerID, T1.Header_StandingWaterLevel, T1");
            viewString.Append(".Header_StandingWaterLevelDate, T1.Header_DateRehabilitated, T1.Header_HoleStatu");
            viewString.Append("sID, T1.Header_Comment, T1.Header_Version, T1.Header_VersionAntecedentID, T1.Hea");
            viewString.Append("der_VersionCertainty, T1.Header_VersionWorkflowInstanceID, T1.Header_VersionUpda");
            viewString.Append("tedBy, T1.Header_VersionDeletedBy, T1.Header_VersionOwnerContactID, T1.Header_Ve");
            viewString.Append("rsionOwnerCompanyID, T1.Header_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n   ");
            viewString.Append("         T.HeaderID AS Header_HeaderID, \r\n            T.ProjectID AS Header_Proj");
            viewString.Append("ectID, \r\n            T.HoleName AS Header_HoleName, \r\n            T.Site AS Head");
            viewString.Append("er_Site, \r\n            T.HoleTypeID AS Header_HoleTypeID, \r\n            T.DataSt");
            viewString.Append("atusID AS Header_DataStatusID, \r\n            T.PrimaryHolePurposeID AS Header_Pr");
            viewString.Append("imaryHolePurposeID, \r\n            T.SurveyAccuracyID AS Header_SurveyAccuracyID,");
            viewString.Append(" \r\n            T.GeodeticDatumID AS Header_GeodeticDatumID, \r\n            T.UtmZ");
            viewString.Append("oneNumber AS Header_UtmZoneNumber, \r\n            T.UtmZoneHemisphere AS Header_U");
            viewString.Append("tmZoneHemisphere, \r\n            T.HeightDatumID AS Header_HeightDatumID, \r\n     ");
            viewString.Append("       T.EastingUtm AS Header_EastingUtm, \r\n            T.NorthingUtm AS Header_");
            viewString.Append("NorthingUtm, \r\n            T.Elevation AS Header_Elevation, \r\n            T.Incl");
            viewString.Append("ination AS Header_Inclination, \r\n            T.Azimuth AS Header_Azimuth, \r\n    ");
            viewString.Append("        T.LocationID AS Header_LocationID, \r\n            T.StartDate AS Header_S");
            viewString.Append("tartDate, \r\n            T.CompleteDate AS Header_CompleteDate, \r\n            T.T");
            viewString.Append("otalDepth AS Header_TotalDepth, \r\n            T.HoleRedrilled AS Header_HoleRedr");
            viewString.Append("illed, \r\n            T.GeologyCompanyID AS Header_GeologyCompanyID, \r\n          ");
            viewString.Append("  T.HasHadGeotechLogs AS Header_HasHadGeotechLogs, \r\n            T.HasHadCorePho");
            viewString.Append("tos AS Header_HasHadCorePhotos, \r\n            T.DefaultGeophysicalLoggingCompany");
            viewString.Append("ID AS Header_DefaultGeophysicalLoggingCompanyID, \r\n            T.DefaultGeophysi");
            viewString.Append("calLoggerID AS Header_DefaultGeophysicalLoggerID, \r\n            T.StandingWaterL");
            viewString.Append("evel AS Header_StandingWaterLevel, \r\n            T.StandingWaterLevelDate AS Hea");
            viewString.Append("der_StandingWaterLevelDate, \r\n            T.DateRehabilitated AS Header_DateReha");
            viewString.Append("bilitated, \r\n            T.HoleStatusID AS Header_HoleStatusID, \r\n            T.");
            viewString.Append("Comment AS Header_Comment, \r\n            T.Version AS Header_Version, \r\n        ");
            viewString.Append("    T.VersionAntecedentID AS Header_VersionAntecedentID, \r\n            T.Version");
            viewString.Append("Certainty AS Header_VersionCertainty, \r\n            T.VersionWorkflowInstanceID ");
            viewString.Append("AS Header_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS Header_");
            viewString.Append("VersionUpdatedBy, \r\n            T.VersionDeletedBy AS Header_VersionDeletedBy, \r");
            viewString.Append("\n            T.VersionOwnerContactID AS Header_VersionOwnerContactID, \r\n        ");
            viewString.Append("    T.VersionOwnerCompanyID AS Header_VersionOwnerCompanyID, \r\n            T.Ver");
            viewString.Append("sionUpdated AS Header_VersionUpdated, \r\n            True AS _from0\r\n        FROM");
            viewString.Append(" NKDModuleBusinessObjectsStoreContainer.X_Header AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.Headers", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.HeaderGeophysicalLogs
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView534()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2078);
            viewString.Append("\r\n    SELECT VALUE -- Constructing HeaderGeophysicalLogs\r\n        [NKD.Module.Bu");
            viewString.Append("sinessObjects.HeaderGeophysicalLog](T1.HeaderGeophysicalLog_HeaderGeophysicalLog");
            viewString.Append("ID, T1.HeaderGeophysicalLog_HeaderID, T1.HeaderGeophysicalLog_GeophysicalLogType");
            viewString.Append("ID, T1.HeaderGeophysicalLog_Sequence, T1.HeaderGeophysicalLog_GeophysicalLogging");
            viewString.Append("CompanyID, T1.HeaderGeophysicalLog_GeophysicalLoggerID, T1.HeaderGeophysicalLog_");
            viewString.Append("Version, T1.HeaderGeophysicalLog_VersionAntecedentID, T1.HeaderGeophysicalLog_Ve");
            viewString.Append("rsionCertainty, T1.HeaderGeophysicalLog_VersionWorkflowInstanceID, T1.HeaderGeop");
            viewString.Append("hysicalLog_VersionUpdatedBy, T1.HeaderGeophysicalLog_VersionDeletedBy, T1.Header");
            viewString.Append("GeophysicalLog_VersionOwnerContactID, T1.HeaderGeophysicalLog_VersionOwnerCompan");
            viewString.Append("yID, T1.HeaderGeophysicalLog_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n     ");
            viewString.Append("       T.HeaderGeophysicalLogID AS HeaderGeophysicalLog_HeaderGeophysicalLogID, ");
            viewString.Append("\r\n            T.HeaderID AS HeaderGeophysicalLog_HeaderID, \r\n            T.Geoph");
            viewString.Append("ysicalLogTypeID AS HeaderGeophysicalLog_GeophysicalLogTypeID, \r\n            T.Se");
            viewString.Append("quence AS HeaderGeophysicalLog_Sequence, \r\n            T.GeophysicalLoggingCompa");
            viewString.Append("nyID AS HeaderGeophysicalLog_GeophysicalLoggingCompanyID, \r\n            T.Geophy");
            viewString.Append("sicalLoggerID AS HeaderGeophysicalLog_GeophysicalLoggerID, \r\n            T.Versi");
            viewString.Append("on AS HeaderGeophysicalLog_Version, \r\n            T.VersionAntecedentID AS Heade");
            viewString.Append("rGeophysicalLog_VersionAntecedentID, \r\n            T.VersionCertainty AS HeaderG");
            viewString.Append("eophysicalLog_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS Hea");
            viewString.Append("derGeophysicalLog_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS");
            viewString.Append(" HeaderGeophysicalLog_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS Head");
            viewString.Append("erGeophysicalLog_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS Head");
            viewString.Append("erGeophysicalLog_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS");
            viewString.Append(" HeaderGeophysicalLog_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS H");
            viewString.Append("eaderGeophysicalLog_VersionUpdated, \r\n            True AS _from0\r\n        FROM N");
            viewString.Append("KDModuleBusinessObjectsStoreContainer.X_HeaderGeophysicalLog AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.HeaderGeophysicalLogs", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.HeaderRelations
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView535()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.HeaderRelations", "\r\n    SELECT VALUE -- Constructing HeaderRelations\r\n        [NKD.Module.BusinessO" +
                    "bjects.HeaderRelation](T1.HeaderRelation_HeaderRelationID, T1.HeaderRelation_Ori" +
                    "ginalHeaderID, T1.HeaderRelation_RelatedHeaderID, T1.HeaderRelation_RelationType" +
                    "ID, T1.HeaderRelation_Related, T1.HeaderRelation_Version, T1.HeaderRelation_Vers" +
                    "ionAntecedentID, T1.HeaderRelation_VersionCertainty, T1.HeaderRelation_VersionWo" +
                    "rkflowInstanceID, T1.HeaderRelation_VersionUpdatedBy, T1.HeaderRelation_VersionD" +
                    "eletedBy, T1.HeaderRelation_VersionOwnerContactID, T1.HeaderRelation_VersionOwne" +
                    "rCompanyID, T1.HeaderRelation_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n    " +
                    "        T.HeaderRelationID AS HeaderRelation_HeaderRelationID, \r\n            T.O" +
                    "riginalHeaderID AS HeaderRelation_OriginalHeaderID, \r\n            T.RelatedHeade" +
                    "rID AS HeaderRelation_RelatedHeaderID, \r\n            T.RelationTypeID AS HeaderR" +
                    "elation_RelationTypeID, \r\n            T.Related AS HeaderRelation_Related, \r\n   " +
                    "         T.Version AS HeaderRelation_Version, \r\n            T.VersionAntecedentI" +
                    "D AS HeaderRelation_VersionAntecedentID, \r\n            T.VersionCertainty AS Hea" +
                    "derRelation_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS Heade" +
                    "rRelation_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS HeaderR" +
                    "elation_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS HeaderRelation_Ver" +
                    "sionDeletedBy, \r\n            T.VersionOwnerContactID AS HeaderRelation_VersionOw" +
                    "nerContactID, \r\n            T.VersionOwnerCompanyID AS HeaderRelation_VersionOwn" +
                    "erCompanyID, \r\n            T.VersionUpdated AS HeaderRelation_VersionUpdated, \r\n" +
                    "            True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer." +
                    "X_HeaderRelation AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.Interpretations
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView536()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3620);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Interpretations\r\n        [NKD.Module.Business");
            viewString.Append("Objects.Interpretation](T1.Interpretation_InterpretationID, T1.Interpretation_Fr");
            viewString.Append("omDepth, T1.Interpretation_ToDepth, T1.Interpretation_TopX, T1.Interpretation_To");
            viewString.Append("pY, T1.Interpretation_TopZ, T1.Interpretation_CentroidX, T1.Interpretation_Centr");
            viewString.Append("oidY, T1.Interpretation_CentroidZ, T1.Interpretation_BottomX, T1.Interpretation_");
            viewString.Append("BottomY, T1.Interpretation_BottomZ, T1.Interpretation_DesurveyID, T1.Interpretat");
            viewString.Append("ion_HeaderID, T1.Interpretation_AssayGroupTestSampleID, T1.Interpretation_Casing");
            viewString.Append("ID, T1.Interpretation_CementingID, T1.Interpretation_DefectID, T1.Interpretation");
            viewString.Append("_DrillingID, T1.Interpretation_GeologyID, T1.Interpretation_GeophysicsDataID, T1");
            viewString.Append(".Interpretation_LithologyID, T1.Interpretation_SeamID, T1.Interpretation_PlyID, ");
            viewString.Append("T1.Interpretation_MineralogyID, T1.Interpretation_PointLoadID, T1.Interpretation");
            viewString.Append("_RecoveryID, T1.Interpretation_BlockModelBlockID, T1.Interpretation_Version, T1.");
            viewString.Append("Interpretation_VersionAntecedentID, T1.Interpretation_VersionCertainty, T1.Inter");
            viewString.Append("pretation_VersionWorkflowInstanceID, T1.Interpretation_VersionUpdatedBy, T1.Inte");
            viewString.Append("rpretation_VersionDeletedBy, T1.Interpretation_VersionOwnerContactID, T1.Interpr");
            viewString.Append("etation_VersionOwnerCompanyID, T1.Interpretation_VersionUpdated)\r\n    FROM (\r\n  ");
            viewString.Append("      SELECT \r\n            T.InterpretationID AS Interpretation_InterpretationID");
            viewString.Append(", \r\n            T.FromDepth AS Interpretation_FromDepth, \r\n            T.ToDepth");
            viewString.Append(" AS Interpretation_ToDepth, \r\n            T.TopX AS Interpretation_TopX, \r\n     ");
            viewString.Append("       T.TopY AS Interpretation_TopY, \r\n            T.TopZ AS Interpretation_Top");
            viewString.Append("Z, \r\n            T.CentroidX AS Interpretation_CentroidX, \r\n            T.Centro");
            viewString.Append("idY AS Interpretation_CentroidY, \r\n            T.CentroidZ AS Interpretation_Cen");
            viewString.Append("troidZ, \r\n            T.BottomX AS Interpretation_BottomX, \r\n            T.Botto");
            viewString.Append("mY AS Interpretation_BottomY, \r\n            T.BottomZ AS Interpretation_BottomZ,");
            viewString.Append(" \r\n            T.DesurveyID AS Interpretation_DesurveyID, \r\n            T.Header");
            viewString.Append("ID AS Interpretation_HeaderID, \r\n            T.AssayGroupTestSampleID AS Interpr");
            viewString.Append("etation_AssayGroupTestSampleID, \r\n            T.CasingID AS Interpretation_Casin");
            viewString.Append("gID, \r\n            T.CementingID AS Interpretation_CementingID, \r\n            T.");
            viewString.Append("DefectID AS Interpretation_DefectID, \r\n            T.DrillingID AS Interpretatio");
            viewString.Append("n_DrillingID, \r\n            T.GeologyID AS Interpretation_GeologyID, \r\n         ");
            viewString.Append("   T.GeophysicsDataID AS Interpretation_GeophysicsDataID, \r\n            T.Lithol");
            viewString.Append("ogyID AS Interpretation_LithologyID, \r\n            T.SeamID AS Interpretation_Se");
            viewString.Append("amID, \r\n            T.PlyID AS Interpretation_PlyID, \r\n            T.MineralogyI");
            viewString.Append("D AS Interpretation_MineralogyID, \r\n            T.PointLoadID AS Interpretation_");
            viewString.Append("PointLoadID, \r\n            T.RecoveryID AS Interpretation_RecoveryID, \r\n        ");
            viewString.Append("    T.BlockModelBlockID AS Interpretation_BlockModelBlockID, \r\n            T.Ver");
            viewString.Append("sion AS Interpretation_Version, \r\n            T.VersionAntecedentID AS Interpret");
            viewString.Append("ation_VersionAntecedentID, \r\n            T.VersionCertainty AS Interpretation_Ve");
            viewString.Append("rsionCertainty, \r\n            T.VersionWorkflowInstanceID AS Interpretation_Vers");
            viewString.Append("ionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS Interpretation_Versio");
            viewString.Append("nUpdatedBy, \r\n            T.VersionDeletedBy AS Interpretation_VersionDeletedBy,");
            viewString.Append(" \r\n            T.VersionOwnerContactID AS Interpretation_VersionOwnerContactID, ");
            viewString.Append("\r\n            T.VersionOwnerCompanyID AS Interpretation_VersionOwnerCompanyID, \r");
            viewString.Append("\n            T.VersionUpdated AS Interpretation_VersionUpdated, \r\n            Tr");
            viewString.Append("ue AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_Interpretati");
            viewString.Append("on AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.Interpretations", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.InterpretationDatas
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView537()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.InterpretationDatas", "\r\n    SELECT VALUE -- Constructing InterpretationDatas\r\n        [NKD.Module.Busin" +
                    "essObjects.InterpretationData](T1.InterpretationData_InterpretationDataID, T1.In" +
                    "terpretationData_InterpretationID, T1.InterpretationData_ParameterID, T1.Interpr" +
                    "etationData_InterpretationDataText, T1.InterpretationData_InterpretationDataValu" +
                    "e, T1.InterpretationData_Version, T1.InterpretationData_VersionAntecedentID, T1." +
                    "InterpretationData_VersionCertainty, T1.InterpretationData_VersionWorkflowInstan" +
                    "ceID, T1.InterpretationData_VersionUpdatedBy, T1.InterpretationData_VersionDelet" +
                    "edBy, T1.InterpretationData_VersionOwnerContactID, T1.InterpretationData_Version" +
                    "OwnerCompanyID, T1.InterpretationData_VersionUpdated)\r\n    FROM (\r\n        SELEC" +
                    "T \r\n            T.InterpretationDataID AS InterpretationData_InterpretationDataI" +
                    "D, \r\n            T.InterpretationID AS InterpretationData_InterpretationID, \r\n  " +
                    "          T.ParameterID AS InterpretationData_ParameterID, \r\n            T.Inter" +
                    "pretationDataText AS InterpretationData_InterpretationDataText, \r\n            T." +
                    "InterpretationDataValue AS InterpretationData_InterpretationDataValue, \r\n       " +
                    "     T.Version AS InterpretationData_Version, \r\n            T.VersionAntecedentI" +
                    "D AS InterpretationData_VersionAntecedentID, \r\n            T.VersionCertainty AS" +
                    " InterpretationData_VersionCertainty, \r\n            T.VersionWorkflowInstanceID " +
                    "AS InterpretationData_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedB" +
                    "y AS InterpretationData_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS In" +
                    "terpretationData_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS Inte" +
                    "rpretationData_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS I" +
                    "nterpretationData_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS Inter" +
                    "pretationData_VersionUpdated, \r\n            True AS _from0\r\n        FROM NKDModu" +
                    "leBusinessObjectsStoreContainer.X_InterpretationData AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.Leases
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView538()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.Leases", "\r\n    SELECT VALUE -- Constructing Leases\r\n        [NKD.Module.BusinessObjects.Le" +
                    "ase](T1.Lease_LeaseID, T1.Lease_TenementID, T1.Lease_LeaseNumber, T1.Lease_Owner" +
                    "CompanyID, T1.Lease_ApprovedByContactID, T1.Lease_ValidFrom, T1.Lease_Expiry, T1" +
                    ".Lease_Comment, T1.Lease_Version, T1.Lease_VersionAntecedentID, T1.Lease_Version" +
                    "Certainty, T1.Lease_VersionWorkflowInstanceID, T1.Lease_VersionUpdatedBy, T1.Lea" +
                    "se_VersionDeletedBy, T1.Lease_VersionOwnerContactID, T1.Lease_VersionOwnerCompan" +
                    "yID, T1.Lease_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.LeaseI" +
                    "D AS Lease_LeaseID, \r\n            T.TenementID AS Lease_TenementID, \r\n          " +
                    "  T.LeaseNumber AS Lease_LeaseNumber, \r\n            T.OwnerCompanyID AS Lease_Ow" +
                    "nerCompanyID, \r\n            T.ApprovedByContactID AS Lease_ApprovedByContactID, " +
                    "\r\n            T.ValidFrom AS Lease_ValidFrom, \r\n            T.Expiry AS Lease_Ex" +
                    "piry, \r\n            T.Comment AS Lease_Comment, \r\n            T.Version AS Lease" +
                    "_Version, \r\n            T.VersionAntecedentID AS Lease_VersionAntecedentID, \r\n  " +
                    "          T.VersionCertainty AS Lease_VersionCertainty, \r\n            T.VersionW" +
                    "orkflowInstanceID AS Lease_VersionWorkflowInstanceID, \r\n            T.VersionUpd" +
                    "atedBy AS Lease_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS Lease_Vers" +
                    "ionDeletedBy, \r\n            T.VersionOwnerContactID AS Lease_VersionOwnerContact" +
                    "ID, \r\n            T.VersionOwnerCompanyID AS Lease_VersionOwnerCompanyID, \r\n    " +
                    "        T.VersionUpdated AS Lease_VersionUpdated, \r\n            True AS _from0\r\n" +
                    "        FROM NKDModuleBusinessObjectsStoreContainer.X_Lease AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.LeaseApplications
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView539()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2392);
            viewString.Append("\r\n    SELECT VALUE -- Constructing LeaseApplications\r\n        [NKD.Module.Busine");
            viewString.Append("ssObjects.LeaseApplication](T1.LeaseApplication_LeaseApplicationID, T1.LeaseAppl");
            viewString.Append("ication_TenementID, T1.LeaseApplication_LeaseApplicationTypeID, T1.LeaseApplicat");
            viewString.Append("ion_LeaseApplicationNumber, T1.LeaseApplication_OwnerCompanyID, T1.LeaseApplicat");
            viewString.Append("ion_OfficeOfApproval, T1.LeaseApplication_Approved, T1.LeaseApplication_Approved");
            viewString.Append("ByContactID, T1.LeaseApplication_ValidFrom, T1.LeaseApplication_Expiry, T1.Lease");
            viewString.Append("Application_Comment, T1.LeaseApplication_Version, T1.LeaseApplication_VersionAnt");
            viewString.Append("ecedentID, T1.LeaseApplication_VersionCertainty, T1.LeaseApplication_VersionWork");
            viewString.Append("flowInstanceID, T1.LeaseApplication_VersionUpdatedBy, T1.LeaseApplication_Versio");
            viewString.Append("nDeletedBy, T1.LeaseApplication_VersionOwnerContactID, T1.LeaseApplication_Versi");
            viewString.Append("onOwnerCompanyID, T1.LeaseApplication_VersionUpdated)\r\n    FROM (\r\n        SELEC");
            viewString.Append("T \r\n            T.LeaseApplicationID AS LeaseApplication_LeaseApplicationID, \r\n ");
            viewString.Append("           T.TenementID AS LeaseApplication_TenementID, \r\n            T.LeaseApp");
            viewString.Append("licationTypeID AS LeaseApplication_LeaseApplicationTypeID, \r\n            T.Lease");
            viewString.Append("ApplicationNumber AS LeaseApplication_LeaseApplicationNumber, \r\n            T.Ow");
            viewString.Append("nerCompanyID AS LeaseApplication_OwnerCompanyID, \r\n            T.OfficeOfApprova");
            viewString.Append("l AS LeaseApplication_OfficeOfApproval, \r\n            T.Approved AS LeaseApplica");
            viewString.Append("tion_Approved, \r\n            T.ApprovedByContactID AS LeaseApplication_ApprovedB");
            viewString.Append("yContactID, \r\n            T.ValidFrom AS LeaseApplication_ValidFrom, \r\n         ");
            viewString.Append("   T.Expiry AS LeaseApplication_Expiry, \r\n            T.Comment AS LeaseApplicat");
            viewString.Append("ion_Comment, \r\n            T.Version AS LeaseApplication_Version, \r\n            ");
            viewString.Append("T.VersionAntecedentID AS LeaseApplication_VersionAntecedentID, \r\n            T.V");
            viewString.Append("ersionCertainty AS LeaseApplication_VersionCertainty, \r\n            T.VersionWor");
            viewString.Append("kflowInstanceID AS LeaseApplication_VersionWorkflowInstanceID, \r\n            T.V");
            viewString.Append("ersionUpdatedBy AS LeaseApplication_VersionUpdatedBy, \r\n            T.VersionDel");
            viewString.Append("etedBy AS LeaseApplication_VersionDeletedBy, \r\n            T.VersionOwnerContact");
            viewString.Append("ID AS LeaseApplication_VersionOwnerContactID, \r\n            T.VersionOwnerCompan");
            viewString.Append("yID AS LeaseApplication_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS");
            viewString.Append(" LeaseApplication_VersionUpdated, \r\n            True AS _from0\r\n        FROM NKD");
            viewString.Append("ModuleBusinessObjectsStoreContainer.X_LeaseApplication AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.LeaseApplications", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.Licenses
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView540()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(5673);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Licenses\r\n        [NKD.Module.BusinessObjects");
            viewString.Append(".License](T1.License_LicenseID, T1.License_CompanyID, T1.License_ContactID, T1.L");
            viewString.Append("icense_LicenseeGUID, T1.License_LicenseeName, T1.License_LicenseeUsername, T1.Li");
            viewString.Append("cense_LicenseeUniqueMachineCode1, T1.License_LicenseeUniqueMachineCode2, T1.Lice");
            viewString.Append("nse_LicenseeGroupID, T1.License_LicensorIP, T1.License_LicensorName, T1.License_");
            viewString.Append("LicenseTypeID, T1.License_LicenseType, T1.License_LicenseURL, T1.License_RootSer");
            viewString.Append("verName, T1.License_RootServerID, T1.License_ServerName, T1.License_ServerID, T1");
            viewString.Append(".License_ApplicationID, T1.License_ServiceAuthenticationMethod, T1.License_Servi");
            viewString.Append("ceAuthorisationMethod, T1.License_ValidFrom, T1.License_Expiry, T1.License_Suppo");
            viewString.Append("rtExpiry, T1.License_ValidForDuration, T1.License_ValidForUnitID, T1.License_Val");
            viewString.Append("idForUnitTarget, T1.License_VersionMajor, T1.License_VersionMinor, T1.License_Ve");
            viewString.Append("rsionBuild, T1.License_SupportedToMajor, T1.License_SupportedToMinor, T1.License");
            viewString.Append("_SupportedToBuild, T1.License_Nuked, T1.License_NukedReason, T1.License_TimeServ");
            viewString.Append("erID, T1.License_TimeServerName, T1.License_TimeServerResolutionMask, T1.License");
            viewString.Append("_TimeServerIP, T1.License_PreAuthorizationCode, T1.License_PreAuthorizationExecu");
            viewString.Append("ted, T1.License_Signatory1, T1.License_Signatory2, T1.License_Signatory3, T1.Lic");
            viewString.Append("ense_Signature1, T1.License_Signature2, T1.License_Signature3, T1.License_Receiv");
            viewString.Append("ed, T1.License_CheckedIn, T1.License_LicenceeCertificate, T1.License_LicensorCer");
            viewString.Append("tificate, T1.License_ChecksumType, T1.License_Checksum, T1.License_EncryptedKey,");
            viewString.Append(" T1.License_LicenseKeyCode, T1.License_Version, T1.License_VersionAntecedentID, ");
            viewString.Append("T1.License_VersionCertainty, T1.License_VersionWorkflowInstanceID, T1.License_Ve");
            viewString.Append("rsionUpdatedBy, T1.License_VersionDeletedBy, T1.License_VersionOwnerContactID, T");
            viewString.Append("1.License_VersionOwnerCompanyID, T1.License_VersionUpdated)\r\n    FROM (\r\n       ");
            viewString.Append(" SELECT \r\n            T.LicenseID AS License_LicenseID, \r\n            T.CompanyI");
            viewString.Append("D AS License_CompanyID, \r\n            T.ContactID AS License_ContactID, \r\n      ");
            viewString.Append("      T.LicenseeGUID AS License_LicenseeGUID, \r\n            T.LicenseeName AS Li");
            viewString.Append("cense_LicenseeName, \r\n            T.LicenseeUsername AS License_LicenseeUsername");
            viewString.Append(", \r\n            T.LicenseeUniqueMachineCode1 AS License_LicenseeUniqueMachineCod");
            viewString.Append("e1, \r\n            T.LicenseeUniqueMachineCode2 AS License_LicenseeUniqueMachineC");
            viewString.Append("ode2, \r\n            T.LicenseeGroupID AS License_LicenseeGroupID, \r\n            ");
            viewString.Append("T.LicensorIP AS License_LicensorIP, \r\n            T.LicensorName AS License_Lice");
            viewString.Append("nsorName, \r\n            T.LicenseTypeID AS License_LicenseTypeID, \r\n            ");
            viewString.Append("T.LicenseType AS License_LicenseType, \r\n            T.LicenseURL AS License_Lice");
            viewString.Append("nseURL, \r\n            T.RootServerName AS License_RootServerName, \r\n            ");
            viewString.Append("T.RootServerID AS License_RootServerID, \r\n            T.ServerName AS License_Se");
            viewString.Append("rverName, \r\n            T.ServerID AS License_ServerID, \r\n            T.Applicat");
            viewString.Append("ionID AS License_ApplicationID, \r\n            T.ServiceAuthenticationMethod AS L");
            viewString.Append("icense_ServiceAuthenticationMethod, \r\n            T.ServiceAuthorisationMethod A");
            viewString.Append("S License_ServiceAuthorisationMethod, \r\n            T.ValidFrom AS License_Valid");
            viewString.Append("From, \r\n            T.Expiry AS License_Expiry, \r\n            T.SupportExpiry AS");
            viewString.Append(" License_SupportExpiry, \r\n            T.ValidForDuration AS License_ValidForDura");
            viewString.Append("tion, \r\n            T.ValidForUnitID AS License_ValidForUnitID, \r\n            T.");
            viewString.Append("ValidForUnitTarget AS License_ValidForUnitTarget, \r\n            T.VersionMajor A");
            viewString.Append("S License_VersionMajor, \r\n            T.VersionMinor AS License_VersionMinor, \r\n");
            viewString.Append("            T.VersionBuild AS License_VersionBuild, \r\n            T.SupportedToM");
            viewString.Append("ajor AS License_SupportedToMajor, \r\n            T.SupportedToMinor AS License_Su");
            viewString.Append("pportedToMinor, \r\n            T.SupportedToBuild AS License_SupportedToBuild, \r\n");
            viewString.Append("            T.Nuked AS License_Nuked, \r\n            T.NukedReason AS License_Nuk");
            viewString.Append("edReason, \r\n            T.TimeServerID AS License_TimeServerID, \r\n            T.");
            viewString.Append("TimeServerName AS License_TimeServerName, \r\n            T.TimeServerResolutionMa");
            viewString.Append("sk AS License_TimeServerResolutionMask, \r\n            T.TimeServerIP AS License_");
            viewString.Append("TimeServerIP, \r\n            T.PreAuthorizationCode AS License_PreAuthorizationCo");
            viewString.Append("de, \r\n            T.PreAuthorizationExecuted AS License_PreAuthorizationExecuted");
            viewString.Append(", \r\n            T.Signatory1 AS License_Signatory1, \r\n            T.Signatory2 A");
            viewString.Append("S License_Signatory2, \r\n            T.Signatory3 AS License_Signatory3, \r\n      ");
            viewString.Append("      T.Signature1 AS License_Signature1, \r\n            T.Signature2 AS License_");
            viewString.Append("Signature2, \r\n            T.Signature3 AS License_Signature3, \r\n            T.Re");
            viewString.Append("ceived AS License_Received, \r\n            T.CheckedIn AS License_CheckedIn, \r\n  ");
            viewString.Append("          T.LicenceeCertificate AS License_LicenceeCertificate, \r\n            T.");
            viewString.Append("LicensorCertificate AS License_LicensorCertificate, \r\n            T.ChecksumType");
            viewString.Append(" AS License_ChecksumType, \r\n            T.Checksum AS License_Checksum, \r\n      ");
            viewString.Append("      T.EncryptedKey AS License_EncryptedKey, \r\n            T.LicenseKeyCode AS ");
            viewString.Append("License_LicenseKeyCode, \r\n            T.Version AS License_Version, \r\n          ");
            viewString.Append("  T.VersionAntecedentID AS License_VersionAntecedentID, \r\n            T.VersionC");
            viewString.Append("ertainty AS License_VersionCertainty, \r\n            T.VersionWorkflowInstanceID ");
            viewString.Append("AS License_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS Licens");
            viewString.Append("e_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS License_VersionDeletedBy");
            viewString.Append(", \r\n            T.VersionOwnerContactID AS License_VersionOwnerContactID, \r\n    ");
            viewString.Append("        T.VersionOwnerCompanyID AS License_VersionOwnerCompanyID, \r\n            ");
            viewString.Append("T.VersionUpdated AS License_VersionUpdated, \r\n            True AS _from0\r\n      ");
            viewString.Append("  FROM NKDModuleBusinessObjectsStoreContainer.X_License AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.Licenses", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.LicenseAssets
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView541()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.LicenseAssets", "\r\n    SELECT VALUE -- Constructing LicenseAssets\r\n        [NKD.Module.BusinessObj" +
                    "ects.LicenseAsset](T1.LicenseAsset_LicenseAssetID, T1.LicenseAsset_LicenseID, T1" +
                    ".LicenseAsset_AssetID, T1.LicenseAsset_ModelID, T1.LicenseAsset_Restrictions, T1" +
                    ".LicenseAsset_Version, T1.LicenseAsset_VersionAntecedentID, T1.LicenseAsset_Vers" +
                    "ionCertainty, T1.LicenseAsset_VersionWorkflowInstanceID, T1.LicenseAsset_Version" +
                    "UpdatedBy, T1.LicenseAsset_VersionDeletedBy, T1.LicenseAsset_VersionOwnerContact" +
                    "ID, T1.LicenseAsset_VersionOwnerCompanyID, T1.LicenseAsset_VersionUpdated)\r\n    " +
                    "FROM (\r\n        SELECT \r\n            T.LicenseAssetID AS LicenseAsset_LicenseAss" +
                    "etID, \r\n            T.LicenseID AS LicenseAsset_LicenseID, \r\n            T.Asset" +
                    "ID AS LicenseAsset_AssetID, \r\n            T.ModelID AS LicenseAsset_ModelID, \r\n " +
                    "           T.Restrictions AS LicenseAsset_Restrictions, \r\n            T.Version " +
                    "AS LicenseAsset_Version, \r\n            T.VersionAntecedentID AS LicenseAsset_Ver" +
                    "sionAntecedentID, \r\n            T.VersionCertainty AS LicenseAsset_VersionCertai" +
                    "nty, \r\n            T.VersionWorkflowInstanceID AS LicenseAsset_VersionWorkflowIn" +
                    "stanceID, \r\n            T.VersionUpdatedBy AS LicenseAsset_VersionUpdatedBy, \r\n " +
                    "           T.VersionDeletedBy AS LicenseAsset_VersionDeletedBy, \r\n            T." +
                    "VersionOwnerContactID AS LicenseAsset_VersionOwnerContactID, \r\n            T.Ver" +
                    "sionOwnerCompanyID AS LicenseAsset_VersionOwnerCompanyID, \r\n            T.Versio" +
                    "nUpdated AS LicenseAsset_VersionUpdated, \r\n            True AS _from0\r\n        F" +
                    "ROM NKDModuleBusinessObjectsStoreContainer.X_LicenseAsset AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.Lithologies
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView542()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(4658);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Lithologies\r\n        [NKD.Module.BusinessObje");
            viewString.Append("cts.Lithology](T1.Lithology_LithologyID, T1.Lithology_HeaderID, T1.Lithology_Fro");
            viewString.Append("mDepth, T1.Lithology_ToDepth, T1.Lithology_RecoveredThickness, T1.Lithology_Doma");
            viewString.Append("inID, T1.Lithology_SeamID, T1.Lithology_PlyID, T1.Lithology_StratigraphyID, T1.L");
            viewString.Append("ithology_HorizonID, T1.Lithology_SampleTypeID, T1.Lithology_SampleNumber, T1.Lit");
            viewString.Append("hology_SampleMassKg, T1.Lithology_IntervalStatusID, T1.Lithology_LithologyPercen");
            viewString.Append("tage, T1.Lithology_LithologyTypeID, T1.Lithology_LithologyQualifierID, T1.Lithol");
            viewString.Append("ogy_ShadeID, T1.Lithology_HueID, T1.Lithology_ColourID, T1.Lithology_LithologyIn");
            viewString.Append("terrelationID, T1.Lithology_WeatheringID, T1.Lithology_EstimatedStrengthID, T1.L");
            viewString.Append("ithology_BedSpacingID, T1.Lithology_DefectTypeID, T1.Lithology_DefectCompletenes");
            viewString.Append("sID, T1.Lithology_DefectSpacingID, T1.Lithology_DefectDip, T1.Lithology_CoreStat");
            viewString.Append("eID, T1.Lithology_MechanicalStateID, T1.Lithology_TextureID, T1.Lithology_BasalC");
            viewString.Append("ontactID, T1.Lithology_BeddingDip, T1.Lithology_MineralAndFossilAbundanceID, T1.");
            viewString.Append("Lithology_MineralAndFossilTypeID, T1.Lithology_MineralAndFossilAssociationID, T1");
            viewString.Append(".Lithology_GasDetectedID, T1.Lithology_Description, T1.Lithology_Version, T1.Lit");
            viewString.Append("hology_VersionAntecedentID, T1.Lithology_VersionCertainty, T1.Lithology_VersionW");
            viewString.Append("orkflowInstanceID, T1.Lithology_VersionUpdatedBy, T1.Lithology_VersionDeletedBy,");
            viewString.Append(" T1.Lithology_VersionOwnerContactID, T1.Lithology_VersionOwnerCompanyID, T1.Lith");
            viewString.Append("ology_VersionUpdated, T1.Lithology_PrimaryAdjectiveID, T1.Lithology_PrimarySedim");
            viewString.Append("entaryFeatureID)\r\n    FROM (\r\n        SELECT \r\n            T.LithologyID AS Lith");
            viewString.Append("ology_LithologyID, \r\n            T.HeaderID AS Lithology_HeaderID, \r\n           ");
            viewString.Append(" T.FromDepth AS Lithology_FromDepth, \r\n            T.ToDepth AS Lithology_ToDept");
            viewString.Append("h, \r\n            T.RecoveredThickness AS Lithology_RecoveredThickness, \r\n       ");
            viewString.Append("     T.DomainID AS Lithology_DomainID, \r\n            T.SeamID AS Lithology_SeamI");
            viewString.Append("D, \r\n            T.PlyID AS Lithology_PlyID, \r\n            T.StratigraphyID AS L");
            viewString.Append("ithology_StratigraphyID, \r\n            T.HorizonID AS Lithology_HorizonID, \r\n   ");
            viewString.Append("         T.SampleTypeID AS Lithology_SampleTypeID, \r\n            T.SampleNumber ");
            viewString.Append("AS Lithology_SampleNumber, \r\n            T.SampleMassKg AS Lithology_SampleMassK");
            viewString.Append("g, \r\n            T.IntervalStatusID AS Lithology_IntervalStatusID, \r\n           ");
            viewString.Append(" T.LithologyPercentage AS Lithology_LithologyPercentage, \r\n            T.Litholo");
            viewString.Append("gyTypeID AS Lithology_LithologyTypeID, \r\n            T.LithologyQualifierID AS L");
            viewString.Append("ithology_LithologyQualifierID, \r\n            T.ShadeID AS Lithology_ShadeID, \r\n ");
            viewString.Append("           T.HueID AS Lithology_HueID, \r\n            T.ColourID AS Lithology_Col");
            viewString.Append("ourID, \r\n            T.LithologyInterrelationID AS Lithology_LithologyInterrelat");
            viewString.Append("ionID, \r\n            T.WeatheringID AS Lithology_WeatheringID, \r\n            T.E");
            viewString.Append("stimatedStrengthID AS Lithology_EstimatedStrengthID, \r\n            T.BedSpacingI");
            viewString.Append("D AS Lithology_BedSpacingID, \r\n            T.DefectTypeID AS Lithology_DefectTyp");
            viewString.Append("eID, \r\n            T.DefectCompletenessID AS Lithology_DefectCompletenessID, \r\n ");
            viewString.Append("           T.DefectSpacingID AS Lithology_DefectSpacingID, \r\n            T.Defec");
            viewString.Append("tDip AS Lithology_DefectDip, \r\n            T.CoreStateID AS Lithology_CoreStateI");
            viewString.Append("D, \r\n            T.MechanicalStateID AS Lithology_MechanicalStateID, \r\n         ");
            viewString.Append("   T.TextureID AS Lithology_TextureID, \r\n            T.BasalContactID AS Litholo");
            viewString.Append("gy_BasalContactID, \r\n            T.BeddingDip AS Lithology_BeddingDip, \r\n       ");
            viewString.Append("     T.MineralAndFossilAbundanceID AS Lithology_MineralAndFossilAbundanceID, \r\n ");
            viewString.Append("           T.MineralAndFossilTypeID AS Lithology_MineralAndFossilTypeID, \r\n     ");
            viewString.Append("       T.MineralAndFossilAssociationID AS Lithology_MineralAndFossilAssociationI");
            viewString.Append("D, \r\n            T.GasDetectedID AS Lithology_GasDetectedID, \r\n            T.Des");
            viewString.Append("cription AS Lithology_Description, \r\n            T.Version AS Lithology_Version,");
            viewString.Append(" \r\n            T.VersionAntecedentID AS Lithology_VersionAntecedentID, \r\n       ");
            viewString.Append("     T.VersionCertainty AS Lithology_VersionCertainty, \r\n            T.VersionWo");
            viewString.Append("rkflowInstanceID AS Lithology_VersionWorkflowInstanceID, \r\n            T.Version");
            viewString.Append("UpdatedBy AS Lithology_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS Lit");
            viewString.Append("hology_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS Lithology_Vers");
            viewString.Append("ionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS Lithology_VersionOwn");
            viewString.Append("erCompanyID, \r\n            T.VersionUpdated AS Lithology_VersionUpdated, \r\n     ");
            viewString.Append("       T.PrimaryAdjectiveID AS Lithology_PrimaryAdjectiveID, \r\n            T.Pri");
            viewString.Append("marySedimentaryFeatureID AS Lithology_PrimarySedimentaryFeatureID, \r\n           ");
            viewString.Append(" True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_Lithology");
            viewString.Append(" AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.Lithologies", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.Locations
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView543()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2357);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Locations\r\n        [NKD.Module.BusinessObject");
            viewString.Append("s.Location](T1.Location_LocationID, T1.Location_LocationTypeID, T1.Location_Defa");
            viewString.Append("ultLocationName, T1.Location_LocationCode, T1.Location_LocationGeography, T1.Loc");
            viewString.Append("ation_LatitudeWGS84, T1.Location_LongitudeWGS84, T1.Location_Elevation, T1.Locat");
            viewString.Append("ion_CountryID, T1.Location_CountryStateID, T1.Location_DefaultCulture, T1.Locati");
            viewString.Append("on_OwnerCompanyID, T1.Location_ResponsibleContactID, T1.Location_Comment, T1.Loc");
            viewString.Append("ation_Version, T1.Location_VersionAntecedentID, T1.Location_VersionCertainty, T1");
            viewString.Append(".Location_VersionWorkflowInstanceID, T1.Location_VersionUpdatedBy, T1.Location_V");
            viewString.Append("ersionDeletedBy, T1.Location_VersionOwnerContactID, T1.Location_VersionOwnerComp");
            viewString.Append("anyID, T1.Location_VersionUpdated, T1.Location_Postcode)\r\n    FROM (\r\n        SE");
            viewString.Append("LECT \r\n            T.LocationID AS Location_LocationID, \r\n            T.Location");
            viewString.Append("TypeID AS Location_LocationTypeID, \r\n            T.DefaultLocationName AS Locati");
            viewString.Append("on_DefaultLocationName, \r\n            T.LocationCode AS Location_LocationCode, \r");
            viewString.Append("\n            T.LocationGeography AS Location_LocationGeography, \r\n            T.");
            viewString.Append("LatitudeWGS84 AS Location_LatitudeWGS84, \r\n            T.LongitudeWGS84 AS Locat");
            viewString.Append("ion_LongitudeWGS84, \r\n            T.Elevation AS Location_Elevation, \r\n         ");
            viewString.Append("   T.CountryID AS Location_CountryID, \r\n            T.CountryStateID AS Location");
            viewString.Append("_CountryStateID, \r\n            T.DefaultCulture AS Location_DefaultCulture, \r\n  ");
            viewString.Append("          T.OwnerCompanyID AS Location_OwnerCompanyID, \r\n            T.Responsib");
            viewString.Append("leContactID AS Location_ResponsibleContactID, \r\n            T.Comment AS Locatio");
            viewString.Append("n_Comment, \r\n            T.Version AS Location_Version, \r\n            T.VersionA");
            viewString.Append("ntecedentID AS Location_VersionAntecedentID, \r\n            T.VersionCertainty AS");
            viewString.Append(" Location_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS Locatio");
            viewString.Append("n_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS Location_Versio");
            viewString.Append("nUpdatedBy, \r\n            T.VersionDeletedBy AS Location_VersionDeletedBy, \r\n   ");
            viewString.Append("         T.VersionOwnerContactID AS Location_VersionOwnerContactID, \r\n          ");
            viewString.Append("  T.VersionOwnerCompanyID AS Location_VersionOwnerCompanyID, \r\n            T.Ver");
            viewString.Append("sionUpdated AS Location_VersionUpdated, \r\n            T.Postcode AS Location_Pos");
            viewString.Append("tcode, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreC");
            viewString.Append("ontainer.X_Location AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.Locations", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.LocationAlias
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView544()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.LocationAlias", "\r\n    SELECT VALUE -- Constructing LocationAlias\r\n        [NKD.Module.BusinessObj" +
                    "ects.LocationAlias](T1.LocationAlias_LocationAliasID, T1.LocationAlias_LocationI" +
                    "D, T1.LocationAlias_Alias, T1.LocationAlias_Culture, T1.LocationAlias_Priority, " +
                    "T1.LocationAlias_Version, T1.LocationAlias_VersionAntecedentID, T1.LocationAlias" +
                    "_VersionCertainty, T1.LocationAlias_VersionWorkflowInstanceID, T1.LocationAlias_" +
                    "VersionUpdatedBy, T1.LocationAlias_VersionDeletedBy, T1.LocationAlias_VersionOwn" +
                    "erContactID, T1.LocationAlias_VersionOwnerCompanyID, T1.LocationAlias_VersionUpd" +
                    "ated)\r\n    FROM (\r\n        SELECT \r\n            T.LocationAliasID AS LocationAli" +
                    "as_LocationAliasID, \r\n            T.LocationID AS LocationAlias_LocationID, \r\n  " +
                    "          T.Alias AS LocationAlias_Alias, \r\n            T.Culture AS LocationAli" +
                    "as_Culture, \r\n            T.Priority AS LocationAlias_Priority, \r\n            T." +
                    "Version AS LocationAlias_Version, \r\n            T.VersionAntecedentID AS Locatio" +
                    "nAlias_VersionAntecedentID, \r\n            T.VersionCertainty AS LocationAlias_Ve" +
                    "rsionCertainty, \r\n            T.VersionWorkflowInstanceID AS LocationAlias_Versi" +
                    "onWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS LocationAlias_VersionU" +
                    "pdatedBy, \r\n            T.VersionDeletedBy AS LocationAlias_VersionDeletedBy, \r\n" +
                    "            T.VersionOwnerContactID AS LocationAlias_VersionOwnerContactID, \r\n  " +
                    "          T.VersionOwnerCompanyID AS LocationAlias_VersionOwnerCompanyID, \r\n    " +
                    "        T.VersionUpdated AS LocationAlias_VersionUpdated, \r\n            True AS " +
                    "_from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_LocationAlias AS T" +
                    "\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.LocationDatas
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView545()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.LocationDatas", "\r\n    SELECT VALUE -- Constructing LocationDatas\r\n        [NKD.Module.BusinessObj" +
                    "ects.LocationData](T1.LocationData_LocationDataID, T1.LocationData_ParentLocatio" +
                    "nDataID, T1.LocationData_TableType, T1.LocationData_ReferenceID, T1.LocationData" +
                    "_LocationID, T1.LocationData_Version, T1.LocationData_VersionAntecedentID, T1.Lo" +
                    "cationData_VersionCertainty, T1.LocationData_VersionWorkflowInstanceID, T1.Locat" +
                    "ionData_VersionUpdatedBy, T1.LocationData_VersionDeletedBy, T1.LocationData_Vers" +
                    "ionOwnerContactID, T1.LocationData_VersionOwnerCompanyID, T1.LocationData_Versio" +
                    "nUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.LocationDataID AS Location" +
                    "Data_LocationDataID, \r\n            T.ParentLocationDataID AS LocationData_Parent" +
                    "LocationDataID, \r\n            T.TableType AS LocationData_TableType, \r\n         " +
                    "   T.ReferenceID AS LocationData_ReferenceID, \r\n            T.LocationID AS Loca" +
                    "tionData_LocationID, \r\n            T.Version AS LocationData_Version, \r\n        " +
                    "    T.VersionAntecedentID AS LocationData_VersionAntecedentID, \r\n            T.V" +
                    "ersionCertainty AS LocationData_VersionCertainty, \r\n            T.VersionWorkflo" +
                    "wInstanceID AS LocationData_VersionWorkflowInstanceID, \r\n            T.VersionUp" +
                    "datedBy AS LocationData_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS Lo" +
                    "cationData_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS LocationDa" +
                    "ta_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS LocationData_" +
                    "VersionOwnerCompanyID, \r\n            T.VersionUpdated AS LocationData_VersionUpd" +
                    "ated, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreCo" +
                    "ntainer.X_LocationData AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.LocationTraces
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView546()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.LocationTraces", "\r\n    SELECT VALUE -- Constructing LocationTraces\r\n        [NKD.Module.BusinessOb" +
                    "jects.LocationTrace](T1.LocationTrace_LocationHistoryID, T1.LocationTrace_Locati" +
                    "onHistory, T1.LocationTrace_LocationTaken, T1.LocationTrace_CorrectedLocationID," +
                    " T1.LocationTrace_ContactID, T1.LocationTrace_Version, T1.LocationTrace_VersionA" +
                    "ntecedentID, T1.LocationTrace_VersionCertainty, T1.LocationTrace_VersionWorkflow" +
                    "InstanceID, T1.LocationTrace_VersionUpdatedBy, T1.LocationTrace_VersionDeletedBy" +
                    ", T1.LocationTrace_VersionOwnerContactID, T1.LocationTrace_VersionOwnerCompanyID" +
                    ", T1.LocationTrace_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.L" +
                    "ocationHistoryID AS LocationTrace_LocationHistoryID, \r\n            T.LocationHis" +
                    "tory AS LocationTrace_LocationHistory, \r\n            T.LocationTaken AS Location" +
                    "Trace_LocationTaken, \r\n            T.CorrectedLocationID AS LocationTrace_Correc" +
                    "tedLocationID, \r\n            T.ContactID AS LocationTrace_ContactID, \r\n         " +
                    "   T.Version AS LocationTrace_Version, \r\n            T.VersionAntecedentID AS Lo" +
                    "cationTrace_VersionAntecedentID, \r\n            T.VersionCertainty AS LocationTra" +
                    "ce_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS LocationTrace_" +
                    "VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS LocationTrace_Ver" +
                    "sionUpdatedBy, \r\n            T.VersionDeletedBy AS LocationTrace_VersionDeletedB" +
                    "y, \r\n            T.VersionOwnerContactID AS LocationTrace_VersionOwnerContactID," +
                    " \r\n            T.VersionOwnerCompanyID AS LocationTrace_VersionOwnerCompanyID, \r" +
                    "\n            T.VersionUpdated AS LocationTrace_VersionUpdated, \r\n            Tru" +
                    "e AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_LocationHisto" +
                    "ry AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.Mineralogies
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView547()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.Mineralogies", "\r\n    SELECT VALUE -- Constructing Mineralogies\r\n        [NKD.Module.BusinessObje" +
                    "cts.Mineralogy](T1.Mineralogy_MineralogyID, T1.Mineralogy_HeaderID, T1.Mineralog" +
                    "y_FromDepth, T1.Mineralogy_ToDepth, T1.Mineralogy_MineralAbundanceID, T1.Mineral" +
                    "ogy_MineralFormID, T1.Mineralogy_MineralTypeID, T1.Mineralogy_MineralStyleID, T1" +
                    ".Mineralogy_Logged, T1.Mineralogy_LoggedBy, T1.Mineralogy_Comment, T1.Mineralogy" +
                    "_Version, T1.Mineralogy_VersionAntecedentID, T1.Mineralogy_VersionCertainty, T1." +
                    "Mineralogy_VersionWorkflowInstanceID, T1.Mineralogy_VersionUpdatedBy, T1.Mineral" +
                    "ogy_VersionDeletedBy, T1.Mineralogy_VersionOwnerContactID, T1.Mineralogy_Version" +
                    "OwnerCompanyID, T1.Mineralogy_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n    " +
                    "        T.MineralogyID AS Mineralogy_MineralogyID, \r\n            T.HeaderID AS M" +
                    "ineralogy_HeaderID, \r\n            T.FromDepth AS Mineralogy_FromDepth, \r\n       " +
                    "     T.ToDepth AS Mineralogy_ToDepth, \r\n            T.MineralAbundanceID AS Mine" +
                    "ralogy_MineralAbundanceID, \r\n            T.MineralFormID AS Mineralogy_MineralFo" +
                    "rmID, \r\n            T.MineralTypeID AS Mineralogy_MineralTypeID, \r\n            T" +
                    ".MineralStyleID AS Mineralogy_MineralStyleID, \r\n            T.Logged AS Mineralo" +
                    "gy_Logged, \r\n            T.LoggedBy AS Mineralogy_LoggedBy, \r\n            T.Comm" +
                    "ent AS Mineralogy_Comment, \r\n            T.Version AS Mineralogy_Version, \r\n    " +
                    "        T.VersionAntecedentID AS Mineralogy_VersionAntecedentID, \r\n            T" +
                    ".VersionCertainty AS Mineralogy_VersionCertainty, \r\n            T.VersionWorkflo" +
                    "wInstanceID AS Mineralogy_VersionWorkflowInstanceID, \r\n            T.VersionUpda" +
                    "tedBy AS Mineralogy_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS Minera" +
                    "logy_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS Mineralogy_Versi" +
                    "onOwnerContactID, \r\n            T.VersionOwnerCompanyID AS Mineralogy_VersionOwn" +
                    "erCompanyID, \r\n            T.VersionUpdated AS Mineralogy_VersionUpdated, \r\n    " +
                    "        True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_Mi" +
                    "neralogy AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.ModelCharacteristics
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView548()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.ModelCharacteristics", "\r\n    SELECT VALUE -- Constructing ModelCharacteristics\r\n        [NKD.Module.Busi" +
                    "nessObjects.ModelCharacteristic](T1.ModelCharacteristic_ModelCharacteristicID, T" +
                    "1.ModelCharacteristic_ModelID, T1.ModelCharacteristic_CharacteristicID, T1.Model" +
                    "Characteristic_Value, T1.ModelCharacteristic_Version, T1.ModelCharacteristic_Ver" +
                    "sionAntecedentID, T1.ModelCharacteristic_VersionCertainty, T1.ModelCharacteristi" +
                    "c_VersionWorkflowInstanceID, T1.ModelCharacteristic_VersionUpdatedBy, T1.ModelCh" +
                    "aracteristic_VersionDeletedBy, T1.ModelCharacteristic_VersionOwnerContactID, T1." +
                    "ModelCharacteristic_VersionOwnerCompanyID, T1.ModelCharacteristic_VersionUpdated" +
                    ")\r\n    FROM (\r\n        SELECT \r\n            T.ModelCharacteristicID AS ModelChar" +
                    "acteristic_ModelCharacteristicID, \r\n            T.ModelID AS ModelCharacteristic" +
                    "_ModelID, \r\n            T.CharacteristicID AS ModelCharacteristic_Characteristic" +
                    "ID, \r\n            T.[Value] AS ModelCharacteristic_Value, \r\n            T.Versio" +
                    "n AS ModelCharacteristic_Version, \r\n            T.VersionAntecedentID AS ModelCh" +
                    "aracteristic_VersionAntecedentID, \r\n            T.VersionCertainty AS ModelChara" +
                    "cteristic_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS ModelCh" +
                    "aracteristic_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS Mode" +
                    "lCharacteristic_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS ModelChara" +
                    "cteristic_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS ModelCharac" +
                    "teristic_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS ModelCh" +
                    "aracteristic_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS ModelChara" +
                    "cteristic_VersionUpdated, \r\n            True AS _from0\r\n        FROM NKDModuleBu" +
                    "sinessObjectsStoreContainer.X_ModelCharacteristic AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.Opportunities
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView549()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2970);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Opportunities\r\n        [NKD.Module.BusinessOb");
            viewString.Append("jects.Opportunity](T1.Opportunity_OpportunityID, T1.Opportunity_OpportunityName,");
            viewString.Append(" T1.Opportunity_OpportunityContactID, T1.Opportunity_OpportunityCompanyID, T1.Op");
            viewString.Append("portunity_StatusWorkTypeID, T1.Opportunity_RegardingWorkTypeID, T1.Opportunity_D");
            viewString.Append("escription, T1.Opportunity_ProposalContactID, T1.Opportunity_ProposalFileDataID,");
            viewString.Append(" T1.Opportunity_ProjectID, T1.Opportunity_ExperienceID, T1.Opportunity_OpenedBy,");
            viewString.Append(" T1.Opportunity_AssignedBy, T1.Opportunity_MaintainedBy, T1.Opportunity_Converte");
            viewString.Append("dBy, T1.Opportunity_EstimatedConversion, T1.Opportunity_EstimatedDurationHours, ");
            viewString.Append("T1.Opportunity_EstimatedRevenue, T1.Opportunity_Probability, T1.Opportunity_Vers");
            viewString.Append("ion, T1.Opportunity_VersionAntecedentID, T1.Opportunity_VersionCertainty, T1.Opp");
            viewString.Append("ortunity_VersionWorkflowInstanceID, T1.Opportunity_VersionUpdatedBy, T1.Opportun");
            viewString.Append("ity_VersionDeletedBy, T1.Opportunity_VersionOwnerContactID, T1.Opportunity_Versi");
            viewString.Append("onOwnerCompanyID, T1.Opportunity_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n ");
            viewString.Append("           T.OpportunityID AS Opportunity_OpportunityID, \r\n            T.Opportu");
            viewString.Append("nityName AS Opportunity_OpportunityName, \r\n            T.OpportunityContactID AS");
            viewString.Append(" Opportunity_OpportunityContactID, \r\n            T.OpportunityCompanyID AS Oppor");
            viewString.Append("tunity_OpportunityCompanyID, \r\n            T.StatusWorkTypeID AS Opportunity_Sta");
            viewString.Append("tusWorkTypeID, \r\n            T.RegardingWorkTypeID AS Opportunity_RegardingWorkT");
            viewString.Append("ypeID, \r\n            T.Description AS Opportunity_Description, \r\n            T.P");
            viewString.Append("roposalContactID AS Opportunity_ProposalContactID, \r\n            T.ProposalFileD");
            viewString.Append("ataID AS Opportunity_ProposalFileDataID, \r\n            T.ProjectID AS Opportunit");
            viewString.Append("y_ProjectID, \r\n            T.ExperienceID AS Opportunity_ExperienceID, \r\n       ");
            viewString.Append("     T.OpenedBy AS Opportunity_OpenedBy, \r\n            T.AssignedBy AS Opportuni");
            viewString.Append("ty_AssignedBy, \r\n            T.MaintainedBy AS Opportunity_MaintainedBy, \r\n     ");
            viewString.Append("       T.ConvertedBy AS Opportunity_ConvertedBy, \r\n            T.EstimatedConver");
            viewString.Append("sion AS Opportunity_EstimatedConversion, \r\n            T.EstimatedDurationHours ");
            viewString.Append("AS Opportunity_EstimatedDurationHours, \r\n            T.EstimatedRevenue AS Oppor");
            viewString.Append("tunity_EstimatedRevenue, \r\n            T.Probability AS Opportunity_Probability,");
            viewString.Append(" \r\n            T.Version AS Opportunity_Version, \r\n            T.VersionAntecede");
            viewString.Append("ntID AS Opportunity_VersionAntecedentID, \r\n            T.VersionCertainty AS Opp");
            viewString.Append("ortunity_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS Opportun");
            viewString.Append("ity_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS Opportunity_V");
            viewString.Append("ersionUpdatedBy, \r\n            T.VersionDeletedBy AS Opportunity_VersionDeletedB");
            viewString.Append("y, \r\n            T.VersionOwnerContactID AS Opportunity_VersionOwnerContactID, \r");
            viewString.Append("\n            T.VersionOwnerCompanyID AS Opportunity_VersionOwnerCompanyID, \r\n   ");
            viewString.Append("         T.VersionUpdated AS Opportunity_VersionUpdated, \r\n            True AS _");
            viewString.Append("from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_Opportunity AS T\r\n ");
            viewString.Append("   ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.Opportunities", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.Parameters
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView550()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.Parameters", "\r\n    SELECT VALUE -- Constructing Parameters\r\n        [NKD.Module.BusinessObject" +
                    "s.Parameter](T1.Parameter_ParameterID, T1.Parameter_ParameterType, T1.Parameter_" +
                    "ParameterName, T1.Parameter_DefaultParameterValue, T1.Parameter_DefaultParameter" +
                    "Text, T1.Parameter_UnitID, T1.Parameter_Format, T1.Parameter_Description, T1.Par" +
                    "ameter_Locale, T1.Parameter_Version, T1.Parameter_VersionAntecedentID, T1.Parame" +
                    "ter_VersionCertainty, T1.Parameter_VersionWorkflowInstanceID, T1.Parameter_Versi" +
                    "onUpdatedBy, T1.Parameter_VersionDeletedBy, T1.Parameter_VersionOwnerContactID, " +
                    "T1.Parameter_VersionOwnerCompanyID, T1.Parameter_VersionUpdated)\r\n    FROM (\r\n  " +
                    "      SELECT \r\n            T.ParameterID AS Parameter_ParameterID, \r\n           " +
                    " T.ParameterType AS Parameter_ParameterType, \r\n            T.ParameterName AS Pa" +
                    "rameter_ParameterName, \r\n            T.DefaultParameterValue AS Parameter_Defaul" +
                    "tParameterValue, \r\n            T.DefaultParameterText AS Parameter_DefaultParame" +
                    "terText, \r\n            T.UnitID AS Parameter_UnitID, \r\n            T.Format AS P" +
                    "arameter_Format, \r\n            T.Description AS Parameter_Description, \r\n       " +
                    "     T.Locale AS Parameter_Locale, \r\n            T.Version AS Parameter_Version," +
                    " \r\n            T.VersionAntecedentID AS Parameter_VersionAntecedentID, \r\n       " +
                    "     T.VersionCertainty AS Parameter_VersionCertainty, \r\n            T.VersionWo" +
                    "rkflowInstanceID AS Parameter_VersionWorkflowInstanceID, \r\n            T.Version" +
                    "UpdatedBy AS Parameter_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS Par" +
                    "ameter_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS Parameter_Vers" +
                    "ionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS Parameter_VersionOwn" +
                    "erCompanyID, \r\n            T.VersionUpdated AS Parameter_VersionUpdated, \r\n     " +
                    "       True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_Par" +
                    "ameter AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.ParameterDuplicates
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView551()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.ParameterDuplicates", "\r\n    SELECT VALUE -- Constructing ParameterDuplicates\r\n        [NKD.Module.Busin" +
                    "essObjects.ParameterDuplicate](T1.ParameterDuplicate_ParameterDuplicateID, T1.Pa" +
                    "rameterDuplicate_Parameter1ID, T1.ParameterDuplicate_Parameter2ID, T1.ParameterD" +
                    "uplicate_Version, T1.ParameterDuplicate_VersionAntecedentID, T1.ParameterDuplica" +
                    "te_VersionCertainty, T1.ParameterDuplicate_VersionWorkflowInstanceID, T1.Paramet" +
                    "erDuplicate_VersionUpdatedBy, T1.ParameterDuplicate_VersionDeletedBy, T1.Paramet" +
                    "erDuplicate_VersionOwnerContactID, T1.ParameterDuplicate_VersionOwnerCompanyID, " +
                    "T1.ParameterDuplicate_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            " +
                    "T.ParameterDuplicateID AS ParameterDuplicate_ParameterDuplicateID, \r\n           " +
                    " T.Parameter1ID AS ParameterDuplicate_Parameter1ID, \r\n            T.Parameter2ID" +
                    " AS ParameterDuplicate_Parameter2ID, \r\n            T.Version AS ParameterDuplica" +
                    "te_Version, \r\n            T.VersionAntecedentID AS ParameterDuplicate_VersionAnt" +
                    "ecedentID, \r\n            T.VersionCertainty AS ParameterDuplicate_VersionCertain" +
                    "ty, \r\n            T.VersionWorkflowInstanceID AS ParameterDuplicate_VersionWorkf" +
                    "lowInstanceID, \r\n            T.VersionUpdatedBy AS ParameterDuplicate_VersionUpd" +
                    "atedBy, \r\n            T.VersionDeletedBy AS ParameterDuplicate_VersionDeletedBy," +
                    " \r\n            T.VersionOwnerContactID AS ParameterDuplicate_VersionOwnerContact" +
                    "ID, \r\n            T.VersionOwnerCompanyID AS ParameterDuplicate_VersionOwnerComp" +
                    "anyID, \r\n            T.VersionUpdated AS ParameterDuplicate_VersionUpdated, \r\n  " +
                    "          True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_" +
                    "ParameterDuplicate AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.ParameterGroups
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView552()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.ParameterGroups", @"
    SELECT VALUE -- Constructing ParameterGroups
        [NKD.Module.BusinessObjects.ParameterGroup](T1.ParameterGroup_ParameterGroupID, T1.ParameterGroup_ParameterID, T1.ParameterGroup_GroupID, T1.ParameterGroup_Version, T1.ParameterGroup_VersionAntecedentID, T1.ParameterGroup_VersionCertainty, T1.ParameterGroup_VersionWorkflowInstanceID, T1.ParameterGroup_VersionUpdatedBy, T1.ParameterGroup_VersionDeletedBy, T1.ParameterGroup_VersionOwnerContactID, T1.ParameterGroup_VersionOwnerCompanyID, T1.ParameterGroup_VersionUpdated)
    FROM (
        SELECT 
            T.ParameterGroupID AS ParameterGroup_ParameterGroupID, 
            T.ParameterID AS ParameterGroup_ParameterID, 
            T.GroupID AS ParameterGroup_GroupID, 
            T.Version AS ParameterGroup_Version, 
            T.VersionAntecedentID AS ParameterGroup_VersionAntecedentID, 
            T.VersionCertainty AS ParameterGroup_VersionCertainty, 
            T.VersionWorkflowInstanceID AS ParameterGroup_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS ParameterGroup_VersionUpdatedBy, 
            T.VersionDeletedBy AS ParameterGroup_VersionDeletedBy, 
            T.VersionOwnerContactID AS ParameterGroup_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS ParameterGroup_VersionOwnerCompanyID, 
            T.VersionUpdated AS ParameterGroup_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_ParameterGroup AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.PartCharacteristics
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView553()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.PartCharacteristics", "\r\n    SELECT VALUE -- Constructing PartCharacteristics\r\n        [NKD.Module.Busin" +
                    "essObjects.PartCharacteristic](T1.PartCharacteristic_PartCharacteristicID, T1.Pa" +
                    "rtCharacteristic_PartID, T1.PartCharacteristic_CharacteristicID, T1.PartCharacte" +
                    "ristic_Value, T1.PartCharacteristic_Version, T1.PartCharacteristic_VersionAntece" +
                    "dentID, T1.PartCharacteristic_VersionCertainty, T1.PartCharacteristic_VersionWor" +
                    "kflowInstanceID, T1.PartCharacteristic_VersionUpdatedBy, T1.PartCharacteristic_V" +
                    "ersionDeletedBy, T1.PartCharacteristic_VersionOwnerContactID, T1.PartCharacteris" +
                    "tic_VersionOwnerCompanyID, T1.PartCharacteristic_VersionUpdated)\r\n    FROM (\r\n  " +
                    "      SELECT \r\n            T.PartCharacteristicID AS PartCharacteristic_PartChar" +
                    "acteristicID, \r\n            T.PartID AS PartCharacteristic_PartID, \r\n           " +
                    " T.CharacteristicID AS PartCharacteristic_CharacteristicID, \r\n            T.[Val" +
                    "ue] AS PartCharacteristic_Value, \r\n            T.Version AS PartCharacteristic_V" +
                    "ersion, \r\n            T.VersionAntecedentID AS PartCharacteristic_VersionAnteced" +
                    "entID, \r\n            T.VersionCertainty AS PartCharacteristic_VersionCertainty, " +
                    "\r\n            T.VersionWorkflowInstanceID AS PartCharacteristic_VersionWorkflowI" +
                    "nstanceID, \r\n            T.VersionUpdatedBy AS PartCharacteristic_VersionUpdated" +
                    "By, \r\n            T.VersionDeletedBy AS PartCharacteristic_VersionDeletedBy, \r\n " +
                    "           T.VersionOwnerContactID AS PartCharacteristic_VersionOwnerContactID, " +
                    "\r\n            T.VersionOwnerCompanyID AS PartCharacteristic_VersionOwnerCompanyI" +
                    "D, \r\n            T.VersionUpdated AS PartCharacteristic_VersionUpdated, \r\n      " +
                    "      True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_Part" +
                    "Characteristic AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.PointLoads
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView554()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2425);
            viewString.Append("\r\n    SELECT VALUE -- Constructing PointLoads\r\n        [NKD.Module.BusinessObjec");
            viewString.Append("ts.PointLoad](T1.PointLoad_PointLoadID, T1.PointLoad_HeaderID, T1.PointLoad_From");
            viewString.Append("Depth, T1.PointLoad_ToDepth, T1.PointLoad_SampleNumber, T1.PointLoad_SampleLengt");
            viewString.Append("h, T1.PointLoad_SampleStateID, T1.PointLoad_SampleTypeID, T1.PointLoad_TestSampl");
            viewString.Append("eCode, T1.PointLoad_TestSampleDepth, T1.PointLoad_PointLoadTestTypeID, T1.PointL");
            viewString.Append("oad_PlatenSeparation, T1.PointLoad_Width, T1.PointLoad_FailureLoad, T1.PointLoad");
            viewString.Append("_FailureModeID, T1.PointLoad_Comment, T1.PointLoad_Version, T1.PointLoad_Version");
            viewString.Append("AntecedentID, T1.PointLoad_VersionCertainty, T1.PointLoad_VersionWorkflowInstanc");
            viewString.Append("eID, T1.PointLoad_VersionUpdatedBy, T1.PointLoad_VersionDeletedBy, T1.PointLoad_");
            viewString.Append("VersionOwnerContactID, T1.PointLoad_VersionOwnerCompanyID, T1.PointLoad_VersionU");
            viewString.Append("pdated)\r\n    FROM (\r\n        SELECT \r\n            T.PointLoadID AS PointLoad_Poi");
            viewString.Append("ntLoadID, \r\n            T.HeaderID AS PointLoad_HeaderID, \r\n            T.FromDe");
            viewString.Append("pth AS PointLoad_FromDepth, \r\n            T.ToDepth AS PointLoad_ToDepth, \r\n    ");
            viewString.Append("        T.SampleNumber AS PointLoad_SampleNumber, \r\n            T.SampleLength A");
            viewString.Append("S PointLoad_SampleLength, \r\n            T.SampleStateID AS PointLoad_SampleState");
            viewString.Append("ID, \r\n            T.SampleTypeID AS PointLoad_SampleTypeID, \r\n            T.Test");
            viewString.Append("SampleCode AS PointLoad_TestSampleCode, \r\n            T.TestSampleDepth AS Point");
            viewString.Append("Load_TestSampleDepth, \r\n            T.PointLoadTestTypeID AS PointLoad_PointLoad");
            viewString.Append("TestTypeID, \r\n            T.PlatenSeparation AS PointLoad_PlatenSeparation, \r\n  ");
            viewString.Append("          T.Width AS PointLoad_Width, \r\n            T.FailureLoad AS PointLoad_F");
            viewString.Append("ailureLoad, \r\n            T.FailureModeID AS PointLoad_FailureModeID, \r\n        ");
            viewString.Append("    T.Comment AS PointLoad_Comment, \r\n            T.Version AS PointLoad_Version");
            viewString.Append(", \r\n            T.VersionAntecedentID AS PointLoad_VersionAntecedentID, \r\n      ");
            viewString.Append("      T.VersionCertainty AS PointLoad_VersionCertainty, \r\n            T.VersionW");
            viewString.Append("orkflowInstanceID AS PointLoad_VersionWorkflowInstanceID, \r\n            T.Versio");
            viewString.Append("nUpdatedBy AS PointLoad_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS Po");
            viewString.Append("intLoad_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS PointLoad_Ver");
            viewString.Append("sionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS PointLoad_VersionOw");
            viewString.Append("nerCompanyID, \r\n            T.VersionUpdated AS PointLoad_VersionUpdated, \r\n    ");
            viewString.Append("        True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_Po");
            viewString.Append("intLoad AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.PointLoads", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.Projects
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView555()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.Projects", "\r\n    SELECT VALUE -- Constructing Projects\r\n        [NKD.Module.BusinessObjects." +
                    "Project](T1.Project_ProjectID, T1.Project_ParentProjectID, T1.Project_TenementID" +
                    ", T1.Project_ProjectName, T1.Project_ProjectCode, T1.Project_ClientCompanyID, T1" +
                    ".Project_Comment, T1.Project_Version, T1.Project_VersionAntecedentID, T1.Project" +
                    "_VersionCertainty, T1.Project_VersionWorkflowInstanceID, T1.Project_VersionUpdat" +
                    "edBy, T1.Project_VersionDeletedBy, T1.Project_VersionOwnerContactID, T1.Project_" +
                    "VersionOwnerCompanyID, T1.Project_VersionUpdated, T1.Project_ProjectTypeID, T1.P" +
                    "roject_ClientContactID)\r\n    FROM (\r\n        SELECT \r\n            T.ProjectID AS" +
                    " Project_ProjectID, \r\n            T.ParentProjectID AS Project_ParentProjectID, " +
                    "\r\n            T.TenementID AS Project_TenementID, \r\n            T.ProjectName AS" +
                    " Project_ProjectName, \r\n            T.ProjectCode AS Project_ProjectCode, \r\n    " +
                    "        T.ClientCompanyID AS Project_ClientCompanyID, \r\n            T.Comment AS" +
                    " Project_Comment, \r\n            T.Version AS Project_Version, \r\n            T.Ve" +
                    "rsionAntecedentID AS Project_VersionAntecedentID, \r\n            T.VersionCertain" +
                    "ty AS Project_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS Pro" +
                    "ject_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS Project_Vers" +
                    "ionUpdatedBy, \r\n            T.VersionDeletedBy AS Project_VersionDeletedBy, \r\n  " +
                    "          T.VersionOwnerContactID AS Project_VersionOwnerContactID, \r\n          " +
                    "  T.VersionOwnerCompanyID AS Project_VersionOwnerCompanyID, \r\n            T.Vers" +
                    "ionUpdated AS Project_VersionUpdated, \r\n            T.ProjectTypeID AS Project_P" +
                    "rojectTypeID, \r\n            T.ClientContactID AS Project_ClientContactID, \r\n    " +
                    "        True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_Pr" +
                    "oject AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.ProjectDeliverables
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView556()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(4077);
            viewString.Append("\r\n    SELECT VALUE -- Constructing ProjectDeliverables\r\n        [NKD.Module.Busi");
            viewString.Append("nessObjects.ProjectDeliverable](T1.ProjectDeliverable_ProjectDeliverableID, T1.P");
            viewString.Append("rojectDeliverable_ProjectID, T1.ProjectDeliverable_Sequence, T1.ProjectDeliverab");
            viewString.Append("le_DeliverableName, T1.ProjectDeliverable_WorkTypeID, T1.ProjectDeliverable_Mile");
            viewString.Append("stoneTaskID, T1.ProjectDeliverable_Description, T1.ProjectDeliverable_InitiatedB");
            viewString.Append("y, T1.ProjectDeliverable_Initiated, T1.ProjectDeliverable_ApprovedBy, T1.Project");
            viewString.Append("Deliverable_Approved, T1.ProjectDeliverable_EvidenceDescription, T1.ProjectDeliv");
            viewString.Append("erable_EvidenceFileDataID, T1.ProjectDeliverable_EvidenceContractID, T1.ProjectD");
            viewString.Append("eliverable_EvidenceContactID, T1.ProjectDeliverable_EvidenceCreated, T1.ProjectD");
            viewString.Append("eliverable_ExpectedProRataUnits, T1.ProjectDeliverable_ExpectedProRataPerUnitID,");
            viewString.Append(" T1.ProjectDeliverable_ExpectedProRataValue, T1.ProjectDeliverable_EstimatedDura");
            viewString.Append("tionManHours, T1.ProjectDeliverable_EstimatedCost, T1.ProjectDeliverable_Due, T1");
            viewString.Append(".ProjectDeliverable_HourlyPenalties, T1.ProjectDeliverable_TotalValue, T1.Projec");
            viewString.Append("tDeliverable_Completed, T1.ProjectDeliverable_Comment, T1.ProjectDeliverable_Ver");
            viewString.Append("sion, T1.ProjectDeliverable_VersionAntecedentID, T1.ProjectDeliverable_VersionCe");
            viewString.Append("rtainty, T1.ProjectDeliverable_VersionWorkflowInstanceID, T1.ProjectDeliverable_");
            viewString.Append("VersionUpdatedBy, T1.ProjectDeliverable_VersionDeletedBy, T1.ProjectDeliverable_");
            viewString.Append("VersionOwnerContactID, T1.ProjectDeliverable_VersionOwnerCompanyID, T1.ProjectDe");
            viewString.Append("liverable_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.ProjectDel");
            viewString.Append("iverableID AS ProjectDeliverable_ProjectDeliverableID, \r\n            T.ProjectID");
            viewString.Append(" AS ProjectDeliverable_ProjectID, \r\n            T.Sequence AS ProjectDeliverable");
            viewString.Append("_Sequence, \r\n            T.DeliverableName AS ProjectDeliverable_DeliverableName");
            viewString.Append(", \r\n            T.WorkTypeID AS ProjectDeliverable_WorkTypeID, \r\n            T.M");
            viewString.Append("ilestoneTaskID AS ProjectDeliverable_MilestoneTaskID, \r\n            T.Descriptio");
            viewString.Append("n AS ProjectDeliverable_Description, \r\n            T.InitiatedBy AS ProjectDeliv");
            viewString.Append("erable_InitiatedBy, \r\n            T.Initiated AS ProjectDeliverable_Initiated, \r");
            viewString.Append("\n            T.ApprovedBy AS ProjectDeliverable_ApprovedBy, \r\n            T.Appr");
            viewString.Append("oved AS ProjectDeliverable_Approved, \r\n            T.EvidenceDescription AS Proj");
            viewString.Append("ectDeliverable_EvidenceDescription, \r\n            T.EvidenceFileDataID AS Projec");
            viewString.Append("tDeliverable_EvidenceFileDataID, \r\n            T.EvidenceContractID AS ProjectDe");
            viewString.Append("liverable_EvidenceContractID, \r\n            T.EvidenceContactID AS ProjectDelive");
            viewString.Append("rable_EvidenceContactID, \r\n            T.EvidenceCreated AS ProjectDeliverable_E");
            viewString.Append("videnceCreated, \r\n            T.ExpectedProRataUnits AS ProjectDeliverable_Expec");
            viewString.Append("tedProRataUnits, \r\n            T.ExpectedProRataPerUnitID AS ProjectDeliverable_");
            viewString.Append("ExpectedProRataPerUnitID, \r\n            T.ExpectedProRataValue AS ProjectDeliver");
            viewString.Append("able_ExpectedProRataValue, \r\n            T.EstimatedDurationManHours AS ProjectD");
            viewString.Append("eliverable_EstimatedDurationManHours, \r\n            T.EstimatedCost AS ProjectDe");
            viewString.Append("liverable_EstimatedCost, \r\n            T.Due AS ProjectDeliverable_Due, \r\n      ");
            viewString.Append("      T.HourlyPenalties AS ProjectDeliverable_HourlyPenalties, \r\n            T.T");
            viewString.Append("otalValue AS ProjectDeliverable_TotalValue, \r\n            T.Completed AS Project");
            viewString.Append("Deliverable_Completed, \r\n            T.Comment AS ProjectDeliverable_Comment, \r\n");
            viewString.Append("            T.Version AS ProjectDeliverable_Version, \r\n            T.VersionAnte");
            viewString.Append("cedentID AS ProjectDeliverable_VersionAntecedentID, \r\n            T.VersionCerta");
            viewString.Append("inty AS ProjectDeliverable_VersionCertainty, \r\n            T.VersionWorkflowInst");
            viewString.Append("anceID AS ProjectDeliverable_VersionWorkflowInstanceID, \r\n            T.VersionU");
            viewString.Append("pdatedBy AS ProjectDeliverable_VersionUpdatedBy, \r\n            T.VersionDeletedB");
            viewString.Append("y AS ProjectDeliverable_VersionDeletedBy, \r\n            T.VersionOwnerContactID ");
            viewString.Append("AS ProjectDeliverable_VersionOwnerContactID, \r\n            T.VersionOwnerCompany");
            viewString.Append("ID AS ProjectDeliverable_VersionOwnerCompanyID, \r\n            T.VersionUpdated A");
            viewString.Append("S ProjectDeliverable_VersionUpdated, \r\n            True AS _from0\r\n        FROM ");
            viewString.Append("NKDModuleBusinessObjectsStoreContainer.X_ProjectDeliverable AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.ProjectDeliverables", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.ProjectPlans
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView557()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.ProjectPlans", "\r\n    SELECT VALUE -- Constructing ProjectPlans\r\n        [NKD.Module.BusinessObje" +
                    "cts.ProjectPlan](T1.ProjectPlan_ProjectPlanID, T1.ProjectPlan_ProjectID, T1.Proj" +
                    "ectPlan_ParentProjectPlanID, T1.ProjectPlan_ProjectPlanName, T1.ProjectPlan_Resp" +
                    "onsibleContactID, T1.ProjectPlan_Comment, T1.ProjectPlan_Version, T1.ProjectPlan" +
                    "_VersionAntecedentID, T1.ProjectPlan_VersionCertainty, T1.ProjectPlan_VersionWor" +
                    "kflowInstanceID, T1.ProjectPlan_VersionUpdatedBy, T1.ProjectPlan_VersionDeletedB" +
                    "y, T1.ProjectPlan_VersionOwnerContactID, T1.ProjectPlan_VersionOwnerCompanyID, T" +
                    "1.ProjectPlan_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.Projec" +
                    "tPlanID AS ProjectPlan_ProjectPlanID, \r\n            T.ProjectID AS ProjectPlan_P" +
                    "rojectID, \r\n            T.ParentProjectPlanID AS ProjectPlan_ParentProjectPlanID" +
                    ", \r\n            T.ProjectPlanName AS ProjectPlan_ProjectPlanName, \r\n            " +
                    "T.ResponsibleContactID AS ProjectPlan_ResponsibleContactID, \r\n            T.Comm" +
                    "ent AS ProjectPlan_Comment, \r\n            T.Version AS ProjectPlan_Version, \r\n  " +
                    "          T.VersionAntecedentID AS ProjectPlan_VersionAntecedentID, \r\n          " +
                    "  T.VersionCertainty AS ProjectPlan_VersionCertainty, \r\n            T.VersionWor" +
                    "kflowInstanceID AS ProjectPlan_VersionWorkflowInstanceID, \r\n            T.Versio" +
                    "nUpdatedBy AS ProjectPlan_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS " +
                    "ProjectPlan_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS ProjectPl" +
                    "an_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS ProjectPlan_V" +
                    "ersionOwnerCompanyID, \r\n            T.VersionUpdated AS ProjectPlan_VersionUpdat" +
                    "ed, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreCont" +
                    "ainer.X_ProjectPlan AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.ProjectPlanTasks
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView558()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2378);
            viewString.Append("\r\n    SELECT VALUE -- Constructing ProjectPlanTasks\r\n        [NKD.Module.Busines");
            viewString.Append("sObjects.ProjectPlanTask](T1.ProjectPlanTask_ProjectPlanTaskID, T1.ProjectPlanTa");
            viewString.Append("sk_ProjectPlanID, T1.ProjectPlanTask_ProjectTaskName, T1.ProjectPlanTask_TaskID,");
            viewString.Append(" T1.ProjectPlanTask_WorkTypeID, T1.ProjectPlanTask_Priority, T1.ProjectPlanTask_");
            viewString.Append("Progress, T1.ProjectPlanTask_StartDate, T1.ProjectPlanTask_StopDate, T1.ProjectP");
            viewString.Append("lanTask_AllocatedManHours, T1.ProjectPlanTask_Comment, T1.ProjectPlanTask_Versio");
            viewString.Append("n, T1.ProjectPlanTask_VersionAntecedentID, T1.ProjectPlanTask_VersionCertainty, ");
            viewString.Append("T1.ProjectPlanTask_VersionWorkflowInstanceID, T1.ProjectPlanTask_VersionUpdatedB");
            viewString.Append("y, T1.ProjectPlanTask_VersionDeletedBy, T1.ProjectPlanTask_VersionOwnerContactID");
            viewString.Append(", T1.ProjectPlanTask_VersionOwnerCompanyID, T1.ProjectPlanTask_VersionUpdated, T");
            viewString.Append("1.ProjectPlanTask_ParentProjectPlanTaskID)\r\n    FROM (\r\n        SELECT \r\n       ");
            viewString.Append("     T.ProjectPlanTaskID AS ProjectPlanTask_ProjectPlanTaskID, \r\n            T.P");
            viewString.Append("rojectPlanID AS ProjectPlanTask_ProjectPlanID, \r\n            T.ProjectTaskName A");
            viewString.Append("S ProjectPlanTask_ProjectTaskName, \r\n            T.TaskID AS ProjectPlanTask_Tas");
            viewString.Append("kID, \r\n            T.WorkTypeID AS ProjectPlanTask_WorkTypeID, \r\n            T.P");
            viewString.Append("riority AS ProjectPlanTask_Priority, \r\n            T.Progress AS ProjectPlanTask");
            viewString.Append("_Progress, \r\n            T.StartDate AS ProjectPlanTask_StartDate, \r\n           ");
            viewString.Append(" T.StopDate AS ProjectPlanTask_StopDate, \r\n            T.AllocatedManHours AS Pr");
            viewString.Append("ojectPlanTask_AllocatedManHours, \r\n            T.Comment AS ProjectPlanTask_Comm");
            viewString.Append("ent, \r\n            T.Version AS ProjectPlanTask_Version, \r\n            T.Version");
            viewString.Append("AntecedentID AS ProjectPlanTask_VersionAntecedentID, \r\n            T.VersionCert");
            viewString.Append("ainty AS ProjectPlanTask_VersionCertainty, \r\n            T.VersionWorkflowInstan");
            viewString.Append("ceID AS ProjectPlanTask_VersionWorkflowInstanceID, \r\n            T.VersionUpdate");
            viewString.Append("dBy AS ProjectPlanTask_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS Pro");
            viewString.Append("jectPlanTask_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS ProjectP");
            viewString.Append("lanTask_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS ProjectP");
            viewString.Append("lanTask_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS ProjectPlanTask");
            viewString.Append("_VersionUpdated, \r\n            T.ParentProjectPlanTaskID AS ProjectPlanTask_Pare");
            viewString.Append("ntProjectPlanTaskID, \r\n            True AS _from0\r\n        FROM NKDModuleBusines");
            viewString.Append("sObjectsStoreContainer.X_ProjectPlanTask AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.ProjectPlanTasks", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.ProjectPlanTaskComplianceResponses
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView559()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2951);
            viewString.Append("\r\n    SELECT VALUE -- Constructing ProjectPlanTaskComplianceResponses\r\n        [");
            viewString.Append("NKD.Module.BusinessObjects.ProjectPlanTaskComplianceResponse](T1.ProjectPlanTask");
            viewString.Append("ComplianceResponse_ProjectPlanTaskComplianceResponseID, T1.ProjectPlanTaskCompli");
            viewString.Append("anceResponse_ProjectPlanTaskID, T1.ProjectPlanTaskComplianceResponse_ProjectPlan");
            viewString.Append("TaskResponseID, T1.ProjectPlanTaskComplianceResponse_ComplianceWorkTypeID, T1.Pr");
            viewString.Append("ojectPlanTaskComplianceResponse_ComplianceFormResponse, T1.ProjectPlanTaskCompli");
            viewString.Append("anceResponse_CompletedBy, T1.ProjectPlanTaskComplianceResponse_Completed, T1.Pro");
            viewString.Append("jectPlanTaskComplianceResponse_ApprovedBy, T1.ProjectPlanTaskComplianceResponse_");
            viewString.Append("Approved, T1.ProjectPlanTaskComplianceResponse_Version, T1.ProjectPlanTaskCompli");
            viewString.Append("anceResponse_VersionAntecedentID, T1.ProjectPlanTaskComplianceResponse_VersionCe");
            viewString.Append("rtainty, T1.ProjectPlanTaskComplianceResponse_VersionWorkflowInstanceID, T1.Proj");
            viewString.Append("ectPlanTaskComplianceResponse_VersionUpdatedBy, T1.ProjectPlanTaskComplianceResp");
            viewString.Append("onse_VersionDeletedBy, T1.ProjectPlanTaskComplianceResponse_VersionOwnerContactI");
            viewString.Append("D, T1.ProjectPlanTaskComplianceResponse_VersionOwnerCompanyID, T1.ProjectPlanTas");
            viewString.Append("kComplianceResponse_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.");
            viewString.Append("ProjectPlanTaskComplianceResponseID AS ProjectPlanTaskComplianceResponse_Project");
            viewString.Append("PlanTaskComplianceResponseID, \r\n            T.ProjectPlanTaskID AS ProjectPlanTa");
            viewString.Append("skComplianceResponse_ProjectPlanTaskID, \r\n            T.ProjectPlanTaskResponseI");
            viewString.Append("D AS ProjectPlanTaskComplianceResponse_ProjectPlanTaskResponseID, \r\n            ");
            viewString.Append("T.ComplianceWorkTypeID AS ProjectPlanTaskComplianceResponse_ComplianceWorkTypeID");
            viewString.Append(", \r\n            T.ComplianceFormResponse AS ProjectPlanTaskComplianceResponse_Co");
            viewString.Append("mplianceFormResponse, \r\n            T.CompletedBy AS ProjectPlanTaskComplianceRe");
            viewString.Append("sponse_CompletedBy, \r\n            T.Completed AS ProjectPlanTaskComplianceRespon");
            viewString.Append("se_Completed, \r\n            T.ApprovedBy AS ProjectPlanTaskComplianceResponse_Ap");
            viewString.Append("provedBy, \r\n            T.Approved AS ProjectPlanTaskComplianceResponse_Approved");
            viewString.Append(", \r\n            T.Version AS ProjectPlanTaskComplianceResponse_Version, \r\n      ");
            viewString.Append("      T.VersionAntecedentID AS ProjectPlanTaskComplianceResponse_VersionAntecede");
            viewString.Append("ntID, \r\n            T.VersionCertainty AS ProjectPlanTaskComplianceResponse_Vers");
            viewString.Append("ionCertainty, \r\n            T.VersionWorkflowInstanceID AS ProjectPlanTaskCompli");
            viewString.Append("anceResponse_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS Proj");
            viewString.Append("ectPlanTaskComplianceResponse_VersionUpdatedBy, \r\n            T.VersionDeletedBy");
            viewString.Append(" AS ProjectPlanTaskComplianceResponse_VersionDeletedBy, \r\n            T.VersionO");
            viewString.Append("wnerContactID AS ProjectPlanTaskComplianceResponse_VersionOwnerContactID, \r\n    ");
            viewString.Append("        T.VersionOwnerCompanyID AS ProjectPlanTaskComplianceResponse_VersionOwne");
            viewString.Append("rCompanyID, \r\n            T.VersionUpdated AS ProjectPlanTaskComplianceResponse_");
            viewString.Append("VersionUpdated, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObje");
            viewString.Append("ctsStoreContainer.X_ProjectPlanTaskComplianceResponse AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.ProjectPlanTaskComplianceResponses", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.ProjectPlanTaskDatas
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView560()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.ProjectPlanTaskDatas", "\r\n    SELECT VALUE -- Constructing ProjectPlanTaskDatas\r\n        [NKD.Module.Busi" +
                    "nessObjects.ProjectPlanTaskData](T1.ProjectPlanTaskData_ProjectPlanTaskDataID, T" +
                    "1.ProjectPlanTaskData_ParentProjectPlanTaskDataID, T1.ProjectPlanTaskData_TableT" +
                    "ype, T1.ProjectPlanTaskData_ReferenceID, T1.ProjectPlanTaskData_ProjectPlanTaskI" +
                    "D, T1.ProjectPlanTaskData_Version, T1.ProjectPlanTaskData_VersionAntecedentID, T" +
                    "1.ProjectPlanTaskData_VersionCertainty, T1.ProjectPlanTaskData_VersionWorkflowIn" +
                    "stanceID, T1.ProjectPlanTaskData_VersionUpdatedBy, T1.ProjectPlanTaskData_Versio" +
                    "nDeletedBy, T1.ProjectPlanTaskData_VersionOwnerContactID, T1.ProjectPlanTaskData" +
                    "_VersionOwnerCompanyID, T1.ProjectPlanTaskData_VersionUpdated)\r\n    FROM (\r\n    " +
                    "    SELECT \r\n            T.ProjectPlanTaskDataID AS ProjectPlanTaskData_ProjectP" +
                    "lanTaskDataID, \r\n            T.ParentProjectPlanTaskDataID AS ProjectPlanTaskDat" +
                    "a_ParentProjectPlanTaskDataID, \r\n            T.TableType AS ProjectPlanTaskData_" +
                    "TableType, \r\n            T.ReferenceID AS ProjectPlanTaskData_ReferenceID, \r\n   " +
                    "         T.ProjectPlanTaskID AS ProjectPlanTaskData_ProjectPlanTaskID, \r\n       " +
                    "     T.Version AS ProjectPlanTaskData_Version, \r\n            T.VersionAntecedent" +
                    "ID AS ProjectPlanTaskData_VersionAntecedentID, \r\n            T.VersionCertainty " +
                    "AS ProjectPlanTaskData_VersionCertainty, \r\n            T.VersionWorkflowInstance" +
                    "ID AS ProjectPlanTaskData_VersionWorkflowInstanceID, \r\n            T.VersionUpda" +
                    "tedBy AS ProjectPlanTaskData_VersionUpdatedBy, \r\n            T.VersionDeletedBy " +
                    "AS ProjectPlanTaskData_VersionDeletedBy, \r\n            T.VersionOwnerContactID A" +
                    "S ProjectPlanTaskData_VersionOwnerContactID, \r\n            T.VersionOwnerCompany" +
                    "ID AS ProjectPlanTaskData_VersionOwnerCompanyID, \r\n            T.VersionUpdated " +
                    "AS ProjectPlanTaskData_VersionUpdated, \r\n            True AS _from0\r\n        FRO" +
                    "M NKDModuleBusinessObjectsStoreContainer.X_ProjectPlanTaskData AS T\r\n    ) AS T1" +
                    "");
        }
        
        /// <Summary>
        /// return view for NKDC.ProjectPlanTaskResponses
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView561()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(4538);
            viewString.Append("\r\n    SELECT VALUE -- Constructing ProjectPlanTaskResponses\r\n        [NKD.Module");
            viewString.Append(".BusinessObjects.ProjectPlanTaskResponse](T1.ProjectPlanTaskResponse_ProjectPlan");
            viewString.Append("TaskResponseID, T1.ProjectPlanTaskResponse_ProjectPlanTaskID, T1.ProjectPlanTask");
            viewString.Append("Response_ResponsibleContactID, T1.ProjectPlanTaskResponse_ActualWorkTypeID, T1.P");
            viewString.Append("rojectPlanTaskResponse_Began, T1.ProjectPlanTaskResponse_Completed, T1.ProjectPl");
            viewString.Append("anTaskResponse_Hours, T1.ProjectPlanTaskResponse_EstimatedProRataUnits, T1.Proje");
            viewString.Append("ctPlanTaskResponse_EstimatedProRataCost, T1.ProjectPlanTaskResponse_EstimatedVal");
            viewString.Append("ue, T1.ProjectPlanTaskResponse_PerformanceMetricParameterID, T1.ProjectPlanTaskR");
            viewString.Append("esponse_PerformanceMetricQuantity, T1.ProjectPlanTaskResponse_PerformanceMetricC");
            viewString.Append("ontributedPercent, T1.ProjectPlanTaskResponse_ApprovedProRataUnits, T1.ProjectPl");
            viewString.Append("anTaskResponse_ApprovedProRataCost, T1.ProjectPlanTaskResponse_Approved, T1.Proj");
            viewString.Append("ectPlanTaskResponse_ApprovedBy, T1.ProjectPlanTaskResponse_Comments, T1.ProjectP");
            viewString.Append("lanTaskResponse_Version, T1.ProjectPlanTaskResponse_VersionAntecedentID, T1.Proj");
            viewString.Append("ectPlanTaskResponse_VersionCertainty, T1.ProjectPlanTaskResponse_VersionWorkflow");
            viewString.Append("InstanceID, T1.ProjectPlanTaskResponse_VersionUpdatedBy, T1.ProjectPlanTaskRespo");
            viewString.Append("nse_VersionDeletedBy, T1.ProjectPlanTaskResponse_VersionOwnerContactID, T1.Proje");
            viewString.Append("ctPlanTaskResponse_VersionOwnerCompanyID, T1.ProjectPlanTaskResponse_VersionUpda");
            viewString.Append("ted, T1.ProjectPlanTaskResponse_ResponsibleCompanyID, T1.ProjectPlanTaskResponse");
            viewString.Append("_ProjectID, T1.ProjectPlanTaskResponse_ActualTaskID, T1.ProjectPlanTaskResponse_");
            viewString.Append("ActualGraphDataID, T1.ProjectPlanTaskResponse_ActualGraphDataGroupID, T1.Project");
            viewString.Append("PlanTaskResponse_EstimatedRevenue, T1.ProjectPlanTaskResponse_VersionPriority)\r\n");
            viewString.Append("    FROM (\r\n        SELECT \r\n            T.ProjectPlanTaskResponseID AS ProjectP");
            viewString.Append("lanTaskResponse_ProjectPlanTaskResponseID, \r\n            T.ProjectPlanTaskID AS ");
            viewString.Append("ProjectPlanTaskResponse_ProjectPlanTaskID, \r\n            T.ResponsibleContactID ");
            viewString.Append("AS ProjectPlanTaskResponse_ResponsibleContactID, \r\n            T.ActualWorkTypeI");
            viewString.Append("D AS ProjectPlanTaskResponse_ActualWorkTypeID, \r\n            T.Began AS ProjectP");
            viewString.Append("lanTaskResponse_Began, \r\n            T.Completed AS ProjectPlanTaskResponse_Comp");
            viewString.Append("leted, \r\n            T.Hours AS ProjectPlanTaskResponse_Hours, \r\n            T.E");
            viewString.Append("stimatedProRataUnits AS ProjectPlanTaskResponse_EstimatedProRataUnits, \r\n       ");
            viewString.Append("     T.EstimatedProRataCost AS ProjectPlanTaskResponse_EstimatedProRataCost, \r\n ");
            viewString.Append("           T.EstimatedValue AS ProjectPlanTaskResponse_EstimatedValue, \r\n       ");
            viewString.Append("     T.PerformanceMetricParameterID AS ProjectPlanTaskResponse_PerformanceMetric");
            viewString.Append("ParameterID, \r\n            T.PerformanceMetricQuantity AS ProjectPlanTaskRespons");
            viewString.Append("e_PerformanceMetricQuantity, \r\n            T.PerformanceMetricContributedPercent");
            viewString.Append(" AS ProjectPlanTaskResponse_PerformanceMetricContributedPercent, \r\n            T");
            viewString.Append(".ApprovedProRataUnits AS ProjectPlanTaskResponse_ApprovedProRataUnits, \r\n       ");
            viewString.Append("     T.ApprovedProRataCost AS ProjectPlanTaskResponse_ApprovedProRataCost, \r\n   ");
            viewString.Append("         T.Approved AS ProjectPlanTaskResponse_Approved, \r\n            T.Approve");
            viewString.Append("dBy AS ProjectPlanTaskResponse_ApprovedBy, \r\n            T.Comments AS ProjectPl");
            viewString.Append("anTaskResponse_Comments, \r\n            T.Version AS ProjectPlanTaskResponse_Vers");
            viewString.Append("ion, \r\n            T.VersionAntecedentID AS ProjectPlanTaskResponse_VersionAntec");
            viewString.Append("edentID, \r\n            T.VersionCertainty AS ProjectPlanTaskResponse_VersionCert");
            viewString.Append("ainty, \r\n            T.VersionWorkflowInstanceID AS ProjectPlanTaskResponse_Vers");
            viewString.Append("ionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS ProjectPlanTaskRespon");
            viewString.Append("se_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS ProjectPlanTaskResponse");
            viewString.Append("_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS ProjectPlanTaskRespo");
            viewString.Append("nse_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS ProjectPlanT");
            viewString.Append("askResponse_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS ProjectPlan");
            viewString.Append("TaskResponse_VersionUpdated, \r\n            T.ResponsibleCompanyID AS ProjectPlan");
            viewString.Append("TaskResponse_ResponsibleCompanyID, \r\n            T.ProjectID AS ProjectPlanTaskR");
            viewString.Append("esponse_ProjectID, \r\n            T.ActualTaskID AS ProjectPlanTaskResponse_Actua");
            viewString.Append("lTaskID, \r\n            T.ActualGraphDataID AS ProjectPlanTaskResponse_ActualGrap");
            viewString.Append("hDataID, \r\n            T.ActualGraphDataGroupID AS ProjectPlanTaskResponse_Actua");
            viewString.Append("lGraphDataGroupID, \r\n            T.EstimatedRevenue AS ProjectPlanTaskResponse_E");
            viewString.Append("stimatedRevenue, \r\n            T.VersionPriority AS ProjectPlanTaskResponse_Vers");
            viewString.Append("ionPriority, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjects");
            viewString.Append("StoreContainer.X_ProjectPlanTaskResponse AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.ProjectPlanTaskResponses", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.ProjectPlanTaskResponseDatas
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView562()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2241);
            viewString.Append("\r\n    SELECT VALUE -- Constructing ProjectPlanTaskResponseDatas\r\n        [NKD.Mo");
            viewString.Append("dule.BusinessObjects.ProjectPlanTaskResponseData](T1.ProjectPlanTaskResponseData");
            viewString.Append("_ProjectPlanTaskResponseDataID, T1.ProjectPlanTaskResponseData_ParentProjectPlan");
            viewString.Append("TaskResponseDataID, T1.ProjectPlanTaskResponseData_TableType, T1.ProjectPlanTask");
            viewString.Append("ResponseData_ReferenceID, T1.ProjectPlanTaskResponseData_ProjectPlanTaskResponse");
            viewString.Append("ID, T1.ProjectPlanTaskResponseData_Version, T1.ProjectPlanTaskResponseData_Versi");
            viewString.Append("onAntecedentID, T1.ProjectPlanTaskResponseData_VersionCertainty, T1.ProjectPlanT");
            viewString.Append("askResponseData_VersionWorkflowInstanceID, T1.ProjectPlanTaskResponseData_Versio");
            viewString.Append("nUpdatedBy, T1.ProjectPlanTaskResponseData_VersionDeletedBy, T1.ProjectPlanTaskR");
            viewString.Append("esponseData_VersionOwnerContactID, T1.ProjectPlanTaskResponseData_VersionOwnerCo");
            viewString.Append("mpanyID, T1.ProjectPlanTaskResponseData_VersionUpdated)\r\n    FROM (\r\n        SEL");
            viewString.Append("ECT \r\n            T.ProjectPlanTaskResponseDataID AS ProjectPlanTaskResponseData");
            viewString.Append("_ProjectPlanTaskResponseDataID, \r\n            T.ParentProjectPlanTaskResponseDat");
            viewString.Append("aID AS ProjectPlanTaskResponseData_ParentProjectPlanTaskResponseDataID, \r\n      ");
            viewString.Append("      T.TableType AS ProjectPlanTaskResponseData_TableType, \r\n            T.Refe");
            viewString.Append("renceID AS ProjectPlanTaskResponseData_ReferenceID, \r\n            T.ProjectPlanT");
            viewString.Append("askResponseID AS ProjectPlanTaskResponseData_ProjectPlanTaskResponseID, \r\n      ");
            viewString.Append("      T.Version AS ProjectPlanTaskResponseData_Version, \r\n            T.VersionA");
            viewString.Append("ntecedentID AS ProjectPlanTaskResponseData_VersionAntecedentID, \r\n            T.");
            viewString.Append("VersionCertainty AS ProjectPlanTaskResponseData_VersionCertainty, \r\n            ");
            viewString.Append("T.VersionWorkflowInstanceID AS ProjectPlanTaskResponseData_VersionWorkflowInstan");
            viewString.Append("ceID, \r\n            T.VersionUpdatedBy AS ProjectPlanTaskResponseData_VersionUpd");
            viewString.Append("atedBy, \r\n            T.VersionDeletedBy AS ProjectPlanTaskResponseData_VersionD");
            viewString.Append("eletedBy, \r\n            T.VersionOwnerContactID AS ProjectPlanTaskResponseData_V");
            viewString.Append("ersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS ProjectPlanTaskRe");
            viewString.Append("sponseData_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS ProjectPlanT");
            viewString.Append("askResponseData_VersionUpdated, \r\n            True AS _from0\r\n        FROM NKDMo");
            viewString.Append("duleBusinessObjectsStoreContainer.X_ProjectPlanTaskResponseData AS T\r\n    ) AS T");
            viewString.Append("1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.ProjectPlanTaskResponseDatas", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.ProjectPlanTaskWorkers
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView563()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.ProjectPlanTaskWorkers", "\r\n    SELECT VALUE -- Constructing ProjectPlanTaskWorkers\r\n        [NKD.Module.Bu" +
                    "sinessObjects.ProjectPlanTaskWorker](T1.ProjectPlanTaskWorker_ProjectPlanTaskWor" +
                    "kerID, T1.ProjectPlanTaskWorker_ProjectPlanTaskID, T1.ProjectPlanTaskWorker_Avai" +
                    "lableFromDate, T1.ProjectPlanTaskWorker_AvailableUntilDate, T1.ProjectPlanTaskWo" +
                    "rker_Version, T1.ProjectPlanTaskWorker_VersionAntecedentID, T1.ProjectPlanTaskWo" +
                    "rker_VersionCertainty, T1.ProjectPlanTaskWorker_VersionWorkflowInstanceID, T1.Pr" +
                    "ojectPlanTaskWorker_VersionUpdatedBy, T1.ProjectPlanTaskWorker_VersionDeletedBy," +
                    " T1.ProjectPlanTaskWorker_VersionOwnerContactID, T1.ProjectPlanTaskWorker_Versio" +
                    "nOwnerCompanyID, T1.ProjectPlanTaskWorker_VersionUpdated, T1.ProjectPlanTaskWork" +
                    "er_ExperienceID)\r\n    FROM (\r\n        SELECT \r\n            T.ProjectPlanTaskWork" +
                    "erID AS ProjectPlanTaskWorker_ProjectPlanTaskWorkerID, \r\n            T.ProjectPl" +
                    "anTaskID AS ProjectPlanTaskWorker_ProjectPlanTaskID, \r\n            T.AvailableFr" +
                    "omDate AS ProjectPlanTaskWorker_AvailableFromDate, \r\n            T.AvailableUnti" +
                    "lDate AS ProjectPlanTaskWorker_AvailableUntilDate, \r\n            T.Version AS Pr" +
                    "ojectPlanTaskWorker_Version, \r\n            T.VersionAntecedentID AS ProjectPlanT" +
                    "askWorker_VersionAntecedentID, \r\n            T.VersionCertainty AS ProjectPlanTa" +
                    "skWorker_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS ProjectP" +
                    "lanTaskWorker_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS Pro" +
                    "jectPlanTaskWorker_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS Project" +
                    "PlanTaskWorker_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS Projec" +
                    "tPlanTaskWorker_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS " +
                    "ProjectPlanTaskWorker_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS P" +
                    "rojectPlanTaskWorker_VersionUpdated, \r\n            T.ExperienceID AS ProjectPlan" +
                    "TaskWorker_ExperienceID, \r\n            True AS _from0\r\n        FROM NKDModuleBus" +
                    "inessObjectsStoreContainer.X_ProjectPlanTaskWorker AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.ProspectusProjects
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView564()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2921);
            viewString.Append("\r\n    SELECT VALUE -- Constructing ProspectusProjects\r\n        [NKD.Module.Busin");
            viewString.Append("essObjects.ProspectusProject](T1.ProspectusProject_ProspectusProjectID, T1.Prosp");
            viewString.Append("ectusProject_ProjectID, T1.ProspectusProject_ProspectusProjectName, T1.Prospectu");
            viewString.Append("sProject_CompanyID, T1.ProspectusProject_Geologist, T1.ProspectusProject_Geologi");
            viewString.Append("stContactID, T1.ProspectusProject_GeologyCompanyID, T1.ProspectusProject_ListDat");
            viewString.Append("e, T1.ProspectusProject_Cost, T1.ProspectusProject_CurrencyID, T1.ProspectusProj");
            viewString.Append("ect_Pages, T1.ProspectusProject_CountryID, T1.ProspectusProject_CountryStateID, ");
            viewString.Append("T1.ProspectusProject_Place, T1.ProspectusProject_TenementID, T1.ProspectusProjec");
            viewString.Append("t_ProvinceID, T1.ProspectusProject_Version, T1.ProspectusProject_VersionAntecede");
            viewString.Append("ntID, T1.ProspectusProject_VersionCertainty, T1.ProspectusProject_VersionWorkflo");
            viewString.Append("wInstanceID, T1.ProspectusProject_VersionUpdatedBy, T1.ProspectusProject_Version");
            viewString.Append("DeletedBy, T1.ProspectusProject_VersionOwnerContactID, T1.ProspectusProject_Vers");
            viewString.Append("ionOwnerCompanyID, T1.ProspectusProject_VersionUpdated, T1.ProspectusProject_Com");
            viewString.Append("panyName)\r\n    FROM (\r\n        SELECT \r\n            T.ProspectusProjectID AS Pro");
            viewString.Append("spectusProject_ProspectusProjectID, \r\n            T.ProjectID AS ProspectusProje");
            viewString.Append("ct_ProjectID, \r\n            T.ProspectusProjectName AS ProspectusProject_Prospec");
            viewString.Append("tusProjectName, \r\n            T.CompanyID AS ProspectusProject_CompanyID, \r\n    ");
            viewString.Append("        T.Geologist AS ProspectusProject_Geologist, \r\n            T.GeologistCon");
            viewString.Append("tactID AS ProspectusProject_GeologistContactID, \r\n            T.GeologyCompanyID");
            viewString.Append(" AS ProspectusProject_GeologyCompanyID, \r\n            T.ListDate AS ProspectusPr");
            viewString.Append("oject_ListDate, \r\n            T.Cost AS ProspectusProject_Cost, \r\n            T.");
            viewString.Append("CurrencyID AS ProspectusProject_CurrencyID, \r\n            T.Pages AS ProspectusP");
            viewString.Append("roject_Pages, \r\n            T.CountryID AS ProspectusProject_CountryID, \r\n      ");
            viewString.Append("      T.CountryStateID AS ProspectusProject_CountryStateID, \r\n            T.Plac");
            viewString.Append("e AS ProspectusProject_Place, \r\n            T.TenementID AS ProspectusProject_Te");
            viewString.Append("nementID, \r\n            T.ProvinceID AS ProspectusProject_ProvinceID, \r\n        ");
            viewString.Append("    T.Version AS ProspectusProject_Version, \r\n            T.VersionAntecedentID ");
            viewString.Append("AS ProspectusProject_VersionAntecedentID, \r\n            T.VersionCertainty AS Pr");
            viewString.Append("ospectusProject_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS P");
            viewString.Append("rospectusProject_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS ");
            viewString.Append("ProspectusProject_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS Prospect");
            viewString.Append("usProject_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS ProspectusP");
            viewString.Append("roject_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS Prospectu");
            viewString.Append("sProject_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS ProspectusProj");
            viewString.Append("ect_VersionUpdated, \r\n            T.CompanyName AS ProspectusProject_CompanyName");
            viewString.Append(", \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContai");
            viewString.Append("ner.X_ProspectusProject AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.ProspectusProjects", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.ProspectusProjectCommodities
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView565()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.ProspectusProjectCommodities", "\r\n    SELECT VALUE -- Constructing ProspectusProjectCommodities\r\n        [NKD.Mod" +
                    "ule.BusinessObjects.ProspectusProjectCommodity](T1.ProspectusProjectCommodity_Pr" +
                    "ospectusProjectCommodityID, T1.ProspectusProjectCommodity_ProspectusProjectID, T" +
                    "1.ProspectusProjectCommodity_CommodityID, T1.ProspectusProjectCommodity_Version," +
                    " T1.ProspectusProjectCommodity_VersionAntecedentID, T1.ProspectusProjectCommodit" +
                    "y_VersionCertainty, T1.ProspectusProjectCommodity_VersionWorkflowInstanceID, T1." +
                    "ProspectusProjectCommodity_VersionUpdatedBy, T1.ProspectusProjectCommodity_Versi" +
                    "onDeletedBy, T1.ProspectusProjectCommodity_VersionOwnerContactID, T1.ProspectusP" +
                    "rojectCommodity_VersionOwnerCompanyID, T1.ProspectusProjectCommodity_VersionUpda" +
                    "ted)\r\n    FROM (\r\n        SELECT \r\n            T.ProspectusProjectCommodityID AS" +
                    " ProspectusProjectCommodity_ProspectusProjectCommodityID, \r\n            T.Prospe" +
                    "ctusProjectID AS ProspectusProjectCommodity_ProspectusProjectID, \r\n            T" +
                    ".CommodityID AS ProspectusProjectCommodity_CommodityID, \r\n            T.Version " +
                    "AS ProspectusProjectCommodity_Version, \r\n            T.VersionAntecedentID AS Pr" +
                    "ospectusProjectCommodity_VersionAntecedentID, \r\n            T.VersionCertainty A" +
                    "S ProspectusProjectCommodity_VersionCertainty, \r\n            T.VersionWorkflowIn" +
                    "stanceID AS ProspectusProjectCommodity_VersionWorkflowInstanceID, \r\n            " +
                    "T.VersionUpdatedBy AS ProspectusProjectCommodity_VersionUpdatedBy, \r\n           " +
                    " T.VersionDeletedBy AS ProspectusProjectCommodity_VersionDeletedBy, \r\n          " +
                    "  T.VersionOwnerContactID AS ProspectusProjectCommodity_VersionOwnerContactID, \r" +
                    "\n            T.VersionOwnerCompanyID AS ProspectusProjectCommodity_VersionOwnerC" +
                    "ompanyID, \r\n            T.VersionUpdated AS ProspectusProjectCommodity_VersionUp" +
                    "dated, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreC" +
                    "ontainer.X_ProspectusProjectCommodity AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.Provinces
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView566()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2342);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Provinces\r\n        [NKD.Module.BusinessObject");
            viewString.Append("s.Province](T1.Province_ProvinceID, T1.Province_ProvinceTypeID, T1.Province_Defa");
            viewString.Append("ultProvinceName, T1.Province_ProvinceCode, T1.Province_ProvinceGeography, T1.Pro");
            viewString.Append("vince_MarkerLatitudeWGS84, T1.Province_MarkerLongitudeWGS84, T1.Province_Provinc");
            viewString.Append("eGroupID, T1.Province_CountryID, T1.Province_CountryStateID, T1.Province_Default");
            viewString.Append("Culture, T1.Province_OwnerCompanyID, T1.Province_ResponsibleContactID, T1.Provin");
            viewString.Append("ce_Comment, T1.Province_Version, T1.Province_VersionAntecedentID, T1.Province_Ve");
            viewString.Append("rsionCertainty, T1.Province_VersionWorkflowInstanceID, T1.Province_VersionUpdate");
            viewString.Append("dBy, T1.Province_VersionDeletedBy, T1.Province_VersionOwnerContactID, T1.Provinc");
            viewString.Append("e_VersionOwnerCompanyID, T1.Province_VersionUpdated)\r\n    FROM (\r\n        SELECT");
            viewString.Append(" \r\n            T.ProvinceID AS Province_ProvinceID, \r\n            T.ProvinceType");
            viewString.Append("ID AS Province_ProvinceTypeID, \r\n            T.DefaultProvinceName AS Province_D");
            viewString.Append("efaultProvinceName, \r\n            T.ProvinceCode AS Province_ProvinceCode, \r\n   ");
            viewString.Append("         T.ProvinceGeography AS Province_ProvinceGeography, \r\n            T.Mark");
            viewString.Append("erLatitudeWGS84 AS Province_MarkerLatitudeWGS84, \r\n            T.MarkerLongitude");
            viewString.Append("WGS84 AS Province_MarkerLongitudeWGS84, \r\n            T.ProvinceGroupID AS Provi");
            viewString.Append("nce_ProvinceGroupID, \r\n            T.CountryID AS Province_CountryID, \r\n        ");
            viewString.Append("    T.CountryStateID AS Province_CountryStateID, \r\n            T.DefaultCulture ");
            viewString.Append("AS Province_DefaultCulture, \r\n            T.OwnerCompanyID AS Province_OwnerComp");
            viewString.Append("anyID, \r\n            T.ResponsibleContactID AS Province_ResponsibleContactID, \r\n");
            viewString.Append("            T.Comment AS Province_Comment, \r\n            T.Version AS Province_V");
            viewString.Append("ersion, \r\n            T.VersionAntecedentID AS Province_VersionAntecedentID, \r\n ");
            viewString.Append("           T.VersionCertainty AS Province_VersionCertainty, \r\n            T.Vers");
            viewString.Append("ionWorkflowInstanceID AS Province_VersionWorkflowInstanceID, \r\n            T.Ver");
            viewString.Append("sionUpdatedBy AS Province_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS ");
            viewString.Append("Province_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS Province_Ver");
            viewString.Append("sionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS Province_VersionOwn");
            viewString.Append("erCompanyID, \r\n            T.VersionUpdated AS Province_VersionUpdated, \r\n      ");
            viewString.Append("      True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_Prov");
            viewString.Append("ince AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.Provinces", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.ProvinceAlias
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView567()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.ProvinceAlias", "\r\n    SELECT VALUE -- Constructing ProvinceAlias\r\n        [NKD.Module.BusinessObj" +
                    "ects.ProvinceAlias](T1.ProvinceAlias_ProvinceAliasID, T1.ProvinceAlias_ProvinceI" +
                    "D, T1.ProvinceAlias_Alias, T1.ProvinceAlias_Culture, T1.ProvinceAlias_Priority, " +
                    "T1.ProvinceAlias_Version, T1.ProvinceAlias_VersionAntecedentID, T1.ProvinceAlias" +
                    "_VersionCertainty, T1.ProvinceAlias_VersionWorkflowInstanceID, T1.ProvinceAlias_" +
                    "VersionUpdatedBy, T1.ProvinceAlias_VersionDeletedBy, T1.ProvinceAlias_VersionOwn" +
                    "erContactID, T1.ProvinceAlias_VersionOwnerCompanyID, T1.ProvinceAlias_VersionUpd" +
                    "ated)\r\n    FROM (\r\n        SELECT \r\n            T.ProvinceAliasID AS ProvinceAli" +
                    "as_ProvinceAliasID, \r\n            T.ProvinceID AS ProvinceAlias_ProvinceID, \r\n  " +
                    "          T.Alias AS ProvinceAlias_Alias, \r\n            T.Culture AS ProvinceAli" +
                    "as_Culture, \r\n            T.Priority AS ProvinceAlias_Priority, \r\n            T." +
                    "Version AS ProvinceAlias_Version, \r\n            T.VersionAntecedentID AS Provinc" +
                    "eAlias_VersionAntecedentID, \r\n            T.VersionCertainty AS ProvinceAlias_Ve" +
                    "rsionCertainty, \r\n            T.VersionWorkflowInstanceID AS ProvinceAlias_Versi" +
                    "onWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS ProvinceAlias_VersionU" +
                    "pdatedBy, \r\n            T.VersionDeletedBy AS ProvinceAlias_VersionDeletedBy, \r\n" +
                    "            T.VersionOwnerContactID AS ProvinceAlias_VersionOwnerContactID, \r\n  " +
                    "          T.VersionOwnerCompanyID AS ProvinceAlias_VersionOwnerCompanyID, \r\n    " +
                    "        T.VersionUpdated AS ProvinceAlias_VersionUpdated, \r\n            True AS " +
                    "_from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_ProvinceAlias AS T" +
                    "\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.ProvinceDatas
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView568()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.ProvinceDatas", "\r\n    SELECT VALUE -- Constructing ProvinceDatas\r\n        [NKD.Module.BusinessObj" +
                    "ects.ProvinceData](T1.ProvinceData_ProvinceDataID, T1.ProvinceData_ParentProvinc" +
                    "eDataID, T1.ProvinceData_TableType, T1.ProvinceData_ReferenceID, T1.ProvinceData" +
                    "_ProvinceID, T1.ProvinceData_Version, T1.ProvinceData_VersionAntecedentID, T1.Pr" +
                    "ovinceData_VersionCertainty, T1.ProvinceData_VersionWorkflowInstanceID, T1.Provi" +
                    "nceData_VersionUpdatedBy, T1.ProvinceData_VersionDeletedBy, T1.ProvinceData_Vers" +
                    "ionOwnerContactID, T1.ProvinceData_VersionOwnerCompanyID, T1.ProvinceData_Versio" +
                    "nUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.ProvinceDataID AS Province" +
                    "Data_ProvinceDataID, \r\n            T.ParentProvinceDataID AS ProvinceData_Parent" +
                    "ProvinceDataID, \r\n            T.TableType AS ProvinceData_TableType, \r\n         " +
                    "   T.ReferenceID AS ProvinceData_ReferenceID, \r\n            T.ProvinceID AS Prov" +
                    "inceData_ProvinceID, \r\n            T.Version AS ProvinceData_Version, \r\n        " +
                    "    T.VersionAntecedentID AS ProvinceData_VersionAntecedentID, \r\n            T.V" +
                    "ersionCertainty AS ProvinceData_VersionCertainty, \r\n            T.VersionWorkflo" +
                    "wInstanceID AS ProvinceData_VersionWorkflowInstanceID, \r\n            T.VersionUp" +
                    "datedBy AS ProvinceData_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS Pr" +
                    "ovinceData_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS ProvinceDa" +
                    "ta_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS ProvinceData_" +
                    "VersionOwnerCompanyID, \r\n            T.VersionUpdated AS ProvinceData_VersionUpd" +
                    "ated, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreCo" +
                    "ntainer.X_ProvinceData AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.ProvinceRelations
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView569()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.ProvinceRelations", "\r\n    SELECT VALUE -- Constructing ProvinceRelations\r\n        [NKD.Module.Busines" +
                    "sObjects.ProvinceRelation](T1.ProvinceRelation_ProvinceRelationID, T1.ProvinceRe" +
                    "lation_OriginalProvinceID, T1.ProvinceRelation_RelatedProvinceID, T1.ProvinceRel" +
                    "ation_RelationTypeID, T1.ProvinceRelation_Related, T1.ProvinceRelation_Version, " +
                    "T1.ProvinceRelation_VersionAntecedentID, T1.ProvinceRelation_VersionCertainty, T" +
                    "1.ProvinceRelation_VersionWorkflowInstanceID, T1.ProvinceRelation_VersionUpdated" +
                    "By, T1.ProvinceRelation_VersionDeletedBy, T1.ProvinceRelation_VersionOwnerContac" +
                    "tID, T1.ProvinceRelation_VersionOwnerCompanyID, T1.ProvinceRelation_VersionUpdat" +
                    "ed)\r\n    FROM (\r\n        SELECT \r\n            T.ProvinceRelationID AS ProvinceRe" +
                    "lation_ProvinceRelationID, \r\n            T.OriginalProvinceID AS ProvinceRelatio" +
                    "n_OriginalProvinceID, \r\n            T.RelatedProvinceID AS ProvinceRelation_Rela" +
                    "tedProvinceID, \r\n            T.RelationTypeID AS ProvinceRelation_RelationTypeID" +
                    ", \r\n            T.Related AS ProvinceRelation_Related, \r\n            T.Version A" +
                    "S ProvinceRelation_Version, \r\n            T.VersionAntecedentID AS ProvinceRelat" +
                    "ion_VersionAntecedentID, \r\n            T.VersionCertainty AS ProvinceRelation_Ve" +
                    "rsionCertainty, \r\n            T.VersionWorkflowInstanceID AS ProvinceRelation_Ve" +
                    "rsionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS ProvinceRelation_Ve" +
                    "rsionUpdatedBy, \r\n            T.VersionDeletedBy AS ProvinceRelation_VersionDele" +
                    "tedBy, \r\n            T.VersionOwnerContactID AS ProvinceRelation_VersionOwnerCon" +
                    "tactID, \r\n            T.VersionOwnerCompanyID AS ProvinceRelation_VersionOwnerCo" +
                    "mpanyID, \r\n            T.VersionUpdated AS ProvinceRelation_VersionUpdated, \r\n  " +
                    "          True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_" +
                    "ProvinceRelation AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.Recoveries
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView570()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.Recoveries", "\r\n    SELECT VALUE -- Constructing Recoveries\r\n        [NKD.Module.BusinessObject" +
                    "s.Recovery](T1.Recovery_RecoveryID, T1.Recovery_HeaderID, T1.Recovery_FromDepth," +
                    " T1.Recovery_ToDepth, T1.Recovery_Advance, T1.Recovery_CoreLoss, T1.Recovery_Cor" +
                    "eRecovered, T1.Recovery_Solid, T1.Recovery_Total, T1.Recovery_Confident, T1.Reco" +
                    "very_DrillSizeID, T1.Recovery_CoreSize, T1.Recovery_Comment, T1.Recovery_Version" +
                    ", T1.Recovery_VersionAntecedentID, T1.Recovery_VersionCertainty, T1.Recovery_Ver" +
                    "sionWorkflowInstanceID, T1.Recovery_VersionUpdatedBy, T1.Recovery_VersionDeleted" +
                    "By, T1.Recovery_VersionOwnerContactID, T1.Recovery_VersionOwnerCompanyID, T1.Rec" +
                    "overy_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.RecoveryID AS " +
                    "Recovery_RecoveryID, \r\n            T.HeaderID AS Recovery_HeaderID, \r\n          " +
                    "  T.FromDepth AS Recovery_FromDepth, \r\n            T.ToDepth AS Recovery_ToDepth" +
                    ", \r\n            T.Advance AS Recovery_Advance, \r\n            T.CoreLoss AS Recov" +
                    "ery_CoreLoss, \r\n            T.CoreRecovered AS Recovery_CoreRecovered, \r\n       " +
                    "     T.Solid AS Recovery_Solid, \r\n            T.Total AS Recovery_Total, \r\n     " +
                    "       T.Confident AS Recovery_Confident, \r\n            T.DrillSizeID AS Recover" +
                    "y_DrillSizeID, \r\n            T.CoreSize AS Recovery_CoreSize, \r\n            T.Co" +
                    "mment AS Recovery_Comment, \r\n            T.Version AS Recovery_Version, \r\n      " +
                    "      T.VersionAntecedentID AS Recovery_VersionAntecedentID, \r\n            T.Ver" +
                    "sionCertainty AS Recovery_VersionCertainty, \r\n            T.VersionWorkflowInsta" +
                    "nceID AS Recovery_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS" +
                    " Recovery_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS Recovery_Version" +
                    "DeletedBy, \r\n            T.VersionOwnerContactID AS Recovery_VersionOwnerContact" +
                    "ID, \r\n            T.VersionOwnerCompanyID AS Recovery_VersionOwnerCompanyID, \r\n " +
                    "           T.VersionUpdated AS Recovery_VersionUpdated, \r\n            True AS _f" +
                    "rom0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_Recovery AS T\r\n    )" +
                    " AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.Samples
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView571()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.Samples", "\r\n    SELECT VALUE -- Constructing Samples\r\n        [NKD.Module.BusinessObjects.S" +
                    "ample](T1.Sample_SampleID, T1.Sample_HeaderID, T1.Sample_SampleCategoryID, T1.Sa" +
                    "mple_SampleStateID, T1.Sample_SampleTypeID, T1.Sample_SampleName, T1.Sample_Samp" +
                    "leNumber, T1.Sample_SampleTaken, T1.Sample_FromDepth, T1.Sample_ToDepth, T1.Samp" +
                    "le_SampleMassKg, T1.Sample_DryMassKg, T1.Sample_Version, T1.Sample_VersionAntece" +
                    "dentID, T1.Sample_VersionCertainty, T1.Sample_VersionWorkflowInstanceID, T1.Samp" +
                    "le_VersionUpdatedBy, T1.Sample_VersionDeletedBy, T1.Sample_VersionOwnerContactID" +
                    ", T1.Sample_VersionOwnerCompanyID, T1.Sample_VersionUpdated, T1.Sample_LocationI" +
                    "D)\r\n    FROM (\r\n        SELECT \r\n            T.SampleID AS Sample_SampleID, \r\n  " +
                    "          T.HeaderID AS Sample_HeaderID, \r\n            T.SampleCategoryID AS Sam" +
                    "ple_SampleCategoryID, \r\n            T.SampleStateID AS Sample_SampleStateID, \r\n " +
                    "           T.SampleTypeID AS Sample_SampleTypeID, \r\n            T.SampleName AS " +
                    "Sample_SampleName, \r\n            T.SampleNumber AS Sample_SampleNumber, \r\n      " +
                    "      T.SampleTaken AS Sample_SampleTaken, \r\n            T.FromDepth AS Sample_F" +
                    "romDepth, \r\n            T.ToDepth AS Sample_ToDepth, \r\n            T.SampleMassK" +
                    "g AS Sample_SampleMassKg, \r\n            T.DryMassKg AS Sample_DryMassKg, \r\n     " +
                    "       T.Version AS Sample_Version, \r\n            T.VersionAntecedentID AS Sampl" +
                    "e_VersionAntecedentID, \r\n            T.VersionCertainty AS Sample_VersionCertain" +
                    "ty, \r\n            T.VersionWorkflowInstanceID AS Sample_VersionWorkflowInstanceI" +
                    "D, \r\n            T.VersionUpdatedBy AS Sample_VersionUpdatedBy, \r\n            T." +
                    "VersionDeletedBy AS Sample_VersionDeletedBy, \r\n            T.VersionOwnerContact" +
                    "ID AS Sample_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS Sam" +
                    "ple_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS Sample_VersionUpdat" +
                    "ed, \r\n            T.LocationID AS Sample_LocationID, \r\n            True AS _from" +
                    "0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_Sample AS T\r\n    ) AS T" +
                    "1");
        }
        
        /// <Summary>
        /// return view for NKDC.SecurityBlacklists
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView572()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3203);
            viewString.Append("\r\n    SELECT VALUE -- Constructing SecurityBlacklists\r\n        [NKD.Module.Busin");
            viewString.Append("essObjects.SecurityBlacklist](T1.SecurityBlacklist_SecurityBlacklistID, T1.Secur");
            viewString.Append("ityBlacklist_OwnerApplicationID, T1.SecurityBlacklist_OwnerCompanyID, T1.Securit");
            viewString.Append("yBlacklist_OwnerContactID, T1.SecurityBlacklist_OwnerProjectID, T1.SecurityBlack");
            viewString.Append("list_OwnerEntitySystemType, T1.SecurityBlacklist_OwnerTableType, T1.SecurityBlac");
            viewString.Append("klist_OwnerField, T1.SecurityBlacklist_OwnerReferenceID, T1.SecurityBlacklist_Ac");
            viewString.Append("cessorApplicationID, T1.SecurityBlacklist_AccessorCompanyID, T1.SecurityBlacklis");
            viewString.Append("t_AccessorProjectID, T1.SecurityBlacklist_AccessorContactID, T1.SecurityBlacklis");
            viewString.Append("t_AccessorRoleID, T1.SecurityBlacklist_CanCreate, T1.SecurityBlacklist_CanRead, ");
            viewString.Append("T1.SecurityBlacklist_CanUpdate, T1.SecurityBlacklist_CanDelete, T1.SecurityBlack");
            viewString.Append("list_Version, T1.SecurityBlacklist_VersionAntecedentID, T1.SecurityBlacklist_Ver");
            viewString.Append("sionCertainty, T1.SecurityBlacklist_VersionWorkflowInstanceID, T1.SecurityBlackl");
            viewString.Append("ist_VersionUpdatedBy, T1.SecurityBlacklist_VersionDeletedBy, T1.SecurityBlacklis");
            viewString.Append("t_VersionOwnerContactID, T1.SecurityBlacklist_VersionOwnerCompanyID, T1.Security");
            viewString.Append("Blacklist_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.SecurityBl");
            viewString.Append("acklistID AS SecurityBlacklist_SecurityBlacklistID, \r\n            T.OwnerApplica");
            viewString.Append("tionID AS SecurityBlacklist_OwnerApplicationID, \r\n            T.OwnerCompanyID A");
            viewString.Append("S SecurityBlacklist_OwnerCompanyID, \r\n            T.OwnerContactID AS SecurityBl");
            viewString.Append("acklist_OwnerContactID, \r\n            T.OwnerProjectID AS SecurityBlacklist_Owne");
            viewString.Append("rProjectID, \r\n            T.OwnerEntitySystemType AS SecurityBlacklist_OwnerEnti");
            viewString.Append("tySystemType, \r\n            T.OwnerTableType AS SecurityBlacklist_OwnerTableType");
            viewString.Append(", \r\n            T.OwnerField AS SecurityBlacklist_OwnerField, \r\n            T.Ow");
            viewString.Append("nerReferenceID AS SecurityBlacklist_OwnerReferenceID, \r\n            T.AccessorAp");
            viewString.Append("plicationID AS SecurityBlacklist_AccessorApplicationID, \r\n            T.Accessor");
            viewString.Append("CompanyID AS SecurityBlacklist_AccessorCompanyID, \r\n            T.AccessorProjec");
            viewString.Append("tID AS SecurityBlacklist_AccessorProjectID, \r\n            T.AccessorContactID AS");
            viewString.Append(" SecurityBlacklist_AccessorContactID, \r\n            T.AccessorRoleID AS Security");
            viewString.Append("Blacklist_AccessorRoleID, \r\n            T.CanCreate AS SecurityBlacklist_CanCrea");
            viewString.Append("te, \r\n            T.CanRead AS SecurityBlacklist_CanRead, \r\n            T.CanUpd");
            viewString.Append("ate AS SecurityBlacklist_CanUpdate, \r\n            T.CanDelete AS SecurityBlackli");
            viewString.Append("st_CanDelete, \r\n            T.Version AS SecurityBlacklist_Version, \r\n          ");
            viewString.Append("  T.VersionAntecedentID AS SecurityBlacklist_VersionAntecedentID, \r\n            ");
            viewString.Append("T.VersionCertainty AS SecurityBlacklist_VersionCertainty, \r\n            T.Versio");
            viewString.Append("nWorkflowInstanceID AS SecurityBlacklist_VersionWorkflowInstanceID, \r\n          ");
            viewString.Append("  T.VersionUpdatedBy AS SecurityBlacklist_VersionUpdatedBy, \r\n            T.Vers");
            viewString.Append("ionDeletedBy AS SecurityBlacklist_VersionDeletedBy, \r\n            T.VersionOwner");
            viewString.Append("ContactID AS SecurityBlacklist_VersionOwnerContactID, \r\n            T.VersionOwn");
            viewString.Append("erCompanyID AS SecurityBlacklist_VersionOwnerCompanyID, \r\n            T.VersionU");
            viewString.Append("pdated AS SecurityBlacklist_VersionUpdated, \r\n            True AS _from0\r\n      ");
            viewString.Append("  FROM NKDModuleBusinessObjectsStoreContainer.X_SecurityBlacklist AS T\r\n    ) AS");
            viewString.Append(" T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.SecurityBlacklists", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.SecurityWhitelists
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView573()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3203);
            viewString.Append("\r\n    SELECT VALUE -- Constructing SecurityWhitelists\r\n        [NKD.Module.Busin");
            viewString.Append("essObjects.SecurityWhitelist](T1.SecurityWhitelist_SecurityWhitelistID, T1.Secur");
            viewString.Append("ityWhitelist_OwnerApplicationID, T1.SecurityWhitelist_OwnerCompanyID, T1.Securit");
            viewString.Append("yWhitelist_OwnerContactID, T1.SecurityWhitelist_OwnerProjectID, T1.SecurityWhite");
            viewString.Append("list_OwnerEntitySystemType, T1.SecurityWhitelist_OwnerTableType, T1.SecurityWhit");
            viewString.Append("elist_OwnerField, T1.SecurityWhitelist_OwnerReferenceID, T1.SecurityWhitelist_Ac");
            viewString.Append("cessorApplicationID, T1.SecurityWhitelist_AccessorCompanyID, T1.SecurityWhitelis");
            viewString.Append("t_AccessorProjectID, T1.SecurityWhitelist_AccessorContactID, T1.SecurityWhitelis");
            viewString.Append("t_AccessorRoleID, T1.SecurityWhitelist_CanCreate, T1.SecurityWhitelist_CanRead, ");
            viewString.Append("T1.SecurityWhitelist_CanUpdate, T1.SecurityWhitelist_CanDelete, T1.SecurityWhite");
            viewString.Append("list_Version, T1.SecurityWhitelist_VersionAntecedentID, T1.SecurityWhitelist_Ver");
            viewString.Append("sionCertainty, T1.SecurityWhitelist_VersionWorkflowInstanceID, T1.SecurityWhitel");
            viewString.Append("ist_VersionUpdatedBy, T1.SecurityWhitelist_VersionDeletedBy, T1.SecurityWhitelis");
            viewString.Append("t_VersionOwnerContactID, T1.SecurityWhitelist_VersionOwnerCompanyID, T1.Security");
            viewString.Append("Whitelist_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.SecurityWh");
            viewString.Append("itelistID AS SecurityWhitelist_SecurityWhitelistID, \r\n            T.OwnerApplica");
            viewString.Append("tionID AS SecurityWhitelist_OwnerApplicationID, \r\n            T.OwnerCompanyID A");
            viewString.Append("S SecurityWhitelist_OwnerCompanyID, \r\n            T.OwnerContactID AS SecurityWh");
            viewString.Append("itelist_OwnerContactID, \r\n            T.OwnerProjectID AS SecurityWhitelist_Owne");
            viewString.Append("rProjectID, \r\n            T.OwnerEntitySystemType AS SecurityWhitelist_OwnerEnti");
            viewString.Append("tySystemType, \r\n            T.OwnerTableType AS SecurityWhitelist_OwnerTableType");
            viewString.Append(", \r\n            T.OwnerField AS SecurityWhitelist_OwnerField, \r\n            T.Ow");
            viewString.Append("nerReferenceID AS SecurityWhitelist_OwnerReferenceID, \r\n            T.AccessorAp");
            viewString.Append("plicationID AS SecurityWhitelist_AccessorApplicationID, \r\n            T.Accessor");
            viewString.Append("CompanyID AS SecurityWhitelist_AccessorCompanyID, \r\n            T.AccessorProjec");
            viewString.Append("tID AS SecurityWhitelist_AccessorProjectID, \r\n            T.AccessorContactID AS");
            viewString.Append(" SecurityWhitelist_AccessorContactID, \r\n            T.AccessorRoleID AS Security");
            viewString.Append("Whitelist_AccessorRoleID, \r\n            T.CanCreate AS SecurityWhitelist_CanCrea");
            viewString.Append("te, \r\n            T.CanRead AS SecurityWhitelist_CanRead, \r\n            T.CanUpd");
            viewString.Append("ate AS SecurityWhitelist_CanUpdate, \r\n            T.CanDelete AS SecurityWhiteli");
            viewString.Append("st_CanDelete, \r\n            T.Version AS SecurityWhitelist_Version, \r\n          ");
            viewString.Append("  T.VersionAntecedentID AS SecurityWhitelist_VersionAntecedentID, \r\n            ");
            viewString.Append("T.VersionCertainty AS SecurityWhitelist_VersionCertainty, \r\n            T.Versio");
            viewString.Append("nWorkflowInstanceID AS SecurityWhitelist_VersionWorkflowInstanceID, \r\n          ");
            viewString.Append("  T.VersionUpdatedBy AS SecurityWhitelist_VersionUpdatedBy, \r\n            T.Vers");
            viewString.Append("ionDeletedBy AS SecurityWhitelist_VersionDeletedBy, \r\n            T.VersionOwner");
            viewString.Append("ContactID AS SecurityWhitelist_VersionOwnerContactID, \r\n            T.VersionOwn");
            viewString.Append("erCompanyID AS SecurityWhitelist_VersionOwnerCompanyID, \r\n            T.VersionU");
            viewString.Append("pdated AS SecurityWhitelist_VersionUpdated, \r\n            True AS _from0\r\n      ");
            viewString.Append("  FROM NKDModuleBusinessObjectsStoreContainer.X_SecurityWhitelist AS T\r\n    ) AS");
            viewString.Append(" T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.SecurityWhitelists", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.Servers
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView574()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.Servers", "\r\n    SELECT VALUE -- Constructing Servers\r\n        [NKD.Module.BusinessObjects.S" +
                    "erver](T1.Server_ServerID, T1.Server_Hostname, T1.Server_Domain, T1.Server_IP, T" +
                    "1.Server_ServerUniqueMachineCode1, T1.Server_ServerUniqueMachineCode2, T1.Server" +
                    "_ServerUniqueMachineCode3, T1.Server_Certificate1, T1.Server_Certificate2, T1.Se" +
                    "rver_Version, T1.Server_VersionAntecedentID, T1.Server_VersionCertainty, T1.Serv" +
                    "er_VersionWorkflowInstanceID, T1.Server_VersionUpdatedBy, T1.Server_VersionDelet" +
                    "edBy, T1.Server_VersionOwnerContactID, T1.Server_VersionOwnerCompanyID, T1.Serve" +
                    "r_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.ServerID AS Server" +
                    "_ServerID, \r\n            T.Hostname AS Server_Hostname, \r\n            T.Domain A" +
                    "S Server_Domain, \r\n            T.IP AS Server_IP, \r\n            T.ServerUniqueMa" +
                    "chineCode1 AS Server_ServerUniqueMachineCode1, \r\n            T.ServerUniqueMachi" +
                    "neCode2 AS Server_ServerUniqueMachineCode2, \r\n            T.ServerUniqueMachineC" +
                    "ode3 AS Server_ServerUniqueMachineCode3, \r\n            T.Certificate1 AS Server_" +
                    "Certificate1, \r\n            T.Certificate2 AS Server_Certificate2, \r\n           " +
                    " T.Version AS Server_Version, \r\n            T.VersionAntecedentID AS Server_Vers" +
                    "ionAntecedentID, \r\n            T.VersionCertainty AS Server_VersionCertainty, \r\n" +
                    "            T.VersionWorkflowInstanceID AS Server_VersionWorkflowInstanceID, \r\n " +
                    "           T.VersionUpdatedBy AS Server_VersionUpdatedBy, \r\n            T.Versio" +
                    "nDeletedBy AS Server_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS " +
                    "Server_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS Server_Ve" +
                    "rsionOwnerCompanyID, \r\n            T.VersionUpdated AS Server_VersionUpdated, \r\n" +
                    "            True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer." +
                    "X_Server AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.Surveys
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView575()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2109);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Surveys\r\n        [NKD.Module.BusinessObjects.");
            viewString.Append("Survey](T1.Survey_SurveyID, T1.Survey_HeaderID, T1.Survey_Depth, T1.Survey_Dip, ");
            viewString.Append("T1.Survey_MagneticDip, T1.Survey_MagnetAffected, T1.Survey_OriginalAzimuth, T1.S");
            viewString.Append("urvey_CorrectedAzimuth, T1.Survey_Gravity, T1.Survey_InstrumentModelID, T1.Surve");
            viewString.Append("y_InstrumentAssetID, T1.Survey_Surveyed, T1.Survey_SurveyContactID, T1.Survey_Su");
            viewString.Append("rveyCompanyID, T1.Survey_Version, T1.Survey_VersionAntecedentID, T1.Survey_Versi");
            viewString.Append("onCertainty, T1.Survey_VersionWorkflowInstanceID, T1.Survey_VersionUpdatedBy, T1");
            viewString.Append(".Survey_VersionDeletedBy, T1.Survey_VersionOwnerContactID, T1.Survey_VersionOwne");
            viewString.Append("rCompanyID, T1.Survey_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            ");
            viewString.Append("T.SurveyID AS Survey_SurveyID, \r\n            T.HeaderID AS Survey_HeaderID, \r\n  ");
            viewString.Append("          T.Depth AS Survey_Depth, \r\n            T.Dip AS Survey_Dip, \r\n        ");
            viewString.Append("    T.MagneticDip AS Survey_MagneticDip, \r\n            T.MagnetAffected AS Surve");
            viewString.Append("y_MagnetAffected, \r\n            T.OriginalAzimuth AS Survey_OriginalAzimuth, \r\n ");
            viewString.Append("           T.CorrectedAzimuth AS Survey_CorrectedAzimuth, \r\n            T.Gravit");
            viewString.Append("y AS Survey_Gravity, \r\n            T.InstrumentModelID AS Survey_InstrumentModel");
            viewString.Append("ID, \r\n            T.InstrumentAssetID AS Survey_InstrumentAssetID, \r\n           ");
            viewString.Append(" T.Surveyed AS Survey_Surveyed, \r\n            T.SurveyContactID AS Survey_Survey");
            viewString.Append("ContactID, \r\n            T.SurveyCompanyID AS Survey_SurveyCompanyID, \r\n        ");
            viewString.Append("    T.Version AS Survey_Version, \r\n            T.VersionAntecedentID AS Survey_V");
            viewString.Append("ersionAntecedentID, \r\n            T.VersionCertainty AS Survey_VersionCertainty,");
            viewString.Append(" \r\n            T.VersionWorkflowInstanceID AS Survey_VersionWorkflowInstanceID, ");
            viewString.Append("\r\n            T.VersionUpdatedBy AS Survey_VersionUpdatedBy, \r\n            T.Ver");
            viewString.Append("sionDeletedBy AS Survey_VersionDeletedBy, \r\n            T.VersionOwnerContactID ");
            viewString.Append("AS Survey_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS Survey");
            viewString.Append("_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS Survey_VersionUpdated,");
            viewString.Append(" \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContain");
            viewString.Append("er.X_Survey AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.Surveys", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.Tasks
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView576()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2749);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Tasks\r\n        [NKD.Module.BusinessObjects.Ta");
            viewString.Append("sk](T1.Task_TaskID, T1.Task_TaskName, T1.Task_WorkTypeID, T1.Task_DefaultPriorit");
            viewString.Append("y, T1.Task_EstimatedDuration, T1.Task_EstimatedDurationUnitID, T1.Task_Estimated");
            viewString.Append("LabourCosts, T1.Task_EstimatedCapitalCosts, T1.Task_EstimatedValue, T1.Task_Perf");
            viewString.Append("ormanceMetricParameterID, T1.Task_PerformanceMetricQuantity, T1.Task_Comment, T1");
            viewString.Append(".Task_Version, T1.Task_VersionAntecedentID, T1.Task_VersionCertainty, T1.Task_Ve");
            viewString.Append("rsionWorkflowInstanceID, T1.Task_VersionUpdatedBy, T1.Task_VersionDeletedBy, T1.");
            viewString.Append("Task_VersionOwnerContactID, T1.Task_VersionOwnerCompanyID, T1.Task_VersionUpdate");
            viewString.Append("d, T1.Task_WorkCompanyID, T1.Task_WorkContactID, T1.Task_GraphDataID, T1.Task_Gr");
            viewString.Append("aphDataGroupID, T1.Task_EstimatedIntangibleValue, T1.Task_EstimatedRevenue, T1.T");
            viewString.Append("ask_EstimatedCompletion, T1.Task_EstimatedCompletionUnitID)\r\n    FROM (\r\n       ");
            viewString.Append(" SELECT \r\n            T.TaskID AS Task_TaskID, \r\n            T.TaskName AS Task_");
            viewString.Append("TaskName, \r\n            T.WorkTypeID AS Task_WorkTypeID, \r\n            T.Default");
            viewString.Append("Priority AS Task_DefaultPriority, \r\n            T.EstimatedDuration AS Task_Esti");
            viewString.Append("matedDuration, \r\n            T.EstimatedDurationUnitID AS Task_EstimatedDuration");
            viewString.Append("UnitID, \r\n            T.EstimatedLabourCosts AS Task_EstimatedLabourCosts, \r\n   ");
            viewString.Append("         T.EstimatedCapitalCosts AS Task_EstimatedCapitalCosts, \r\n            T.");
            viewString.Append("EstimatedValue AS Task_EstimatedValue, \r\n            T.PerformanceMetricParamete");
            viewString.Append("rID AS Task_PerformanceMetricParameterID, \r\n            T.PerformanceMetricQuant");
            viewString.Append("ity AS Task_PerformanceMetricQuantity, \r\n            T.Comment AS Task_Comment, ");
            viewString.Append("\r\n            T.Version AS Task_Version, \r\n            T.VersionAntecedentID AS ");
            viewString.Append("Task_VersionAntecedentID, \r\n            T.VersionCertainty AS Task_VersionCertai");
            viewString.Append("nty, \r\n            T.VersionWorkflowInstanceID AS Task_VersionWorkflowInstanceID");
            viewString.Append(", \r\n            T.VersionUpdatedBy AS Task_VersionUpdatedBy, \r\n            T.Ver");
            viewString.Append("sionDeletedBy AS Task_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS");
            viewString.Append(" Task_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS Task_Versi");
            viewString.Append("onOwnerCompanyID, \r\n            T.VersionUpdated AS Task_VersionUpdated, \r\n     ");
            viewString.Append("       T.WorkCompanyID AS Task_WorkCompanyID, \r\n            T.WorkContactID AS T");
            viewString.Append("ask_WorkContactID, \r\n            T.GraphDataID AS Task_GraphDataID, \r\n          ");
            viewString.Append("  T.GraphDataGroupID AS Task_GraphDataGroupID, \r\n            T.EstimatedIntangib");
            viewString.Append("leValue AS Task_EstimatedIntangibleValue, \r\n            T.EstimatedRevenue AS Ta");
            viewString.Append("sk_EstimatedRevenue, \r\n            T.EstimatedCompletion AS Task_EstimatedComple");
            viewString.Append("tion, \r\n            T.EstimatedCompletionUnitID AS Task_EstimatedCompletionUnitI");
            viewString.Append("D, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreConta");
            viewString.Append("iner.X_Task AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.Tasks", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.TaskDatas
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView577()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.TaskDatas", @"
    SELECT VALUE -- Constructing TaskDatas
        [NKD.Module.BusinessObjects.TaskData](T1.TaskData_TaskDataID, T1.TaskData_ParentTaskDataID, T1.TaskData_TableType, T1.TaskData_ReferenceID, T1.TaskData_TaskID, T1.TaskData_Version, T1.TaskData_VersionAntecedentID, T1.TaskData_VersionCertainty, T1.TaskData_VersionWorkflowInstanceID, T1.TaskData_VersionUpdatedBy, T1.TaskData_VersionDeletedBy, T1.TaskData_VersionOwnerContactID, T1.TaskData_VersionOwnerCompanyID, T1.TaskData_VersionUpdated)
    FROM (
        SELECT 
            T.TaskDataID AS TaskData_TaskDataID, 
            T.ParentTaskDataID AS TaskData_ParentTaskDataID, 
            T.TableType AS TaskData_TableType, 
            T.ReferenceID AS TaskData_ReferenceID, 
            T.TaskID AS TaskData_TaskID, 
            T.Version AS TaskData_Version, 
            T.VersionAntecedentID AS TaskData_VersionAntecedentID, 
            T.VersionCertainty AS TaskData_VersionCertainty, 
            T.VersionWorkflowInstanceID AS TaskData_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS TaskData_VersionUpdatedBy, 
            T.VersionDeletedBy AS TaskData_VersionDeletedBy, 
            T.VersionOwnerContactID AS TaskData_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS TaskData_VersionOwnerCompanyID, 
            T.VersionUpdated AS TaskData_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_TaskData AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.TaskRelations
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView578()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.TaskRelations", "\r\n    SELECT VALUE -- Constructing TaskRelations\r\n        [NKD.Module.BusinessObj" +
                    "ects.TaskRelation](T1.TaskRelation_TaskRelationID, T1.TaskRelation_OriginalTaskI" +
                    "D, T1.TaskRelation_RelatedTaskID, T1.TaskRelation_RelationTypeID, T1.TaskRelatio" +
                    "n_Related, T1.TaskRelation_Version, T1.TaskRelation_VersionAntecedentID, T1.Task" +
                    "Relation_VersionCertainty, T1.TaskRelation_VersionWorkflowInstanceID, T1.TaskRel" +
                    "ation_VersionUpdatedBy, T1.TaskRelation_VersionDeletedBy, T1.TaskRelation_Versio" +
                    "nOwnerContactID, T1.TaskRelation_VersionOwnerCompanyID, T1.TaskRelation_VersionU" +
                    "pdated, T1.TaskRelation_Sequence)\r\n    FROM (\r\n        SELECT \r\n            T.Ta" +
                    "skRelationID AS TaskRelation_TaskRelationID, \r\n            T.OriginalTaskID AS T" +
                    "askRelation_OriginalTaskID, \r\n            T.RelatedTaskID AS TaskRelation_Relate" +
                    "dTaskID, \r\n            T.RelationTypeID AS TaskRelation_RelationTypeID, \r\n      " +
                    "      T.Related AS TaskRelation_Related, \r\n            T.Version AS TaskRelation" +
                    "_Version, \r\n            T.VersionAntecedentID AS TaskRelation_VersionAntecedentI" +
                    "D, \r\n            T.VersionCertainty AS TaskRelation_VersionCertainty, \r\n        " +
                    "    T.VersionWorkflowInstanceID AS TaskRelation_VersionWorkflowInstanceID, \r\n   " +
                    "         T.VersionUpdatedBy AS TaskRelation_VersionUpdatedBy, \r\n            T.Ve" +
                    "rsionDeletedBy AS TaskRelation_VersionDeletedBy, \r\n            T.VersionOwnerCon" +
                    "tactID AS TaskRelation_VersionOwnerContactID, \r\n            T.VersionOwnerCompan" +
                    "yID AS TaskRelation_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS Tas" +
                    "kRelation_VersionUpdated, \r\n            T.Sequence AS TaskRelation_Sequence, \r\n " +
                    "           True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X" +
                    "_TaskRelation AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.Tenements
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView579()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.Tenements", "\r\n    SELECT VALUE -- Constructing Tenements\r\n        [NKD.Module.BusinessObjects" +
                    ".Tenement](T1.Tenement_TenementID, T1.Tenement_TenementName, T1.Tenement_Tenemen" +
                    "tNumber, T1.Tenement_TenementDevelopmentPhase, T1.Tenement_CountryID, T1.Tenemen" +
                    "t_TenementBoundaryProvinceID, T1.Tenement_OwnerCompanyID, T1.Tenement_ApprovedBy" +
                    "ContactID, T1.Tenement_ValidFrom, T1.Tenement_Expiry, T1.Tenement_Version, T1.Te" +
                    "nement_VersionAntecedentID, T1.Tenement_VersionCertainty, T1.Tenement_VersionWor" +
                    "kflowInstanceID, T1.Tenement_VersionUpdatedBy, T1.Tenement_VersionDeletedBy, T1." +
                    "Tenement_VersionOwnerContactID, T1.Tenement_VersionOwnerCompanyID, T1.Tenement_V" +
                    "ersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.TenementID AS Tenemen" +
                    "t_TenementID, \r\n            T.TenementName AS Tenement_TenementName, \r\n         " +
                    "   T.TenementNumber AS Tenement_TenementNumber, \r\n            T.TenementDevelopm" +
                    "entPhase AS Tenement_TenementDevelopmentPhase, \r\n            T.CountryID AS Tene" +
                    "ment_CountryID, \r\n            T.TenementBoundaryProvinceID AS Tenement_TenementB" +
                    "oundaryProvinceID, \r\n            T.OwnerCompanyID AS Tenement_OwnerCompanyID, \r\n" +
                    "            T.ApprovedByContactID AS Tenement_ApprovedByContactID, \r\n           " +
                    " T.ValidFrom AS Tenement_ValidFrom, \r\n            T.Expiry AS Tenement_Expiry, \r" +
                    "\n            T.Version AS Tenement_Version, \r\n            T.VersionAntecedentID " +
                    "AS Tenement_VersionAntecedentID, \r\n            T.VersionCertainty AS Tenement_Ve" +
                    "rsionCertainty, \r\n            T.VersionWorkflowInstanceID AS Tenement_VersionWor" +
                    "kflowInstanceID, \r\n            T.VersionUpdatedBy AS Tenement_VersionUpdatedBy, " +
                    "\r\n            T.VersionDeletedBy AS Tenement_VersionDeletedBy, \r\n            T.V" +
                    "ersionOwnerContactID AS Tenement_VersionOwnerContactID, \r\n            T.VersionO" +
                    "wnerCompanyID AS Tenement_VersionOwnerCompanyID, \r\n            T.VersionUpdated " +
                    "AS Tenement_VersionUpdated, \r\n            True AS _from0\r\n        FROM NKDModule" +
                    "BusinessObjectsStoreContainer.X_Tenement AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.TenementCommodities
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView580()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.TenementCommodities", "\r\n    SELECT VALUE -- Constructing TenementCommodities\r\n        [NKD.Module.Busin" +
                    "essObjects.TenementCommodity](T1.TenementCommodity_TenementCommodityID, T1.Tenem" +
                    "entCommodity_TenementID, T1.TenementCommodity_CommodityID, T1.TenementCommodity_" +
                    "Version, T1.TenementCommodity_VersionAntecedentID, T1.TenementCommodity_VersionC" +
                    "ertainty, T1.TenementCommodity_VersionWorkflowInstanceID, T1.TenementCommodity_V" +
                    "ersionUpdatedBy, T1.TenementCommodity_VersionDeletedBy, T1.TenementCommodity_Ver" +
                    "sionOwnerContactID, T1.TenementCommodity_VersionOwnerCompanyID, T1.TenementCommo" +
                    "dity_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.TenementCommodi" +
                    "tyID AS TenementCommodity_TenementCommodityID, \r\n            T.TenementID AS Ten" +
                    "ementCommodity_TenementID, \r\n            T.CommodityID AS TenementCommodity_Comm" +
                    "odityID, \r\n            T.Version AS TenementCommodity_Version, \r\n            T.V" +
                    "ersionAntecedentID AS TenementCommodity_VersionAntecedentID, \r\n            T.Ver" +
                    "sionCertainty AS TenementCommodity_VersionCertainty, \r\n            T.VersionWork" +
                    "flowInstanceID AS TenementCommodity_VersionWorkflowInstanceID, \r\n            T.V" +
                    "ersionUpdatedBy AS TenementCommodity_VersionUpdatedBy, \r\n            T.VersionDe" +
                    "letedBy AS TenementCommodity_VersionDeletedBy, \r\n            T.VersionOwnerConta" +
                    "ctID AS TenementCommodity_VersionOwnerContactID, \r\n            T.VersionOwnerCom" +
                    "panyID AS TenementCommodity_VersionOwnerCompanyID, \r\n            T.VersionUpdate" +
                    "d AS TenementCommodity_VersionUpdated, \r\n            True AS _from0\r\n        FRO" +
                    "M NKDModuleBusinessObjectsStoreContainer.X_TenementCommodity AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.TenementProvinces
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView581()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.TenementProvinces", "\r\n    SELECT VALUE -- Constructing TenementProvinces\r\n        [NKD.Module.Busines" +
                    "sObjects.TenementProvince](T1.TenementProvince_TenementProvinceID, T1.TenementPr" +
                    "ovince_TenementID, T1.TenementProvince_ProvinceID, T1.TenementProvince_Version, " +
                    "T1.TenementProvince_VersionAntecedentID, T1.TenementProvince_VersionCertainty, T" +
                    "1.TenementProvince_VersionWorkflowInstanceID, T1.TenementProvince_VersionUpdated" +
                    "By, T1.TenementProvince_VersionDeletedBy, T1.TenementProvince_VersionOwnerContac" +
                    "tID, T1.TenementProvince_VersionOwnerCompanyID, T1.TenementProvince_VersionUpdat" +
                    "ed)\r\n    FROM (\r\n        SELECT \r\n            T.TenementProvinceID AS TenementPr" +
                    "ovince_TenementProvinceID, \r\n            T.TenementID AS TenementProvince_Teneme" +
                    "ntID, \r\n            T.ProvinceID AS TenementProvince_ProvinceID, \r\n            T" +
                    ".Version AS TenementProvince_Version, \r\n            T.VersionAntecedentID AS Ten" +
                    "ementProvince_VersionAntecedentID, \r\n            T.VersionCertainty AS TenementP" +
                    "rovince_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS TenementP" +
                    "rovince_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS TenementP" +
                    "rovince_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS TenementProvince_V" +
                    "ersionDeletedBy, \r\n            T.VersionOwnerContactID AS TenementProvince_Versi" +
                    "onOwnerContactID, \r\n            T.VersionOwnerCompanyID AS TenementProvince_Vers" +
                    "ionOwnerCompanyID, \r\n            T.VersionUpdated AS TenementProvince_VersionUpd" +
                    "ated, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreCo" +
                    "ntainer.X_TenementProvince AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.TenementRelations
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView582()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.TenementRelations", "\r\n    SELECT VALUE -- Constructing TenementRelations\r\n        [NKD.Module.Busines" +
                    "sObjects.TenementRelation](T1.TenementRelation_TenementRelationID, T1.TenementRe" +
                    "lation_TenementID, T1.TenementRelation_ParentTenementID, T1.TenementRelation_Ver" +
                    "sion, T1.TenementRelation_VersionAntecedentID, T1.TenementRelation_VersionCertai" +
                    "nty, T1.TenementRelation_VersionWorkflowInstanceID, T1.TenementRelation_VersionU" +
                    "pdatedBy, T1.TenementRelation_VersionDeletedBy, T1.TenementRelation_VersionOwner" +
                    "ContactID, T1.TenementRelation_VersionOwnerCompanyID, T1.TenementRelation_Versio" +
                    "nUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.TenementRelationID AS Tene" +
                    "mentRelation_TenementRelationID, \r\n            T.TenementID AS TenementRelation_" +
                    "TenementID, \r\n            T.ParentTenementID AS TenementRelation_ParentTenementI" +
                    "D, \r\n            T.Version AS TenementRelation_Version, \r\n            T.VersionA" +
                    "ntecedentID AS TenementRelation_VersionAntecedentID, \r\n            T.VersionCert" +
                    "ainty AS TenementRelation_VersionCertainty, \r\n            T.VersionWorkflowInsta" +
                    "nceID AS TenementRelation_VersionWorkflowInstanceID, \r\n            T.VersionUpda" +
                    "tedBy AS TenementRelation_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS " +
                    "TenementRelation_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS Tene" +
                    "mentRelation_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS Ten" +
                    "ementRelation_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS TenementR" +
                    "elation_VersionUpdated, \r\n            True AS _from0\r\n        FROM NKDModuleBusi" +
                    "nessObjectsStoreContainer.X_TenementRelation AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.UsageAuditViews
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView583()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.UsageAuditViews", "\r\n    SELECT VALUE -- Constructing UsageAuditViews\r\n        [NKD.Module.BusinessO" +
                    "bjects.UsageAuditView](T1.UsageAuditView_UsageAuditID, T1.UsageAuditView_UsageID" +
                    ", T1.UsageAuditView_UsageAuditTypeID, T1.UsageAuditView_EntitySystemType, T1.Usa" +
                    "geAuditView_EntityID, T1.UsageAuditView_Action, T1.UsageAuditView_Audited, T1.Us" +
                    "ageAuditView_ContactID, T1.UsageAuditView_Version, T1.UsageAuditView_VersionAnte" +
                    "cedentID, T1.UsageAuditView_VersionCertainty, T1.UsageAuditView_VersionWorkflowI" +
                    "nstanceID, T1.UsageAuditView_VersionUpdatedBy, T1.UsageAuditView_VersionDeletedB" +
                    "y, T1.UsageAuditView_VersionOwnerContactID, T1.UsageAuditView_VersionOwnerCompan" +
                    "yID, T1.UsageAuditView_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n           " +
                    " T.UsageAuditID AS UsageAuditView_UsageAuditID, \r\n            T.UsageID AS Usage" +
                    "AuditView_UsageID, \r\n            T.UsageAuditTypeID AS UsageAuditView_UsageAudit" +
                    "TypeID, \r\n            T.EntitySystemType AS UsageAuditView_EntitySystemType, \r\n " +
                    "           T.EntityID AS UsageAuditView_EntityID, \r\n            T.Action AS Usag" +
                    "eAuditView_Action, \r\n            T.Audited AS UsageAuditView_Audited, \r\n        " +
                    "    T.ContactID AS UsageAuditView_ContactID, \r\n            T.Version AS UsageAud" +
                    "itView_Version, \r\n            T.VersionAntecedentID AS UsageAuditView_VersionAnt" +
                    "ecedentID, \r\n            T.VersionCertainty AS UsageAuditView_VersionCertainty, " +
                    "\r\n            T.VersionWorkflowInstanceID AS UsageAuditView_VersionWorkflowInsta" +
                    "nceID, \r\n            T.VersionUpdatedBy AS UsageAuditView_VersionUpdatedBy, \r\n  " +
                    "          T.VersionDeletedBy AS UsageAuditView_VersionDeletedBy, \r\n            T" +
                    ".VersionOwnerContactID AS UsageAuditView_VersionOwnerContactID, \r\n            T." +
                    "VersionOwnerCompanyID AS UsageAuditView_VersionOwnerCompanyID, \r\n            T.V" +
                    "ersionUpdated AS UsageAuditView_VersionUpdated, \r\n            True AS _from0\r\n  " +
                    "      FROM NKDModuleBusinessObjectsStoreContainer.X_UsageAudit AS T\r\n    ) AS T1" +
                    "");
        }
        
        /// <Summary>
        /// return view for NKDC.WaterFlows
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView584()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2312);
            viewString.Append("\r\n    SELECT VALUE -- Constructing WaterFlows\r\n        [NKD.Module.BusinessObjec");
            viewString.Append("ts.WaterFlow](T1.WaterFlow_WaterFlowID, T1.WaterFlow_HeaderID, T1.WaterFlow_Test");
            viewString.Append("Depth, T1.WaterFlow_TestDate, T1.WaterFlow_SampleTypeID, T1.WaterFlow_SampleNumb");
            viewString.Append("er, T1.WaterFlow_FlowTestTypeID, T1.WaterFlow_FlowHeight, T1.WaterFlow_FlowRate,");
            viewString.Append(" T1.WaterFlow_Ph, T1.WaterFlow_TotalDissolvedSolids, T1.WaterFlow_ElectricalCond");
            viewString.Append("uctivity, T1.WaterFlow_Temperature, T1.WaterFlow_Pressure, T1.WaterFlow_Comment,");
            viewString.Append(" T1.WaterFlow_Version, T1.WaterFlow_VersionAntecedentID, T1.WaterFlow_VersionCer");
            viewString.Append("tainty, T1.WaterFlow_VersionWorkflowInstanceID, T1.WaterFlow_VersionUpdatedBy, T");
            viewString.Append("1.WaterFlow_VersionDeletedBy, T1.WaterFlow_VersionOwnerContactID, T1.WaterFlow_V");
            viewString.Append("ersionOwnerCompanyID, T1.WaterFlow_VersionUpdated)\r\n    FROM (\r\n        SELECT \r");
            viewString.Append("\n            T.WaterFlowID AS WaterFlow_WaterFlowID, \r\n            T.HeaderID AS");
            viewString.Append(" WaterFlow_HeaderID, \r\n            T.TestDepth AS WaterFlow_TestDepth, \r\n       ");
            viewString.Append("     T.TestDate AS WaterFlow_TestDate, \r\n            T.SampleTypeID AS WaterFlow");
            viewString.Append("_SampleTypeID, \r\n            T.SampleNumber AS WaterFlow_SampleNumber, \r\n       ");
            viewString.Append("     T.FlowTestTypeID AS WaterFlow_FlowTestTypeID, \r\n            T.FlowHeight AS");
            viewString.Append(" WaterFlow_FlowHeight, \r\n            T.FlowRate AS WaterFlow_FlowRate, \r\n       ");
            viewString.Append("     T.Ph AS WaterFlow_Ph, \r\n            T.TotalDissolvedSolids AS WaterFlow_Tot");
            viewString.Append("alDissolvedSolids, \r\n            T.ElectricalConductivity AS WaterFlow_Electrica");
            viewString.Append("lConductivity, \r\n            T.Temperature AS WaterFlow_Temperature, \r\n         ");
            viewString.Append("   T.Pressure AS WaterFlow_Pressure, \r\n            T.Comment AS WaterFlow_Commen");
            viewString.Append("t, \r\n            T.Version AS WaterFlow_Version, \r\n            T.VersionAntecede");
            viewString.Append("ntID AS WaterFlow_VersionAntecedentID, \r\n            T.VersionCertainty AS Water");
            viewString.Append("Flow_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS WaterFlow_Ve");
            viewString.Append("rsionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS WaterFlow_VersionUp");
            viewString.Append("datedBy, \r\n            T.VersionDeletedBy AS WaterFlow_VersionDeletedBy, \r\n     ");
            viewString.Append("       T.VersionOwnerContactID AS WaterFlow_VersionOwnerContactID, \r\n           ");
            viewString.Append(" T.VersionOwnerCompanyID AS WaterFlow_VersionOwnerCompanyID, \r\n            T.Ver");
            viewString.Append("sionUpdated AS WaterFlow_VersionUpdated, \r\n            True AS _from0\r\n        F");
            viewString.Append("ROM NKDModuleBusinessObjectsStoreContainer.X_WaterFlow AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.WaterFlows", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.LithologyAdjectives
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView585()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.LithologyAdjectives", "\r\n    SELECT VALUE -- Constructing LithologyAdjectives\r\n        [NKD.Module.Busin" +
                    "essObjects.LithologyAdjective](T1.LithologyAdjective_LithologyAdjectiveID, T1.Li" +
                    "thologyAdjective_LithologyID, T1.LithologyAdjective_AdjectiveID, T1.LithologyAdj" +
                    "ective_Sequence, T1.LithologyAdjective_Version, T1.LithologyAdjective_VersionAnt" +
                    "ecedentID, T1.LithologyAdjective_VersionCertainty, T1.LithologyAdjective_Version" +
                    "WorkflowInstanceID, T1.LithologyAdjective_VersionUpdatedBy, T1.LithologyAdjectiv" +
                    "e_VersionDeletedBy, T1.LithologyAdjective_VersionOwnerContactID, T1.LithologyAdj" +
                    "ective_VersionOwnerCompanyID, T1.LithologyAdjective_VersionUpdated)\r\n    FROM (\r" +
                    "\n        SELECT \r\n            T.LithologyAdjectiveID AS LithologyAdjective_Litho" +
                    "logyAdjectiveID, \r\n            T.LithologyID AS LithologyAdjective_LithologyID, " +
                    "\r\n            T.AdjectiveID AS LithologyAdjective_AdjectiveID, \r\n            T.S" +
                    "equence AS LithologyAdjective_Sequence, \r\n            T.Version AS LithologyAdje" +
                    "ctive_Version, \r\n            T.VersionAntecedentID AS LithologyAdjective_Version" +
                    "AntecedentID, \r\n            T.VersionCertainty AS LithologyAdjective_VersionCert" +
                    "ainty, \r\n            T.VersionWorkflowInstanceID AS LithologyAdjective_VersionWo" +
                    "rkflowInstanceID, \r\n            T.VersionUpdatedBy AS LithologyAdjective_Version" +
                    "UpdatedBy, \r\n            T.VersionDeletedBy AS LithologyAdjective_VersionDeleted" +
                    "By, \r\n            T.VersionOwnerContactID AS LithologyAdjective_VersionOwnerCont" +
                    "actID, \r\n            T.VersionOwnerCompanyID AS LithologyAdjective_VersionOwnerC" +
                    "ompanyID, \r\n            T.VersionUpdated AS LithologyAdjective_VersionUpdated, \r" +
                    "\n            True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer" +
                    ".X_LithologyAdjective AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.LithologySedimentaryFeatures
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView586()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.LithologySedimentaryFeatures", "\r\n    SELECT VALUE -- Constructing LithologySedimentaryFeatures\r\n        [NKD.Mod" +
                    "ule.BusinessObjects.LithologySedimentaryFeature](T1.LithologySedimentaryFeature_" +
                    "LithologySedimentaryFeatureID, T1.LithologySedimentaryFeature_LithologyID, T1.Li" +
                    "thologySedimentaryFeature_SedimentaryFeatureID, T1.LithologySedimentaryFeature_S" +
                    "equence, T1.LithologySedimentaryFeature_Version, T1.LithologySedimentaryFeature_" +
                    "VersionAntecedentID, T1.LithologySedimentaryFeature_VersionCertainty, T1.Litholo" +
                    "gySedimentaryFeature_VersionWorkflowInstanceID, T1.LithologySedimentaryFeature_V" +
                    "ersionUpdatedBy, T1.LithologySedimentaryFeature_VersionDeletedBy, T1.LithologySe" +
                    "dimentaryFeature_VersionOwnerContactID, T1.LithologySedimentaryFeature_VersionOw" +
                    "nerCompanyID, T1.LithologySedimentaryFeature_VersionUpdated)\r\n    FROM (\r\n      " +
                    "  SELECT \r\n            T.LithologySedimentaryFeatureID AS LithologySedimentaryFe" +
                    "ature_LithologySedimentaryFeatureID, \r\n            T.LithologyID AS LithologySed" +
                    "imentaryFeature_LithologyID, \r\n            T.SedimentaryFeatureID AS LithologySe" +
                    "dimentaryFeature_SedimentaryFeatureID, \r\n            T.Sequence AS LithologySedi" +
                    "mentaryFeature_Sequence, \r\n            T.Version AS LithologySedimentaryFeature_" +
                    "Version, \r\n            T.VersionAntecedentID AS LithologySedimentaryFeature_Vers" +
                    "ionAntecedentID, \r\n            T.VersionCertainty AS LithologySedimentaryFeature" +
                    "_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS LithologySedimen" +
                    "taryFeature_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS Litho" +
                    "logySedimentaryFeature_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS Lit" +
                    "hologySedimentaryFeature_VersionDeletedBy, \r\n            T.VersionOwnerContactID" +
                    " AS LithologySedimentaryFeature_VersionOwnerContactID, \r\n            T.VersionOw" +
                    "nerCompanyID AS LithologySedimentaryFeature_VersionOwnerCompanyID, \r\n           " +
                    " T.VersionUpdated AS LithologySedimentaryFeature_VersionUpdated, \r\n            T" +
                    "rue AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_LithologySe" +
                    "dimentaryFeature AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.HeaderHolePurposes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView587()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.HeaderHolePurposes", "\r\n    SELECT VALUE -- Constructing HeaderHolePurposes\r\n        [NKD.Module.Busine" +
                    "ssObjects.HeaderHolePurpose](T1.HeaderHolePurpose_HeaderHolePurposeID, T1.Header" +
                    "HolePurpose_HeaderID, T1.HeaderHolePurpose_HolePurposeID, T1.HeaderHolePurpose_S" +
                    "equence, T1.HeaderHolePurpose_Version, T1.HeaderHolePurpose_VersionAntecedentID," +
                    " T1.HeaderHolePurpose_VersionCertainty, T1.HeaderHolePurpose_VersionWorkflowInst" +
                    "anceID, T1.HeaderHolePurpose_VersionUpdatedBy, T1.HeaderHolePurpose_VersionDelet" +
                    "edBy, T1.HeaderHolePurpose_VersionOwnerContactID, T1.HeaderHolePurpose_VersionOw" +
                    "nerCompanyID, T1.HeaderHolePurpose_VersionUpdated)\r\n    FROM (\r\n        SELECT \r" +
                    "\n            T.HeaderHolePurposeID AS HeaderHolePurpose_HeaderHolePurposeID, \r\n " +
                    "           T.HeaderID AS HeaderHolePurpose_HeaderID, \r\n            T.HolePurpose" +
                    "ID AS HeaderHolePurpose_HolePurposeID, \r\n            T.Sequence AS HeaderHolePur" +
                    "pose_Sequence, \r\n            T.Version AS HeaderHolePurpose_Version, \r\n         " +
                    "   T.VersionAntecedentID AS HeaderHolePurpose_VersionAntecedentID, \r\n           " +
                    " T.VersionCertainty AS HeaderHolePurpose_VersionCertainty, \r\n            T.Versi" +
                    "onWorkflowInstanceID AS HeaderHolePurpose_VersionWorkflowInstanceID, \r\n         " +
                    "   T.VersionUpdatedBy AS HeaderHolePurpose_VersionUpdatedBy, \r\n            T.Ver" +
                    "sionDeletedBy AS HeaderHolePurpose_VersionDeletedBy, \r\n            T.VersionOwne" +
                    "rContactID AS HeaderHolePurpose_VersionOwnerContactID, \r\n            T.VersionOw" +
                    "nerCompanyID AS HeaderHolePurpose_VersionOwnerCompanyID, \r\n            T.Version" +
                    "Updated AS HeaderHolePurpose_VersionUpdated, \r\n            True AS _from0\r\n     " +
                    "   FROM NKDModuleBusinessObjectsStoreContainer.X_HeaderHolePurpose AS T\r\n    ) A" +
                    "S T1");
        }
        
        /// <Summary>
        /// return view for NKDC.LithologyRelations
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView588()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.LithologyRelations", "\r\n    SELECT VALUE -- Constructing LithologyRelations\r\n        [NKD.Module.Busine" +
                    "ssObjects.LithologyRelation](T1.LithologyRelation_LithologyRelationID, T1.Lithol" +
                    "ogyRelation_OriginalLithologyID, T1.LithologyRelation_RelatedLithologyID, T1.Lit" +
                    "hologyRelation_RelationTypeID, T1.LithologyRelation_Related, T1.LithologyRelatio" +
                    "n_Sequence, T1.LithologyRelation_Version, T1.LithologyRelation_VersionAntecedent" +
                    "ID, T1.LithologyRelation_VersionCertainty, T1.LithologyRelation_VersionWorkflowI" +
                    "nstanceID, T1.LithologyRelation_VersionUpdatedBy, T1.LithologyRelation_VersionDe" +
                    "letedBy, T1.LithologyRelation_VersionOwnerContactID, T1.LithologyRelation_Versio" +
                    "nOwnerCompanyID, T1.LithologyRelation_VersionUpdated)\r\n    FROM (\r\n        SELEC" +
                    "T \r\n            T.LithologyRelationID AS LithologyRelation_LithologyRelationID, " +
                    "\r\n            T.OriginalLithologyID AS LithologyRelation_OriginalLithologyID, \r\n" +
                    "            T.RelatedLithologyID AS LithologyRelation_RelatedLithologyID, \r\n    " +
                    "        T.RelationTypeID AS LithologyRelation_RelationTypeID, \r\n            T.Re" +
                    "lated AS LithologyRelation_Related, \r\n            T.Sequence AS LithologyRelatio" +
                    "n_Sequence, \r\n            T.Version AS LithologyRelation_Version, \r\n            " +
                    "T.VersionAntecedentID AS LithologyRelation_VersionAntecedentID, \r\n            T." +
                    "VersionCertainty AS LithologyRelation_VersionCertainty, \r\n            T.VersionW" +
                    "orkflowInstanceID AS LithologyRelation_VersionWorkflowInstanceID, \r\n            " +
                    "T.VersionUpdatedBy AS LithologyRelation_VersionUpdatedBy, \r\n            T.Versio" +
                    "nDeletedBy AS LithologyRelation_VersionDeletedBy, \r\n            T.VersionOwnerCo" +
                    "ntactID AS LithologyRelation_VersionOwnerContactID, \r\n            T.VersionOwner" +
                    "CompanyID AS LithologyRelation_VersionOwnerCompanyID, \r\n            T.VersionUpd" +
                    "ated AS LithologyRelation_VersionUpdated, \r\n            True AS _from0\r\n        " +
                    "FROM NKDModuleBusinessObjectsStoreContainer.X_LithologyRelation AS T\r\n    ) AS T" +
                    "1");
        }
        
        /// <Summary>
        /// return view for NKDC.FileDataWorkTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView589()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.FileDataWorkTypes", "\r\n    SELECT VALUE -- Constructing FileDataWorkTypes\r\n        [NKD.Module.Busines" +
                    "sObjects.FileDataWorkType](T1.FileDataWorkType_FileDataWorkTypeID, T1.FileDataWo" +
                    "rkType_FileDataID, T1.FileDataWorkType_WorkTypeID, T1.FileDataWorkType_ProcessNa" +
                    "me, T1.FileDataWorkType_Sequence, T1.FileDataWorkType_Context, T1.FileDataWorkTy" +
                    "pe_Version, T1.FileDataWorkType_VersionAntecedentID, T1.FileDataWorkType_Version" +
                    "Certainty, T1.FileDataWorkType_VersionWorkflowInstanceID, T1.FileDataWorkType_Ve" +
                    "rsionUpdatedBy, T1.FileDataWorkType_VersionDeletedBy, T1.FileDataWorkType_Versio" +
                    "nOwnerContactID, T1.FileDataWorkType_VersionOwnerCompanyID, T1.FileDataWorkType_" +
                    "VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.FileDataWorkTypeID A" +
                    "S FileDataWorkType_FileDataWorkTypeID, \r\n            T.FileDataID AS FileDataWor" +
                    "kType_FileDataID, \r\n            T.WorkTypeID AS FileDataWorkType_WorkTypeID, \r\n " +
                    "           T.ProcessName AS FileDataWorkType_ProcessName, \r\n            T.Sequen" +
                    "ce AS FileDataWorkType_Sequence, \r\n            T.Context AS FileDataWorkType_Con" +
                    "text, \r\n            T.Version AS FileDataWorkType_Version, \r\n            T.Versi" +
                    "onAntecedentID AS FileDataWorkType_VersionAntecedentID, \r\n            T.VersionC" +
                    "ertainty AS FileDataWorkType_VersionCertainty, \r\n            T.VersionWorkflowIn" +
                    "stanceID AS FileDataWorkType_VersionWorkflowInstanceID, \r\n            T.VersionU" +
                    "pdatedBy AS FileDataWorkType_VersionUpdatedBy, \r\n            T.VersionDeletedBy " +
                    "AS FileDataWorkType_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS F" +
                    "ileDataWorkType_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS " +
                    "FileDataWorkType_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS FileDa" +
                    "taWorkType_VersionUpdated, \r\n            True AS _from0\r\n        FROM NKDModuleB" +
                    "usinessObjectsStoreContainer.X_FileDataWorkType AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryWorkflowTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView590()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryWorkflowTypes", "\r\n    SELECT VALUE -- Constructing DictionaryWorkflowTypes\r\n        [NKD.Module.B" +
                    "usinessObjects.DictionaryWorkflowType](T1.DictionaryWorkflowType_WorkflowTypeID," +
                    " T1.DictionaryWorkflowType_StandardWorkflowTypeName, T1.DictionaryWorkflowType_C" +
                    "ustomWorkflowTypeName, T1.DictionaryWorkflowType_Description, T1.DictionaryWorkf" +
                    "lowType_Version, T1.DictionaryWorkflowType_VersionAntecedentID, T1.DictionaryWor" +
                    "kflowType_VersionCertainty, T1.DictionaryWorkflowType_VersionWorkflowInstanceID," +
                    " T1.DictionaryWorkflowType_VersionUpdatedBy, T1.DictionaryWorkflowType_VersionDe" +
                    "letedBy, T1.DictionaryWorkflowType_VersionOwnerContactID, T1.DictionaryWorkflowT" +
                    "ype_VersionOwnerCompanyID, T1.DictionaryWorkflowType_VersionUpdated)\r\n    FROM (" +
                    "\r\n        SELECT \r\n            T.WorkflowTypeID AS DictionaryWorkflowType_Workfl" +
                    "owTypeID, \r\n            T.StandardWorkflowTypeName AS DictionaryWorkflowType_Sta" +
                    "ndardWorkflowTypeName, \r\n            T.CustomWorkflowTypeName AS DictionaryWorkf" +
                    "lowType_CustomWorkflowTypeName, \r\n            T.Description AS DictionaryWorkflo" +
                    "wType_Description, \r\n            T.Version AS DictionaryWorkflowType_Version, \r\n" +
                    "            T.VersionAntecedentID AS DictionaryWorkflowType_VersionAntecedentID," +
                    " \r\n            T.VersionCertainty AS DictionaryWorkflowType_VersionCertainty, \r\n" +
                    "            T.VersionWorkflowInstanceID AS DictionaryWorkflowType_VersionWorkflo" +
                    "wInstanceID, \r\n            T.VersionUpdatedBy AS DictionaryWorkflowType_VersionU" +
                    "pdatedBy, \r\n            T.VersionDeletedBy AS DictionaryWorkflowType_VersionDele" +
                    "tedBy, \r\n            T.VersionOwnerContactID AS DictionaryWorkflowType_VersionOw" +
                    "nerContactID, \r\n            T.VersionOwnerCompanyID AS DictionaryWorkflowType_Ve" +
                    "rsionOwnerCompanyID, \r\n            T.VersionUpdated AS DictionaryWorkflowType_Ve" +
                    "rsionUpdated, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObject" +
                    "sStoreContainer.E_DictionaryWorkflowType AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.Workflows
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView591()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.Workflows", "\r\n    SELECT VALUE -- Constructing Workflows\r\n        [NKD.Module.BusinessObjects" +
                    ".Workflow](T1.Workflow_WorkflowID, T1.Workflow_WorkflowName, T1.Workflow_Workflo" +
                    "wTypeID, T1.Workflow_XAML, T1.Workflow_DLL, T1.Workflow_FullName, T1.Workflow_Ve" +
                    "rsion, T1.Workflow_VersionAntecedentID, T1.Workflow_VersionCertainty, T1.Workflo" +
                    "w_VersionWorkflowInstanceID, T1.Workflow_VersionUpdatedBy, T1.Workflow_VersionDe" +
                    "letedBy, T1.Workflow_VersionOwnerContactID, T1.Workflow_VersionOwnerCompanyID, T" +
                    "1.Workflow_VersionUpdated, T1.Workflow_ApplicationID)\r\n    FROM (\r\n        SELEC" +
                    "T \r\n            T.WorkflowID AS Workflow_WorkflowID, \r\n            T.WorkflowNam" +
                    "e AS Workflow_WorkflowName, \r\n            T.WorkflowTypeID AS Workflow_WorkflowT" +
                    "ypeID, \r\n            T.XAML AS Workflow_XAML, \r\n            T.DLL AS Workflow_DL" +
                    "L, \r\n            T.FullName AS Workflow_FullName, \r\n            T.Version AS Wor" +
                    "kflow_Version, \r\n            T.VersionAntecedentID AS Workflow_VersionAntecedent" +
                    "ID, \r\n            T.VersionCertainty AS Workflow_VersionCertainty, \r\n           " +
                    " T.VersionWorkflowInstanceID AS Workflow_VersionWorkflowInstanceID, \r\n          " +
                    "  T.VersionUpdatedBy AS Workflow_VersionUpdatedBy, \r\n            T.VersionDelete" +
                    "dBy AS Workflow_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS Workf" +
                    "low_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS Workflow_Ver" +
                    "sionOwnerCompanyID, \r\n            T.VersionUpdated AS Workflow_VersionUpdated, \r" +
                    "\n            T.ApplicationID AS Workflow_ApplicationID, \r\n            True AS _f" +
                    "rom0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.E_Workflow AS T\r\n    )" +
                    " AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.AssayGroupSubsamples
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView592()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3096);
            viewString.Append("\r\n    SELECT VALUE -- Constructing AssayGroupSubsamples\r\n        [NKD.Module.Bus");
            viewString.Append("inessObjects.AssayGroupSubsample](T1.AssayGroupSubsample_AssayGroupSubsampleID, ");
            viewString.Append("T1.AssayGroupSubsample_AssayGroupID, T1.AssayGroupSubsample_AssayGroupWorkflowPr");
            viewString.Append("ocedureID, T1.AssayGroupSubsample_Sequence, T1.AssayGroupSubsample_LabSubsampleN");
            viewString.Append("ame, T1.AssayGroupSubsample_SampleAntecedentID, T1.AssayGroupSubsample_FromDepth");
            viewString.Append(", T1.AssayGroupSubsample_ToDepth, T1.AssayGroupSubsample_AgitationMethodID, T1.A");
            viewString.Append("ssayGroupSubsample_DurationProcedureSeconds, T1.AssayGroupSubsample_DurationTota");
            viewString.Append("lSeconds, T1.AssayGroupSubsample_RackBlock, T1.AssayGroupSubsample_RackPosition,");
            viewString.Append(" T1.AssayGroupSubsample_SubsampledBy, T1.AssayGroupSubsample_Subsampled, T1.Assa");
            viewString.Append("yGroupSubsample_Comment, T1.AssayGroupSubsample_Version, T1.AssayGroupSubsample_");
            viewString.Append("VersionAntecedentID, T1.AssayGroupSubsample_VersionCertainty, T1.AssayGroupSubsa");
            viewString.Append("mple_VersionWorkflowInstanceID, T1.AssayGroupSubsample_VersionUpdatedBy, T1.Assa");
            viewString.Append("yGroupSubsample_VersionDeletedBy, T1.AssayGroupSubsample_VersionOwnerContactID, ");
            viewString.Append("T1.AssayGroupSubsample_VersionOwnerCompanyID, T1.AssayGroupSubsample_VersionUpda");
            viewString.Append("ted)\r\n    FROM (\r\n        SELECT \r\n            T.AssayGroupSubsampleID AS AssayG");
            viewString.Append("roupSubsample_AssayGroupSubsampleID, \r\n            T.AssayGroupID AS AssayGroupS");
            viewString.Append("ubsample_AssayGroupID, \r\n            T.AssayGroupWorkflowProcedureID AS AssayGro");
            viewString.Append("upSubsample_AssayGroupWorkflowProcedureID, \r\n            T.Sequence AS AssayGrou");
            viewString.Append("pSubsample_Sequence, \r\n            T.LabSubsampleName AS AssayGroupSubsample_Lab");
            viewString.Append("SubsampleName, \r\n            T.SampleAntecedentID AS AssayGroupSubsample_SampleA");
            viewString.Append("ntecedentID, \r\n            T.FromDepth AS AssayGroupSubsample_FromDepth, \r\n     ");
            viewString.Append("       T.ToDepth AS AssayGroupSubsample_ToDepth, \r\n            T.AgitationMethod");
            viewString.Append("ID AS AssayGroupSubsample_AgitationMethodID, \r\n            T.DurationProcedureSe");
            viewString.Append("conds AS AssayGroupSubsample_DurationProcedureSeconds, \r\n            T.DurationT");
            viewString.Append("otalSeconds AS AssayGroupSubsample_DurationTotalSeconds, \r\n            T.RackBlo");
            viewString.Append("ck AS AssayGroupSubsample_RackBlock, \r\n            T.RackPosition AS AssayGroupS");
            viewString.Append("ubsample_RackPosition, \r\n            T.SubsampledBy AS AssayGroupSubsample_Subsa");
            viewString.Append("mpledBy, \r\n            T.Subsampled AS AssayGroupSubsample_Subsampled, \r\n       ");
            viewString.Append("     T.Comment AS AssayGroupSubsample_Comment, \r\n            T.Version AS AssayG");
            viewString.Append("roupSubsample_Version, \r\n            T.VersionAntecedentID AS AssayGroupSubsampl");
            viewString.Append("e_VersionAntecedentID, \r\n            T.VersionCertainty AS AssayGroupSubsample_V");
            viewString.Append("ersionCertainty, \r\n            T.VersionWorkflowInstanceID AS AssayGroupSubsampl");
            viewString.Append("e_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS AssayGroupSubsa");
            viewString.Append("mple_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS AssayGroupSubsample_V");
            viewString.Append("ersionDeletedBy, \r\n            T.VersionOwnerContactID AS AssayGroupSubsample_Ve");
            viewString.Append("rsionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS AssayGroupSubsampl");
            viewString.Append("e_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS AssayGroupSubsample_V");
            viewString.Append("ersionUpdated, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjec");
            viewString.Append("tsStoreContainer.X_AssayGroupSubsample AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.AssayGroupSubsamples", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.AssayGroupSubsampleChemicals
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView593()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.AssayGroupSubsampleChemicals", "\r\n    SELECT VALUE -- Constructing AssayGroupSubsampleChemicals\r\n        [NKD.Mod" +
                    "ule.BusinessObjects.AssayGroupSubsampleChemical](T1.AssayGroupSubsampleChemical_" +
                    "AssayGroupSubsampleChemicalID, T1.AssayGroupSubsampleChemical_AssayGroupSubsampl" +
                    "eID, T1.AssayGroupSubsampleChemical_ChemicalID, T1.AssayGroupSubsampleChemical_M" +
                    "oles, T1.AssayGroupSubsampleChemical_Version, T1.AssayGroupSubsampleChemical_Ver" +
                    "sionAntecedentID, T1.AssayGroupSubsampleChemical_VersionCertainty, T1.AssayGroup" +
                    "SubsampleChemical_VersionWorkflowInstanceID, T1.AssayGroupSubsampleChemical_Vers" +
                    "ionUpdatedBy, T1.AssayGroupSubsampleChemical_VersionDeletedBy, T1.AssayGroupSubs" +
                    "ampleChemical_VersionOwnerContactID, T1.AssayGroupSubsampleChemical_VersionOwner" +
                    "CompanyID, T1.AssayGroupSubsampleChemical_VersionUpdated)\r\n    FROM (\r\n        S" +
                    "ELECT \r\n            T.AssayGroupSubsampleChemicalID AS AssayGroupSubsampleChemic" +
                    "al_AssayGroupSubsampleChemicalID, \r\n            T.AssayGroupSubsampleID AS Assay" +
                    "GroupSubsampleChemical_AssayGroupSubsampleID, \r\n            T.ChemicalID AS Assa" +
                    "yGroupSubsampleChemical_ChemicalID, \r\n            T.Moles AS AssayGroupSubsample" +
                    "Chemical_Moles, \r\n            T.Version AS AssayGroupSubsampleChemical_Version, " +
                    "\r\n            T.VersionAntecedentID AS AssayGroupSubsampleChemical_VersionAntece" +
                    "dentID, \r\n            T.VersionCertainty AS AssayGroupSubsampleChemical_VersionC" +
                    "ertainty, \r\n            T.VersionWorkflowInstanceID AS AssayGroupSubsampleChemic" +
                    "al_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS AssayGroupSubs" +
                    "ampleChemical_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS AssayGroupSu" +
                    "bsampleChemical_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS Assay" +
                    "GroupSubsampleChemical_VersionOwnerContactID, \r\n            T.VersionOwnerCompan" +
                    "yID AS AssayGroupSubsampleChemical_VersionOwnerCompanyID, \r\n            T.Versio" +
                    "nUpdated AS AssayGroupSubsampleChemical_VersionUpdated, \r\n            True AS _f" +
                    "rom0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_AssayGroupSubsampleC" +
                    "hemical AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.AssayGroupSubsampleEquipments
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView594()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.AssayGroupSubsampleEquipments", "\r\n    SELECT VALUE -- Constructing AssayGroupSubsampleEquipments\r\n        [NKD.Mo" +
                    "dule.BusinessObjects.AssayGroupSubsampleEquipment](T1.AssayGroupSubsampleEquipme" +
                    "nt_AssayGroupSubsampleEquipmentID, T1.AssayGroupSubsampleEquipment_AssayGroupSub" +
                    "sampleID, T1.AssayGroupSubsampleEquipment_AssetID, T1.AssayGroupSubsampleEquipme" +
                    "nt_Version, T1.AssayGroupSubsampleEquipment_VersionAntecedentID, T1.AssayGroupSu" +
                    "bsampleEquipment_VersionCertainty, T1.AssayGroupSubsampleEquipment_VersionWorkfl" +
                    "owInstanceID, T1.AssayGroupSubsampleEquipment_VersionUpdatedBy, T1.AssayGroupSub" +
                    "sampleEquipment_VersionDeletedBy, T1.AssayGroupSubsampleEquipment_VersionOwnerCo" +
                    "ntactID, T1.AssayGroupSubsampleEquipment_VersionOwnerCompanyID, T1.AssayGroupSub" +
                    "sampleEquipment_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.Assa" +
                    "yGroupSubsampleEquipmentID AS AssayGroupSubsampleEquipment_AssayGroupSubsampleEq" +
                    "uipmentID, \r\n            T.AssayGroupSubsampleID AS AssayGroupSubsampleEquipment" +
                    "_AssayGroupSubsampleID, \r\n            T.AssetID AS AssayGroupSubsampleEquipment_" +
                    "AssetID, \r\n            T.Version AS AssayGroupSubsampleEquipment_Version, \r\n    " +
                    "        T.VersionAntecedentID AS AssayGroupSubsampleEquipment_VersionAntecedentI" +
                    "D, \r\n            T.VersionCertainty AS AssayGroupSubsampleEquipment_VersionCerta" +
                    "inty, \r\n            T.VersionWorkflowInstanceID AS AssayGroupSubsampleEquipment_" +
                    "VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS AssayGroupSubsamp" +
                    "leEquipment_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS AssayGroupSubs" +
                    "ampleEquipment_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS AssayG" +
                    "roupSubsampleEquipment_VersionOwnerContactID, \r\n            T.VersionOwnerCompan" +
                    "yID AS AssayGroupSubsampleEquipment_VersionOwnerCompanyID, \r\n            T.Versi" +
                    "onUpdated AS AssayGroupSubsampleEquipment_VersionUpdated, \r\n            True AS " +
                    "_from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_AssayGroupSubsampl" +
                    "eEquipment AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.AssayGroupSubsamplePreconditions
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView595()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2809);
            viewString.Append("\r\n    SELECT VALUE -- Constructing AssayGroupSubsamplePreconditions\r\n        [NK");
            viewString.Append("D.Module.BusinessObjects.AssayGroupSubsamplePrecondition](T1.AssayGroupSubsample");
            viewString.Append("Precondition_AssayGroupSubsamplePreconditionID, T1.AssayGroupSubsamplePreconditi");
            viewString.Append("on_AssayGroupSubsampleID, T1.AssayGroupSubsamplePrecondition_PreconditionName, T");
            viewString.Append("1.AssayGroupSubsamplePrecondition_Version, T1.AssayGroupSubsamplePrecondition_Ve");
            viewString.Append("rsionAntecedentID, T1.AssayGroupSubsamplePrecondition_VersionCertainty, T1.Assay");
            viewString.Append("GroupSubsamplePrecondition_VersionWorkflowInstanceID, T1.AssayGroupSubsamplePrec");
            viewString.Append("ondition_VersionUpdatedBy, T1.AssayGroupSubsamplePrecondition_VersionDeletedBy, ");
            viewString.Append("T1.AssayGroupSubsamplePrecondition_VersionOwnerContactID, T1.AssayGroupSubsample");
            viewString.Append("Precondition_VersionOwnerCompanyID, T1.AssayGroupSubsamplePrecondition_VersionUp");
            viewString.Append("dated, T1.AssayGroupSubsamplePrecondition_AssayPreconditionTypeID, T1.AssayGroup");
            viewString.Append("SubsamplePrecondition_PreconditionParameterID, T1.AssayGroupSubsamplePreconditio");
            viewString.Append("n_PreconditionMinimum, T1.AssayGroupSubsamplePrecondition_PreconditionMaximum, T");
            viewString.Append("1.AssayGroupSubsamplePrecondition_Precondition)\r\n    FROM (\r\n        SELECT \r\n  ");
            viewString.Append("          T.AssayGroupSubsamplePreconditionID AS AssayGroupSubsamplePrecondition");
            viewString.Append("_AssayGroupSubsamplePreconditionID, \r\n            T.AssayGroupSubsampleID AS Ass");
            viewString.Append("ayGroupSubsamplePrecondition_AssayGroupSubsampleID, \r\n            T.Precondition");
            viewString.Append("Name AS AssayGroupSubsamplePrecondition_PreconditionName, \r\n            T.Versio");
            viewString.Append("n AS AssayGroupSubsamplePrecondition_Version, \r\n            T.VersionAntecedentI");
            viewString.Append("D AS AssayGroupSubsamplePrecondition_VersionAntecedentID, \r\n            T.Versio");
            viewString.Append("nCertainty AS AssayGroupSubsamplePrecondition_VersionCertainty, \r\n            T.");
            viewString.Append("VersionWorkflowInstanceID AS AssayGroupSubsamplePrecondition_VersionWorkflowInst");
            viewString.Append("anceID, \r\n            T.VersionUpdatedBy AS AssayGroupSubsamplePrecondition_Vers");
            viewString.Append("ionUpdatedBy, \r\n            T.VersionDeletedBy AS AssayGroupSubsamplePreconditio");
            viewString.Append("n_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS AssayGroupSubsample");
            viewString.Append("Precondition_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS Ass");
            viewString.Append("ayGroupSubsamplePrecondition_VersionOwnerCompanyID, \r\n            T.VersionUpdat");
            viewString.Append("ed AS AssayGroupSubsamplePrecondition_VersionUpdated, \r\n            T.AssayPreco");
            viewString.Append("nditionTypeID AS AssayGroupSubsamplePrecondition_AssayPreconditionTypeID, \r\n    ");
            viewString.Append("        T.PreconditionParameterID AS AssayGroupSubsamplePrecondition_Preconditio");
            viewString.Append("nParameterID, \r\n            T.PreconditionMinimum AS AssayGroupSubsamplePrecondi");
            viewString.Append("tion_PreconditionMinimum, \r\n            T.PreconditionMaximum AS AssayGroupSubsa");
            viewString.Append("mplePrecondition_PreconditionMaximum, \r\n            T.Precondition AS AssayGroup");
            viewString.Append("SubsamplePrecondition_Precondition, \r\n            True AS _from0\r\n        FROM N");
            viewString.Append("KDModuleBusinessObjectsStoreContainer.X_AssayGroupSubsamplePrecondition AS T\r\n  ");
            viewString.Append("  ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.AssayGroupSubsamplePreconditions", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.AssayGroupSubsampleRelations
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView596()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2059);
            viewString.Append("\r\n    SELECT VALUE -- Constructing AssayGroupSubsampleRelations\r\n        [NKD.Mo");
            viewString.Append("dule.BusinessObjects.AssayGroupSubsampleRelation](T1.AssayGroupSubsampleRelation");
            viewString.Append("_AssayGroupSubsampleRelationID, T1.AssayGroupSubsampleRelation_SourceSubsampleID");
            viewString.Append(", T1.AssayGroupSubsampleRelation_DestinationSubsampleID, T1.AssayGroupSubsampleR");
            viewString.Append("elation_Version, T1.AssayGroupSubsampleRelation_VersionAntecedentID, T1.AssayGro");
            viewString.Append("upSubsampleRelation_VersionCertainty, T1.AssayGroupSubsampleRelation_VersionWork");
            viewString.Append("flowInstanceID, T1.AssayGroupSubsampleRelation_VersionUpdatedBy, T1.AssayGroupSu");
            viewString.Append("bsampleRelation_VersionDeletedBy, T1.AssayGroupSubsampleRelation_VersionOwnerCon");
            viewString.Append("tactID, T1.AssayGroupSubsampleRelation_VersionOwnerCompanyID, T1.AssayGroupSubsa");
            viewString.Append("mpleRelation_VersionUpdated, T1.AssayGroupSubsampleRelation_Sequence)\r\n    FROM ");
            viewString.Append("(\r\n        SELECT \r\n            T.AssayGroupSubsampleRelationID AS AssayGroupSub");
            viewString.Append("sampleRelation_AssayGroupSubsampleRelationID, \r\n            T.SourceSubsampleID ");
            viewString.Append("AS AssayGroupSubsampleRelation_SourceSubsampleID, \r\n            T.DestinationSub");
            viewString.Append("sampleID AS AssayGroupSubsampleRelation_DestinationSubsampleID, \r\n            T.");
            viewString.Append("Version AS AssayGroupSubsampleRelation_Version, \r\n            T.VersionAnteceden");
            viewString.Append("tID AS AssayGroupSubsampleRelation_VersionAntecedentID, \r\n            T.VersionC");
            viewString.Append("ertainty AS AssayGroupSubsampleRelation_VersionCertainty, \r\n            T.Versio");
            viewString.Append("nWorkflowInstanceID AS AssayGroupSubsampleRelation_VersionWorkflowInstanceID, \r\n");
            viewString.Append("            T.VersionUpdatedBy AS AssayGroupSubsampleRelation_VersionUpdatedBy, ");
            viewString.Append("\r\n            T.VersionDeletedBy AS AssayGroupSubsampleRelation_VersionDeletedBy");
            viewString.Append(", \r\n            T.VersionOwnerContactID AS AssayGroupSubsampleRelation_VersionOw");
            viewString.Append("nerContactID, \r\n            T.VersionOwnerCompanyID AS AssayGroupSubsampleRelati");
            viewString.Append("on_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS AssayGroupSubsampleR");
            viewString.Append("elation_VersionUpdated, \r\n            T.Sequence AS AssayGroupSubsampleRelation_");
            viewString.Append("Sequence, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjectsSto");
            viewString.Append("reContainer.X_AssayGroupSubsampleRelation AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.AssayGroupSubsampleRelations", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.AssayGroupTestEquipments
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView597()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.AssayGroupTestEquipments", "\r\n    SELECT VALUE -- Constructing AssayGroupTestEquipments\r\n        [NKD.Module." +
                    "BusinessObjects.AssayGroupTestEquipment](T1.AssayGroupTestEquipment_AssayGroupTe" +
                    "stEquipmentID, T1.AssayGroupTestEquipment_AssayGroupTestID, T1.AssayGroupTestEqu" +
                    "ipment_AssetID, T1.AssayGroupTestEquipment_Version, T1.AssayGroupTestEquipment_V" +
                    "ersionAntecedentID, T1.AssayGroupTestEquipment_VersionCertainty, T1.AssayGroupTe" +
                    "stEquipment_VersionWorkflowInstanceID, T1.AssayGroupTestEquipment_VersionUpdated" +
                    "By, T1.AssayGroupTestEquipment_VersionDeletedBy, T1.AssayGroupTestEquipment_Vers" +
                    "ionOwnerContactID, T1.AssayGroupTestEquipment_VersionOwnerCompanyID, T1.AssayGro" +
                    "upTestEquipment_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.Assa" +
                    "yGroupTestEquipmentID AS AssayGroupTestEquipment_AssayGroupTestEquipmentID, \r\n  " +
                    "          T.AssayGroupTestID AS AssayGroupTestEquipment_AssayGroupTestID, \r\n    " +
                    "        T.AssetID AS AssayGroupTestEquipment_AssetID, \r\n            T.Version AS" +
                    " AssayGroupTestEquipment_Version, \r\n            T.VersionAntecedentID AS AssayGr" +
                    "oupTestEquipment_VersionAntecedentID, \r\n            T.VersionCertainty AS AssayG" +
                    "roupTestEquipment_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS" +
                    " AssayGroupTestEquipment_VersionWorkflowInstanceID, \r\n            T.VersionUpdat" +
                    "edBy AS AssayGroupTestEquipment_VersionUpdatedBy, \r\n            T.VersionDeleted" +
                    "By AS AssayGroupTestEquipment_VersionDeletedBy, \r\n            T.VersionOwnerCont" +
                    "actID AS AssayGroupTestEquipment_VersionOwnerContactID, \r\n            T.VersionO" +
                    "wnerCompanyID AS AssayGroupTestEquipment_VersionOwnerCompanyID, \r\n            T." +
                    "VersionUpdated AS AssayGroupTestEquipment_VersionUpdated, \r\n            True AS " +
                    "_from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_AssayGroupTestEqui" +
                    "pment AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.AssayGroupWorkflows
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView598()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.AssayGroupWorkflows", "\r\n    SELECT VALUE -- Constructing AssayGroupWorkflows\r\n        [NKD.Module.Busin" +
                    "essObjects.AssayGroupWorkflow](T1.AssayGroupWorkflow_AssayGroupWorkflowID, T1.As" +
                    "sayGroupWorkflow_AssayGroupID, T1.AssayGroupWorkflow_WorkflowName, T1.AssayGroup" +
                    "Workflow_WorkflowID, T1.AssayGroupWorkflow_Version, T1.AssayGroupWorkflow_Versio" +
                    "nAntecedentID, T1.AssayGroupWorkflow_VersionCertainty, T1.AssayGroupWorkflow_Ver" +
                    "sionWorkflowInstanceID, T1.AssayGroupWorkflow_VersionUpdatedBy, T1.AssayGroupWor" +
                    "kflow_VersionDeletedBy, T1.AssayGroupWorkflow_VersionOwnerContactID, T1.AssayGro" +
                    "upWorkflow_VersionOwnerCompanyID, T1.AssayGroupWorkflow_VersionUpdated)\r\n    FRO" +
                    "M (\r\n        SELECT \r\n            T.AssayGroupWorkflowID AS AssayGroupWorkflow_A" +
                    "ssayGroupWorkflowID, \r\n            T.AssayGroupID AS AssayGroupWorkflow_AssayGro" +
                    "upID, \r\n            T.WorkflowName AS AssayGroupWorkflow_WorkflowName, \r\n       " +
                    "     T.WorkflowID AS AssayGroupWorkflow_WorkflowID, \r\n            T.Version AS A" +
                    "ssayGroupWorkflow_Version, \r\n            T.VersionAntecedentID AS AssayGroupWork" +
                    "flow_VersionAntecedentID, \r\n            T.VersionCertainty AS AssayGroupWorkflow" +
                    "_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS AssayGroupWorkfl" +
                    "ow_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS AssayGroupWork" +
                    "flow_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS AssayGroupWorkflow_Ve" +
                    "rsionDeletedBy, \r\n            T.VersionOwnerContactID AS AssayGroupWorkflow_Vers" +
                    "ionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS AssayGroupWorkflow_V" +
                    "ersionOwnerCompanyID, \r\n            T.VersionUpdated AS AssayGroupWorkflow_Versi" +
                    "onUpdated, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjectsSt" +
                    "oreContainer.X_AssayGroupWorkflow AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.AssayGroupWorkflowProcedures
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView599()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2208);
            viewString.Append("\r\n    SELECT VALUE -- Constructing AssayGroupWorkflowProcedures\r\n        [NKD.Mo");
            viewString.Append("dule.BusinessObjects.AssayGroupWorkflowProcedure](T1.AssayGroupWorkflowProcedure");
            viewString.Append("_AssayGroupWorkflowProcedureID, T1.AssayGroupWorkflowProcedure_AssayGroupWorkflo");
            viewString.Append("wID, T1.AssayGroupWorkflowProcedure_AssayProcedureProtocolID, T1.AssayGroupWorkf");
            viewString.Append("lowProcedure_WorkflowStateName, T1.AssayGroupWorkflowProcedure_Sequence, T1.Assa");
            viewString.Append("yGroupWorkflowProcedure_Version, T1.AssayGroupWorkflowProcedure_VersionAnteceden");
            viewString.Append("tID, T1.AssayGroupWorkflowProcedure_VersionCertainty, T1.AssayGroupWorkflowProce");
            viewString.Append("dure_VersionWorkflowInstanceID, T1.AssayGroupWorkflowProcedure_VersionUpdatedBy,");
            viewString.Append(" T1.AssayGroupWorkflowProcedure_VersionDeletedBy, T1.AssayGroupWorkflowProcedure");
            viewString.Append("_VersionOwnerContactID, T1.AssayGroupWorkflowProcedure_VersionOwnerCompanyID, T1");
            viewString.Append(".AssayGroupWorkflowProcedure_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n     ");
            viewString.Append("       T.AssayGroupWorkflowProcedureID AS AssayGroupWorkflowProcedure_AssayGroup");
            viewString.Append("WorkflowProcedureID, \r\n            T.AssayGroupWorkflowID AS AssayGroupWorkflowP");
            viewString.Append("rocedure_AssayGroupWorkflowID, \r\n            T.AssayProcedureProtocolID AS Assay");
            viewString.Append("GroupWorkflowProcedure_AssayProcedureProtocolID, \r\n            T.WorkflowStateNa");
            viewString.Append("me AS AssayGroupWorkflowProcedure_WorkflowStateName, \r\n            T.Sequence AS");
            viewString.Append(" AssayGroupWorkflowProcedure_Sequence, \r\n            T.Version AS AssayGroupWork");
            viewString.Append("flowProcedure_Version, \r\n            T.VersionAntecedentID AS AssayGroupWorkflow");
            viewString.Append("Procedure_VersionAntecedentID, \r\n            T.VersionCertainty AS AssayGroupWor");
            viewString.Append("kflowProcedure_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS As");
            viewString.Append("sayGroupWorkflowProcedure_VersionWorkflowInstanceID, \r\n            T.VersionUpda");
            viewString.Append("tedBy AS AssayGroupWorkflowProcedure_VersionUpdatedBy, \r\n            T.VersionDe");
            viewString.Append("letedBy AS AssayGroupWorkflowProcedure_VersionDeletedBy, \r\n            T.Version");
            viewString.Append("OwnerContactID AS AssayGroupWorkflowProcedure_VersionOwnerContactID, \r\n         ");
            viewString.Append("   T.VersionOwnerCompanyID AS AssayGroupWorkflowProcedure_VersionOwnerCompanyID,");
            viewString.Append(" \r\n            T.VersionUpdated AS AssayGroupWorkflowProcedure_VersionUpdated, \r");
            viewString.Append("\n            True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer");
            viewString.Append(".X_AssayGroupWorkflowProcedure AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.AssayGroupWorkflowProcedures", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.AssayProcedures
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView600()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.AssayProcedures", "\r\n    SELECT VALUE -- Constructing AssayProcedures\r\n        [NKD.Module.BusinessO" +
                    "bjects.AssayProcedure](T1.AssayProcedure_AssayProcedureID, T1.AssayProcedure_Ass" +
                    "ayProcedureTypeID, T1.AssayProcedure_AssayProcedureName, T1.AssayProcedure_Versi" +
                    "on, T1.AssayProcedure_VersionAntecedentID, T1.AssayProcedure_VersionCertainty, T" +
                    "1.AssayProcedure_VersionWorkflowInstanceID, T1.AssayProcedure_VersionUpdatedBy, " +
                    "T1.AssayProcedure_VersionDeletedBy, T1.AssayProcedure_VersionOwnerContactID, T1." +
                    "AssayProcedure_VersionOwnerCompanyID, T1.AssayProcedure_VersionUpdated)\r\n    FRO" +
                    "M (\r\n        SELECT \r\n            T.AssayProcedureID AS AssayProcedure_AssayProc" +
                    "edureID, \r\n            T.AssayProcedureTypeID AS AssayProcedure_AssayProcedureTy" +
                    "peID, \r\n            T.AssayProcedureName AS AssayProcedure_AssayProcedureName, \r" +
                    "\n            T.Version AS AssayProcedure_Version, \r\n            T.VersionAnteced" +
                    "entID AS AssayProcedure_VersionAntecedentID, \r\n            T.VersionCertainty AS" +
                    " AssayProcedure_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS A" +
                    "ssayProcedure_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS Ass" +
                    "ayProcedure_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS AssayProcedure" +
                    "_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS AssayProcedure_Versi" +
                    "onOwnerContactID, \r\n            T.VersionOwnerCompanyID AS AssayProcedure_Versio" +
                    "nOwnerCompanyID, \r\n            T.VersionUpdated AS AssayProcedure_VersionUpdated" +
                    ", \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContai" +
                    "ner.X_AssayProcedure AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.AssayProcedureProtocols
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView601()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2261);
            viewString.Append("\r\n    SELECT VALUE -- Constructing AssayProcedureProtocols\r\n        [NKD.Module.");
            viewString.Append("BusinessObjects.AssayProcedureProtocol](T1.AssayProcedureProtocol_AssayProcedure");
            viewString.Append("ProtocolID, T1.AssayProcedureProtocol_AssayProcedureProtocolName, T1.AssayProced");
            viewString.Append("ureProtocol_AssayProcedureID, T1.AssayProcedureProtocol_AssayProcedureCompliance");
            viewString.Append("ID, T1.AssayProcedureProtocol_AssayProcedureMethodTypeID, T1.AssayProcedureProto");
            viewString.Append("col_AssayProcedureTechniqueID, T1.AssayProcedureProtocol_Version, T1.AssayProced");
            viewString.Append("ureProtocol_VersionAntecedentID, T1.AssayProcedureProtocol_VersionCertainty, T1.");
            viewString.Append("AssayProcedureProtocol_VersionWorkflowInstanceID, T1.AssayProcedureProtocol_Vers");
            viewString.Append("ionUpdatedBy, T1.AssayProcedureProtocol_VersionDeletedBy, T1.AssayProcedureProto");
            viewString.Append("col_VersionOwnerContactID, T1.AssayProcedureProtocol_VersionOwnerCompanyID, T1.A");
            viewString.Append("ssayProcedureProtocol_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            ");
            viewString.Append("T.AssayProcedureProtocolID AS AssayProcedureProtocol_AssayProcedureProtocolID, \r");
            viewString.Append("\n            T.AssayProcedureProtocolName AS AssayProcedureProtocol_AssayProcedu");
            viewString.Append("reProtocolName, \r\n            T.AssayProcedureID AS AssayProcedureProtocol_Assay");
            viewString.Append("ProcedureID, \r\n            T.AssayProcedureComplianceID AS AssayProcedureProtoco");
            viewString.Append("l_AssayProcedureComplianceID, \r\n            T.AssayProcedureMethodTypeID AS Assa");
            viewString.Append("yProcedureProtocol_AssayProcedureMethodTypeID, \r\n            T.AssayProcedureTec");
            viewString.Append("hniqueID AS AssayProcedureProtocol_AssayProcedureTechniqueID, \r\n            T.Ve");
            viewString.Append("rsion AS AssayProcedureProtocol_Version, \r\n            T.VersionAntecedentID AS ");
            viewString.Append("AssayProcedureProtocol_VersionAntecedentID, \r\n            T.VersionCertainty AS ");
            viewString.Append("AssayProcedureProtocol_VersionCertainty, \r\n            T.VersionWorkflowInstance");
            viewString.Append("ID AS AssayProcedureProtocol_VersionWorkflowInstanceID, \r\n            T.VersionU");
            viewString.Append("pdatedBy AS AssayProcedureProtocol_VersionUpdatedBy, \r\n            T.VersionDele");
            viewString.Append("tedBy AS AssayProcedureProtocol_VersionDeletedBy, \r\n            T.VersionOwnerCo");
            viewString.Append("ntactID AS AssayProcedureProtocol_VersionOwnerContactID, \r\n            T.Version");
            viewString.Append("OwnerCompanyID AS AssayProcedureProtocol_VersionOwnerCompanyID, \r\n            T.");
            viewString.Append("VersionUpdated AS AssayProcedureProtocol_VersionUpdated, \r\n            True AS _");
            viewString.Append("from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_AssayProcedureProto");
            viewString.Append("col AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.AssayProcedureProtocols", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.AssayProcedureProtocolEquipments
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView602()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2048);
            viewString.Append("\r\n    SELECT VALUE -- Constructing AssayProcedureProtocolEquipments\r\n        [NK");
            viewString.Append("D.Module.BusinessObjects.AssayProcedureProtocolEquipment](T1.AssayProcedureProto");
            viewString.Append("colEquipment_AssayProcedureProtocolEquipmentID, T1.AssayProcedureProtocolEquipme");
            viewString.Append("nt_AssayProcedureProtocolID, T1.AssayProcedureProtocolEquipment_ModelID, T1.Assa");
            viewString.Append("yProcedureProtocolEquipment_Version, T1.AssayProcedureProtocolEquipment_VersionA");
            viewString.Append("ntecedentID, T1.AssayProcedureProtocolEquipment_VersionCertainty, T1.AssayProced");
            viewString.Append("ureProtocolEquipment_VersionWorkflowInstanceID, T1.AssayProcedureProtocolEquipme");
            viewString.Append("nt_VersionUpdatedBy, T1.AssayProcedureProtocolEquipment_VersionDeletedBy, T1.Ass");
            viewString.Append("ayProcedureProtocolEquipment_VersionOwnerContactID, T1.AssayProcedureProtocolEqu");
            viewString.Append("ipment_VersionOwnerCompanyID, T1.AssayProcedureProtocolEquipment_VersionUpdated)");
            viewString.Append("\r\n    FROM (\r\n        SELECT \r\n            T.AssayProcedureProtocolEquipmentID A");
            viewString.Append("S AssayProcedureProtocolEquipment_AssayProcedureProtocolEquipmentID, \r\n         ");
            viewString.Append("   T.AssayProcedureProtocolID AS AssayProcedureProtocolEquipment_AssayProcedureP");
            viewString.Append("rotocolID, \r\n            T.ModelID AS AssayProcedureProtocolEquipment_ModelID, \r");
            viewString.Append("\n            T.Version AS AssayProcedureProtocolEquipment_Version, \r\n           ");
            viewString.Append(" T.VersionAntecedentID AS AssayProcedureProtocolEquipment_VersionAntecedentID, \r");
            viewString.Append("\n            T.VersionCertainty AS AssayProcedureProtocolEquipment_VersionCertai");
            viewString.Append("nty, \r\n            T.VersionWorkflowInstanceID AS AssayProcedureProtocolEquipmen");
            viewString.Append("t_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS AssayProcedureP");
            viewString.Append("rotocolEquipment_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS AssayProc");
            viewString.Append("edureProtocolEquipment_VersionDeletedBy, \r\n            T.VersionOwnerContactID A");
            viewString.Append("S AssayProcedureProtocolEquipment_VersionOwnerContactID, \r\n            T.Version");
            viewString.Append("OwnerCompanyID AS AssayProcedureProtocolEquipment_VersionOwnerCompanyID, \r\n     ");
            viewString.Append("       T.VersionUpdated AS AssayProcedureProtocolEquipment_VersionUpdated, \r\n   ");
            viewString.Append("         True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_A");
            viewString.Append("ssayProcedureProtocolEquipment AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.AssayProcedureProtocolEquipments", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryAgitationMethods
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView603()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2887);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryAgitationMethods\r\n        [NKD.Modu");
            viewString.Append("le.BusinessObjects.DictionaryAgitationMethod](T1.DictionaryAgitationMethod_Agita");
            viewString.Append("tionMethodID, T1.DictionaryAgitationMethod_StandardAgitationMethodName, T1.Dicti");
            viewString.Append("onaryAgitationMethod_CoalAgitationMethodName, T1.DictionaryAgitationMethod_GoldA");
            viewString.Append("gitationMethodName, T1.DictionaryAgitationMethod_CustomAgitationMethodName, T1.D");
            viewString.Append("ictionaryAgitationMethod_UnitID, T1.DictionaryAgitationMethod_AgitatedUnits, T1.");
            viewString.Append("DictionaryAgitationMethod_Description, T1.DictionaryAgitationMethod_FullDescript");
            viewString.Append("ion, T1.DictionaryAgitationMethod_Thumbnail, T1.DictionaryAgitationMethod_Origin");
            viewString.Append("alFileDataID, T1.DictionaryAgitationMethod_Version, T1.DictionaryAgitationMethod");
            viewString.Append("_VersionAntecedentID, T1.DictionaryAgitationMethod_VersionCertainty, T1.Dictiona");
            viewString.Append("ryAgitationMethod_VersionWorkflowInstanceID, T1.DictionaryAgitationMethod_Versio");
            viewString.Append("nUpdatedBy, T1.DictionaryAgitationMethod_VersionDeletedBy, T1.DictionaryAgitatio");
            viewString.Append("nMethod_VersionOwnerContactID, T1.DictionaryAgitationMethod_VersionOwnerCompanyI");
            viewString.Append("D, T1.DictionaryAgitationMethod_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n  ");
            viewString.Append("          T.AgitationMethodID AS DictionaryAgitationMethod_AgitationMethodID, \r\n");
            viewString.Append("            T.StandardAgitationMethodName AS DictionaryAgitationMethod_StandardA");
            viewString.Append("gitationMethodName, \r\n            T.CoalAgitationMethodName AS DictionaryAgitati");
            viewString.Append("onMethod_CoalAgitationMethodName, \r\n            T.GoldAgitationMethodName AS Dic");
            viewString.Append("tionaryAgitationMethod_GoldAgitationMethodName, \r\n            T.CustomAgitationM");
            viewString.Append("ethodName AS DictionaryAgitationMethod_CustomAgitationMethodName, \r\n            ");
            viewString.Append("T.UnitID AS DictionaryAgitationMethod_UnitID, \r\n            T.AgitatedUnits AS D");
            viewString.Append("ictionaryAgitationMethod_AgitatedUnits, \r\n            T.Description AS Dictionar");
            viewString.Append("yAgitationMethod_Description, \r\n            T.FullDescription AS DictionaryAgita");
            viewString.Append("tionMethod_FullDescription, \r\n            T.Thumbnail AS DictionaryAgitationMeth");
            viewString.Append("od_Thumbnail, \r\n            T.OriginalFileDataID AS DictionaryAgitationMethod_Or");
            viewString.Append("iginalFileDataID, \r\n            T.Version AS DictionaryAgitationMethod_Version, ");
            viewString.Append("\r\n            T.VersionAntecedentID AS DictionaryAgitationMethod_VersionAntecede");
            viewString.Append("ntID, \r\n            T.VersionCertainty AS DictionaryAgitationMethod_VersionCerta");
            viewString.Append("inty, \r\n            T.VersionWorkflowInstanceID AS DictionaryAgitationMethod_Ver");
            viewString.Append("sionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS DictionaryAgitationM");
            viewString.Append("ethod_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS DictionaryAgitationM");
            viewString.Append("ethod_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS DictionaryAgita");
            viewString.Append("tionMethod_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS Dicti");
            viewString.Append("onaryAgitationMethod_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS Di");
            viewString.Append("ctionaryAgitationMethod_VersionUpdated, \r\n            True AS _from0\r\n        FR");
            viewString.Append("OM NKDModuleBusinessObjectsStoreContainer.X_DictionaryAgitationMethod AS T\r\n    ");
            viewString.Append(") AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryAgitationMethods", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryAssayProcedureMethods
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView604()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2942);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryAssayProcedureMethods\r\n        [NKD");
            viewString.Append(".Module.BusinessObjects.DictionaryAssayProcedureMethod](T1.DictionaryAssayProced");
            viewString.Append("ureMethod_AssayProcedureMethodID, T1.DictionaryAssayProcedureMethod_StandardAssa");
            viewString.Append("yProcedureMethodName, T1.DictionaryAssayProcedureMethod_CoalAssayProcedureMethod");
            viewString.Append("Name, T1.DictionaryAssayProcedureMethod_GoldAssayProcedureMethodName, T1.Diction");
            viewString.Append("aryAssayProcedureMethod_CustomAssayProcedureMethodName, T1.DictionaryAssayProced");
            viewString.Append("ureMethod_Description, T1.DictionaryAssayProcedureMethod_FullDescription, T1.Dic");
            viewString.Append("tionaryAssayProcedureMethod_Thumbnail, T1.DictionaryAssayProcedureMethod_Origina");
            viewString.Append("lFileDataID, T1.DictionaryAssayProcedureMethod_Version, T1.DictionaryAssayProced");
            viewString.Append("ureMethod_VersionAntecedentID, T1.DictionaryAssayProcedureMethod_VersionCertaint");
            viewString.Append("y, T1.DictionaryAssayProcedureMethod_VersionWorkflowInstanceID, T1.DictionaryAss");
            viewString.Append("ayProcedureMethod_VersionUpdatedBy, T1.DictionaryAssayProcedureMethod_VersionDel");
            viewString.Append("etedBy, T1.DictionaryAssayProcedureMethod_VersionOwnerContactID, T1.DictionaryAs");
            viewString.Append("sayProcedureMethod_VersionOwnerCompanyID, T1.DictionaryAssayProcedureMethod_Vers");
            viewString.Append("ionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.AssayProcedureMethodID A");
            viewString.Append("S DictionaryAssayProcedureMethod_AssayProcedureMethodID, \r\n            T.Standar");
            viewString.Append("dAssayProcedureMethodName AS DictionaryAssayProcedureMethod_StandardAssayProcedu");
            viewString.Append("reMethodName, \r\n            T.CoalAssayProcedureMethodName AS DictionaryAssayPro");
            viewString.Append("cedureMethod_CoalAssayProcedureMethodName, \r\n            T.GoldAssayProcedureMet");
            viewString.Append("hodName AS DictionaryAssayProcedureMethod_GoldAssayProcedureMethodName, \r\n      ");
            viewString.Append("      T.CustomAssayProcedureMethodName AS DictionaryAssayProcedureMethod_CustomA");
            viewString.Append("ssayProcedureMethodName, \r\n            T.Description AS DictionaryAssayProcedure");
            viewString.Append("Method_Description, \r\n            T.FullDescription AS DictionaryAssayProcedureM");
            viewString.Append("ethod_FullDescription, \r\n            T.Thumbnail AS DictionaryAssayProcedureMeth");
            viewString.Append("od_Thumbnail, \r\n            T.OriginalFileDataID AS DictionaryAssayProcedureMeth");
            viewString.Append("od_OriginalFileDataID, \r\n            T.Version AS DictionaryAssayProcedureMethod");
            viewString.Append("_Version, \r\n            T.VersionAntecedentID AS DictionaryAssayProcedureMethod_");
            viewString.Append("VersionAntecedentID, \r\n            T.VersionCertainty AS DictionaryAssayProcedur");
            viewString.Append("eMethod_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS Dictionar");
            viewString.Append("yAssayProcedureMethod_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedB");
            viewString.Append("y AS DictionaryAssayProcedureMethod_VersionUpdatedBy, \r\n            T.VersionDel");
            viewString.Append("etedBy AS DictionaryAssayProcedureMethod_VersionDeletedBy, \r\n            T.Versi");
            viewString.Append("onOwnerContactID AS DictionaryAssayProcedureMethod_VersionOwnerContactID, \r\n    ");
            viewString.Append("        T.VersionOwnerCompanyID AS DictionaryAssayProcedureMethod_VersionOwnerCo");
            viewString.Append("mpanyID, \r\n            T.VersionUpdated AS DictionaryAssayProcedureMethod_Versio");
            viewString.Append("nUpdated, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjectsSto");
            viewString.Append("reContainer.X_DictionaryAssayProcedureMethod AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryAssayProcedureMethods", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryAssayProcedureTechniques
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView605()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3104);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryAssayProcedureTechniques\r\n        [");
            viewString.Append("NKD.Module.BusinessObjects.DictionaryAssayProcedureTechnique](T1.DictionaryAssay");
            viewString.Append("ProcedureTechnique_AssayProcedureTechniqueID, T1.DictionaryAssayProcedureTechniq");
            viewString.Append("ue_StandardAssayProcedureTechniqueName, T1.DictionaryAssayProcedureTechnique_Coa");
            viewString.Append("lAssayProcedureTechniqueName, T1.DictionaryAssayProcedureTechnique_GoldAssayProc");
            viewString.Append("edureTechniqueName, T1.DictionaryAssayProcedureTechnique_CustomAssayProcedureTec");
            viewString.Append("hniqueName, T1.DictionaryAssayProcedureTechnique_Description, T1.DictionaryAssay");
            viewString.Append("ProcedureTechnique_FullDescription, T1.DictionaryAssayProcedureTechnique_Thumbna");
            viewString.Append("il, T1.DictionaryAssayProcedureTechnique_OriginalFileDataID, T1.DictionaryAssayP");
            viewString.Append("rocedureTechnique_Version, T1.DictionaryAssayProcedureTechnique_VersionAnteceden");
            viewString.Append("tID, T1.DictionaryAssayProcedureTechnique_VersionCertainty, T1.DictionaryAssayPr");
            viewString.Append("ocedureTechnique_VersionWorkflowInstanceID, T1.DictionaryAssayProcedureTechnique");
            viewString.Append("_VersionUpdatedBy, T1.DictionaryAssayProcedureTechnique_VersionDeletedBy, T1.Dic");
            viewString.Append("tionaryAssayProcedureTechnique_VersionOwnerContactID, T1.DictionaryAssayProcedur");
            viewString.Append("eTechnique_VersionOwnerCompanyID, T1.DictionaryAssayProcedureTechnique_VersionUp");
            viewString.Append("dated)\r\n    FROM (\r\n        SELECT \r\n            T.AssayProcedureTechniqueID AS ");
            viewString.Append("DictionaryAssayProcedureTechnique_AssayProcedureTechniqueID, \r\n            T.Sta");
            viewString.Append("ndardAssayProcedureTechniqueName AS DictionaryAssayProcedureTechnique_StandardAs");
            viewString.Append("sayProcedureTechniqueName, \r\n            T.CoalAssayProcedureTechniqueName AS Di");
            viewString.Append("ctionaryAssayProcedureTechnique_CoalAssayProcedureTechniqueName, \r\n            T");
            viewString.Append(".GoldAssayProcedureTechniqueName AS DictionaryAssayProcedureTechnique_GoldAssayP");
            viewString.Append("rocedureTechniqueName, \r\n            T.CustomAssayProcedureTechniqueName AS Dict");
            viewString.Append("ionaryAssayProcedureTechnique_CustomAssayProcedureTechniqueName, \r\n            T");
            viewString.Append(".Description AS DictionaryAssayProcedureTechnique_Description, \r\n            T.F");
            viewString.Append("ullDescription AS DictionaryAssayProcedureTechnique_FullDescription, \r\n         ");
            viewString.Append("   T.Thumbnail AS DictionaryAssayProcedureTechnique_Thumbnail, \r\n            T.O");
            viewString.Append("riginalFileDataID AS DictionaryAssayProcedureTechnique_OriginalFileDataID, \r\n   ");
            viewString.Append("         T.Version AS DictionaryAssayProcedureTechnique_Version, \r\n            T");
            viewString.Append(".VersionAntecedentID AS DictionaryAssayProcedureTechnique_VersionAntecedentID, \r");
            viewString.Append("\n            T.VersionCertainty AS DictionaryAssayProcedureTechnique_VersionCert");
            viewString.Append("ainty, \r\n            T.VersionWorkflowInstanceID AS DictionaryAssayProcedureTech");
            viewString.Append("nique_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS DictionaryA");
            viewString.Append("ssayProcedureTechnique_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS Dic");
            viewString.Append("tionaryAssayProcedureTechnique_VersionDeletedBy, \r\n            T.VersionOwnerCon");
            viewString.Append("tactID AS DictionaryAssayProcedureTechnique_VersionOwnerContactID, \r\n           ");
            viewString.Append(" T.VersionOwnerCompanyID AS DictionaryAssayProcedureTechnique_VersionOwnerCompan");
            viewString.Append("yID, \r\n            T.VersionUpdated AS DictionaryAssayProcedureTechnique_Version");
            viewString.Append("Updated, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjectsStor");
            viewString.Append("eContainer.X_DictionaryAssayProcedureTechnique AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryAssayProcedureTechniques", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryAssayProcedureTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView606()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2834);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryAssayProcedureTypes\r\n        [NKD.M");
            viewString.Append("odule.BusinessObjects.DictionaryAssayProcedureType](T1.DictionaryAssayProcedureT");
            viewString.Append("ype_AssayProcedureTypeID, T1.DictionaryAssayProcedureType_StandardAssayProcedure");
            viewString.Append("TypeName, T1.DictionaryAssayProcedureType_CoalAssayProcedureTypeName, T1.Diction");
            viewString.Append("aryAssayProcedureType_GoldAssayProcedureTypeName, T1.DictionaryAssayProcedureTyp");
            viewString.Append("e_CustomAssayProcedureTypeName, T1.DictionaryAssayProcedureType_Description, T1.");
            viewString.Append("DictionaryAssayProcedureType_FullDescription, T1.DictionaryAssayProcedureType_Th");
            viewString.Append("umbnail, T1.DictionaryAssayProcedureType_OriginalFileDataID, T1.DictionaryAssayP");
            viewString.Append("rocedureType_Version, T1.DictionaryAssayProcedureType_VersionAntecedentID, T1.Di");
            viewString.Append("ctionaryAssayProcedureType_VersionCertainty, T1.DictionaryAssayProcedureType_Ver");
            viewString.Append("sionWorkflowInstanceID, T1.DictionaryAssayProcedureType_VersionUpdatedBy, T1.Dic");
            viewString.Append("tionaryAssayProcedureType_VersionDeletedBy, T1.DictionaryAssayProcedureType_Vers");
            viewString.Append("ionOwnerContactID, T1.DictionaryAssayProcedureType_VersionOwnerCompanyID, T1.Dic");
            viewString.Append("tionaryAssayProcedureType_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n        ");
            viewString.Append("    T.AssayProcedureTypeID AS DictionaryAssayProcedureType_AssayProcedureTypeID,");
            viewString.Append(" \r\n            T.StandardAssayProcedureTypeName AS DictionaryAssayProcedureType_");
            viewString.Append("StandardAssayProcedureTypeName, \r\n            T.CoalAssayProcedureTypeName AS Di");
            viewString.Append("ctionaryAssayProcedureType_CoalAssayProcedureTypeName, \r\n            T.GoldAssay");
            viewString.Append("ProcedureTypeName AS DictionaryAssayProcedureType_GoldAssayProcedureTypeName, \r\n");
            viewString.Append("            T.CustomAssayProcedureTypeName AS DictionaryAssayProcedureType_Custo");
            viewString.Append("mAssayProcedureTypeName, \r\n            T.Description AS DictionaryAssayProcedure");
            viewString.Append("Type_Description, \r\n            T.FullDescription AS DictionaryAssayProcedureTyp");
            viewString.Append("e_FullDescription, \r\n            T.Thumbnail AS DictionaryAssayProcedureType_Thu");
            viewString.Append("mbnail, \r\n            T.OriginalFileDataID AS DictionaryAssayProcedureType_Origi");
            viewString.Append("nalFileDataID, \r\n            T.Version AS DictionaryAssayProcedureType_Version, ");
            viewString.Append("\r\n            T.VersionAntecedentID AS DictionaryAssayProcedureType_VersionAntec");
            viewString.Append("edentID, \r\n            T.VersionCertainty AS DictionaryAssayProcedureType_Versio");
            viewString.Append("nCertainty, \r\n            T.VersionWorkflowInstanceID AS DictionaryAssayProcedur");
            viewString.Append("eType_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS DictionaryA");
            viewString.Append("ssayProcedureType_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS Dictiona");
            viewString.Append("ryAssayProcedureType_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS ");
            viewString.Append("DictionaryAssayProcedureType_VersionOwnerContactID, \r\n            T.VersionOwner");
            viewString.Append("CompanyID AS DictionaryAssayProcedureType_VersionOwnerCompanyID, \r\n            T");
            viewString.Append(".VersionUpdated AS DictionaryAssayProcedureType_VersionUpdated, \r\n            Tr");
            viewString.Append("ue AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryAs");
            viewString.Append("sayProcedureType AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryAssayProcedureTypes", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryAssayTechniques
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView607()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2618);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryAssayTechniques\r\n        [NKD.Modul");
            viewString.Append("e.BusinessObjects.DictionaryAssayTechnique](T1.DictionaryAssayTechnique_AssayTec");
            viewString.Append("hniqueID, T1.DictionaryAssayTechnique_StandardAssayTechniqueName, T1.DictionaryA");
            viewString.Append("ssayTechnique_CoalAssayTechniqueName, T1.DictionaryAssayTechnique_GoldAssayTechn");
            viewString.Append("iqueName, T1.DictionaryAssayTechnique_CustomAssayTechniqueName, T1.DictionaryAss");
            viewString.Append("ayTechnique_Description, T1.DictionaryAssayTechnique_FullDescription, T1.Diction");
            viewString.Append("aryAssayTechnique_Thumbnail, T1.DictionaryAssayTechnique_OriginalFileDataID, T1.");
            viewString.Append("DictionaryAssayTechnique_Version, T1.DictionaryAssayTechnique_VersionAntecedentI");
            viewString.Append("D, T1.DictionaryAssayTechnique_VersionCertainty, T1.DictionaryAssayTechnique_Ver");
            viewString.Append("sionWorkflowInstanceID, T1.DictionaryAssayTechnique_VersionUpdatedBy, T1.Diction");
            viewString.Append("aryAssayTechnique_VersionDeletedBy, T1.DictionaryAssayTechnique_VersionOwnerCont");
            viewString.Append("actID, T1.DictionaryAssayTechnique_VersionOwnerCompanyID, T1.DictionaryAssayTech");
            viewString.Append("nique_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.AssayTechnique");
            viewString.Append("ID AS DictionaryAssayTechnique_AssayTechniqueID, \r\n            T.StandardAssayTe");
            viewString.Append("chniqueName AS DictionaryAssayTechnique_StandardAssayTechniqueName, \r\n          ");
            viewString.Append("  T.CoalAssayTechniqueName AS DictionaryAssayTechnique_CoalAssayTechniqueName, \r");
            viewString.Append("\n            T.GoldAssayTechniqueName AS DictionaryAssayTechnique_GoldAssayTechn");
            viewString.Append("iqueName, \r\n            T.CustomAssayTechniqueName AS DictionaryAssayTechnique_C");
            viewString.Append("ustomAssayTechniqueName, \r\n            T.Description AS DictionaryAssayTechnique");
            viewString.Append("_Description, \r\n            T.FullDescription AS DictionaryAssayTechnique_FullDe");
            viewString.Append("scription, \r\n            T.Thumbnail AS DictionaryAssayTechnique_Thumbnail, \r\n  ");
            viewString.Append("          T.OriginalFileDataID AS DictionaryAssayTechnique_OriginalFileDataID, \r");
            viewString.Append("\n            T.Version AS DictionaryAssayTechnique_Version, \r\n            T.Vers");
            viewString.Append("ionAntecedentID AS DictionaryAssayTechnique_VersionAntecedentID, \r\n            T");
            viewString.Append(".VersionCertainty AS DictionaryAssayTechnique_VersionCertainty, \r\n            T.");
            viewString.Append("VersionWorkflowInstanceID AS DictionaryAssayTechnique_VersionWorkflowInstanceID,");
            viewString.Append(" \r\n            T.VersionUpdatedBy AS DictionaryAssayTechnique_VersionUpdatedBy, ");
            viewString.Append("\r\n            T.VersionDeletedBy AS DictionaryAssayTechnique_VersionDeletedBy, \r");
            viewString.Append("\n            T.VersionOwnerContactID AS DictionaryAssayTechnique_VersionOwnerCon");
            viewString.Append("tactID, \r\n            T.VersionOwnerCompanyID AS DictionaryAssayTechnique_Versio");
            viewString.Append("nOwnerCompanyID, \r\n            T.VersionUpdated AS DictionaryAssayTechnique_Vers");
            viewString.Append("ionUpdated, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjectsS");
            viewString.Append("toreContainer.X_DictionaryAssayTechnique AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryAssayTechniques", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryChemicals
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView608()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2294);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryChemicals\r\n        [NKD.Module.Busi");
            viewString.Append("nessObjects.DictionaryChemical](T1.DictionaryChemical_ChemicalID, T1.DictionaryC");
            viewString.Append("hemical_StandardChemicalName, T1.DictionaryChemical_CoalChemicalName, T1.Diction");
            viewString.Append("aryChemical_GoldChemicalName, T1.DictionaryChemical_CustomChemicalName, T1.Dicti");
            viewString.Append("onaryChemical_Description, T1.DictionaryChemical_FullDescription, T1.DictionaryC");
            viewString.Append("hemical_Thumbnail, T1.DictionaryChemical_OriginalFileDataID, T1.DictionaryChemic");
            viewString.Append("al_Version, T1.DictionaryChemical_VersionAntecedentID, T1.DictionaryChemical_Ver");
            viewString.Append("sionCertainty, T1.DictionaryChemical_VersionWorkflowInstanceID, T1.DictionaryChe");
            viewString.Append("mical_VersionUpdatedBy, T1.DictionaryChemical_VersionDeletedBy, T1.DictionaryChe");
            viewString.Append("mical_VersionOwnerContactID, T1.DictionaryChemical_VersionOwnerCompanyID, T1.Dic");
            viewString.Append("tionaryChemical_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.Chem");
            viewString.Append("icalID AS DictionaryChemical_ChemicalID, \r\n            T.StandardChemicalName AS");
            viewString.Append(" DictionaryChemical_StandardChemicalName, \r\n            T.CoalChemicalName AS Di");
            viewString.Append("ctionaryChemical_CoalChemicalName, \r\n            T.GoldChemicalName AS Dictionar");
            viewString.Append("yChemical_GoldChemicalName, \r\n            T.CustomChemicalName AS DictionaryChem");
            viewString.Append("ical_CustomChemicalName, \r\n            T.Description AS DictionaryChemical_Descr");
            viewString.Append("iption, \r\n            T.FullDescription AS DictionaryChemical_FullDescription, \r");
            viewString.Append("\n            T.Thumbnail AS DictionaryChemical_Thumbnail, \r\n            T.Origin");
            viewString.Append("alFileDataID AS DictionaryChemical_OriginalFileDataID, \r\n            T.Version A");
            viewString.Append("S DictionaryChemical_Version, \r\n            T.VersionAntecedentID AS DictionaryC");
            viewString.Append("hemical_VersionAntecedentID, \r\n            T.VersionCertainty AS DictionaryChemi");
            viewString.Append("cal_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS DictionaryChe");
            viewString.Append("mical_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS DictionaryC");
            viewString.Append("hemical_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS DictionaryChemical");
            viewString.Append("_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS DictionaryChemical_V");
            viewString.Append("ersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS DictionaryChemica");
            viewString.Append("l_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS DictionaryChemical_Ve");
            viewString.Append("rsionUpdated, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObject");
            viewString.Append("sStoreContainer.X_DictionaryChemical AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryChemicals", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.AssayProcedureProtocolPreconditions
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView609()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2567);
            viewString.Append("\r\n    SELECT VALUE -- Constructing AssayProcedureProtocolPreconditions\r\n        ");
            viewString.Append("[NKD.Module.BusinessObjects.AssayProcedureProtocolPrecondition](T1.AssayProcedur");
            viewString.Append("eProtocolPrecondition_AssayProcedureProtocolPreconditionID, T1.AssayProcedurePro");
            viewString.Append("tocolPrecondition_AssayProcedureProtocolID, T1.AssayProcedureProtocolPreconditio");
            viewString.Append("n_AssayPreconditionTypeID, T1.AssayProcedureProtocolPrecondition_PreconditionNam");
            viewString.Append("e, T1.AssayProcedureProtocolPrecondition_UnitID, T1.AssayProcedureProtocolPrecon");
            viewString.Append("dition_Sequence, T1.AssayProcedureProtocolPrecondition_Version, T1.AssayProcedur");
            viewString.Append("eProtocolPrecondition_VersionAntecedentID, T1.AssayProcedureProtocolPrecondition");
            viewString.Append("_VersionCertainty, T1.AssayProcedureProtocolPrecondition_VersionWorkflowInstance");
            viewString.Append("ID, T1.AssayProcedureProtocolPrecondition_VersionUpdatedBy, T1.AssayProcedurePro");
            viewString.Append("tocolPrecondition_VersionDeletedBy, T1.AssayProcedureProtocolPrecondition_Versio");
            viewString.Append("nOwnerContactID, T1.AssayProcedureProtocolPrecondition_VersionOwnerCompanyID, T1");
            viewString.Append(".AssayProcedureProtocolPrecondition_VersionUpdated)\r\n    FROM (\r\n        SELECT ");
            viewString.Append("\r\n            T.AssayProcedureProtocolPreconditionID AS AssayProcedureProtocolPr");
            viewString.Append("econdition_AssayProcedureProtocolPreconditionID, \r\n            T.AssayProcedureP");
            viewString.Append("rotocolID AS AssayProcedureProtocolPrecondition_AssayProcedureProtocolID, \r\n    ");
            viewString.Append("        T.AssayPreconditionTypeID AS AssayProcedureProtocolPrecondition_AssayPre");
            viewString.Append("conditionTypeID, \r\n            T.PreconditionName AS AssayProcedureProtocolPreco");
            viewString.Append("ndition_PreconditionName, \r\n            T.UnitID AS AssayProcedureProtocolPrecon");
            viewString.Append("dition_UnitID, \r\n            T.Sequence AS AssayProcedureProtocolPrecondition_Se");
            viewString.Append("quence, \r\n            T.Version AS AssayProcedureProtocolPrecondition_Version, \r");
            viewString.Append("\n            T.VersionAntecedentID AS AssayProcedureProtocolPrecondition_Version");
            viewString.Append("AntecedentID, \r\n            T.VersionCertainty AS AssayProcedureProtocolPrecondi");
            viewString.Append("tion_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS AssayProcedu");
            viewString.Append("reProtocolPrecondition_VersionWorkflowInstanceID, \r\n            T.VersionUpdated");
            viewString.Append("By AS AssayProcedureProtocolPrecondition_VersionUpdatedBy, \r\n            T.Versi");
            viewString.Append("onDeletedBy AS AssayProcedureProtocolPrecondition_VersionDeletedBy, \r\n          ");
            viewString.Append("  T.VersionOwnerContactID AS AssayProcedureProtocolPrecondition_VersionOwnerCont");
            viewString.Append("actID, \r\n            T.VersionOwnerCompanyID AS AssayProcedureProtocolPreconditi");
            viewString.Append("on_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS AssayProcedureProtoc");
            viewString.Append("olPrecondition_VersionUpdated, \r\n            True AS _from0\r\n        FROM NKDMod");
            viewString.Append("uleBusinessObjectsStoreContainer.X_AssayProcedureProtocolPrecondition AS T\r\n    ");
            viewString.Append(") AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.AssayProcedureProtocolPreconditions", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.AssayWorkflowProcedureProtocols
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView610()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2280);
            viewString.Append("\r\n    SELECT VALUE -- Constructing AssayWorkflowProcedureProtocols\r\n        [NKD");
            viewString.Append(".Module.BusinessObjects.AssayWorkflowProcedureProtocol](T1.AssayWorkflowProcedur");
            viewString.Append("eProtocol_AssayWorkflowProcedureProtocolID, T1.AssayWorkflowProcedureProtocol_Wo");
            viewString.Append("rkflowID, T1.AssayWorkflowProcedureProtocol_WorkflowStateName, T1.AssayWorkflowP");
            viewString.Append("rocedureProtocol_AssayProcedureProtocolID, T1.AssayWorkflowProcedureProtocol_Seq");
            viewString.Append("uence, T1.AssayWorkflowProcedureProtocol_Version, T1.AssayWorkflowProcedureProto");
            viewString.Append("col_VersionAntecedentID, T1.AssayWorkflowProcedureProtocol_VersionCertainty, T1.");
            viewString.Append("AssayWorkflowProcedureProtocol_VersionWorkflowInstanceID, T1.AssayWorkflowProced");
            viewString.Append("ureProtocol_VersionUpdatedBy, T1.AssayWorkflowProcedureProtocol_VersionDeletedBy");
            viewString.Append(", T1.AssayWorkflowProcedureProtocol_VersionOwnerContactID, T1.AssayWorkflowProce");
            viewString.Append("dureProtocol_VersionOwnerCompanyID, T1.AssayWorkflowProcedureProtocol_VersionUpd");
            viewString.Append("ated)\r\n    FROM (\r\n        SELECT \r\n            T.AssayWorkflowProcedureProtocol");
            viewString.Append("ID AS AssayWorkflowProcedureProtocol_AssayWorkflowProcedureProtocolID, \r\n       ");
            viewString.Append("     T.WorkflowID AS AssayWorkflowProcedureProtocol_WorkflowID, \r\n            T.");
            viewString.Append("WorkflowStateName AS AssayWorkflowProcedureProtocol_WorkflowStateName, \r\n       ");
            viewString.Append("     T.AssayProcedureProtocolID AS AssayWorkflowProcedureProtocol_AssayProcedure");
            viewString.Append("ProtocolID, \r\n            T.Sequence AS AssayWorkflowProcedureProtocol_Sequence,");
            viewString.Append(" \r\n            T.Version AS AssayWorkflowProcedureProtocol_Version, \r\n          ");
            viewString.Append("  T.VersionAntecedentID AS AssayWorkflowProcedureProtocol_VersionAntecedentID, \r");
            viewString.Append("\n            T.VersionCertainty AS AssayWorkflowProcedureProtocol_VersionCertain");
            viewString.Append("ty, \r\n            T.VersionWorkflowInstanceID AS AssayWorkflowProcedureProtocol_");
            viewString.Append("VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS AssayWorkflowProc");
            viewString.Append("edureProtocol_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS AssayWorkflo");
            viewString.Append("wProcedureProtocol_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS As");
            viewString.Append("sayWorkflowProcedureProtocol_VersionOwnerContactID, \r\n            T.VersionOwner");
            viewString.Append("CompanyID AS AssayWorkflowProcedureProtocol_VersionOwnerCompanyID, \r\n           ");
            viewString.Append(" T.VersionUpdated AS AssayWorkflowProcedureProtocol_VersionUpdated, \r\n          ");
            viewString.Append("  True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_AssayWor");
            viewString.Append("kflowProcedureProtocol AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.AssayWorkflowProcedureProtocols", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryAssayPreconditionTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView611()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2996);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryAssayPreconditionTypes\r\n        [NK");
            viewString.Append("D.Module.BusinessObjects.DictionaryAssayPreconditionType](T1.DictionaryAssayPrec");
            viewString.Append("onditionType_AssayPreconditionTypeID, T1.DictionaryAssayPreconditionType_Standar");
            viewString.Append("dAssayPreconditionTypeName, T1.DictionaryAssayPreconditionType_CoalAssayPrecondi");
            viewString.Append("tionTypeName, T1.DictionaryAssayPreconditionType_GoldAssayPreconditionTypeName, ");
            viewString.Append("T1.DictionaryAssayPreconditionType_CustomAssayPreconditionTypeName, T1.Dictionar");
            viewString.Append("yAssayPreconditionType_Description, T1.DictionaryAssayPreconditionType_FullDescr");
            viewString.Append("iption, T1.DictionaryAssayPreconditionType_Thumbnail, T1.DictionaryAssayPrecondi");
            viewString.Append("tionType_OriginalFileDataID, T1.DictionaryAssayPreconditionType_Version, T1.Dict");
            viewString.Append("ionaryAssayPreconditionType_VersionAntecedentID, T1.DictionaryAssayPreconditionT");
            viewString.Append("ype_VersionCertainty, T1.DictionaryAssayPreconditionType_VersionWorkflowInstance");
            viewString.Append("ID, T1.DictionaryAssayPreconditionType_VersionUpdatedBy, T1.DictionaryAssayPreco");
            viewString.Append("nditionType_VersionDeletedBy, T1.DictionaryAssayPreconditionType_VersionOwnerCon");
            viewString.Append("tactID, T1.DictionaryAssayPreconditionType_VersionOwnerCompanyID, T1.DictionaryA");
            viewString.Append("ssayPreconditionType_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T");
            viewString.Append(".AssayPreconditionTypeID AS DictionaryAssayPreconditionType_AssayPreconditionTyp");
            viewString.Append("eID, \r\n            T.StandardAssayPreconditionTypeName AS DictionaryAssayPrecond");
            viewString.Append("itionType_StandardAssayPreconditionTypeName, \r\n            T.CoalAssayPreconditi");
            viewString.Append("onTypeName AS DictionaryAssayPreconditionType_CoalAssayPreconditionTypeName, \r\n ");
            viewString.Append("           T.GoldAssayPreconditionTypeName AS DictionaryAssayPreconditionType_Go");
            viewString.Append("ldAssayPreconditionTypeName, \r\n            T.CustomAssayPreconditionTypeName AS ");
            viewString.Append("DictionaryAssayPreconditionType_CustomAssayPreconditionTypeName, \r\n            T");
            viewString.Append(".Description AS DictionaryAssayPreconditionType_Description, \r\n            T.Ful");
            viewString.Append("lDescription AS DictionaryAssayPreconditionType_FullDescription, \r\n            T");
            viewString.Append(".Thumbnail AS DictionaryAssayPreconditionType_Thumbnail, \r\n            T.Origina");
            viewString.Append("lFileDataID AS DictionaryAssayPreconditionType_OriginalFileDataID, \r\n           ");
            viewString.Append(" T.Version AS DictionaryAssayPreconditionType_Version, \r\n            T.VersionAn");
            viewString.Append("tecedentID AS DictionaryAssayPreconditionType_VersionAntecedentID, \r\n           ");
            viewString.Append(" T.VersionCertainty AS DictionaryAssayPreconditionType_VersionCertainty, \r\n     ");
            viewString.Append("       T.VersionWorkflowInstanceID AS DictionaryAssayPreconditionType_VersionWor");
            viewString.Append("kflowInstanceID, \r\n            T.VersionUpdatedBy AS DictionaryAssayPrecondition");
            viewString.Append("Type_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS DictionaryAssayPrecon");
            viewString.Append("ditionType_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS Dictionary");
            viewString.Append("AssayPreconditionType_VersionOwnerContactID, \r\n            T.VersionOwnerCompany");
            viewString.Append("ID AS DictionaryAssayPreconditionType_VersionOwnerCompanyID, \r\n            T.Ver");
            viewString.Append("sionUpdated AS DictionaryAssayPreconditionType_VersionUpdated, \r\n            Tru");
            viewString.Append("e AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_DictionaryAss");
            viewString.Append("ayPreconditionType AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryAssayPreconditionTypes", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.ApplicationPaymentProviders
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView612()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3026);
            viewString.Append("\r\n    SELECT VALUE -- Constructing ApplicationPaymentProviders\r\n        [NKD.Mod");
            viewString.Append("ule.BusinessObjects.ApplicationPaymentProvider](T1.ApplicationPaymentProvider_Ap");
            viewString.Append("plicationPaymentProviderID, T1.ApplicationPaymentProvider_ApplicationID, T1.Appl");
            viewString.Append("icationPaymentProvider_ApplicationPaymentProviderName, T1.ApplicationPaymentProv");
            viewString.Append("ider_CompanyID, T1.ApplicationPaymentProvider_Environment, T1.ApplicationPayment");
            viewString.Append("Provider_MerchantID, T1.ApplicationPaymentProvider_ClientKeyPrivate, T1.Applicat");
            viewString.Append("ionPaymentProvider_ClientKeyPublic, T1.ApplicationPaymentProvider_ServerKeyPriva");
            viewString.Append("te, T1.ApplicationPaymentProvider_ServerKeyPublic, T1.ApplicationPaymentProvider");
            viewString.Append("_ReturnURL, T1.ApplicationPaymentProvider_ResponsibleContactID, T1.ApplicationPa");
            viewString.Append("ymentProvider_Version, T1.ApplicationPaymentProvider_VersionAntecedentID, T1.App");
            viewString.Append("licationPaymentProvider_VersionCertainty, T1.ApplicationPaymentProvider_VersionW");
            viewString.Append("orkflowInstanceID, T1.ApplicationPaymentProvider_VersionUpdatedBy, T1.Applicatio");
            viewString.Append("nPaymentProvider_VersionDeletedBy, T1.ApplicationPaymentProvider_VersionOwnerCon");
            viewString.Append("tactID, T1.ApplicationPaymentProvider_VersionOwnerCompanyID, T1.ApplicationPayme");
            viewString.Append("ntProvider_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.Applicati");
            viewString.Append("onPaymentProviderID AS ApplicationPaymentProvider_ApplicationPaymentProviderID, ");
            viewString.Append("\r\n            T.ApplicationID AS ApplicationPaymentProvider_ApplicationID, \r\n   ");
            viewString.Append("         T.ApplicationPaymentProviderName AS ApplicationPaymentProvider_Applicat");
            viewString.Append("ionPaymentProviderName, \r\n            T.CompanyID AS ApplicationPaymentProvider_");
            viewString.Append("CompanyID, \r\n            T.Environment AS ApplicationPaymentProvider_Environment");
            viewString.Append(", \r\n            T.MerchantID AS ApplicationPaymentProvider_MerchantID, \r\n       ");
            viewString.Append("     T.ClientKeyPrivate AS ApplicationPaymentProvider_ClientKeyPrivate, \r\n      ");
            viewString.Append("      T.ClientKeyPublic AS ApplicationPaymentProvider_ClientKeyPublic, \r\n       ");
            viewString.Append("     T.ServerKeyPrivate AS ApplicationPaymentProvider_ServerKeyPrivate, \r\n      ");
            viewString.Append("      T.ServerKeyPublic AS ApplicationPaymentProvider_ServerKeyPublic, \r\n       ");
            viewString.Append("     T.ReturnURL AS ApplicationPaymentProvider_ReturnURL, \r\n            T.Respon");
            viewString.Append("sibleContactID AS ApplicationPaymentProvider_ResponsibleContactID, \r\n           ");
            viewString.Append(" T.Version AS ApplicationPaymentProvider_Version, \r\n            T.VersionAnteced");
            viewString.Append("entID AS ApplicationPaymentProvider_VersionAntecedentID, \r\n            T.Version");
            viewString.Append("Certainty AS ApplicationPaymentProvider_VersionCertainty, \r\n            T.Versio");
            viewString.Append("nWorkflowInstanceID AS ApplicationPaymentProvider_VersionWorkflowInstanceID, \r\n ");
            viewString.Append("           T.VersionUpdatedBy AS ApplicationPaymentProvider_VersionUpdatedBy, \r\n");
            viewString.Append("            T.VersionDeletedBy AS ApplicationPaymentProvider_VersionDeletedBy, \r");
            viewString.Append("\n            T.VersionOwnerContactID AS ApplicationPaymentProvider_VersionOwnerC");
            viewString.Append("ontactID, \r\n            T.VersionOwnerCompanyID AS ApplicationPaymentProvider_Ve");
            viewString.Append("rsionOwnerCompanyID, \r\n            T.VersionUpdated AS ApplicationPaymentProvide");
            viewString.Append("r_VersionUpdated, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessOb");
            viewString.Append("jectsStoreContainer.E_ApplicationPaymentProvider AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.ApplicationPaymentProviders", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.ApplicationPaymentProviderCurrencies
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView613()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2495);
            viewString.Append("\r\n    SELECT VALUE -- Constructing ApplicationPaymentProviderCurrencies\r\n       ");
            viewString.Append(" [NKD.Module.BusinessObjects.ApplicationPaymentProviderCurrency](T1.ApplicationP");
            viewString.Append("aymentProviderCurrency_ApplicationPaymentProviderCurrencyID, T1.ApplicationPayme");
            viewString.Append("ntProviderCurrency_ApplicationPaymentProviderID, T1.ApplicationPaymentProviderCu");
            viewString.Append("rrency_CurrencyID, T1.ApplicationPaymentProviderCurrency_PaymentProviderCurrency");
            viewString.Append("Code, T1.ApplicationPaymentProviderCurrency_IsMultiplierAccepted, T1.Application");
            viewString.Append("PaymentProviderCurrency_Version, T1.ApplicationPaymentProviderCurrency_VersionAn");
            viewString.Append("tecedentID, T1.ApplicationPaymentProviderCurrency_VersionCertainty, T1.Applicati");
            viewString.Append("onPaymentProviderCurrency_VersionWorkflowInstanceID, T1.ApplicationPaymentProvid");
            viewString.Append("erCurrency_VersionUpdatedBy, T1.ApplicationPaymentProviderCurrency_VersionDelete");
            viewString.Append("dBy, T1.ApplicationPaymentProviderCurrency_VersionOwnerContactID, T1.Application");
            viewString.Append("PaymentProviderCurrency_VersionOwnerCompanyID, T1.ApplicationPaymentProviderCurr");
            viewString.Append("ency_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.ApplicationPaym");
            viewString.Append("entProviderCurrencyID AS ApplicationPaymentProviderCurrency_ApplicationPaymentPr");
            viewString.Append("oviderCurrencyID, \r\n            T.ApplicationPaymentProviderID AS ApplicationPay");
            viewString.Append("mentProviderCurrency_ApplicationPaymentProviderID, \r\n            T.CurrencyID AS");
            viewString.Append(" ApplicationPaymentProviderCurrency_CurrencyID, \r\n            T.PaymentProviderC");
            viewString.Append("urrencyCode AS ApplicationPaymentProviderCurrency_PaymentProviderCurrencyCode, \r");
            viewString.Append("\n            T.IsMultiplierAccepted AS ApplicationPaymentProviderCurrency_IsMult");
            viewString.Append("iplierAccepted, \r\n            T.Version AS ApplicationPaymentProviderCurrency_Ve");
            viewString.Append("rsion, \r\n            T.VersionAntecedentID AS ApplicationPaymentProviderCurrency");
            viewString.Append("_VersionAntecedentID, \r\n            T.VersionCertainty AS ApplicationPaymentProv");
            viewString.Append("iderCurrency_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS Appl");
            viewString.Append("icationPaymentProviderCurrency_VersionWorkflowInstanceID, \r\n            T.Versio");
            viewString.Append("nUpdatedBy AS ApplicationPaymentProviderCurrency_VersionUpdatedBy, \r\n           ");
            viewString.Append(" T.VersionDeletedBy AS ApplicationPaymentProviderCurrency_VersionDeletedBy, \r\n  ");
            viewString.Append("          T.VersionOwnerContactID AS ApplicationPaymentProviderCurrency_VersionO");
            viewString.Append("wnerContactID, \r\n            T.VersionOwnerCompanyID AS ApplicationPaymentProvid");
            viewString.Append("erCurrency_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS ApplicationP");
            viewString.Append("aymentProviderCurrency_VersionUpdated, \r\n            True AS _from0\r\n        FRO");
            viewString.Append("M NKDModuleBusinessObjectsStoreContainer.E_ApplicationPaymentProviderCurrency AS");
            viewString.Append(" T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.ApplicationPaymentProviderCurrencies", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.ApplicationPaymentProviderProducts
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView614()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2987);
            viewString.Append("\r\n    SELECT VALUE -- Constructing ApplicationPaymentProviderProducts\r\n        [");
            viewString.Append("NKD.Module.BusinessObjects.ApplicationPaymentProviderProduct](T1.ApplicationPaym");
            viewString.Append("entProviderProduct_ApplicationPaymentProviderProductID, T1.ApplicationPaymentPro");
            viewString.Append("viderProduct_ApplicationPaymentProviderID, T1.ApplicationPaymentProviderProduct_");
            viewString.Append("PaymentProviderProductName, T1.ApplicationPaymentProviderProduct_ProductUnitID, ");
            viewString.Append("T1.ApplicationPaymentProviderProduct_PaymentProviderUnitName, T1.ApplicationPaym");
            viewString.Append("entProviderProduct_IsRecurring, T1.ApplicationPaymentProviderProduct_UnitDefault");
            viewString.Append(", T1.ApplicationPaymentProviderProduct_UnitMaximum, T1.ApplicationPaymentProvide");
            viewString.Append("rProduct_UnitMinimum, T1.ApplicationPaymentProviderProduct_Version, T1.Applicati");
            viewString.Append("onPaymentProviderProduct_VersionAntecedentID, T1.ApplicationPaymentProviderProdu");
            viewString.Append("ct_VersionCertainty, T1.ApplicationPaymentProviderProduct_VersionWorkflowInstanc");
            viewString.Append("eID, T1.ApplicationPaymentProviderProduct_VersionUpdatedBy, T1.ApplicationPaymen");
            viewString.Append("tProviderProduct_VersionDeletedBy, T1.ApplicationPaymentProviderProduct_VersionO");
            viewString.Append("wnerContactID, T1.ApplicationPaymentProviderProduct_VersionOwnerCompanyID, T1.Ap");
            viewString.Append("plicationPaymentProviderProduct_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n  ");
            viewString.Append("          T.ApplicationPaymentProviderProductID AS ApplicationPaymentProviderPro");
            viewString.Append("duct_ApplicationPaymentProviderProductID, \r\n            T.ApplicationPaymentProv");
            viewString.Append("iderID AS ApplicationPaymentProviderProduct_ApplicationPaymentProviderID, \r\n    ");
            viewString.Append("        T.PaymentProviderProductName AS ApplicationPaymentProviderProduct_Paymen");
            viewString.Append("tProviderProductName, \r\n            T.ProductUnitID AS ApplicationPaymentProvide");
            viewString.Append("rProduct_ProductUnitID, \r\n            T.PaymentProviderUnitName AS ApplicationPa");
            viewString.Append("ymentProviderProduct_PaymentProviderUnitName, \r\n            T.IsRecurring AS App");
            viewString.Append("licationPaymentProviderProduct_IsRecurring, \r\n            T.UnitDefault AS Appli");
            viewString.Append("cationPaymentProviderProduct_UnitDefault, \r\n            T.UnitMaximum AS Applica");
            viewString.Append("tionPaymentProviderProduct_UnitMaximum, \r\n            T.UnitMinimum AS Applicati");
            viewString.Append("onPaymentProviderProduct_UnitMinimum, \r\n            T.Version AS ApplicationPaym");
            viewString.Append("entProviderProduct_Version, \r\n            T.VersionAntecedentID AS ApplicationPa");
            viewString.Append("ymentProviderProduct_VersionAntecedentID, \r\n            T.VersionCertainty AS Ap");
            viewString.Append("plicationPaymentProviderProduct_VersionCertainty, \r\n            T.VersionWorkflo");
            viewString.Append("wInstanceID AS ApplicationPaymentProviderProduct_VersionWorkflowInstanceID, \r\n  ");
            viewString.Append("          T.VersionUpdatedBy AS ApplicationPaymentProviderProduct_VersionUpdated");
            viewString.Append("By, \r\n            T.VersionDeletedBy AS ApplicationPaymentProviderProduct_Versio");
            viewString.Append("nDeletedBy, \r\n            T.VersionOwnerContactID AS ApplicationPaymentProviderP");
            viewString.Append("roduct_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS Applicati");
            viewString.Append("onPaymentProviderProduct_VersionOwnerCompanyID, \r\n            T.VersionUpdated A");
            viewString.Append("S ApplicationPaymentProviderProduct_VersionUpdated, \r\n            True AS _from0");
            viewString.Append("\r\n        FROM NKDModuleBusinessObjectsStoreContainer.E_ApplicationPaymentProvid");
            viewString.Append("erProduct AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.ApplicationPaymentProviderProducts", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.ApplicationPaymentProviderProductModels
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView615()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2855);
            viewString.Append("\r\n    SELECT VALUE -- Constructing ApplicationPaymentProviderProductModels\r\n    ");
            viewString.Append("    [NKD.Module.BusinessObjects.ApplicationPaymentProviderProductModel](T1.Appli");
            viewString.Append("cationPaymentProviderProductModel_ApplicationPaymentProviderProductModelID, T1.A");
            viewString.Append("pplicationPaymentProviderProductModel_ApplicationPaymentProviderProductID, T1.Ap");
            viewString.Append("plicationPaymentProviderProductModel_ModelID, T1.ApplicationPaymentProviderProdu");
            viewString.Append("ctModel_UnitDefault, T1.ApplicationPaymentProviderProductModel_UnitMaximum, T1.A");
            viewString.Append("pplicationPaymentProviderProductModel_UnitMinimum, T1.ApplicationPaymentProvider");
            viewString.Append("ProductModel_Version, T1.ApplicationPaymentProviderProductModel_VersionAnteceden");
            viewString.Append("tID, T1.ApplicationPaymentProviderProductModel_VersionCertainty, T1.ApplicationP");
            viewString.Append("aymentProviderProductModel_VersionWorkflowInstanceID, T1.ApplicationPaymentProvi");
            viewString.Append("derProductModel_VersionUpdatedBy, T1.ApplicationPaymentProviderProductModel_Vers");
            viewString.Append("ionDeletedBy, T1.ApplicationPaymentProviderProductModel_VersionOwnerContactID, T");
            viewString.Append("1.ApplicationPaymentProviderProductModel_VersionOwnerCompanyID, T1.ApplicationPa");
            viewString.Append("ymentProviderProductModel_VersionUpdated, T1.ApplicationPaymentProviderProductMo");
            viewString.Append("del_SupplierModelID)\r\n    FROM (\r\n        SELECT \r\n            T.ApplicationPaym");
            viewString.Append("entProviderProductModelID AS ApplicationPaymentProviderProductModel_ApplicationP");
            viewString.Append("aymentProviderProductModelID, \r\n            T.ApplicationPaymentProviderProductI");
            viewString.Append("D AS ApplicationPaymentProviderProductModel_ApplicationPaymentProviderProductID,");
            viewString.Append(" \r\n            T.ModelID AS ApplicationPaymentProviderProductModel_ModelID, \r\n  ");
            viewString.Append("          T.UnitDefault AS ApplicationPaymentProviderProductModel_UnitDefault, \r");
            viewString.Append("\n            T.UnitMaximum AS ApplicationPaymentProviderProductModel_UnitMaximum");
            viewString.Append(", \r\n            T.UnitMinimum AS ApplicationPaymentProviderProductModel_UnitMini");
            viewString.Append("mum, \r\n            T.Version AS ApplicationPaymentProviderProductModel_Version, ");
            viewString.Append("\r\n            T.VersionAntecedentID AS ApplicationPaymentProviderProductModel_Ve");
            viewString.Append("rsionAntecedentID, \r\n            T.VersionCertainty AS ApplicationPaymentProvide");
            viewString.Append("rProductModel_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS App");
            viewString.Append("licationPaymentProviderProductModel_VersionWorkflowInstanceID, \r\n            T.V");
            viewString.Append("ersionUpdatedBy AS ApplicationPaymentProviderProductModel_VersionUpdatedBy, \r\n  ");
            viewString.Append("          T.VersionDeletedBy AS ApplicationPaymentProviderProductModel_VersionDe");
            viewString.Append("letedBy, \r\n            T.VersionOwnerContactID AS ApplicationPaymentProviderProd");
            viewString.Append("uctModel_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS Applica");
            viewString.Append("tionPaymentProviderProductModel_VersionOwnerCompanyID, \r\n            T.VersionUp");
            viewString.Append("dated AS ApplicationPaymentProviderProductModel_VersionUpdated, \r\n            T.");
            viewString.Append("SupplierModelID AS ApplicationPaymentProviderProductModel_SupplierModelID, \r\n   ");
            viewString.Append("         True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.E_A");
            viewString.Append("pplicationPaymentProviderProductModel AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.ApplicationPaymentProviderProductModels", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.ApplicationPaymentProviderProductParts
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView616()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2666);
            viewString.Append("\r\n    SELECT VALUE -- Constructing ApplicationPaymentProviderProductParts\r\n     ");
            viewString.Append("   [NKD.Module.BusinessObjects.ApplicationPaymentProviderProductPart](T1.Applica");
            viewString.Append("tionPaymentProviderProductPart_ApplicationPaymentProviderProductPartID, T1.Appli");
            viewString.Append("cationPaymentProviderProductPart_ApplicationPaymentProviderProductID, T1.Applica");
            viewString.Append("tionPaymentProviderProductPart_PartID, T1.ApplicationPaymentProviderProductPart_");
            viewString.Append("UnitDefault, T1.ApplicationPaymentProviderProductPart_UnitMaximum, T1.Applicatio");
            viewString.Append("nPaymentProviderProductPart_UnitMinimum, T1.ApplicationPaymentProviderProductPar");
            viewString.Append("t_Version, T1.ApplicationPaymentProviderProductPart_VersionAntecedentID, T1.Appl");
            viewString.Append("icationPaymentProviderProductPart_VersionCertainty, T1.ApplicationPaymentProvide");
            viewString.Append("rProductPart_VersionWorkflowInstanceID, T1.ApplicationPaymentProviderProductPart");
            viewString.Append("_VersionUpdatedBy, T1.ApplicationPaymentProviderProductPart_VersionDeletedBy, T1");
            viewString.Append(".ApplicationPaymentProviderProductPart_VersionOwnerContactID, T1.ApplicationPaym");
            viewString.Append("entProviderProductPart_VersionOwnerCompanyID, T1.ApplicationPaymentProviderProdu");
            viewString.Append("ctPart_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.ApplicationPa");
            viewString.Append("ymentProviderProductPartID AS ApplicationPaymentProviderProductPart_ApplicationP");
            viewString.Append("aymentProviderProductPartID, \r\n            T.ApplicationPaymentProviderProductID");
            viewString.Append(" AS ApplicationPaymentProviderProductPart_ApplicationPaymentProviderProductID, \r");
            viewString.Append("\n            T.PartID AS ApplicationPaymentProviderProductPart_PartID, \r\n       ");
            viewString.Append("     T.UnitDefault AS ApplicationPaymentProviderProductPart_UnitDefault, \r\n     ");
            viewString.Append("       T.UnitMaximum AS ApplicationPaymentProviderProductPart_UnitMaximum, \r\n   ");
            viewString.Append("         T.UnitMinimum AS ApplicationPaymentProviderProductPart_UnitMinimum, \r\n ");
            viewString.Append("           T.Version AS ApplicationPaymentProviderProductPart_Version, \r\n       ");
            viewString.Append("     T.VersionAntecedentID AS ApplicationPaymentProviderProductPart_VersionAntec");
            viewString.Append("edentID, \r\n            T.VersionCertainty AS ApplicationPaymentProviderProductPa");
            viewString.Append("rt_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS ApplicationPay");
            viewString.Append("mentProviderProductPart_VersionWorkflowInstanceID, \r\n            T.VersionUpdate");
            viewString.Append("dBy AS ApplicationPaymentProviderProductPart_VersionUpdatedBy, \r\n            T.V");
            viewString.Append("ersionDeletedBy AS ApplicationPaymentProviderProductPart_VersionDeletedBy, \r\n   ");
            viewString.Append("         T.VersionOwnerContactID AS ApplicationPaymentProviderProductPart_Versio");
            viewString.Append("nOwnerContactID, \r\n            T.VersionOwnerCompanyID AS ApplicationPaymentProv");
            viewString.Append("iderProductPart_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS Applica");
            viewString.Append("tionPaymentProviderProductPart_VersionUpdated, \r\n            True AS _from0\r\n   ");
            viewString.Append("     FROM NKDModuleBusinessObjectsStoreContainer.E_ApplicationPaymentProviderPro");
            viewString.Append("ductPart AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.ApplicationPaymentProviderProductParts", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.ApplicationRoutes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView617()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2229);
            viewString.Append("\r\n    SELECT VALUE -- Constructing ApplicationRoutes\r\n        [NKD.Module.Busine");
            viewString.Append("ssObjects.ApplicationRoute](T1.ApplicationRoute_ApplicationRouteID, T1.Applicati");
            viewString.Append("onRoute_ApplicationID, T1.ApplicationRoute_RouteTypeID, T1.ApplicationRoute_Sequ");
            viewString.Append("ence, T1.ApplicationRoute_RouteName, T1.ApplicationRoute_RouteURL, T1.Applicatio");
            viewString.Append("nRoute_RouteMask, T1.ApplicationRoute_RedirectURL, T1.ApplicationRoute_IsExterna");
            viewString.Append("l, T1.ApplicationRoute_IsCapturingStatistic, T1.ApplicationRoute_Version, T1.App");
            viewString.Append("licationRoute_VersionAntecedentID, T1.ApplicationRoute_VersionCertainty, T1.Appl");
            viewString.Append("icationRoute_VersionWorkflowInstanceID, T1.ApplicationRoute_VersionUpdatedBy, T1");
            viewString.Append(".ApplicationRoute_VersionDeletedBy, T1.ApplicationRoute_VersionOwnerContactID, T");
            viewString.Append("1.ApplicationRoute_VersionOwnerCompanyID, T1.ApplicationRoute_VersionUpdated)\r\n ");
            viewString.Append("   FROM (\r\n        SELECT \r\n            T.ApplicationRouteID AS ApplicationRoute");
            viewString.Append("_ApplicationRouteID, \r\n            T.ApplicationID AS ApplicationRoute_Applicati");
            viewString.Append("onID, \r\n            T.RouteTypeID AS ApplicationRoute_RouteTypeID, \r\n           ");
            viewString.Append(" T.Sequence AS ApplicationRoute_Sequence, \r\n            T.RouteName AS Applicati");
            viewString.Append("onRoute_RouteName, \r\n            T.RouteURL AS ApplicationRoute_RouteURL, \r\n    ");
            viewString.Append("        T.RouteMask AS ApplicationRoute_RouteMask, \r\n            T.RedirectURL A");
            viewString.Append("S ApplicationRoute_RedirectURL, \r\n            T.IsExternal AS ApplicationRoute_I");
            viewString.Append("sExternal, \r\n            T.IsCapturingStatistic AS ApplicationRoute_IsCapturingS");
            viewString.Append("tatistic, \r\n            T.Version AS ApplicationRoute_Version, \r\n            T.V");
            viewString.Append("ersionAntecedentID AS ApplicationRoute_VersionAntecedentID, \r\n            T.Vers");
            viewString.Append("ionCertainty AS ApplicationRoute_VersionCertainty, \r\n            T.VersionWorkfl");
            viewString.Append("owInstanceID AS ApplicationRoute_VersionWorkflowInstanceID, \r\n            T.Vers");
            viewString.Append("ionUpdatedBy AS ApplicationRoute_VersionUpdatedBy, \r\n            T.VersionDelete");
            viewString.Append("dBy AS ApplicationRoute_VersionDeletedBy, \r\n            T.VersionOwnerContactID ");
            viewString.Append("AS ApplicationRoute_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID");
            viewString.Append(" AS ApplicationRoute_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS Ap");
            viewString.Append("plicationRoute_VersionUpdated, \r\n            True AS _from0\r\n        FROM NKDMod");
            viewString.Append("uleBusinessObjectsStoreContainer.E_ApplicationRoute AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.ApplicationRoutes", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.ApplicationRouteDatas
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView618()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2285);
            viewString.Append("\r\n    SELECT VALUE -- Constructing ApplicationRouteDatas\r\n        [NKD.Module.Bu");
            viewString.Append("sinessObjects.ApplicationRouteData](T1.ApplicationRouteData_ApplicationRouteData");
            viewString.Append("ID, T1.ApplicationRouteData_ApplicationRouteID, T1.ApplicationRouteData_TableTyp");
            viewString.Append("e, T1.ApplicationRouteData_ReferenceID, T1.ApplicationRouteData_ReferenceName, T");
            viewString.Append("1.ApplicationRouteData_Ticks, T1.ApplicationRouteData_ValidFrom, T1.ApplicationR");
            viewString.Append("outeData_ValidUntil, T1.ApplicationRouteData_Comment, T1.ApplicationRouteData_Ve");
            viewString.Append("rsion, T1.ApplicationRouteData_VersionAntecedentID, T1.ApplicationRouteData_Vers");
            viewString.Append("ionCertainty, T1.ApplicationRouteData_VersionWorkflowInstanceID, T1.ApplicationR");
            viewString.Append("outeData_VersionUpdatedBy, T1.ApplicationRouteData_VersionDeletedBy, T1.Applicat");
            viewString.Append("ionRouteData_VersionOwnerContactID, T1.ApplicationRouteData_VersionOwnerCompanyI");
            viewString.Append("D, T1.ApplicationRouteData_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n       ");
            viewString.Append("     T.ApplicationRouteDataID AS ApplicationRouteData_ApplicationRouteDataID, \r\n");
            viewString.Append("            T.ApplicationRouteID AS ApplicationRouteData_ApplicationRouteID, \r\n ");
            viewString.Append("           T.TableType AS ApplicationRouteData_TableType, \r\n            T.Refere");
            viewString.Append("nceID AS ApplicationRouteData_ReferenceID, \r\n            T.ReferenceName AS Appl");
            viewString.Append("icationRouteData_ReferenceName, \r\n            T.Ticks AS ApplicationRouteData_Ti");
            viewString.Append("cks, \r\n            T.ValidFrom AS ApplicationRouteData_ValidFrom, \r\n            ");
            viewString.Append("T.ValidUntil AS ApplicationRouteData_ValidUntil, \r\n            T.Comment AS Appl");
            viewString.Append("icationRouteData_Comment, \r\n            T.Version AS ApplicationRouteData_Versio");
            viewString.Append("n, \r\n            T.VersionAntecedentID AS ApplicationRouteData_VersionAntecedent");
            viewString.Append("ID, \r\n            T.VersionCertainty AS ApplicationRouteData_VersionCertainty, \r");
            viewString.Append("\n            T.VersionWorkflowInstanceID AS ApplicationRouteData_VersionWorkflow");
            viewString.Append("InstanceID, \r\n            T.VersionUpdatedBy AS ApplicationRouteData_VersionUpda");
            viewString.Append("tedBy, \r\n            T.VersionDeletedBy AS ApplicationRouteData_VersionDeletedBy");
            viewString.Append(", \r\n            T.VersionOwnerContactID AS ApplicationRouteData_VersionOwnerCont");
            viewString.Append("actID, \r\n            T.VersionOwnerCompanyID AS ApplicationRouteData_VersionOwne");
            viewString.Append("rCompanyID, \r\n            T.VersionUpdated AS ApplicationRouteData_VersionUpdate");
            viewString.Append("d, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreConta");
            viewString.Append("iner.E_ApplicationRouteData AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.ApplicationRouteDatas", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.ApplicationRouteParameters
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView619()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.ApplicationRouteParameters", "\r\n    SELECT VALUE -- Constructing ApplicationRouteParameters\r\n        [NKD.Modul" +
                    "e.BusinessObjects.ApplicationRouteParameter](T1.ApplicationRouteParameter_Applic" +
                    "ationRouteID, T1.ApplicationRouteParameter_RouteParameterName, T1.ApplicationRou" +
                    "teParameter_RouteParameterValue, T1.ApplicationRouteParameter_Version, T1.Applic" +
                    "ationRouteParameter_VersionAntecedentID, T1.ApplicationRouteParameter_VersionCer" +
                    "tainty, T1.ApplicationRouteParameter_VersionWorkflowInstanceID, T1.ApplicationRo" +
                    "uteParameter_VersionUpdatedBy, T1.ApplicationRouteParameter_VersionDeletedBy, T1" +
                    ".ApplicationRouteParameter_VersionOwnerContactID, T1.ApplicationRouteParameter_V" +
                    "ersionOwnerCompanyID, T1.ApplicationRouteParameter_VersionUpdated, T1.Applicatio" +
                    "nRouteParameter_ApplicationRouteParameterID)\r\n    FROM (\r\n        SELECT \r\n     " +
                    "       T.ApplicationRouteID AS ApplicationRouteParameter_ApplicationRouteID, \r\n " +
                    "           T.RouteParameterName AS ApplicationRouteParameter_RouteParameterName," +
                    " \r\n            T.RouteParameterValue AS ApplicationRouteParameter_RouteParameter" +
                    "Value, \r\n            T.Version AS ApplicationRouteParameter_Version, \r\n         " +
                    "   T.VersionAntecedentID AS ApplicationRouteParameter_VersionAntecedentID, \r\n   " +
                    "         T.VersionCertainty AS ApplicationRouteParameter_VersionCertainty, \r\n   " +
                    "         T.VersionWorkflowInstanceID AS ApplicationRouteParameter_VersionWorkflo" +
                    "wInstanceID, \r\n            T.VersionUpdatedBy AS ApplicationRouteParameter_Versi" +
                    "onUpdatedBy, \r\n            T.VersionDeletedBy AS ApplicationRouteParameter_Versi" +
                    "onDeletedBy, \r\n            T.VersionOwnerContactID AS ApplicationRouteParameter_" +
                    "VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS ApplicationRoute" +
                    "Parameter_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS ApplicationRo" +
                    "uteParameter_VersionUpdated, \r\n            T.ApplicationRouteParameterID AS Appl" +
                    "icationRouteParameter_ApplicationRouteParameterID, \r\n            True AS _from0\r" +
                    "\n        FROM NKDModuleBusinessObjectsStoreContainer.E_ApplicationRouteParameter" +
                    " AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.AssetDatas
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView620()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2528);
            viewString.Append("\r\n    SELECT VALUE -- Constructing AssetDatas\r\n        [NKD.Module.BusinessObjec");
            viewString.Append("ts.AssetData](T1.AssetData_AssetDataID, T1.AssetData_AssetID, T1.AssetData_Table");
            viewString.Append("Type, T1.AssetData_ReferenceID, T1.AssetData_ReferenceName, T1.AssetData_Availab");
            viewString.Append("ilityID, T1.AssetData_IsFixed, T1.AssetData_CoverageProvinceID, T1.AssetData_Cur");
            viewString.Append("rentLocationID, T1.AssetData_TickUnitID, T1.AssetData_Ticks, T1.AssetData_TicksO");
            viewString.Append("ffset, T1.AssetData_TicksResolution, T1.AssetData_ValidFrom, T1.AssetData_ValidU");
            viewString.Append("ntil, T1.AssetData_Culture, T1.AssetData_Weight, T1.AssetData_Comment, T1.AssetD");
            viewString.Append("ata_Version, T1.AssetData_VersionAntecedentID, T1.AssetData_VersionCertainty, T1");
            viewString.Append(".AssetData_VersionWorkflowInstanceID, T1.AssetData_VersionUpdatedBy, T1.AssetDat");
            viewString.Append("a_VersionDeletedBy, T1.AssetData_VersionOwnerContactID, T1.AssetData_VersionOwne");
            viewString.Append("rCompanyID, T1.AssetData_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n         ");
            viewString.Append("   T.AssetDataID AS AssetData_AssetDataID, \r\n            T.AssetID AS AssetData_");
            viewString.Append("AssetID, \r\n            T.TableType AS AssetData_TableType, \r\n            T.Refer");
            viewString.Append("enceID AS AssetData_ReferenceID, \r\n            T.ReferenceName AS AssetData_Refe");
            viewString.Append("renceName, \r\n            T.AvailabilityID AS AssetData_AvailabilityID, \r\n       ");
            viewString.Append("     T.IsFixed AS AssetData_IsFixed, \r\n            T.CoverageProvinceID AS Asset");
            viewString.Append("Data_CoverageProvinceID, \r\n            T.CurrentLocationID AS AssetData_CurrentL");
            viewString.Append("ocationID, \r\n            T.TickUnitID AS AssetData_TickUnitID, \r\n            T.T");
            viewString.Append("icks AS AssetData_Ticks, \r\n            T.TicksOffset AS AssetData_TicksOffset, \r");
            viewString.Append("\n            T.TicksResolution AS AssetData_TicksResolution, \r\n            T.Val");
            viewString.Append("idFrom AS AssetData_ValidFrom, \r\n            T.ValidUntil AS AssetData_ValidUnti");
            viewString.Append("l, \r\n            T.Culture AS AssetData_Culture, \r\n            T.Weight AS Asset");
            viewString.Append("Data_Weight, \r\n            T.Comment AS AssetData_Comment, \r\n            T.Versi");
            viewString.Append("on AS AssetData_Version, \r\n            T.VersionAntecedentID AS AssetData_Versio");
            viewString.Append("nAntecedentID, \r\n            T.VersionCertainty AS AssetData_VersionCertainty, \r");
            viewString.Append("\n            T.VersionWorkflowInstanceID AS AssetData_VersionWorkflowInstanceID,");
            viewString.Append(" \r\n            T.VersionUpdatedBy AS AssetData_VersionUpdatedBy, \r\n            T");
            viewString.Append(".VersionDeletedBy AS AssetData_VersionDeletedBy, \r\n            T.VersionOwnerCon");
            viewString.Append("tactID AS AssetData_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID");
            viewString.Append(" AS AssetData_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS AssetData");
            viewString.Append("_VersionUpdated, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObj");
            viewString.Append("ectsStoreContainer.E_AssetData AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.AssetDatas", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.AssetProductions
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView621()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2661);
            viewString.Append("\r\n    SELECT VALUE -- Constructing AssetProductions\r\n        [NKD.Module.Busines");
            viewString.Append("sObjects.AssetProduction](T1.AssetProduction_AssetProductionID, T1.AssetProducti");
            viewString.Append("on_AssetID, T1.AssetProduction_ProductionParameterID, T1.AssetProduction_ProRata");
            viewString.Append("Units, T1.AssetProduction_ProRataCost, T1.AssetProduction_EstimatedProRataValue,");
            viewString.Append(" T1.AssetProduction_ProRataUnitMinimum, T1.AssetProduction_ProRataUnitMaximum, T");
            viewString.Append("1.AssetProduction_ProRataUnitOptimum, T1.AssetProduction_AssetProductionGroupID,");
            viewString.Append(" T1.AssetProduction_Weight, T1.AssetProduction_Variance, T1.AssetProduction_Corr");
            viewString.Append("ection, T1.AssetProduction_Comment, T1.AssetProduction_Version, T1.AssetProducti");
            viewString.Append("on_VersionAntecedentID, T1.AssetProduction_VersionCertainty, T1.AssetProduction_");
            viewString.Append("VersionWorkflowInstanceID, T1.AssetProduction_VersionUpdatedBy, T1.AssetProducti");
            viewString.Append("on_VersionDeletedBy, T1.AssetProduction_VersionOwnerContactID, T1.AssetProductio");
            viewString.Append("n_VersionOwnerCompanyID, T1.AssetProduction_VersionUpdated)\r\n    FROM (\r\n       ");
            viewString.Append(" SELECT \r\n            T.AssetProductionID AS AssetProduction_AssetProductionID, ");
            viewString.Append("\r\n            T.AssetID AS AssetProduction_AssetID, \r\n            T.ProductionPa");
            viewString.Append("rameterID AS AssetProduction_ProductionParameterID, \r\n            T.ProRataUnits");
            viewString.Append(" AS AssetProduction_ProRataUnits, \r\n            T.ProRataCost AS AssetProduction");
            viewString.Append("_ProRataCost, \r\n            T.EstimatedProRataValue AS AssetProduction_Estimated");
            viewString.Append("ProRataValue, \r\n            T.ProRataUnitMinimum AS AssetProduction_ProRataUnitM");
            viewString.Append("inimum, \r\n            T.ProRataUnitMaximum AS AssetProduction_ProRataUnitMaximum");
            viewString.Append(", \r\n            T.ProRataUnitOptimum AS AssetProduction_ProRataUnitOptimum, \r\n  ");
            viewString.Append("          T.AssetProductionGroupID AS AssetProduction_AssetProductionGroupID, \r\n");
            viewString.Append("            T.Weight AS AssetProduction_Weight, \r\n            T.Variance AS Asse");
            viewString.Append("tProduction_Variance, \r\n            T.Correction AS AssetProduction_Correction, ");
            viewString.Append("\r\n            T.Comment AS AssetProduction_Comment, \r\n            T.Version AS A");
            viewString.Append("ssetProduction_Version, \r\n            T.VersionAntecedentID AS AssetProduction_V");
            viewString.Append("ersionAntecedentID, \r\n            T.VersionCertainty AS AssetProduction_VersionC");
            viewString.Append("ertainty, \r\n            T.VersionWorkflowInstanceID AS AssetProduction_VersionWo");
            viewString.Append("rkflowInstanceID, \r\n            T.VersionUpdatedBy AS AssetProduction_VersionUpd");
            viewString.Append("atedBy, \r\n            T.VersionDeletedBy AS AssetProduction_VersionDeletedBy, \r\n");
            viewString.Append("            T.VersionOwnerContactID AS AssetProduction_VersionOwnerContactID, \r\n");
            viewString.Append("            T.VersionOwnerCompanyID AS AssetProduction_VersionOwnerCompanyID, \r\n");
            viewString.Append("            T.VersionUpdated AS AssetProduction_VersionUpdated, \r\n            Tr");
            viewString.Append("ue AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.E_AssetProduct");
            viewString.Append("ion AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.AssetProductions", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.ContactCreditCards
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView622()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2669);
            viewString.Append("\r\n    SELECT VALUE -- Constructing ContactCreditCards\r\n        [NKD.Module.Busin");
            viewString.Append("essObjects.ContactCreditCard](T1.ContactCreditCard_ContactCreditCardID, T1.Conta");
            viewString.Append("ctCreditCard_ContactID, T1.ContactCreditCard_CreditCardName, T1.ContactCreditCar");
            viewString.Append("d_Sequence, T1.ContactCreditCard_CreditCardType, T1.ContactCreditCard_CreditCard");
            viewString.Append(", T1.ContactCreditCard_CreditCardMasked, T1.ContactCreditCard_Expiry, T1.Contact");
            viewString.Append("CreditCard_Valid, T1.ContactCreditCard_CVV, T1.ContactCreditCard_Version, T1.Con");
            viewString.Append("tactCreditCard_VersionAntecedentID, T1.ContactCreditCard_VersionCertainty, T1.Co");
            viewString.Append("ntactCreditCard_VersionWorkflowInstanceID, T1.ContactCreditCard_VersionUpdatedBy");
            viewString.Append(", T1.ContactCreditCard_VersionDeletedBy, T1.ContactCreditCard_VersionOwnerContac");
            viewString.Append("tID, T1.ContactCreditCard_VersionOwnerCompanyID, T1.ContactCreditCard_VersionUpd");
            viewString.Append("ated, T1.ContactCreditCard_ApplicationPaymentProviderContactID, T1.ContactCredit");
            viewString.Append("Card_ApplicationPaymentProviderToken, T1.ContactCreditCard_DefaultCurrencyID)\r\n ");
            viewString.Append("   FROM (\r\n        SELECT \r\n            T.ContactCreditCardID AS ContactCreditCa");
            viewString.Append("rd_ContactCreditCardID, \r\n            T.ContactID AS ContactCreditCard_ContactID");
            viewString.Append(", \r\n            T.CreditCardName AS ContactCreditCard_CreditCardName, \r\n        ");
            viewString.Append("    T.Sequence AS ContactCreditCard_Sequence, \r\n            T.CreditCardType AS ");
            viewString.Append("ContactCreditCard_CreditCardType, \r\n            T.CreditCard AS ContactCreditCar");
            viewString.Append("d_CreditCard, \r\n            T.CreditCardMasked AS ContactCreditCard_CreditCardMa");
            viewString.Append("sked, \r\n            T.Expiry AS ContactCreditCard_Expiry, \r\n            T.Valid ");
            viewString.Append("AS ContactCreditCard_Valid, \r\n            T.CVV AS ContactCreditCard_CVV, \r\n    ");
            viewString.Append("        T.Version AS ContactCreditCard_Version, \r\n            T.VersionAnteceden");
            viewString.Append("tID AS ContactCreditCard_VersionAntecedentID, \r\n            T.VersionCertainty A");
            viewString.Append("S ContactCreditCard_VersionCertainty, \r\n            T.VersionWorkflowInstanceID ");
            viewString.Append("AS ContactCreditCard_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy");
            viewString.Append(" AS ContactCreditCard_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS Cont");
            viewString.Append("actCreditCard_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS Contact");
            viewString.Append("CreditCard_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS Conta");
            viewString.Append("ctCreditCard_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS ContactCre");
            viewString.Append("ditCard_VersionUpdated, \r\n            T.ApplicationPaymentProviderContactID AS C");
            viewString.Append("ontactCreditCard_ApplicationPaymentProviderContactID, \r\n            T.Applicatio");
            viewString.Append("nPaymentProviderToken AS ContactCreditCard_ApplicationPaymentProviderToken, \r\n  ");
            viewString.Append("          T.DefaultCurrencyID AS ContactCreditCard_DefaultCurrencyID, \r\n        ");
            viewString.Append("    True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.E_Contac");
            viewString.Append("tCreditCard AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.ContactCreditCards", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryAccountTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView623()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2200);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryAccountTypes\r\n        [NKD.Module.B");
            viewString.Append("usinessObjects.DictionaryAccountType](T1.DictionaryAccountType_AccountTypeID, T1");
            viewString.Append(".DictionaryAccountType_StandardAccountTypeName, T1.DictionaryAccountType_CustomA");
            viewString.Append("ccountTypeName, T1.DictionaryAccountType_Description, T1.DictionaryAccountType_F");
            viewString.Append("ullDescription, T1.DictionaryAccountType_Thumbnail, T1.DictionaryAccountType_Ori");
            viewString.Append("ginalFileDataID, T1.DictionaryAccountType_Version, T1.DictionaryAccountType_Vers");
            viewString.Append("ionAntecedentID, T1.DictionaryAccountType_VersionCertainty, T1.DictionaryAccount");
            viewString.Append("Type_VersionWorkflowInstanceID, T1.DictionaryAccountType_VersionUpdatedBy, T1.Di");
            viewString.Append("ctionaryAccountType_VersionDeletedBy, T1.DictionaryAccountType_VersionOwnerConta");
            viewString.Append("ctID, T1.DictionaryAccountType_VersionOwnerCompanyID, T1.DictionaryAccountType_V");
            viewString.Append("ersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.AccountTypeID AS Dict");
            viewString.Append("ionaryAccountType_AccountTypeID, \r\n            T.StandardAccountTypeName AS Dict");
            viewString.Append("ionaryAccountType_StandardAccountTypeName, \r\n            T.CustomAccountTypeName");
            viewString.Append(" AS DictionaryAccountType_CustomAccountTypeName, \r\n            T.Description AS ");
            viewString.Append("DictionaryAccountType_Description, \r\n            T.FullDescription AS Dictionary");
            viewString.Append("AccountType_FullDescription, \r\n            T.Thumbnail AS DictionaryAccountType_");
            viewString.Append("Thumbnail, \r\n            T.OriginalFileDataID AS DictionaryAccountType_OriginalF");
            viewString.Append("ileDataID, \r\n            T.Version AS DictionaryAccountType_Version, \r\n         ");
            viewString.Append("   T.VersionAntecedentID AS DictionaryAccountType_VersionAntecedentID, \r\n       ");
            viewString.Append("     T.VersionCertainty AS DictionaryAccountType_VersionCertainty, \r\n           ");
            viewString.Append(" T.VersionWorkflowInstanceID AS DictionaryAccountType_VersionWorkflowInstanceID,");
            viewString.Append(" \r\n            T.VersionUpdatedBy AS DictionaryAccountType_VersionUpdatedBy, \r\n ");
            viewString.Append("           T.VersionDeletedBy AS DictionaryAccountType_VersionDeletedBy, \r\n     ");
            viewString.Append("       T.VersionOwnerContactID AS DictionaryAccountType_VersionOwnerContactID, \r");
            viewString.Append("\n            T.VersionOwnerCompanyID AS DictionaryAccountType_VersionOwnerCompan");
            viewString.Append("yID, \r\n            T.VersionUpdated AS DictionaryAccountType_VersionUpdated, \r\n ");
            viewString.Append("           True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.E");
            viewString.Append("_DictionaryAccountType AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryAccountTypes", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryOrderStatus
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView624()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2199);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryOrderStatus\r\n        [NKD.Module.Bu");
            viewString.Append("sinessObjects.DictionaryOrderStatus](T1.DictionaryOrderStatus_OrderStatusID, T1.");
            viewString.Append("DictionaryOrderStatus_StandardOrderStatusName, T1.DictionaryOrderStatus_CustomOr");
            viewString.Append("derStatusName, T1.DictionaryOrderStatus_Description, T1.DictionaryOrderStatus_Fu");
            viewString.Append("llDescription, T1.DictionaryOrderStatus_Thumbnail, T1.DictionaryOrderStatus_Orig");
            viewString.Append("inalFileDataID, T1.DictionaryOrderStatus_Version, T1.DictionaryOrderStatus_Versi");
            viewString.Append("onAntecedentID, T1.DictionaryOrderStatus_VersionCertainty, T1.DictionaryOrderSta");
            viewString.Append("tus_VersionWorkflowInstanceID, T1.DictionaryOrderStatus_VersionUpdatedBy, T1.Dic");
            viewString.Append("tionaryOrderStatus_VersionDeletedBy, T1.DictionaryOrderStatus_VersionOwnerContac");
            viewString.Append("tID, T1.DictionaryOrderStatus_VersionOwnerCompanyID, T1.DictionaryOrderStatus_Ve");
            viewString.Append("rsionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.OrderStatusID AS Dicti");
            viewString.Append("onaryOrderStatus_OrderStatusID, \r\n            T.StandardOrderStatusName AS Dicti");
            viewString.Append("onaryOrderStatus_StandardOrderStatusName, \r\n            T.CustomOrderStatusName ");
            viewString.Append("AS DictionaryOrderStatus_CustomOrderStatusName, \r\n            T.Description AS D");
            viewString.Append("ictionaryOrderStatus_Description, \r\n            T.FullDescription AS DictionaryO");
            viewString.Append("rderStatus_FullDescription, \r\n            T.Thumbnail AS DictionaryOrderStatus_T");
            viewString.Append("humbnail, \r\n            T.OriginalFileDataID AS DictionaryOrderStatus_OriginalFi");
            viewString.Append("leDataID, \r\n            T.Version AS DictionaryOrderStatus_Version, \r\n          ");
            viewString.Append("  T.VersionAntecedentID AS DictionaryOrderStatus_VersionAntecedentID, \r\n        ");
            viewString.Append("    T.VersionCertainty AS DictionaryOrderStatus_VersionCertainty, \r\n            ");
            viewString.Append("T.VersionWorkflowInstanceID AS DictionaryOrderStatus_VersionWorkflowInstanceID, ");
            viewString.Append("\r\n            T.VersionUpdatedBy AS DictionaryOrderStatus_VersionUpdatedBy, \r\n  ");
            viewString.Append("          T.VersionDeletedBy AS DictionaryOrderStatus_VersionDeletedBy, \r\n      ");
            viewString.Append("      T.VersionOwnerContactID AS DictionaryOrderStatus_VersionOwnerContactID, \r\n");
            viewString.Append("            T.VersionOwnerCompanyID AS DictionaryOrderStatus_VersionOwnerCompany");
            viewString.Append("ID, \r\n            T.VersionUpdated AS DictionaryOrderStatus_VersionUpdated, \r\n  ");
            viewString.Append("          True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.E_");
            viewString.Append("DictionaryOrderStatus AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryOrderStatus", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryRouteTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView625()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2112);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryRouteTypes\r\n        [NKD.Module.Bus");
            viewString.Append("inessObjects.DictionaryRouteType](T1.DictionaryRouteType_RouteTypeID, T1.Diction");
            viewString.Append("aryRouteType_StandardRouteTypeName, T1.DictionaryRouteType_CustomRouteTypeName, ");
            viewString.Append("T1.DictionaryRouteType_Description, T1.DictionaryRouteType_FullDescription, T1.D");
            viewString.Append("ictionaryRouteType_Thumbnail, T1.DictionaryRouteType_OriginalFileDataID, T1.Dict");
            viewString.Append("ionaryRouteType_Version, T1.DictionaryRouteType_VersionAntecedentID, T1.Dictiona");
            viewString.Append("ryRouteType_VersionCertainty, T1.DictionaryRouteType_VersionWorkflowInstanceID, ");
            viewString.Append("T1.DictionaryRouteType_VersionUpdatedBy, T1.DictionaryRouteType_VersionDeletedBy");
            viewString.Append(", T1.DictionaryRouteType_VersionOwnerContactID, T1.DictionaryRouteType_VersionOw");
            viewString.Append("nerCompanyID, T1.DictionaryRouteType_VersionUpdated)\r\n    FROM (\r\n        SELECT");
            viewString.Append(" \r\n            T.RouteTypeID AS DictionaryRouteType_RouteTypeID, \r\n            T");
            viewString.Append(".StandardRouteTypeName AS DictionaryRouteType_StandardRouteTypeName, \r\n         ");
            viewString.Append("   T.CustomRouteTypeName AS DictionaryRouteType_CustomRouteTypeName, \r\n         ");
            viewString.Append("   T.Description AS DictionaryRouteType_Description, \r\n            T.FullDescrip");
            viewString.Append("tion AS DictionaryRouteType_FullDescription, \r\n            T.Thumbnail AS Dictio");
            viewString.Append("naryRouteType_Thumbnail, \r\n            T.OriginalFileDataID AS DictionaryRouteTy");
            viewString.Append("pe_OriginalFileDataID, \r\n            T.Version AS DictionaryRouteType_Version, \r");
            viewString.Append("\n            T.VersionAntecedentID AS DictionaryRouteType_VersionAntecedentID, \r");
            viewString.Append("\n            T.VersionCertainty AS DictionaryRouteType_VersionCertainty, \r\n     ");
            viewString.Append("       T.VersionWorkflowInstanceID AS DictionaryRouteType_VersionWorkflowInstanc");
            viewString.Append("eID, \r\n            T.VersionUpdatedBy AS DictionaryRouteType_VersionUpdatedBy, \r");
            viewString.Append("\n            T.VersionDeletedBy AS DictionaryRouteType_VersionDeletedBy, \r\n     ");
            viewString.Append("       T.VersionOwnerContactID AS DictionaryRouteType_VersionOwnerContactID, \r\n ");
            viewString.Append("           T.VersionOwnerCompanyID AS DictionaryRouteType_VersionOwnerCompanyID,");
            viewString.Append(" \r\n            T.VersionUpdated AS DictionaryRouteType_VersionUpdated, \r\n       ");
            viewString.Append("     True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.E_Dicti");
            viewString.Append("onaryRouteType AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryRouteTypes", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.Downloads
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView626()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2276);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Downloads\r\n        [NKD.Module.BusinessObject");
            viewString.Append("s.Download](T1.Download_DownloadID, T1.Download_FileDataID, T1.Download_FileAllo");
            viewString.Append("cated, T1.Download_FileChecksum, T1.Download_FilterCompanyID, T1.Download_Filter");
            viewString.Append("ContactID, T1.Download_FilterServerID, T1.Download_FilterApplicationID, T1.Downl");
            viewString.Append("oad_FilterClientIP, T1.Download_LicenseID, T1.Download_LicenseAssetID, T1.Downlo");
            viewString.Append("ad_RemainingDownloads, T1.Download_ValidFrom, T1.Download_ValidUntil, T1.Downloa");
            viewString.Append("d_Version, T1.Download_VersionAntecedentID, T1.Download_VersionCertainty, T1.Dow");
            viewString.Append("nload_VersionWorkflowInstanceID, T1.Download_VersionUpdatedBy, T1.Download_Versi");
            viewString.Append("onDeletedBy, T1.Download_VersionOwnerContactID, T1.Download_VersionOwnerCompanyI");
            viewString.Append("D, T1.Download_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.Downl");
            viewString.Append("oadID AS Download_DownloadID, \r\n            T.FileDataID AS Download_FileDataID,");
            viewString.Append(" \r\n            T.FileAllocated AS Download_FileAllocated, \r\n            T.FileCh");
            viewString.Append("ecksum AS Download_FileChecksum, \r\n            T.FilterCompanyID AS Download_Fil");
            viewString.Append("terCompanyID, \r\n            T.FilterContactID AS Download_FilterContactID, \r\n   ");
            viewString.Append("         T.FilterServerID AS Download_FilterServerID, \r\n            T.FilterAppl");
            viewString.Append("icationID AS Download_FilterApplicationID, \r\n            T.FilterClientIP AS Dow");
            viewString.Append("nload_FilterClientIP, \r\n            T.LicenseID AS Download_LicenseID, \r\n       ");
            viewString.Append("     T.LicenseAssetID AS Download_LicenseAssetID, \r\n            T.RemainingDownl");
            viewString.Append("oads AS Download_RemainingDownloads, \r\n            T.ValidFrom AS Download_Valid");
            viewString.Append("From, \r\n            T.ValidUntil AS Download_ValidUntil, \r\n            T.Version");
            viewString.Append(" AS Download_Version, \r\n            T.VersionAntecedentID AS Download_VersionAnt");
            viewString.Append("ecedentID, \r\n            T.VersionCertainty AS Download_VersionCertainty, \r\n    ");
            viewString.Append("        T.VersionWorkflowInstanceID AS Download_VersionWorkflowInstanceID, \r\n   ");
            viewString.Append("         T.VersionUpdatedBy AS Download_VersionUpdatedBy, \r\n            T.Versio");
            viewString.Append("nDeletedBy AS Download_VersionDeletedBy, \r\n            T.VersionOwnerContactID A");
            viewString.Append("S Download_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS Downl");
            viewString.Append("oad_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS Download_VersionUpd");
            viewString.Append("ated, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreCo");
            viewString.Append("ntainer.E_Download AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.Downloads", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.Problems
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView627()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3255);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Problems\r\n        [NKD.Module.BusinessObjects");
            viewString.Append(".Problem](T1.Problem_ProblemID, T1.Problem_ProblemName, T1.Problem_OptimiseForPa");
            viewString.Append("rameterID, T1.Problem_ProduceForParameterID, T1.Problem_OptimumMin, T1.Problem_O");
            viewString.Append("ptimumMax, T1.Problem_ProductionMin, T1.Problem_ProductionMax, T1.Problem_Comple");
            viewString.Append("xity, T1.Problem_IterationsMax, T1.Problem_SolutionETA, T1.Problem_LiveUpdateCli");
            viewString.Append("ent, T1.Problem_LiveUpdateServer, T1.Problem_UniversalPriority, T1.Problem_LastT");
            viewString.Append("hreadID, T1.Problem_LastServerID, T1.Problem_IsThreadAlive, T1.Problem_ProblemCo");
            viewString.Append("mpleted, T1.Problem_ProblemTerminated, T1.Problem_ExecutedFromLocationID, T1.Pro");
            viewString.Append("blem_DefaultTickUnitID, T1.Problem_DefaultTicks, T1.Problem_DefaultTicksOffset, ");
            viewString.Append("T1.Problem_DefaultTicksResolution, T1.Problem_DefaultCulture, T1.Problem_Version");
            viewString.Append(", T1.Problem_VersionAntecedentID, T1.Problem_VersionCertainty, T1.Problem_Versio");
            viewString.Append("nWorkflowInstanceID, T1.Problem_VersionUpdatedBy, T1.Problem_VersionDeletedBy, T");
            viewString.Append("1.Problem_VersionOwnerContactID, T1.Problem_VersionOwnerCompanyID, T1.Problem_Ve");
            viewString.Append("rsionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.ProblemID AS Problem_P");
            viewString.Append("roblemID, \r\n            T.ProblemName AS Problem_ProblemName, \r\n            T.Op");
            viewString.Append("timiseForParameterID AS Problem_OptimiseForParameterID, \r\n            T.ProduceF");
            viewString.Append("orParameterID AS Problem_ProduceForParameterID, \r\n            T.OptimumMin AS Pr");
            viewString.Append("oblem_OptimumMin, \r\n            T.OptimumMax AS Problem_OptimumMax, \r\n          ");
            viewString.Append("  T.ProductionMin AS Problem_ProductionMin, \r\n            T.ProductionMax AS Pro");
            viewString.Append("blem_ProductionMax, \r\n            T.Complexity AS Problem_Complexity, \r\n        ");
            viewString.Append("    T.IterationsMax AS Problem_IterationsMax, \r\n            T.SolutionETA AS Pro");
            viewString.Append("blem_SolutionETA, \r\n            T.LiveUpdateClient AS Problem_LiveUpdateClient, ");
            viewString.Append("\r\n            T.LiveUpdateServer AS Problem_LiveUpdateServer, \r\n            T.Un");
            viewString.Append("iversalPriority AS Problem_UniversalPriority, \r\n            T.LastThreadID AS Pr");
            viewString.Append("oblem_LastThreadID, \r\n            T.LastServerID AS Problem_LastServerID, \r\n    ");
            viewString.Append("        T.IsThreadAlive AS Problem_IsThreadAlive, \r\n            T.ProblemComplet");
            viewString.Append("ed AS Problem_ProblemCompleted, \r\n            T.ProblemTerminated AS Problem_Pro");
            viewString.Append("blemTerminated, \r\n            T.ExecutedFromLocationID AS Problem_ExecutedFromLo");
            viewString.Append("cationID, \r\n            T.DefaultTickUnitID AS Problem_DefaultTickUnitID, \r\n    ");
            viewString.Append("        T.DefaultTicks AS Problem_DefaultTicks, \r\n            T.DefaultTicksOffs");
            viewString.Append("et AS Problem_DefaultTicksOffset, \r\n            T.DefaultTicksResolution AS Prob");
            viewString.Append("lem_DefaultTicksResolution, \r\n            T.DefaultCulture AS Problem_DefaultCul");
            viewString.Append("ture, \r\n            T.Version AS Problem_Version, \r\n            T.VersionAnteced");
            viewString.Append("entID AS Problem_VersionAntecedentID, \r\n            T.VersionCertainty AS Proble");
            viewString.Append("m_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS Problem_Version");
            viewString.Append("WorkflowInstanceID, \r\n            T.VersionUpdatedBy AS Problem_VersionUpdatedBy");
            viewString.Append(", \r\n            T.VersionDeletedBy AS Problem_VersionDeletedBy, \r\n            T.");
            viewString.Append("VersionOwnerContactID AS Problem_VersionOwnerContactID, \r\n            T.VersionO");
            viewString.Append("wnerCompanyID AS Problem_VersionOwnerCompanyID, \r\n            T.VersionUpdated A");
            viewString.Append("S Problem_VersionUpdated, \r\n            True AS _from0\r\n        FROM NKDModuleBu");
            viewString.Append("sinessObjectsStoreContainer.E_Problem AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.Problems", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.ProblemAssetDatas
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView628()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.ProblemAssetDatas", "\r\n    SELECT VALUE -- Constructing ProblemAssetDatas\r\n        [NKD.Module.Busines" +
                    "sObjects.ProblemAssetData](T1.ProblemAssetData_ProblemAssetDataID, T1.ProblemAss" +
                    "etData_ProblemID, T1.ProblemAssetData_AssetDataID, T1.ProblemAssetData_Version, " +
                    "T1.ProblemAssetData_VersionAntecedentID, T1.ProblemAssetData_VersionCertainty, T" +
                    "1.ProblemAssetData_VersionWorkflowInstanceID, T1.ProblemAssetData_VersionUpdated" +
                    "By, T1.ProblemAssetData_VersionDeletedBy, T1.ProblemAssetData_VersionOwnerContac" +
                    "tID, T1.ProblemAssetData_VersionOwnerCompanyID, T1.ProblemAssetData_VersionUpdat" +
                    "ed)\r\n    FROM (\r\n        SELECT \r\n            T.ProblemAssetDataID AS ProblemAss" +
                    "etData_ProblemAssetDataID, \r\n            T.ProblemID AS ProblemAssetData_Problem" +
                    "ID, \r\n            T.AssetDataID AS ProblemAssetData_AssetDataID, \r\n            T" +
                    ".Version AS ProblemAssetData_Version, \r\n            T.VersionAntecedentID AS Pro" +
                    "blemAssetData_VersionAntecedentID, \r\n            T.VersionCertainty AS ProblemAs" +
                    "setData_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS ProblemAs" +
                    "setData_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS ProblemAs" +
                    "setData_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS ProblemAssetData_V" +
                    "ersionDeletedBy, \r\n            T.VersionOwnerContactID AS ProblemAssetData_Versi" +
                    "onOwnerContactID, \r\n            T.VersionOwnerCompanyID AS ProblemAssetData_Vers" +
                    "ionOwnerCompanyID, \r\n            T.VersionUpdated AS ProblemAssetData_VersionUpd" +
                    "ated, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreCo" +
                    "ntainer.E_ProblemAssetData AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.ProblemRequirements
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView629()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.ProblemRequirements", "\r\n    SELECT VALUE -- Constructing ProblemRequirements\r\n        [NKD.Module.Busin" +
                    "essObjects.ProblemRequirement](T1.ProblemRequirement_ProblemRequirementID, T1.Pr" +
                    "oblemRequirement_ProblemID, T1.ProblemRequirement_ProblemRequirementName, T1.Pro" +
                    "blemRequirement_Complexity, T1.ProblemRequirement_IterationsMax, T1.ProblemRequi" +
                    "rement_Version, T1.ProblemRequirement_VersionAntecedentID, T1.ProblemRequirement" +
                    "_VersionCertainty, T1.ProblemRequirement_VersionWorkflowInstanceID, T1.ProblemRe" +
                    "quirement_VersionUpdatedBy, T1.ProblemRequirement_VersionDeletedBy, T1.ProblemRe" +
                    "quirement_VersionOwnerContactID, T1.ProblemRequirement_VersionOwnerCompanyID, T1" +
                    ".ProblemRequirement_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T." +
                    "ProblemRequirementID AS ProblemRequirement_ProblemRequirementID, \r\n            T" +
                    ".ProblemID AS ProblemRequirement_ProblemID, \r\n            T.ProblemRequirementNa" +
                    "me AS ProblemRequirement_ProblemRequirementName, \r\n            T.Complexity AS P" +
                    "roblemRequirement_Complexity, \r\n            T.IterationsMax AS ProblemRequiremen" +
                    "t_IterationsMax, \r\n            T.Version AS ProblemRequirement_Version, \r\n      " +
                    "      T.VersionAntecedentID AS ProblemRequirement_VersionAntecedentID, \r\n       " +
                    "     T.VersionCertainty AS ProblemRequirement_VersionCertainty, \r\n            T." +
                    "VersionWorkflowInstanceID AS ProblemRequirement_VersionWorkflowInstanceID, \r\n   " +
                    "         T.VersionUpdatedBy AS ProblemRequirement_VersionUpdatedBy, \r\n          " +
                    "  T.VersionDeletedBy AS ProblemRequirement_VersionDeletedBy, \r\n            T.Ver" +
                    "sionOwnerContactID AS ProblemRequirement_VersionOwnerContactID, \r\n            T." +
                    "VersionOwnerCompanyID AS ProblemRequirement_VersionOwnerCompanyID, \r\n           " +
                    " T.VersionUpdated AS ProblemRequirement_VersionUpdated, \r\n            True AS _f" +
                    "rom0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.E_ProblemRequirement A" +
                    "S T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.ProblemRequirementAssetDatas
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView630()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3243);
            viewString.Append("\r\n    SELECT VALUE -- Constructing ProblemRequirementAssetDatas\r\n        [NKD.Mo");
            viewString.Append("dule.BusinessObjects.ProblemRequirementAssetData](T1.ProblemRequirementAssetData");
            viewString.Append("_ProblemRequirementAssetDataID, T1.ProblemRequirementAssetData_ProblemRequiremen");
            viewString.Append("tID, T1.ProblemRequirementAssetData_AssetDataID, T1.ProblemRequirementAssetData_");
            viewString.Append("SuggestedAvailabilityID, T1.ProblemRequirementAssetData_SuggestedProvinceID, T1.");
            viewString.Append("ProblemRequirementAssetData_SuggestedLocationID, T1.ProblemRequirementAssetData_");
            viewString.Append("TickUnitID, T1.ProblemRequirementAssetData_Ticks, T1.ProblemRequirementAssetData");
            viewString.Append("_TicksOffset, T1.ProblemRequirementAssetData_TicksResolution, T1.ProblemRequirem");
            viewString.Append("entAssetData_ValidFrom, T1.ProblemRequirementAssetData_ValidUntil, T1.ProblemReq");
            viewString.Append("uirementAssetData_Culture, T1.ProblemRequirementAssetData_Weight, T1.ProblemRequ");
            viewString.Append("irementAssetData_Version, T1.ProblemRequirementAssetData_VersionAntecedentID, T1");
            viewString.Append(".ProblemRequirementAssetData_VersionCertainty, T1.ProblemRequirementAssetData_Ve");
            viewString.Append("rsionWorkflowInstanceID, T1.ProblemRequirementAssetData_VersionUpdatedBy, T1.Pro");
            viewString.Append("blemRequirementAssetData_VersionDeletedBy, T1.ProblemRequirementAssetData_Versio");
            viewString.Append("nOwnerContactID, T1.ProblemRequirementAssetData_VersionOwnerCompanyID, T1.Proble");
            viewString.Append("mRequirementAssetData_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            ");
            viewString.Append("T.ProblemRequirementAssetDataID AS ProblemRequirementAssetData_ProblemRequiremen");
            viewString.Append("tAssetDataID, \r\n            T.ProblemRequirementID AS ProblemRequirementAssetDat");
            viewString.Append("a_ProblemRequirementID, \r\n            T.AssetDataID AS ProblemRequirementAssetDa");
            viewString.Append("ta_AssetDataID, \r\n            T.SuggestedAvailabilityID AS ProblemRequirementAss");
            viewString.Append("etData_SuggestedAvailabilityID, \r\n            T.SuggestedProvinceID AS ProblemRe");
            viewString.Append("quirementAssetData_SuggestedProvinceID, \r\n            T.SuggestedLocationID AS P");
            viewString.Append("roblemRequirementAssetData_SuggestedLocationID, \r\n            T.TickUnitID AS Pr");
            viewString.Append("oblemRequirementAssetData_TickUnitID, \r\n            T.Ticks AS ProblemRequiremen");
            viewString.Append("tAssetData_Ticks, \r\n            T.TicksOffset AS ProblemRequirementAssetData_Tic");
            viewString.Append("ksOffset, \r\n            T.TicksResolution AS ProblemRequirementAssetData_TicksRe");
            viewString.Append("solution, \r\n            T.ValidFrom AS ProblemRequirementAssetData_ValidFrom, \r\n");
            viewString.Append("            T.ValidUntil AS ProblemRequirementAssetData_ValidUntil, \r\n          ");
            viewString.Append("  T.Culture AS ProblemRequirementAssetData_Culture, \r\n            T.Weight AS Pr");
            viewString.Append("oblemRequirementAssetData_Weight, \r\n            T.Version AS ProblemRequirementA");
            viewString.Append("ssetData_Version, \r\n            T.VersionAntecedentID AS ProblemRequirementAsset");
            viewString.Append("Data_VersionAntecedentID, \r\n            T.VersionCertainty AS ProblemRequirement");
            viewString.Append("AssetData_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS Problem");
            viewString.Append("RequirementAssetData_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy");
            viewString.Append(" AS ProblemRequirementAssetData_VersionUpdatedBy, \r\n            T.VersionDeleted");
            viewString.Append("By AS ProblemRequirementAssetData_VersionDeletedBy, \r\n            T.VersionOwner");
            viewString.Append("ContactID AS ProblemRequirementAssetData_VersionOwnerContactID, \r\n            T.");
            viewString.Append("VersionOwnerCompanyID AS ProblemRequirementAssetData_VersionOwnerCompanyID, \r\n  ");
            viewString.Append("          T.VersionUpdated AS ProblemRequirementAssetData_VersionUpdated, \r\n    ");
            viewString.Append("        True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.E_Pr");
            viewString.Append("oblemRequirementAssetData AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.ProblemRequirementAssetDatas", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.ProblemSolutions
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView631()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.ProblemSolutions", "\r\n    SELECT VALUE -- Constructing ProblemSolutions\r\n        [NKD.Module.Business" +
                    "Objects.ProblemSolution](T1.ProblemSolution_ProblemSolutionID, T1.ProblemSolutio" +
                    "n_ProblemID, T1.ProblemSolution_CostOptimum, T1.ProblemSolution_Confidence, T1.P" +
                    "roblemSolution_Iterations, T1.ProblemSolution_Version, T1.ProblemSolution_Versio" +
                    "nAntecedentID, T1.ProblemSolution_VersionCertainty, T1.ProblemSolution_VersionWo" +
                    "rkflowInstanceID, T1.ProblemSolution_VersionUpdatedBy, T1.ProblemSolution_Versio" +
                    "nDeletedBy, T1.ProblemSolution_VersionOwnerContactID, T1.ProblemSolution_Version" +
                    "OwnerCompanyID, T1.ProblemSolution_VersionUpdated)\r\n    FROM (\r\n        SELECT \r" +
                    "\n            T.ProblemSolutionID AS ProblemSolution_ProblemSolutionID, \r\n       " +
                    "     T.ProblemID AS ProblemSolution_ProblemID, \r\n            T.CostOptimum AS Pr" +
                    "oblemSolution_CostOptimum, \r\n            T.Confidence AS ProblemSolution_Confide" +
                    "nce, \r\n            T.Iterations AS ProblemSolution_Iterations, \r\n            T.V" +
                    "ersion AS ProblemSolution_Version, \r\n            T.VersionAntecedentID AS Proble" +
                    "mSolution_VersionAntecedentID, \r\n            T.VersionCertainty AS ProblemSoluti" +
                    "on_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS ProblemSolutio" +
                    "n_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS ProblemSolution" +
                    "_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS ProblemSolution_VersionDe" +
                    "letedBy, \r\n            T.VersionOwnerContactID AS ProblemSolution_VersionOwnerCo" +
                    "ntactID, \r\n            T.VersionOwnerCompanyID AS ProblemSolution_VersionOwnerCo" +
                    "mpanyID, \r\n            T.VersionUpdated AS ProblemSolution_VersionUpdated, \r\n   " +
                    "         True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.E_P" +
                    "roblemSolution AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.ProblemSolutionAssetDataAllocations
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView632()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2767);
            viewString.Append("\r\n    SELECT VALUE -- Constructing ProblemSolutionAssetDataAllocations\r\n        ");
            viewString.Append("[NKD.Module.BusinessObjects.ProblemSolutionAssetDataAllocation](T1.ProblemSoluti");
            viewString.Append("onAssetDataAllocation_ProblemSolutionID, T1.ProblemSolutionAssetDataAllocation_A");
            viewString.Append("ssetDataID, T1.ProblemSolutionAssetDataAllocation_Weight, T1.ProblemSolutionAsse");
            viewString.Append("tDataAllocation_WindowCost, T1.ProblemSolutionAssetDataAllocation_WindowValue, T");
            viewString.Append("1.ProblemSolutionAssetDataAllocation_WindowMetric, T1.ProblemSolutionAssetDataAl");
            viewString.Append("location_AllocationID, T1.ProblemSolutionAssetDataAllocation_Version, T1.Problem");
            viewString.Append("SolutionAssetDataAllocation_VersionAntecedentID, T1.ProblemSolutionAssetDataAllo");
            viewString.Append("cation_VersionCertainty, T1.ProblemSolutionAssetDataAllocation_VersionWorkflowIn");
            viewString.Append("stanceID, T1.ProblemSolutionAssetDataAllocation_VersionUpdatedBy, T1.ProblemSolu");
            viewString.Append("tionAssetDataAllocation_VersionDeletedBy, T1.ProblemSolutionAssetDataAllocation_");
            viewString.Append("VersionOwnerContactID, T1.ProblemSolutionAssetDataAllocation_VersionOwnerCompany");
            viewString.Append("ID, T1.ProblemSolutionAssetDataAllocation_VersionUpdated, T1.ProblemSolutionAsse");
            viewString.Append("tDataAllocation_ProblemSolutionAssetDataAllocationID)\r\n    FROM (\r\n        SELEC");
            viewString.Append("T \r\n            T.ProblemSolutionID AS ProblemSolutionAssetDataAllocation_Proble");
            viewString.Append("mSolutionID, \r\n            T.AssetDataID AS ProblemSolutionAssetDataAllocation_A");
            viewString.Append("ssetDataID, \r\n            T.Weight AS ProblemSolutionAssetDataAllocation_Weight,");
            viewString.Append(" \r\n            T.WindowCost AS ProblemSolutionAssetDataAllocation_WindowCost, \r\n");
            viewString.Append("            T.WindowValue AS ProblemSolutionAssetDataAllocation_WindowValue, \r\n ");
            viewString.Append("           T.WindowMetric AS ProblemSolutionAssetDataAllocation_WindowMetric, \r\n");
            viewString.Append("            T.AllocationID AS ProblemSolutionAssetDataAllocation_AllocationID, \r");
            viewString.Append("\n            T.Version AS ProblemSolutionAssetDataAllocation_Version, \r\n        ");
            viewString.Append("    T.VersionAntecedentID AS ProblemSolutionAssetDataAllocation_VersionAnteceden");
            viewString.Append("tID, \r\n            T.VersionCertainty AS ProblemSolutionAssetDataAllocation_Vers");
            viewString.Append("ionCertainty, \r\n            T.VersionWorkflowInstanceID AS ProblemSolutionAssetD");
            viewString.Append("ataAllocation_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS Pro");
            viewString.Append("blemSolutionAssetDataAllocation_VersionUpdatedBy, \r\n            T.VersionDeleted");
            viewString.Append("By AS ProblemSolutionAssetDataAllocation_VersionDeletedBy, \r\n            T.Versi");
            viewString.Append("onOwnerContactID AS ProblemSolutionAssetDataAllocation_VersionOwnerContactID, \r\n");
            viewString.Append("            T.VersionOwnerCompanyID AS ProblemSolutionAssetDataAllocation_Versio");
            viewString.Append("nOwnerCompanyID, \r\n            T.VersionUpdated AS ProblemSolutionAssetDataAlloc");
            viewString.Append("ation_VersionUpdated, \r\n            T.ProblemSolutionAssetDataAllocationID AS Pr");
            viewString.Append("oblemSolutionAssetDataAllocation_ProblemSolutionAssetDataAllocationID, \r\n       ");
            viewString.Append("     True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.E_Probl");
            viewString.Append("emSolutionAssetDataAllocation AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.ProblemSolutionAssetDataAllocations", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.SupplierModelContracts
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView633()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2245);
            viewString.Append("\r\n    SELECT VALUE -- Constructing SupplierModelContracts\r\n        [NKD.Module.B");
            viewString.Append("usinessObjects.SupplierModelContract](T1.SupplierModelContract_SupplierModelCont");
            viewString.Append("ractID, T1.SupplierModelContract_SupplierModelID, T1.SupplierModelContract_Contr");
            viewString.Append("actID, T1.SupplierModelContract_RequiredFrom, T1.SupplierModelContract_IsIntende");
            viewString.Append("dForDistributor, T1.SupplierModelContract_IsIntendedForEndUser, T1.SupplierModel");
            viewString.Append("Contract_IsIntendedForSupplier, T1.SupplierModelContract_Version, T1.SupplierMod");
            viewString.Append("elContract_VersionAntecedentID, T1.SupplierModelContract_VersionCertainty, T1.Su");
            viewString.Append("pplierModelContract_VersionWorkflowInstanceID, T1.SupplierModelContract_VersionU");
            viewString.Append("pdatedBy, T1.SupplierModelContract_VersionDeletedBy, T1.SupplierModelContract_Ve");
            viewString.Append("rsionOwnerContactID, T1.SupplierModelContract_VersionOwnerCompanyID, T1.Supplier");
            viewString.Append("ModelContract_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.Suppli");
            viewString.Append("erModelContractID AS SupplierModelContract_SupplierModelContractID, \r\n          ");
            viewString.Append("  T.SupplierModelID AS SupplierModelContract_SupplierModelID, \r\n            T.Co");
            viewString.Append("ntractID AS SupplierModelContract_ContractID, \r\n            T.RequiredFrom AS Su");
            viewString.Append("pplierModelContract_RequiredFrom, \r\n            T.IsIntendedForDistributor AS Su");
            viewString.Append("pplierModelContract_IsIntendedForDistributor, \r\n            T.IsIntendedForEndUs");
            viewString.Append("er AS SupplierModelContract_IsIntendedForEndUser, \r\n            T.IsIntendedForS");
            viewString.Append("upplier AS SupplierModelContract_IsIntendedForSupplier, \r\n            T.Version ");
            viewString.Append("AS SupplierModelContract_Version, \r\n            T.VersionAntecedentID AS Supplie");
            viewString.Append("rModelContract_VersionAntecedentID, \r\n            T.VersionCertainty AS Supplier");
            viewString.Append("ModelContract_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS Sup");
            viewString.Append("plierModelContract_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy A");
            viewString.Append("S SupplierModelContract_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS Su");
            viewString.Append("pplierModelContract_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS S");
            viewString.Append("upplierModelContract_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyI");
            viewString.Append("D AS SupplierModelContract_VersionOwnerCompanyID, \r\n            T.VersionUpdated");
            viewString.Append(" AS SupplierModelContract_VersionUpdated, \r\n            True AS _from0\r\n        ");
            viewString.Append("FROM NKDModuleBusinessObjectsStoreContainer.E_SupplierModelContract AS T\r\n    ) ");
            viewString.Append("AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.SupplierModelContracts", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.SupplierPartContracts
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView634()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2204);
            viewString.Append("\r\n    SELECT VALUE -- Constructing SupplierPartContracts\r\n        [NKD.Module.Bu");
            viewString.Append("sinessObjects.SupplierPartContract](T1.SupplierPartContract_SupplierPartContract");
            viewString.Append("ID, T1.SupplierPartContract_SupplierPartID, T1.SupplierPartContract_ContractID, ");
            viewString.Append("T1.SupplierPartContract_RequiredFrom, T1.SupplierPartContract_IsIntendedForDistr");
            viewString.Append("ibutor, T1.SupplierPartContract_IsIntendedForEndUser, T1.SupplierPartContract_Is");
            viewString.Append("IntendedForSupplier, T1.SupplierPartContract_Version, T1.SupplierPartContract_Ve");
            viewString.Append("rsionAntecedentID, T1.SupplierPartContract_VersionCertainty, T1.SupplierPartCont");
            viewString.Append("ract_VersionWorkflowInstanceID, T1.SupplierPartContract_VersionUpdatedBy, T1.Sup");
            viewString.Append("plierPartContract_VersionDeletedBy, T1.SupplierPartContract_VersionOwnerContactI");
            viewString.Append("D, T1.SupplierPartContract_VersionOwnerCompanyID, T1.SupplierPartContract_Versio");
            viewString.Append("nUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.SupplierPartContractID AS ");
            viewString.Append("SupplierPartContract_SupplierPartContractID, \r\n            T.SupplierPartID AS S");
            viewString.Append("upplierPartContract_SupplierPartID, \r\n            T.ContractID AS SupplierPartCo");
            viewString.Append("ntract_ContractID, \r\n            T.RequiredFrom AS SupplierPartContract_Required");
            viewString.Append("From, \r\n            T.IsIntendedForDistributor AS SupplierPartContract_IsIntende");
            viewString.Append("dForDistributor, \r\n            T.IsIntendedForEndUser AS SupplierPartContract_Is");
            viewString.Append("IntendedForEndUser, \r\n            T.IsIntendedForSupplier AS SupplierPartContrac");
            viewString.Append("t_IsIntendedForSupplier, \r\n            T.Version AS SupplierPartContract_Version");
            viewString.Append(", \r\n            T.VersionAntecedentID AS SupplierPartContract_VersionAntecedentI");
            viewString.Append("D, \r\n            T.VersionCertainty AS SupplierPartContract_VersionCertainty, \r\n");
            viewString.Append("            T.VersionWorkflowInstanceID AS SupplierPartContract_VersionWorkflowI");
            viewString.Append("nstanceID, \r\n            T.VersionUpdatedBy AS SupplierPartContract_VersionUpdat");
            viewString.Append("edBy, \r\n            T.VersionDeletedBy AS SupplierPartContract_VersionDeletedBy,");
            viewString.Append(" \r\n            T.VersionOwnerContactID AS SupplierPartContract_VersionOwnerConta");
            viewString.Append("ctID, \r\n            T.VersionOwnerCompanyID AS SupplierPartContract_VersionOwner");
            viewString.Append("CompanyID, \r\n            T.VersionUpdated AS SupplierPartContract_VersionUpdated");
            viewString.Append(", \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContai");
            viewString.Append("ner.E_SupplierPartContract AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.SupplierPartContracts", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.SupplyContractConditions
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView635()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2249);
            viewString.Append("\r\n    SELECT VALUE -- Constructing SupplyContractConditions\r\n        [NKD.Module");
            viewString.Append(".BusinessObjects.SupplyContractCondition](T1.SupplyContractCondition_SupplyContr");
            viewString.Append("actConditionID, T1.SupplyContractCondition_ContractID, T1.SupplyContractConditio");
            viewString.Append("n_ContractConditionID, T1.SupplyContractCondition_AgreedForCompanyID, T1.SupplyC");
            viewString.Append("ontractCondition_AgreedByContactID, T1.SupplyContractCondition_Agreed, T1.Supply");
            viewString.Append("ContractCondition_Version, T1.SupplyContractCondition_VersionAntecedentID, T1.Su");
            viewString.Append("pplyContractCondition_VersionCertainty, T1.SupplyContractCondition_VersionWorkfl");
            viewString.Append("owInstanceID, T1.SupplyContractCondition_VersionUpdatedBy, T1.SupplyContractCond");
            viewString.Append("ition_VersionDeletedBy, T1.SupplyContractCondition_VersionOwnerContactID, T1.Sup");
            viewString.Append("plyContractCondition_VersionOwnerCompanyID, T1.SupplyContractCondition_VersionUp");
            viewString.Append("dated, T1.SupplyContractCondition_SupplyID)\r\n    FROM (\r\n        SELECT \r\n      ");
            viewString.Append("      T.SupplyContractConditionID AS SupplyContractCondition_SupplyContractCondi");
            viewString.Append("tionID, \r\n            T.ContractID AS SupplyContractCondition_ContractID, \r\n    ");
            viewString.Append("        T.ContractConditionID AS SupplyContractCondition_ContractConditionID, \r\n");
            viewString.Append("            T.AgreedForCompanyID AS SupplyContractCondition_AgreedForCompanyID, ");
            viewString.Append("\r\n            T.AgreedByContactID AS SupplyContractCondition_AgreedByContactID, ");
            viewString.Append("\r\n            T.Agreed AS SupplyContractCondition_Agreed, \r\n            T.Versio");
            viewString.Append("n AS SupplyContractCondition_Version, \r\n            T.VersionAntecedentID AS Sup");
            viewString.Append("plyContractCondition_VersionAntecedentID, \r\n            T.VersionCertainty AS Su");
            viewString.Append("pplyContractCondition_VersionCertainty, \r\n            T.VersionWorkflowInstanceI");
            viewString.Append("D AS SupplyContractCondition_VersionWorkflowInstanceID, \r\n            T.VersionU");
            viewString.Append("pdatedBy AS SupplyContractCondition_VersionUpdatedBy, \r\n            T.VersionDel");
            viewString.Append("etedBy AS SupplyContractCondition_VersionDeletedBy, \r\n            T.VersionOwner");
            viewString.Append("ContactID AS SupplyContractCondition_VersionOwnerContactID, \r\n            T.Vers");
            viewString.Append("ionOwnerCompanyID AS SupplyContractCondition_VersionOwnerCompanyID, \r\n          ");
            viewString.Append("  T.VersionUpdated AS SupplyContractCondition_VersionUpdated, \r\n            T.Su");
            viewString.Append("pplyID AS SupplyContractCondition_SupplyID, \r\n            True AS _from0\r\n      ");
            viewString.Append("  FROM NKDModuleBusinessObjectsStoreContainer.E_SupplyContractCondition AS T\r\n  ");
            viewString.Append("  ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.SupplyContractConditions", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.Communications
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView636()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3904);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Communications\r\n        [NKD.Module.BusinessO");
            viewString.Append("bjects.Communication](T1.Communication_CommunicationID, T1.Communication_Communi");
            viewString.Append("cationName, T1.Communication_CommunicationContactID, T1.Communication_Communicat");
            viewString.Append("ionCompanyID, T1.Communication_StatusWorkTypeID, T1.Communication_RegardingWorkT");
            viewString.Append("ypeID, T1.Communication_RegardingCompanyID, T1.Communication_RegardingContactID,");
            viewString.Append(" T1.Communication_RegardingFileDataID, T1.Communication_RegardingProjectID, T1.C");
            viewString.Append("ommunication_RegardingExperienceID, T1.Communication_RegardingDescription, T1.Co");
            viewString.Append("mmunication_OpenedBy, T1.Communication_AssignedBy, T1.Communication_MaintainedBy");
            viewString.Append(", T1.Communication_ClosedBy, T1.Communication_EstimatedClosure, T1.Communication");
            viewString.Append("_EstimatedDurationHours, T1.Communication_EstimatedRevenue, T1.Communication_Est");
            viewString.Append("imatedCost, T1.Communication_Probability, T1.Communication_Comment, T1.Communica");
            viewString.Append("tion_Version, T1.Communication_VersionAntecedentID, T1.Communication_VersionCert");
            viewString.Append("ainty, T1.Communication_VersionWorkflowInstanceID, T1.Communication_VersionUpdat");
            viewString.Append("edBy, T1.Communication_VersionDeletedBy, T1.Communication_VersionOwnerContactID,");
            viewString.Append(" T1.Communication_VersionOwnerCompanyID, T1.Communication_VersionUpdated, T1.Com");
            viewString.Append("munication_CommunicationMobile, T1.Communication_CommunicationEmail, T1.Communic");
            viewString.Append("ation_RegardingTableType, T1.Communication_RegardingReferenceID)\r\n    FROM (\r\n  ");
            viewString.Append("      SELECT \r\n            T.CommunicationID AS Communication_CommunicationID, \r");
            viewString.Append("\n            T.CommunicationName AS Communication_CommunicationName, \r\n         ");
            viewString.Append("   T.CommunicationContactID AS Communication_CommunicationContactID, \r\n         ");
            viewString.Append("   T.CommunicationCompanyID AS Communication_CommunicationCompanyID, \r\n         ");
            viewString.Append("   T.StatusWorkTypeID AS Communication_StatusWorkTypeID, \r\n            T.Regardi");
            viewString.Append("ngWorkTypeID AS Communication_RegardingWorkTypeID, \r\n            T.RegardingComp");
            viewString.Append("anyID AS Communication_RegardingCompanyID, \r\n            T.RegardingContactID AS");
            viewString.Append(" Communication_RegardingContactID, \r\n            T.RegardingFileDataID AS Commun");
            viewString.Append("ication_RegardingFileDataID, \r\n            T.RegardingProjectID AS Communication");
            viewString.Append("_RegardingProjectID, \r\n            T.RegardingExperienceID AS Communication_Rega");
            viewString.Append("rdingExperienceID, \r\n            T.RegardingDescription AS Communication_Regardi");
            viewString.Append("ngDescription, \r\n            T.OpenedBy AS Communication_OpenedBy, \r\n           ");
            viewString.Append(" T.AssignedBy AS Communication_AssignedBy, \r\n            T.MaintainedBy AS Commu");
            viewString.Append("nication_MaintainedBy, \r\n            T.ClosedBy AS Communication_ClosedBy, \r\n   ");
            viewString.Append("         T.EstimatedClosure AS Communication_EstimatedClosure, \r\n            T.E");
            viewString.Append("stimatedDurationHours AS Communication_EstimatedDurationHours, \r\n            T.E");
            viewString.Append("stimatedRevenue AS Communication_EstimatedRevenue, \r\n            T.EstimatedCost");
            viewString.Append(" AS Communication_EstimatedCost, \r\n            T.Probability AS Communication_Pr");
            viewString.Append("obability, \r\n            T.Comment AS Communication_Comment, \r\n            T.Ver");
            viewString.Append("sion AS Communication_Version, \r\n            T.VersionAntecedentID AS Communicat");
            viewString.Append("ion_VersionAntecedentID, \r\n            T.VersionCertainty AS Communication_Versi");
            viewString.Append("onCertainty, \r\n            T.VersionWorkflowInstanceID AS Communication_VersionW");
            viewString.Append("orkflowInstanceID, \r\n            T.VersionUpdatedBy AS Communication_VersionUpda");
            viewString.Append("tedBy, \r\n            T.VersionDeletedBy AS Communication_VersionDeletedBy, \r\n   ");
            viewString.Append("         T.VersionOwnerContactID AS Communication_VersionOwnerContactID, \r\n     ");
            viewString.Append("       T.VersionOwnerCompanyID AS Communication_VersionOwnerCompanyID, \r\n       ");
            viewString.Append("     T.VersionUpdated AS Communication_VersionUpdated, \r\n            T.Communica");
            viewString.Append("tionMobile AS Communication_CommunicationMobile, \r\n            T.CommunicationEm");
            viewString.Append("ail AS Communication_CommunicationEmail, \r\n            T.RegardingTableType AS C");
            viewString.Append("ommunication_RegardingTableType, \r\n            T.RegardingReferenceID AS Communi");
            viewString.Append("cation_RegardingReferenceID, \r\n            True AS _from0\r\n        FROM NKDModul");
            viewString.Append("eBusinessObjectsStoreContainer.X_Communication AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.Communications", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryAddressTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView637()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2200);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryAddressTypes\r\n        [NKD.Module.B");
            viewString.Append("usinessObjects.DictionaryAddressType](T1.DictionaryAddressType_AddressTypeID, T1");
            viewString.Append(".DictionaryAddressType_StandardAddressTypeName, T1.DictionaryAddressType_CustomA");
            viewString.Append("ddressTypeName, T1.DictionaryAddressType_Description, T1.DictionaryAddressType_F");
            viewString.Append("ullDescription, T1.DictionaryAddressType_Thumbnail, T1.DictionaryAddressType_Ori");
            viewString.Append("ginalFileDataID, T1.DictionaryAddressType_Version, T1.DictionaryAddressType_Vers");
            viewString.Append("ionAntecedentID, T1.DictionaryAddressType_VersionCertainty, T1.DictionaryAddress");
            viewString.Append("Type_VersionWorkflowInstanceID, T1.DictionaryAddressType_VersionUpdatedBy, T1.Di");
            viewString.Append("ctionaryAddressType_VersionDeletedBy, T1.DictionaryAddressType_VersionOwnerConta");
            viewString.Append("ctID, T1.DictionaryAddressType_VersionOwnerCompanyID, T1.DictionaryAddressType_V");
            viewString.Append("ersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.AddressTypeID AS Dict");
            viewString.Append("ionaryAddressType_AddressTypeID, \r\n            T.StandardAddressTypeName AS Dict");
            viewString.Append("ionaryAddressType_StandardAddressTypeName, \r\n            T.CustomAddressTypeName");
            viewString.Append(" AS DictionaryAddressType_CustomAddressTypeName, \r\n            T.Description AS ");
            viewString.Append("DictionaryAddressType_Description, \r\n            T.FullDescription AS Dictionary");
            viewString.Append("AddressType_FullDescription, \r\n            T.Thumbnail AS DictionaryAddressType_");
            viewString.Append("Thumbnail, \r\n            T.OriginalFileDataID AS DictionaryAddressType_OriginalF");
            viewString.Append("ileDataID, \r\n            T.Version AS DictionaryAddressType_Version, \r\n         ");
            viewString.Append("   T.VersionAntecedentID AS DictionaryAddressType_VersionAntecedentID, \r\n       ");
            viewString.Append("     T.VersionCertainty AS DictionaryAddressType_VersionCertainty, \r\n           ");
            viewString.Append(" T.VersionWorkflowInstanceID AS DictionaryAddressType_VersionWorkflowInstanceID,");
            viewString.Append(" \r\n            T.VersionUpdatedBy AS DictionaryAddressType_VersionUpdatedBy, \r\n ");
            viewString.Append("           T.VersionDeletedBy AS DictionaryAddressType_VersionDeletedBy, \r\n     ");
            viewString.Append("       T.VersionOwnerContactID AS DictionaryAddressType_VersionOwnerContactID, \r");
            viewString.Append("\n            T.VersionOwnerCompanyID AS DictionaryAddressType_VersionOwnerCompan");
            viewString.Append("yID, \r\n            T.VersionUpdated AS DictionaryAddressType_VersionUpdated, \r\n ");
            viewString.Append("           True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.E");
            viewString.Append("_DictionaryAddressType AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryAddressTypes", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.ApplicationPaymentProviderContacts
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView638()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2540);
            viewString.Append("\r\n    SELECT VALUE -- Constructing ApplicationPaymentProviderContacts\r\n        [");
            viewString.Append("NKD.Module.BusinessObjects.ApplicationPaymentProviderContact](T1.ApplicationPaym");
            viewString.Append("entProviderContact_ApplicationPaymentProviderContactID, T1.ApplicationPaymentPro");
            viewString.Append("viderContact_ApplicationPaymentProviderID, T1.ApplicationPaymentProviderContact_");
            viewString.Append("ContactID, T1.ApplicationPaymentProviderContact_CustomerReference, T1.Applicatio");
            viewString.Append("nPaymentProviderContact_UserDataType, T1.ApplicationPaymentProviderContact_Syste");
            viewString.Append("mDataType, T1.ApplicationPaymentProviderContact_Version, T1.ApplicationPaymentPr");
            viewString.Append("oviderContact_VersionAntecedentID, T1.ApplicationPaymentProviderContact_VersionC");
            viewString.Append("ertainty, T1.ApplicationPaymentProviderContact_VersionWorkflowInstanceID, T1.App");
            viewString.Append("licationPaymentProviderContact_VersionUpdatedBy, T1.ApplicationPaymentProviderCo");
            viewString.Append("ntact_VersionDeletedBy, T1.ApplicationPaymentProviderContact_VersionOwnerContact");
            viewString.Append("ID, T1.ApplicationPaymentProviderContact_VersionOwnerCompanyID, T1.ApplicationPa");
            viewString.Append("ymentProviderContact_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T");
            viewString.Append(".ApplicationPaymentProviderContactID AS ApplicationPaymentProviderContact_Applic");
            viewString.Append("ationPaymentProviderContactID, \r\n            T.ApplicationPaymentProviderID AS A");
            viewString.Append("pplicationPaymentProviderContact_ApplicationPaymentProviderID, \r\n            T.C");
            viewString.Append("ontactID AS ApplicationPaymentProviderContact_ContactID, \r\n            T.Custome");
            viewString.Append("rReference AS ApplicationPaymentProviderContact_CustomerReference, \r\n           ");
            viewString.Append(" T.UserDataType AS ApplicationPaymentProviderContact_UserDataType, \r\n           ");
            viewString.Append(" T.SystemDataType AS ApplicationPaymentProviderContact_SystemDataType, \r\n       ");
            viewString.Append("     T.Version AS ApplicationPaymentProviderContact_Version, \r\n            T.Ver");
            viewString.Append("sionAntecedentID AS ApplicationPaymentProviderContact_VersionAntecedentID, \r\n   ");
            viewString.Append("         T.VersionCertainty AS ApplicationPaymentProviderContact_VersionCertaint");
            viewString.Append("y, \r\n            T.VersionWorkflowInstanceID AS ApplicationPaymentProviderContac");
            viewString.Append("t_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS ApplicationPaym");
            viewString.Append("entProviderContact_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS Applica");
            viewString.Append("tionPaymentProviderContact_VersionDeletedBy, \r\n            T.VersionOwnerContact");
            viewString.Append("ID AS ApplicationPaymentProviderContact_VersionOwnerContactID, \r\n            T.V");
            viewString.Append("ersionOwnerCompanyID AS ApplicationPaymentProviderContact_VersionOwnerCompanyID,");
            viewString.Append(" \r\n            T.VersionUpdated AS ApplicationPaymentProviderContact_VersionUpda");
            viewString.Append("ted, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreCon");
            viewString.Append("tainer.E_ApplicationPaymentProviderContact AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.ApplicationPaymentProviderContacts", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.PaymentInvoices
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView639()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.PaymentInvoices", "\r\n    SELECT VALUE -- Constructing PaymentInvoices\r\n        [NKD.Module.BusinessO" +
                    "bjects.PaymentInvoice](T1.PaymentInvoice_PaymentInvoiceID, T1.PaymentInvoice_Pay" +
                    "mentID, T1.PaymentInvoice_InvoiceID, T1.PaymentInvoice_IsFinalPaymentInvoice, T1" +
                    ".PaymentInvoice_Version, T1.PaymentInvoice_VersionAntecedentID, T1.PaymentInvoic" +
                    "e_VersionCertainty, T1.PaymentInvoice_VersionWorkflowInstanceID, T1.PaymentInvoi" +
                    "ce_VersionUpdatedBy, T1.PaymentInvoice_VersionDeletedBy, T1.PaymentInvoice_Versi" +
                    "onOwnerContactID, T1.PaymentInvoice_VersionOwnerCompanyID, T1.PaymentInvoice_Ver" +
                    "sionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.PaymentInvoiceID AS Pay" +
                    "mentInvoice_PaymentInvoiceID, \r\n            T.PaymentID AS PaymentInvoice_Paymen" +
                    "tID, \r\n            T.InvoiceID AS PaymentInvoice_InvoiceID, \r\n            T.IsFi" +
                    "nalPaymentInvoice AS PaymentInvoice_IsFinalPaymentInvoice, \r\n            T.Versi" +
                    "on AS PaymentInvoice_Version, \r\n            T.VersionAntecedentID AS PaymentInvo" +
                    "ice_VersionAntecedentID, \r\n            T.VersionCertainty AS PaymentInvoice_Vers" +
                    "ionCertainty, \r\n            T.VersionWorkflowInstanceID AS PaymentInvoice_Versio" +
                    "nWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS PaymentInvoice_VersionU" +
                    "pdatedBy, \r\n            T.VersionDeletedBy AS PaymentInvoice_VersionDeletedBy, \r" +
                    "\n            T.VersionOwnerContactID AS PaymentInvoice_VersionOwnerContactID, \r\n" +
                    "            T.VersionOwnerCompanyID AS PaymentInvoice_VersionOwnerCompanyID, \r\n " +
                    "           T.VersionUpdated AS PaymentInvoice_VersionUpdated, \r\n            True" +
                    " AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.E_PaymentInvoice" +
                    " AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.TwoStepAuthenticationDatas
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView640()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3581);
            viewString.Append("\r\n    SELECT VALUE -- Constructing TwoStepAuthenticationDatas\r\n        [NKD.Modu");
            viewString.Append("le.BusinessObjects.TwoStepAuthenticationData](T1.TwoStepAuthenticationData_TwoSt");
            viewString.Append("epAuthenticationDataID, T1.TwoStepAuthenticationData_Sequence, T1.TwoStepAuthent");
            viewString.Append("icationData_TableType, T1.TwoStepAuthenticationData_ReferenceID, T1.TwoStepAuthe");
            viewString.Append("nticationData_ReferenceName, T1.TwoStepAuthenticationData_ContactID, T1.TwoStepA");
            viewString.Append("uthenticationData_Mobile, T1.TwoStepAuthenticationData_Sent, T1.TwoStepAuthentic");
            viewString.Append("ationData_ServerReceipt, T1.TwoStepAuthenticationData_IsServerValid, T1.TwoStepA");
            viewString.Append("uthenticationData_AcceptRepliesUntil, T1.TwoStepAuthenticationData_Verified, T1.");
            viewString.Append("TwoStepAuthenticationData_VerifiedURLHost, T1.TwoStepAuthenticationData_Verified");
            viewString.Append("URLQueryString, T1.TwoStepAuthenticationData_RequestedByIP, T1.TwoStepAuthentica");
            viewString.Append("tionData_ContactReceipt, T1.TwoStepAuthenticationData_ContactAccepted, T1.TwoSte");
            viewString.Append("pAuthenticationData_Version, T1.TwoStepAuthenticationData_VersionAntecedentID, T");
            viewString.Append("1.TwoStepAuthenticationData_VersionCertainty, T1.TwoStepAuthenticationData_Versi");
            viewString.Append("onWorkflowInstanceID, T1.TwoStepAuthenticationData_VersionUpdatedBy, T1.TwoStepA");
            viewString.Append("uthenticationData_VersionDeletedBy, T1.TwoStepAuthenticationData_VersionOwnerCon");
            viewString.Append("tactID, T1.TwoStepAuthenticationData_VersionOwnerCompanyID, T1.TwoStepAuthentica");
            viewString.Append("tionData_VersionUpdated, T1.TwoStepAuthenticationData_VerificationCode)\r\n    FRO");
            viewString.Append("M (\r\n        SELECT \r\n            T.TwoStepAuthenticationDataID AS TwoStepAuthen");
            viewString.Append("ticationData_TwoStepAuthenticationDataID, \r\n            T.Sequence AS TwoStepAut");
            viewString.Append("henticationData_Sequence, \r\n            T.TableType AS TwoStepAuthenticationData");
            viewString.Append("_TableType, \r\n            T.ReferenceID AS TwoStepAuthenticationData_ReferenceID");
            viewString.Append(", \r\n            T.ReferenceName AS TwoStepAuthenticationData_ReferenceName, \r\n  ");
            viewString.Append("          T.ContactID AS TwoStepAuthenticationData_ContactID, \r\n            T.Mo");
            viewString.Append("bile AS TwoStepAuthenticationData_Mobile, \r\n            T.Sent AS TwoStepAuthent");
            viewString.Append("icationData_Sent, \r\n            T.ServerReceipt AS TwoStepAuthenticationData_Ser");
            viewString.Append("verReceipt, \r\n            T.IsServerValid AS TwoStepAuthenticationData_IsServerV");
            viewString.Append("alid, \r\n            T.AcceptRepliesUntil AS TwoStepAuthenticationData_AcceptRepl");
            viewString.Append("iesUntil, \r\n            T.Verified AS TwoStepAuthenticationData_Verified, \r\n    ");
            viewString.Append("        T.VerifiedURLHost AS TwoStepAuthenticationData_VerifiedURLHost, \r\n      ");
            viewString.Append("      T.VerifiedURLQueryString AS TwoStepAuthenticationData_VerifiedURLQueryStri");
            viewString.Append("ng, \r\n            T.RequestedByIP AS TwoStepAuthenticationData_RequestedByIP, \r\n");
            viewString.Append("            T.ContactReceipt AS TwoStepAuthenticationData_ContactReceipt, \r\n    ");
            viewString.Append("        T.ContactAccepted AS TwoStepAuthenticationData_ContactAccepted, \r\n      ");
            viewString.Append("      T.Version AS TwoStepAuthenticationData_Version, \r\n            T.VersionAnt");
            viewString.Append("ecedentID AS TwoStepAuthenticationData_VersionAntecedentID, \r\n            T.Vers");
            viewString.Append("ionCertainty AS TwoStepAuthenticationData_VersionCertainty, \r\n            T.Vers");
            viewString.Append("ionWorkflowInstanceID AS TwoStepAuthenticationData_VersionWorkflowInstanceID, \r\n");
            viewString.Append("            T.VersionUpdatedBy AS TwoStepAuthenticationData_VersionUpdatedBy, \r\n");
            viewString.Append("            T.VersionDeletedBy AS TwoStepAuthenticationData_VersionDeletedBy, \r\n");
            viewString.Append("            T.VersionOwnerContactID AS TwoStepAuthenticationData_VersionOwnerCon");
            viewString.Append("tactID, \r\n            T.VersionOwnerCompanyID AS TwoStepAuthenticationData_Versi");
            viewString.Append("onOwnerCompanyID, \r\n            T.VersionUpdated AS TwoStepAuthenticationData_Ve");
            viewString.Append("rsionUpdated, \r\n            T.VerificationCode AS TwoStepAuthenticationData_Veri");
            viewString.Append("ficationCode, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObject");
            viewString.Append("sStoreContainer.E_TwoStepAuthenticationData AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.TwoStepAuthenticationDatas", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.Affiliates
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView641()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.Affiliates", "\r\n    SELECT VALUE -- Constructing Affiliates\r\n        [NKD.Module.BusinessObject" +
                    "s.Affiliate](T1.Affiliate_AffiliateID, T1.Affiliate_ParentContactID, T1.Affiliat" +
                    "e_Version, T1.Affiliate_VersionAntecedentID, T1.Affiliate_VersionCertainty, T1.A" +
                    "ffiliate_VersionWorkflowInstanceID, T1.Affiliate_VersionUpdatedBy, T1.Affiliate_" +
                    "VersionDeletedBy, T1.Affiliate_VersionOwnerContactID, T1.Affiliate_VersionOwnerC" +
                    "ompanyID, T1.Affiliate_VersionUpdated, T1.Affiliate_AffiliateContactID, T1.Affil" +
                    "iate_AffiliateTypeID, T1.Affiliate_InitialIP)\r\n    FROM (\r\n        SELECT \r\n    " +
                    "        T.AffiliateID AS Affiliate_AffiliateID, \r\n            T.ParentContactID " +
                    "AS Affiliate_ParentContactID, \r\n            T.Version AS Affiliate_Version, \r\n  " +
                    "          T.VersionAntecedentID AS Affiliate_VersionAntecedentID, \r\n            " +
                    "T.VersionCertainty AS Affiliate_VersionCertainty, \r\n            T.VersionWorkflo" +
                    "wInstanceID AS Affiliate_VersionWorkflowInstanceID, \r\n            T.VersionUpdat" +
                    "edBy AS Affiliate_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS Affiliat" +
                    "e_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS Affiliate_VersionOw" +
                    "nerContactID, \r\n            T.VersionOwnerCompanyID AS Affiliate_VersionOwnerCom" +
                    "panyID, \r\n            T.VersionUpdated AS Affiliate_VersionUpdated, \r\n          " +
                    "  T.AffiliateContactID AS Affiliate_AffiliateContactID, \r\n            T.Affiliat" +
                    "eTypeID AS Affiliate_AffiliateTypeID, \r\n            T.InitialIP AS Affiliate_Ini" +
                    "tialIP, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjectsStore" +
                    "Container.E_Affiliate AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryAffiliateTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView642()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2375);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryAffiliateTypes\r\n        [NKD.Module");
            viewString.Append(".BusinessObjects.DictionaryAffiliateType](T1.DictionaryAffiliateType_AffiliateTy");
            viewString.Append("peID, T1.DictionaryAffiliateType_StandardAffiliateTypeName, T1.DictionaryAffilia");
            viewString.Append("teType_CustomAffiliateTypeName, T1.DictionaryAffiliateType_Rate, T1.DictionaryAf");
            viewString.Append("filiateType_Description, T1.DictionaryAffiliateType_FullDescription, T1.Dictiona");
            viewString.Append("ryAffiliateType_Thumbnail, T1.DictionaryAffiliateType_OriginalFileDataID, T1.Dic");
            viewString.Append("tionaryAffiliateType_Version, T1.DictionaryAffiliateType_VersionAntecedentID, T1");
            viewString.Append(".DictionaryAffiliateType_VersionCertainty, T1.DictionaryAffiliateType_VersionWor");
            viewString.Append("kflowInstanceID, T1.DictionaryAffiliateType_VersionUpdatedBy, T1.DictionaryAffil");
            viewString.Append("iateType_VersionDeletedBy, T1.DictionaryAffiliateType_VersionOwnerContactID, T1.");
            viewString.Append("DictionaryAffiliateType_VersionOwnerCompanyID, T1.DictionaryAffiliateType_Versio");
            viewString.Append("nUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.AffiliateTypeID AS Diction");
            viewString.Append("aryAffiliateType_AffiliateTypeID, \r\n            T.StandardAffiliateTypeName AS D");
            viewString.Append("ictionaryAffiliateType_StandardAffiliateTypeName, \r\n            T.CustomAffiliat");
            viewString.Append("eTypeName AS DictionaryAffiliateType_CustomAffiliateTypeName, \r\n            T.Ra");
            viewString.Append("te AS DictionaryAffiliateType_Rate, \r\n            T.Description AS DictionaryAff");
            viewString.Append("iliateType_Description, \r\n            T.FullDescription AS DictionaryAffiliateTy");
            viewString.Append("pe_FullDescription, \r\n            T.Thumbnail AS DictionaryAffiliateType_Thumbna");
            viewString.Append("il, \r\n            T.OriginalFileDataID AS DictionaryAffiliateType_OriginalFileDa");
            viewString.Append("taID, \r\n            T.Version AS DictionaryAffiliateType_Version, \r\n            ");
            viewString.Append("T.VersionAntecedentID AS DictionaryAffiliateType_VersionAntecedentID, \r\n        ");
            viewString.Append("    T.VersionCertainty AS DictionaryAffiliateType_VersionCertainty, \r\n          ");
            viewString.Append("  T.VersionWorkflowInstanceID AS DictionaryAffiliateType_VersionWorkflowInstance");
            viewString.Append("ID, \r\n            T.VersionUpdatedBy AS DictionaryAffiliateType_VersionUpdatedBy");
            viewString.Append(", \r\n            T.VersionDeletedBy AS DictionaryAffiliateType_VersionDeletedBy, ");
            viewString.Append("\r\n            T.VersionOwnerContactID AS DictionaryAffiliateType_VersionOwnerCon");
            viewString.Append("tactID, \r\n            T.VersionOwnerCompanyID AS DictionaryAffiliateType_Version");
            viewString.Append("OwnerCompanyID, \r\n            T.VersionUpdated AS DictionaryAffiliateType_Versio");
            viewString.Append("nUpdated, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjectsSto");
            viewString.Append("reContainer.E_DictionaryAffiliateType AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryAffiliateTypes", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.CommunicationEmails
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView643()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.CommunicationEmails", "\r\n    SELECT VALUE -- Constructing CommunicationEmails\r\n        [NKD.Module.Busin" +
                    "essObjects.CommunicationEmails](T1.CommunicationEmails_CommunicationEmailID, T1." +
                    "CommunicationEmails_CommunicationEmail, T1.CommunicationEmails_CommunicationID, " +
                    "T1.CommunicationEmails_Version, T1.CommunicationEmails_VersionAntecedentID, T1.C" +
                    "ommunicationEmails_VersionCertainty, T1.CommunicationEmails_VersionWorkflowInsta" +
                    "nceID, T1.CommunicationEmails_VersionUpdatedBy, T1.CommunicationEmails_VersionDe" +
                    "letedBy, T1.CommunicationEmails_VersionOwnerContactID, T1.CommunicationEmails_Ve" +
                    "rsionOwnerCompanyID, T1.CommunicationEmails_VersionUpdated, T1.CommunicationEmai" +
                    "ls_ContactID)\r\n    FROM (\r\n        SELECT \r\n            T.CommunicationEmailID A" +
                    "S CommunicationEmails_CommunicationEmailID, \r\n            T.CommunicationEmail A" +
                    "S CommunicationEmails_CommunicationEmail, \r\n            T.CommunicationID AS Com" +
                    "municationEmails_CommunicationID, \r\n            T.Version AS CommunicationEmails" +
                    "_Version, \r\n            T.VersionAntecedentID AS CommunicationEmails_VersionAnte" +
                    "cedentID, \r\n            T.VersionCertainty AS CommunicationEmails_VersionCertain" +
                    "ty, \r\n            T.VersionWorkflowInstanceID AS CommunicationEmails_VersionWork" +
                    "flowInstanceID, \r\n            T.VersionUpdatedBy AS CommunicationEmails_VersionU" +
                    "pdatedBy, \r\n            T.VersionDeletedBy AS CommunicationEmails_VersionDeleted" +
                    "By, \r\n            T.VersionOwnerContactID AS CommunicationEmails_VersionOwnerCon" +
                    "tactID, \r\n            T.VersionOwnerCompanyID AS CommunicationEmails_VersionOwne" +
                    "rCompanyID, \r\n            T.VersionUpdated AS CommunicationEmails_VersionUpdated" +
                    ", \r\n            T.ContactID AS CommunicationEmails_ContactID, \r\n            True" +
                    " AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.E_CommunicationE" +
                    "mail AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.CommunicationRegardingDatas
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView644()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2111);
            viewString.Append("\r\n    SELECT VALUE -- Constructing CommunicationRegardingDatas\r\n        [NKD.Mod");
            viewString.Append("ule.BusinessObjects.CommunicationRegardingData](T1.CommunicationRegardingData_Co");
            viewString.Append("mmunicationRegardingDataID, T1.CommunicationRegardingData_CommunicationID, T1.Co");
            viewString.Append("mmunicationRegardingData_TableType, T1.CommunicationRegardingData_ReferenceID, T");
            viewString.Append("1.CommunicationRegardingData_ReferenceName, T1.CommunicationRegardingData_Versio");
            viewString.Append("n, T1.CommunicationRegardingData_VersionAntecedentID, T1.CommunicationRegardingD");
            viewString.Append("ata_VersionCertainty, T1.CommunicationRegardingData_VersionWorkflowInstanceID, T");
            viewString.Append("1.CommunicationRegardingData_VersionUpdatedBy, T1.CommunicationRegardingData_Ver");
            viewString.Append("sionDeletedBy, T1.CommunicationRegardingData_VersionOwnerContactID, T1.Communica");
            viewString.Append("tionRegardingData_VersionOwnerCompanyID, T1.CommunicationRegardingData_VersionUp");
            viewString.Append("dated)\r\n    FROM (\r\n        SELECT \r\n            T.CommunicationRegardingDataID ");
            viewString.Append("AS CommunicationRegardingData_CommunicationRegardingDataID, \r\n            T.Comm");
            viewString.Append("unicationID AS CommunicationRegardingData_CommunicationID, \r\n            T.Table");
            viewString.Append("Type AS CommunicationRegardingData_TableType, \r\n            T.ReferenceID AS Com");
            viewString.Append("municationRegardingData_ReferenceID, \r\n            T.ReferenceName AS Communicat");
            viewString.Append("ionRegardingData_ReferenceName, \r\n            T.Version AS CommunicationRegardin");
            viewString.Append("gData_Version, \r\n            T.VersionAntecedentID AS CommunicationRegardingData");
            viewString.Append("_VersionAntecedentID, \r\n            T.VersionCertainty AS CommunicationRegarding");
            viewString.Append("Data_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS Communicatio");
            viewString.Append("nRegardingData_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS Co");
            viewString.Append("mmunicationRegardingData_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS C");
            viewString.Append("ommunicationRegardingData_VersionDeletedBy, \r\n            T.VersionOwnerContactI");
            viewString.Append("D AS CommunicationRegardingData_VersionOwnerContactID, \r\n            T.VersionOw");
            viewString.Append("nerCompanyID AS CommunicationRegardingData_VersionOwnerCompanyID, \r\n            ");
            viewString.Append("T.VersionUpdated AS CommunicationRegardingData_VersionUpdated, \r\n            Tru");
            viewString.Append("e AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.E_Communication");
            viewString.Append("RegardingData AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.CommunicationRegardingDatas", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryAssetStatus
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView645()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryAssetStatus", "\r\n    SELECT VALUE -- Constructing DictionaryAssetStatus\r\n        [NKD.Module.Bus" +
                    "inessObjects.DictionaryAssetStatus](T1.DictionaryAssetStatus_AssetStatusID, T1.D" +
                    "ictionaryAssetStatus_StandardAssetStatusName, T1.DictionaryAssetStatus_CustomAss" +
                    "etStatusName, T1.DictionaryAssetStatus_Description, T1.DictionaryAssetStatus_Ver" +
                    "sion, T1.DictionaryAssetStatus_VersionAntecedentID, T1.DictionaryAssetStatus_Ver" +
                    "sionCertainty, T1.DictionaryAssetStatus_VersionWorkflowInstanceID, T1.Dictionary" +
                    "AssetStatus_VersionUpdatedBy, T1.DictionaryAssetStatus_VersionDeletedBy, T1.Dict" +
                    "ionaryAssetStatus_VersionOwnerContactID, T1.DictionaryAssetStatus_VersionOwnerCo" +
                    "mpanyID, T1.DictionaryAssetStatus_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n" +
                    "            T.AssetStatusID AS DictionaryAssetStatus_AssetStatusID, \r\n          " +
                    "  T.StandardAssetStatusName AS DictionaryAssetStatus_StandardAssetStatusName, \r\n" +
                    "            T.CustomAssetStatusName AS DictionaryAssetStatus_CustomAssetStatusNa" +
                    "me, \r\n            T.Description AS DictionaryAssetStatus_Description, \r\n        " +
                    "    T.Version AS DictionaryAssetStatus_Version, \r\n            T.VersionAnteceden" +
                    "tID AS DictionaryAssetStatus_VersionAntecedentID, \r\n            T.VersionCertain" +
                    "ty AS DictionaryAssetStatus_VersionCertainty, \r\n            T.VersionWorkflowIns" +
                    "tanceID AS DictionaryAssetStatus_VersionWorkflowInstanceID, \r\n            T.Vers" +
                    "ionUpdatedBy AS DictionaryAssetStatus_VersionUpdatedBy, \r\n            T.VersionD" +
                    "eletedBy AS DictionaryAssetStatus_VersionDeletedBy, \r\n            T.VersionOwner" +
                    "ContactID AS DictionaryAssetStatus_VersionOwnerContactID, \r\n            T.Versio" +
                    "nOwnerCompanyID AS DictionaryAssetStatus_VersionOwnerCompanyID, \r\n            T." +
                    "VersionUpdated AS DictionaryAssetStatus_VersionUpdated, \r\n            True AS _f" +
                    "rom0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.Q_DictionaryAssetStatu" +
                    "s AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryUsageAuditTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView646()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2159);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryUsageAuditTypes\r\n        [NKD.Modul");
            viewString.Append("e.BusinessObjects.DictionaryUsageAuditType](T1.DictionaryUsageAuditType_UsageAud");
            viewString.Append("itTypeID, T1.DictionaryUsageAuditType_UsageAuditTypeName, T1.DictionaryUsageAudi");
            viewString.Append("tType_Description, T1.DictionaryUsageAuditType_FullDescription, T1.DictionaryUsa");
            viewString.Append("geAuditType_Thumbnail, T1.DictionaryUsageAuditType_OriginalFileDataID, T1.Dictio");
            viewString.Append("naryUsageAuditType_Version, T1.DictionaryUsageAuditType_VersionAntecedentID, T1.");
            viewString.Append("DictionaryUsageAuditType_VersionCertainty, T1.DictionaryUsageAuditType_VersionWo");
            viewString.Append("rkflowInstanceID, T1.DictionaryUsageAuditType_VersionUpdatedBy, T1.DictionaryUsa");
            viewString.Append("geAuditType_VersionDeletedBy, T1.DictionaryUsageAuditType_VersionOwnerContactID,");
            viewString.Append(" T1.DictionaryUsageAuditType_VersionOwnerCompanyID, T1.DictionaryUsageAuditType_");
            viewString.Append("VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.UsageAuditTypeID AS ");
            viewString.Append("DictionaryUsageAuditType_UsageAuditTypeID, \r\n            T.UsageAuditTypeName AS");
            viewString.Append(" DictionaryUsageAuditType_UsageAuditTypeName, \r\n            T.Description AS Dic");
            viewString.Append("tionaryUsageAuditType_Description, \r\n            T.FullDescription AS Dictionary");
            viewString.Append("UsageAuditType_FullDescription, \r\n            T.Thumbnail AS DictionaryUsageAudi");
            viewString.Append("tType_Thumbnail, \r\n            T.OriginalFileDataID AS DictionaryUsageAuditType_");
            viewString.Append("OriginalFileDataID, \r\n            T.Version AS DictionaryUsageAuditType_Version,");
            viewString.Append(" \r\n            T.VersionAntecedentID AS DictionaryUsageAuditType_VersionAntecede");
            viewString.Append("ntID, \r\n            T.VersionCertainty AS DictionaryUsageAuditType_VersionCertai");
            viewString.Append("nty, \r\n            T.VersionWorkflowInstanceID AS DictionaryUsageAuditType_Versi");
            viewString.Append("onWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS DictionaryUsageAuditTy");
            viewString.Append("pe_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS DictionaryUsageAuditTyp");
            viewString.Append("e_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS DictionaryUsageAudi");
            viewString.Append("tType_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS Dictionary");
            viewString.Append("UsageAuditType_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS Dictiona");
            viewString.Append("ryUsageAuditType_VersionUpdated, \r\n            True AS _from0\r\n        FROM NKDM");
            viewString.Append("oduleBusinessObjectsStoreContainer.T_DictionaryUsageAuditType AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryUsageAuditTypes", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.GraphData
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView647()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.GraphData", "\r\n    SELECT VALUE -- Constructing GraphData\r\n        [NKD.Module.BusinessObjects" +
                    ".GraphData](T1.GraphData_GraphDataID, T1.GraphData_TableType, T1.GraphData_Refer" +
                    "enceID, T1.GraphData_ReferenceName, T1.GraphData_Version, T1.GraphData_VersionAn" +
                    "tecedentID, T1.GraphData_VersionCertainty, T1.GraphData_VersionWorkflowInstanceI" +
                    "D, T1.GraphData_VersionUpdatedBy, T1.GraphData_VersionDeletedBy, T1.GraphData_Ve" +
                    "rsionOwnerContactID, T1.GraphData_VersionOwnerCompanyID, T1.GraphData_VersionUpd" +
                    "ated, T1.GraphData_GraphName, T1.GraphData_WorkflowTypeID, T1.GraphData_GraphCon" +
                    "tent, T1.GraphData_Comment, T1.GraphData_CreatedBy, T1.GraphData_Created)\r\n    F" +
                    "ROM (\r\n        SELECT \r\n            T.GraphDataID AS GraphData_GraphDataID, \r\n  " +
                    "          T.TableType AS GraphData_TableType, \r\n            T.ReferenceID AS Gra" +
                    "phData_ReferenceID, \r\n            T.ReferenceName AS GraphData_ReferenceName, \r\n" +
                    "            T.Version AS GraphData_Version, \r\n            T.VersionAntecedentID " +
                    "AS GraphData_VersionAntecedentID, \r\n            T.VersionCertainty AS GraphData_" +
                    "VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS GraphData_Version" +
                    "WorkflowInstanceID, \r\n            T.VersionUpdatedBy AS GraphData_VersionUpdated" +
                    "By, \r\n            T.VersionDeletedBy AS GraphData_VersionDeletedBy, \r\n          " +
                    "  T.VersionOwnerContactID AS GraphData_VersionOwnerContactID, \r\n            T.Ve" +
                    "rsionOwnerCompanyID AS GraphData_VersionOwnerCompanyID, \r\n            T.VersionU" +
                    "pdated AS GraphData_VersionUpdated, \r\n            T.GraphName AS GraphData_Graph" +
                    "Name, \r\n            T.WorkflowTypeID AS GraphData_WorkflowTypeID, \r\n            " +
                    "T.GraphData AS GraphData_GraphContent, \r\n            T.Comment AS GraphData_Comm" +
                    "ent, \r\n            T.CreatedBy AS GraphData_CreatedBy, \r\n            T.Created A" +
                    "S GraphData_Created, \r\n            True AS _from0\r\n        FROM NKDModuleBusines" +
                    "sObjectsStoreContainer.E_GraphData AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.GraphDataRelation
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView648()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2086);
            viewString.Append("\r\n    SELECT VALUE -- Constructing GraphDataRelation\r\n        [NKD.Module.Busine");
            viewString.Append("ssObjects.GraphDataRelation](T1.GraphDataRelation_GraphDataRelationID, T1.GraphD");
            viewString.Append("ataRelation_FromGraphDataID, T1.GraphDataRelation_ToGraphDataID, T1.GraphDataRel");
            viewString.Append("ation_Weight, T1.GraphDataRelation_RelationTypeID, T1.GraphDataRelation_Related,");
            viewString.Append(" T1.GraphDataRelation_Sequence, T1.GraphDataRelation_Version, T1.GraphDataRelati");
            viewString.Append("on_VersionAntecedentID, T1.GraphDataRelation_VersionCertainty, T1.GraphDataRelat");
            viewString.Append("ion_VersionWorkflowInstanceID, T1.GraphDataRelation_VersionUpdatedBy, T1.GraphDa");
            viewString.Append("taRelation_VersionDeletedBy, T1.GraphDataRelation_VersionOwnerContactID, T1.Grap");
            viewString.Append("hDataRelation_VersionOwnerCompanyID, T1.GraphDataRelation_VersionUpdated, T1.Gra");
            viewString.Append("phDataRelation_GraphDataGroupID)\r\n    FROM (\r\n        SELECT \r\n            T.Gra");
            viewString.Append("phDataRelationID AS GraphDataRelation_GraphDataRelationID, \r\n            T.FromG");
            viewString.Append("raphDataID AS GraphDataRelation_FromGraphDataID, \r\n            T.ToGraphDataID A");
            viewString.Append("S GraphDataRelation_ToGraphDataID, \r\n            T.Weight AS GraphDataRelation_W");
            viewString.Append("eight, \r\n            T.RelationTypeID AS GraphDataRelation_RelationTypeID, \r\n   ");
            viewString.Append("         T.Related AS GraphDataRelation_Related, \r\n            T.Sequence AS Gra");
            viewString.Append("phDataRelation_Sequence, \r\n            T.Version AS GraphDataRelation_Version, \r");
            viewString.Append("\n            T.VersionAntecedentID AS GraphDataRelation_VersionAntecedentID, \r\n ");
            viewString.Append("           T.VersionCertainty AS GraphDataRelation_VersionCertainty, \r\n         ");
            viewString.Append("   T.VersionWorkflowInstanceID AS GraphDataRelation_VersionWorkflowInstanceID, \r");
            viewString.Append("\n            T.VersionUpdatedBy AS GraphDataRelation_VersionUpdatedBy, \r\n       ");
            viewString.Append("     T.VersionDeletedBy AS GraphDataRelation_VersionDeletedBy, \r\n            T.V");
            viewString.Append("ersionOwnerContactID AS GraphDataRelation_VersionOwnerContactID, \r\n            T");
            viewString.Append(".VersionOwnerCompanyID AS GraphDataRelation_VersionOwnerCompanyID, \r\n           ");
            viewString.Append(" T.VersionUpdated AS GraphDataRelation_VersionUpdated, \r\n            T.GraphData");
            viewString.Append("GroupID AS GraphDataRelation_GraphDataGroupID, \r\n            True AS _from0\r\n   ");
            viewString.Append("     FROM NKDModuleBusinessObjectsStoreContainer.E_GraphDataRelation AS T\r\n    )");
            viewString.Append(" AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.GraphDataRelation", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryLinestringTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView649()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2332);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryLinestringTypes\r\n        [NKD.Modul");
            viewString.Append("e.BusinessObjects.DictionaryLinestringType](T1.DictionaryLinestringType_Linestri");
            viewString.Append("ngTypeID, T1.DictionaryLinestringType_StandardLinestringTypeName, T1.DictionaryL");
            viewString.Append("inestringType_CustomLinestringTypeName, T1.DictionaryLinestringType_Description,");
            viewString.Append(" T1.DictionaryLinestringType_FullDescription, T1.DictionaryLinestringType_Thumbn");
            viewString.Append("ail, T1.DictionaryLinestringType_OriginalFileDataID, T1.DictionaryLinestringType");
            viewString.Append("_Version, T1.DictionaryLinestringType_VersionAntecedentID, T1.DictionaryLinestri");
            viewString.Append("ngType_VersionCertainty, T1.DictionaryLinestringType_VersionWorkflowInstanceID, ");
            viewString.Append("T1.DictionaryLinestringType_VersionUpdatedBy, T1.DictionaryLinestringType_Versio");
            viewString.Append("nDeletedBy, T1.DictionaryLinestringType_VersionOwnerContactID, T1.DictionaryLine");
            viewString.Append("stringType_VersionOwnerCompanyID, T1.DictionaryLinestringType_VersionUpdated)\r\n ");
            viewString.Append("   FROM (\r\n        SELECT \r\n            T.LinestringTypeID AS DictionaryLinestri");
            viewString.Append("ngType_LinestringTypeID, \r\n            T.StandardLinestringTypeName AS Dictionar");
            viewString.Append("yLinestringType_StandardLinestringTypeName, \r\n            T.CustomLinestringType");
            viewString.Append("Name AS DictionaryLinestringType_CustomLinestringTypeName, \r\n            T.Descr");
            viewString.Append("iption AS DictionaryLinestringType_Description, \r\n            T.FullDescription ");
            viewString.Append("AS DictionaryLinestringType_FullDescription, \r\n            T.Thumbnail AS Dictio");
            viewString.Append("naryLinestringType_Thumbnail, \r\n            T.OriginalFileDataID AS DictionaryLi");
            viewString.Append("nestringType_OriginalFileDataID, \r\n            T.Version AS DictionaryLinestring");
            viewString.Append("Type_Version, \r\n            T.VersionAntecedentID AS DictionaryLinestringType_Ve");
            viewString.Append("rsionAntecedentID, \r\n            T.VersionCertainty AS DictionaryLinestringType_");
            viewString.Append("VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS DictionaryLinestr");
            viewString.Append("ingType_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS Dictionar");
            viewString.Append("yLinestringType_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS Dictionary");
            viewString.Append("LinestringType_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS Dictio");
            viewString.Append("naryLinestringType_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID ");
            viewString.Append("AS DictionaryLinestringType_VersionOwnerCompanyID, \r\n            T.VersionUpdate");
            viewString.Append("d AS DictionaryLinestringType_VersionUpdated, \r\n            True AS _from0\r\n    ");
            viewString.Append("    FROM NKDModuleBusinessObjectsStoreContainer.E_DictionaryLinestringType AS T\r");
            viewString.Append("\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryLinestringTypes", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryProjectTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView650()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2084);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryProjectTypes\r\n        [NKD.Module.B");
            viewString.Append("usinessObjects.DictionaryProjectType](T1.DictionaryProjectType_ProjectTypeID, T1");
            viewString.Append(".DictionaryProjectType_ProjectTypeName, T1.DictionaryProjectType_ProjectTypeDesc");
            viewString.Append("ription, T1.DictionaryProjectType_FullDescription, T1.DictionaryProjectType_Thum");
            viewString.Append("bnail, T1.DictionaryProjectType_OriginalFileDataID, T1.DictionaryProjectType_Ver");
            viewString.Append("sion, T1.DictionaryProjectType_VersionAntecedentID, T1.DictionaryProjectType_Ver");
            viewString.Append("sionCertainty, T1.DictionaryProjectType_VersionProjectflowInstanceID, T1.Diction");
            viewString.Append("aryProjectType_VersionUpdatedBy, T1.DictionaryProjectType_VersionDeletedBy, T1.D");
            viewString.Append("ictionaryProjectType_VersionOwnerContactID, T1.DictionaryProjectType_VersionOwne");
            viewString.Append("rCompanyID, T1.DictionaryProjectType_VersionUpdated)\r\n    FROM (\r\n        SELECT");
            viewString.Append(" \r\n            T.ProjectTypeID AS DictionaryProjectType_ProjectTypeID, \r\n       ");
            viewString.Append("     T.ProjectTypeName AS DictionaryProjectType_ProjectTypeName, \r\n            T");
            viewString.Append(".ProjectTypeDescription AS DictionaryProjectType_ProjectTypeDescription, \r\n     ");
            viewString.Append("       T.FullDescription AS DictionaryProjectType_FullDescription, \r\n           ");
            viewString.Append(" T.Thumbnail AS DictionaryProjectType_Thumbnail, \r\n            T.OriginalFileDat");
            viewString.Append("aID AS DictionaryProjectType_OriginalFileDataID, \r\n            T.Version AS Dict");
            viewString.Append("ionaryProjectType_Version, \r\n            T.VersionAntecedentID AS DictionaryProj");
            viewString.Append("ectType_VersionAntecedentID, \r\n            T.VersionCertainty AS DictionaryProje");
            viewString.Append("ctType_VersionCertainty, \r\n            T.VersionProjectflowInstanceID AS Diction");
            viewString.Append("aryProjectType_VersionProjectflowInstanceID, \r\n            T.VersionUpdatedBy AS");
            viewString.Append(" DictionaryProjectType_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS Dic");
            viewString.Append("tionaryProjectType_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS Di");
            viewString.Append("ctionaryProjectType_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID");
            viewString.Append(" AS DictionaryProjectType_VersionOwnerCompanyID, \r\n            T.VersionUpdated ");
            viewString.Append("AS DictionaryProjectType_VersionUpdated, \r\n            True AS _from0\r\n        F");
            viewString.Append("ROM NKDModuleBusinessObjectsStoreContainer.E_DictionaryProjectType AS T\r\n    ) A");
            viewString.Append("S T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryProjectTypes", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.Linestrings
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView651()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.Linestrings", "\r\n    SELECT VALUE -- Constructing Linestrings\r\n        [NKD.Module.BusinessObjec" +
                    "ts.Linestring](T1.Linestring_LinestringID, T1.Linestring_LinestringTypeID, T1.Li" +
                    "nestring_DefaultLinestringName, T1.Linestring_LinestringCode, T1.Linestring_Line" +
                    "stringGeography, T1.Linestring_DefaultCulture, T1.Linestring_OwnerCompanyID, T1." +
                    "Linestring_ResponsibleContactID, T1.Linestring_Comment, T1.Linestring_Version, T" +
                    "1.Linestring_VersionAntecedentID, T1.Linestring_VersionCertainty, T1.Linestring_" +
                    "VersionWorkflowInstanceID, T1.Linestring_VersionUpdatedBy, T1.Linestring_Version" +
                    "DeletedBy, T1.Linestring_VersionOwnerContactID, T1.Linestring_VersionOwnerCompan" +
                    "yID, T1.Linestring_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.L" +
                    "inestringID AS Linestring_LinestringID, \r\n            T.LinestringTypeID AS Line" +
                    "string_LinestringTypeID, \r\n            T.DefaultLinestringName AS Linestring_Def" +
                    "aultLinestringName, \r\n            T.LinestringCode AS Linestring_LinestringCode," +
                    " \r\n            T.LinestringGeography AS Linestring_LinestringGeography, \r\n      " +
                    "      T.DefaultCulture AS Linestring_DefaultCulture, \r\n            T.OwnerCompan" +
                    "yID AS Linestring_OwnerCompanyID, \r\n            T.ResponsibleContactID AS Linest" +
                    "ring_ResponsibleContactID, \r\n            T.Comment AS Linestring_Comment, \r\n    " +
                    "        T.Version AS Linestring_Version, \r\n            T.VersionAntecedentID AS " +
                    "Linestring_VersionAntecedentID, \r\n            T.VersionCertainty AS Linestring_V" +
                    "ersionCertainty, \r\n            T.VersionWorkflowInstanceID AS Linestring_Version" +
                    "WorkflowInstanceID, \r\n            T.VersionUpdatedBy AS Linestring_VersionUpdate" +
                    "dBy, \r\n            T.VersionDeletedBy AS Linestring_VersionDeletedBy, \r\n        " +
                    "    T.VersionOwnerContactID AS Linestring_VersionOwnerContactID, \r\n            T" +
                    ".VersionOwnerCompanyID AS Linestring_VersionOwnerCompanyID, \r\n            T.Vers" +
                    "ionUpdated AS Linestring_VersionUpdated, \r\n            True AS _from0\r\n        F" +
                    "ROM NKDModuleBusinessObjectsStoreContainer.E_Linestring AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.ProjectOffers
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView652()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2340);
            viewString.Append("\r\n    SELECT VALUE -- Constructing ProjectOffers\r\n        [NKD.Module.BusinessOb");
            viewString.Append("jects.ProjectOffer](T1.ProjectOffer_ProjectOfferID, T1.ProjectOffer_ProjectID, T");
            viewString.Append("1.ProjectOffer_OfferDescription, T1.ProjectOffer_OfferContactID, T1.ProjectOffer");
            viewString.Append("_Offered, T1.ProjectOffer_OriginalAmount, T1.ProjectOffer_Amount, T1.ProjectOffe");
            viewString.Append("r_AmountPaid, T1.ProjectOffer_Expires, T1.ProjectOffer_Expired, T1.ProjectOffer_");
            viewString.Append("Realises, T1.ProjectOffer_Realised, T1.ProjectOffer_Approved, T1.ProjectOffer_Ap");
            viewString.Append("provedBy, T1.ProjectOffer_Version, T1.ProjectOffer_VersionAntecedentID, T1.Proje");
            viewString.Append("ctOffer_VersionCertainty, T1.ProjectOffer_VersionWorkflowInstanceID, T1.ProjectO");
            viewString.Append("ffer_VersionUpdatedBy, T1.ProjectOffer_VersionDeletedBy, T1.ProjectOffer_Version");
            viewString.Append("OwnerContactID, T1.ProjectOffer_VersionOwnerCompanyID, T1.ProjectOffer_VersionUp");
            viewString.Append("dated)\r\n    FROM (\r\n        SELECT \r\n            T.ProjectOfferID AS ProjectOffe");
            viewString.Append("r_ProjectOfferID, \r\n            T.ProjectID AS ProjectOffer_ProjectID, \r\n       ");
            viewString.Append("     T.OfferDescription AS ProjectOffer_OfferDescription, \r\n            T.OfferC");
            viewString.Append("ontactID AS ProjectOffer_OfferContactID, \r\n            T.Offered AS ProjectOffer");
            viewString.Append("_Offered, \r\n            T.OriginalAmount AS ProjectOffer_OriginalAmount, \r\n     ");
            viewString.Append("       T.Amount AS ProjectOffer_Amount, \r\n            T.AmountPaid AS ProjectOff");
            viewString.Append("er_AmountPaid, \r\n            T.Expires AS ProjectOffer_Expires, \r\n            T.");
            viewString.Append("Expired AS ProjectOffer_Expired, \r\n            T.Realises AS ProjectOffer_Realis");
            viewString.Append("es, \r\n            T.Realised AS ProjectOffer_Realised, \r\n            T.Approved ");
            viewString.Append("AS ProjectOffer_Approved, \r\n            T.ApprovedBy AS ProjectOffer_ApprovedBy,");
            viewString.Append(" \r\n            T.Version AS ProjectOffer_Version, \r\n            T.VersionAnteced");
            viewString.Append("entID AS ProjectOffer_VersionAntecedentID, \r\n            T.VersionCertainty AS P");
            viewString.Append("rojectOffer_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS Proje");
            viewString.Append("ctOffer_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS ProjectOf");
            viewString.Append("fer_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS ProjectOffer_VersionDe");
            viewString.Append("letedBy, \r\n            T.VersionOwnerContactID AS ProjectOffer_VersionOwnerConta");
            viewString.Append("ctID, \r\n            T.VersionOwnerCompanyID AS ProjectOffer_VersionOwnerCompanyI");
            viewString.Append("D, \r\n            T.VersionUpdated AS ProjectOffer_VersionUpdated, \r\n            ");
            viewString.Append("True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.E_ProjectOff");
            viewString.Append("er AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.ProjectOffers", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.ProjectPledges
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView653()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3119);
            viewString.Append("\r\n    SELECT VALUE -- Constructing ProjectPledges\r\n        [NKD.Module.BusinessO");
            viewString.Append("bjects.ProjectPledge](T1.ProjectPledge_ProjectPledgeID, T1.ProjectPledge_Project");
            viewString.Append("ID, T1.ProjectPledge_ParentProjectPledgeID, T1.ProjectPledge_PledgeContactID, T1");
            viewString.Append(".ProjectPledge_Pledged, T1.ProjectPledge_OriginalAmount, T1.ProjectPledge_Curren");
            viewString.Append("cyID, T1.ProjectPledge_DepositAmount, T1.ProjectPledge_DepositPaid, T1.ProjectPl");
            viewString.Append("edge_AcceptedProjectOfferID, T1.ProjectPledge_AcceptedProjectOffer, T1.ProjectPl");
            viewString.Append("edge_QuorumOverseenBy, T1.ProjectPledge_QuorumNegotiated, T1.ProjectPledge_Amoun");
            viewString.Append("t, T1.ProjectPledge_AmountPaid, T1.ProjectPledge_Expires, T1.ProjectPledge_Expir");
            viewString.Append("ed, T1.ProjectPledge_Realises, T1.ProjectPledge_Realised, T1.ProjectPledge_Appro");
            viewString.Append("ved, T1.ProjectPledge_ApprovedBy, T1.ProjectPledge_Version, T1.ProjectPledge_Ver");
            viewString.Append("sionAntecedentID, T1.ProjectPledge_VersionCertainty, T1.ProjectPledge_VersionWor");
            viewString.Append("kflowInstanceID, T1.ProjectPledge_VersionUpdatedBy, T1.ProjectPledge_VersionDele");
            viewString.Append("tedBy, T1.ProjectPledge_VersionOwnerContactID, T1.ProjectPledge_VersionOwnerComp");
            viewString.Append("anyID, T1.ProjectPledge_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n          ");
            viewString.Append("  T.ProjectPledgeID AS ProjectPledge_ProjectPledgeID, \r\n            T.ProjectID ");
            viewString.Append("AS ProjectPledge_ProjectID, \r\n            T.ParentProjectPledgeID AS ProjectPled");
            viewString.Append("ge_ParentProjectPledgeID, \r\n            T.PledgeContactID AS ProjectPledge_Pledg");
            viewString.Append("eContactID, \r\n            T.Pledged AS ProjectPledge_Pledged, \r\n            T.Or");
            viewString.Append("iginalAmount AS ProjectPledge_OriginalAmount, \r\n            T.CurrencyID AS Proj");
            viewString.Append("ectPledge_CurrencyID, \r\n            T.DepositAmount AS ProjectPledge_DepositAmou");
            viewString.Append("nt, \r\n            T.DepositPaid AS ProjectPledge_DepositPaid, \r\n            T.Ac");
            viewString.Append("ceptedProjectOfferID AS ProjectPledge_AcceptedProjectOfferID, \r\n            T.Ac");
            viewString.Append("ceptedProjectOffer AS ProjectPledge_AcceptedProjectOffer, \r\n            T.Quorum");
            viewString.Append("OverseenBy AS ProjectPledge_QuorumOverseenBy, \r\n            T.QuorumNegotiated A");
            viewString.Append("S ProjectPledge_QuorumNegotiated, \r\n            T.Amount AS ProjectPledge_Amount");
            viewString.Append(", \r\n            T.AmountPaid AS ProjectPledge_AmountPaid, \r\n            T.Expire");
            viewString.Append("s AS ProjectPledge_Expires, \r\n            T.Expired AS ProjectPledge_Expired, \r\n");
            viewString.Append("            T.Realises AS ProjectPledge_Realises, \r\n            T.Realised AS Pr");
            viewString.Append("ojectPledge_Realised, \r\n            T.Approved AS ProjectPledge_Approved, \r\n    ");
            viewString.Append("        T.ApprovedBy AS ProjectPledge_ApprovedBy, \r\n            T.Version AS Pro");
            viewString.Append("jectPledge_Version, \r\n            T.VersionAntecedentID AS ProjectPledge_Version");
            viewString.Append("AntecedentID, \r\n            T.VersionCertainty AS ProjectPledge_VersionCertainty");
            viewString.Append(", \r\n            T.VersionWorkflowInstanceID AS ProjectPledge_VersionWorkflowInst");
            viewString.Append("anceID, \r\n            T.VersionUpdatedBy AS ProjectPledge_VersionUpdatedBy, \r\n  ");
            viewString.Append("          T.VersionDeletedBy AS ProjectPledge_VersionDeletedBy, \r\n            T.");
            viewString.Append("VersionOwnerContactID AS ProjectPledge_VersionOwnerContactID, \r\n            T.Ve");
            viewString.Append("rsionOwnerCompanyID AS ProjectPledge_VersionOwnerCompanyID, \r\n            T.Vers");
            viewString.Append("ionUpdated AS ProjectPledge_VersionUpdated, \r\n            True AS _from0\r\n      ");
            viewString.Append("  FROM NKDModuleBusinessObjectsStoreContainer.E_ProjectPledge AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.ProjectPledges", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.ProjectPledgeAddendums
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView654()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2116);
            viewString.Append("\r\n    SELECT VALUE -- Constructing ProjectPledgeAddendums\r\n        [NKD.Module.B");
            viewString.Append("usinessObjects.ProjectPledgeAddendum](T1.ProjectPledgeAddendum_ProjectPledgeAdde");
            viewString.Append("ndumID, T1.ProjectPledgeAddendum_ProjectPledgeID, T1.ProjectPledgeAddendum_Adden");
            viewString.Append("dum, T1.ProjectPledgeAddendum_Reviewed, T1.ProjectPledgeAddendum_ReviewedBy, T1.");
            viewString.Append("ProjectPledgeAddendum_Approved, T1.ProjectPledgeAddendum_ApprovedBy, T1.ProjectP");
            viewString.Append("ledgeAddendum_Version, T1.ProjectPledgeAddendum_VersionAntecedentID, T1.ProjectP");
            viewString.Append("ledgeAddendum_VersionCertainty, T1.ProjectPledgeAddendum_VersionWorkflowInstance");
            viewString.Append("ID, T1.ProjectPledgeAddendum_VersionUpdatedBy, T1.ProjectPledgeAddendum_VersionD");
            viewString.Append("eletedBy, T1.ProjectPledgeAddendum_VersionOwnerContactID, T1.ProjectPledgeAddend");
            viewString.Append("um_VersionOwnerCompanyID, T1.ProjectPledgeAddendum_VersionUpdated)\r\n    FROM (\r\n");
            viewString.Append("        SELECT \r\n            T.ProjectPledgeAddendumID AS ProjectPledgeAddendum_");
            viewString.Append("ProjectPledgeAddendumID, \r\n            T.ProjectPledgeID AS ProjectPledgeAddendu");
            viewString.Append("m_ProjectPledgeID, \r\n            T.Addendum AS ProjectPledgeAddendum_Addendum, \r");
            viewString.Append("\n            T.Reviewed AS ProjectPledgeAddendum_Reviewed, \r\n            T.Revie");
            viewString.Append("wedBy AS ProjectPledgeAddendum_ReviewedBy, \r\n            T.Approved AS ProjectPl");
            viewString.Append("edgeAddendum_Approved, \r\n            T.ApprovedBy AS ProjectPledgeAddendum_Appro");
            viewString.Append("vedBy, \r\n            T.Version AS ProjectPledgeAddendum_Version, \r\n            T");
            viewString.Append(".VersionAntecedentID AS ProjectPledgeAddendum_VersionAntecedentID, \r\n           ");
            viewString.Append(" T.VersionCertainty AS ProjectPledgeAddendum_VersionCertainty, \r\n            T.V");
            viewString.Append("ersionWorkflowInstanceID AS ProjectPledgeAddendum_VersionWorkflowInstanceID, \r\n ");
            viewString.Append("           T.VersionUpdatedBy AS ProjectPledgeAddendum_VersionUpdatedBy, \r\n     ");
            viewString.Append("       T.VersionDeletedBy AS ProjectPledgeAddendum_VersionDeletedBy, \r\n         ");
            viewString.Append("   T.VersionOwnerContactID AS ProjectPledgeAddendum_VersionOwnerContactID, \r\n   ");
            viewString.Append("         T.VersionOwnerCompanyID AS ProjectPledgeAddendum_VersionOwnerCompanyID,");
            viewString.Append(" \r\n            T.VersionUpdated AS ProjectPledgeAddendum_VersionUpdated, \r\n     ");
            viewString.Append("       True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.E_Pro");
            viewString.Append("jectPledgeAddendum AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.ProjectPledgeAddendums", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DataDatas
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView655()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DataDatas", "\r\n    SELECT VALUE -- Constructing DataDatas\r\n        [NKD.Module.BusinessObjects" +
                    ".DataData](T1.DataData_DataDataID, T1.DataData_ParentTableType, T1.DataData_Pare" +
                    "ntReferenceID, T1.DataData_ChildTableType, T1.DataData_ChildReferenceID, T1.Data" +
                    "Data_IsCircular, T1.DataData_CreatedBy, T1.DataData_Created, T1.DataData_Version" +
                    ", T1.DataData_VersionAntecedentID, T1.DataData_VersionCertainty, T1.DataData_Ver" +
                    "sionWorkflowInstanceID, T1.DataData_VersionUpdatedBy, T1.DataData_VersionDeleted" +
                    "By, T1.DataData_VersionOwnerContactID, T1.DataData_VersionOwnerCompanyID, T1.Dat" +
                    "aData_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.DataDataID AS " +
                    "DataData_DataDataID, \r\n            T.ParentTableType AS DataData_ParentTableType" +
                    ", \r\n            T.ParentReferenceID AS DataData_ParentReferenceID, \r\n           " +
                    " T.ChildTableType AS DataData_ChildTableType, \r\n            T.ChildReferenceID A" +
                    "S DataData_ChildReferenceID, \r\n            T.IsCircular AS DataData_IsCircular, " +
                    "\r\n            T.CreatedBy AS DataData_CreatedBy, \r\n            T.Created AS Data" +
                    "Data_Created, \r\n            T.Version AS DataData_Version, \r\n            T.Versi" +
                    "onAntecedentID AS DataData_VersionAntecedentID, \r\n            T.VersionCertainty" +
                    " AS DataData_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS Data" +
                    "Data_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS DataData_Ver" +
                    "sionUpdatedBy, \r\n            T.VersionDeletedBy AS DataData_VersionDeletedBy, \r\n" +
                    "            T.VersionOwnerContactID AS DataData_VersionOwnerContactID, \r\n       " +
                    "     T.VersionOwnerCompanyID AS DataData_VersionOwnerCompanyID, \r\n            T." +
                    "VersionUpdated AS DataData_VersionUpdated, \r\n            True AS _from0\r\n       " +
                    " FROM NKDModuleBusinessObjectsStoreContainer.E_DataData AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.GraphDataFileDatas
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView656()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.GraphDataFileDatas", "\r\n    SELECT VALUE -- Constructing GraphDataFileDatas\r\n        [NKD.Module.Busine" +
                    "ssObjects.GraphDataFileData](T1.GraphDataFileData_GraphDataFileDataID, T1.GraphD" +
                    "ataFileData_GraphDataID, T1.GraphDataFileData_FileDataID, T1.GraphDataFileData_V" +
                    "ersion, T1.GraphDataFileData_VersionAntecedentID, T1.GraphDataFileData_VersionCe" +
                    "rtainty, T1.GraphDataFileData_VersionWorkflowInstanceID, T1.GraphDataFileData_Ve" +
                    "rsionUpdatedBy, T1.GraphDataFileData_VersionDeletedBy, T1.GraphDataFileData_Vers" +
                    "ionOwnerContactID, T1.GraphDataFileData_VersionOwnerCompanyID, T1.GraphDataFileD" +
                    "ata_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.GraphDataFileDat" +
                    "aID AS GraphDataFileData_GraphDataFileDataID, \r\n            T.GraphDataID AS Gra" +
                    "phDataFileData_GraphDataID, \r\n            T.FileDataID AS GraphDataFileData_File" +
                    "DataID, \r\n            T.Version AS GraphDataFileData_Version, \r\n            T.Ve" +
                    "rsionAntecedentID AS GraphDataFileData_VersionAntecedentID, \r\n            T.Vers" +
                    "ionCertainty AS GraphDataFileData_VersionCertainty, \r\n            T.VersionWorkf" +
                    "lowInstanceID AS GraphDataFileData_VersionWorkflowInstanceID, \r\n            T.Ve" +
                    "rsionUpdatedBy AS GraphDataFileData_VersionUpdatedBy, \r\n            T.VersionDel" +
                    "etedBy AS GraphDataFileData_VersionDeletedBy, \r\n            T.VersionOwnerContac" +
                    "tID AS GraphDataFileData_VersionOwnerContactID, \r\n            T.VersionOwnerComp" +
                    "anyID AS GraphDataFileData_VersionOwnerCompanyID, \r\n            T.VersionUpdated" +
                    " AS GraphDataFileData_VersionUpdated, \r\n            True AS _from0\r\n        FROM" +
                    " NKDModuleBusinessObjectsStoreContainer.E_GraphDataFileData AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.GraphDataLocations
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView657()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.GraphDataLocations", "\r\n    SELECT VALUE -- Constructing GraphDataLocations\r\n        [NKD.Module.Busine" +
                    "ssObjects.GraphDataLocation](T1.GraphDataLocation_GraphDataLocationID, T1.GraphD" +
                    "ataLocation_GraphDataID, T1.GraphDataLocation_LocationID, T1.GraphDataLocation_V" +
                    "ersion, T1.GraphDataLocation_VersionAntecedentID, T1.GraphDataLocation_VersionCe" +
                    "rtainty, T1.GraphDataLocation_VersionWorkflowInstanceID, T1.GraphDataLocation_Ve" +
                    "rsionUpdatedBy, T1.GraphDataLocation_VersionDeletedBy, T1.GraphDataLocation_Vers" +
                    "ionOwnerContactID, T1.GraphDataLocation_VersionOwnerCompanyID, T1.GraphDataLocat" +
                    "ion_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.GraphDataLocatio" +
                    "nID AS GraphDataLocation_GraphDataLocationID, \r\n            T.GraphDataID AS Gra" +
                    "phDataLocation_GraphDataID, \r\n            T.LocationID AS GraphDataLocation_Loca" +
                    "tionID, \r\n            T.Version AS GraphDataLocation_Version, \r\n            T.Ve" +
                    "rsionAntecedentID AS GraphDataLocation_VersionAntecedentID, \r\n            T.Vers" +
                    "ionCertainty AS GraphDataLocation_VersionCertainty, \r\n            T.VersionWorkf" +
                    "lowInstanceID AS GraphDataLocation_VersionWorkflowInstanceID, \r\n            T.Ve" +
                    "rsionUpdatedBy AS GraphDataLocation_VersionUpdatedBy, \r\n            T.VersionDel" +
                    "etedBy AS GraphDataLocation_VersionDeletedBy, \r\n            T.VersionOwnerContac" +
                    "tID AS GraphDataLocation_VersionOwnerContactID, \r\n            T.VersionOwnerComp" +
                    "anyID AS GraphDataLocation_VersionOwnerCompanyID, \r\n            T.VersionUpdated" +
                    " AS GraphDataLocation_VersionUpdated, \r\n            True AS _from0\r\n        FROM" +
                    " NKDModuleBusinessObjectsStoreContainer.E_GraphDataLocation AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.GraphDataGroups
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView658()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2477);
            viewString.Append("\r\n    SELECT VALUE -- Constructing GraphDataGroups\r\n        [NKD.Module.Business");
            viewString.Append("Objects.GraphDataGroup](T1.GraphDataGroup_GraphDataGroupID, T1.GraphDataGroup_Gr");
            viewString.Append("aphDataGroupName, T1.GraphDataGroup_Comment, T1.GraphDataGroup_CreatedBy, T1.Gra");
            viewString.Append("phDataGroup_Created, T1.GraphDataGroup_Version, T1.GraphDataGroup_VersionAnteced");
            viewString.Append("entID, T1.GraphDataGroup_VersionCertainty, T1.GraphDataGroup_VersionWorkflowInst");
            viewString.Append("anceID, T1.GraphDataGroup_VersionUpdatedBy, T1.GraphDataGroup_VersionDeletedBy, ");
            viewString.Append("T1.GraphDataGroup_VersionOwnerContactID, T1.GraphDataGroup_VersionOwnerCompanyID");
            viewString.Append(", T1.GraphDataGroup_VersionUpdated, T1.GraphDataGroup_StandardGraphDataGroupName");
            viewString.Append(", T1.GraphDataGroup_CurrencyID, T1.GraphDataGroup_PricePerUnit, T1.GraphDataGrou");
            viewString.Append("p_PriceUnitID, T1.GraphDataGroup_Description, T1.GraphDataGroup_Thumbnail, T1.Gr");
            viewString.Append("aphDataGroup_OriginalFileDataID, T1.GraphDataGroup_StartGraphDataID)\r\n    FROM (");
            viewString.Append("\r\n        SELECT \r\n            T.GraphDataGroupID AS GraphDataGroup_GraphDataGro");
            viewString.Append("upID, \r\n            T.GraphDataGroupName AS GraphDataGroup_GraphDataGroupName, \r");
            viewString.Append("\n            T.Comment AS GraphDataGroup_Comment, \r\n            T.CreatedBy AS G");
            viewString.Append("raphDataGroup_CreatedBy, \r\n            T.Created AS GraphDataGroup_Created, \r\n  ");
            viewString.Append("          T.Version AS GraphDataGroup_Version, \r\n            T.VersionAntecedent");
            viewString.Append("ID AS GraphDataGroup_VersionAntecedentID, \r\n            T.VersionCertainty AS Gr");
            viewString.Append("aphDataGroup_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS Grap");
            viewString.Append("hDataGroup_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS GraphD");
            viewString.Append("ataGroup_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS GraphDataGroup_Ve");
            viewString.Append("rsionDeletedBy, \r\n            T.VersionOwnerContactID AS GraphDataGroup_VersionO");
            viewString.Append("wnerContactID, \r\n            T.VersionOwnerCompanyID AS GraphDataGroup_VersionOw");
            viewString.Append("nerCompanyID, \r\n            T.VersionUpdated AS GraphDataGroup_VersionUpdated, \r");
            viewString.Append("\n            T.StandardGraphDataGroupName AS GraphDataGroup_StandardGraphDataGro");
            viewString.Append("upName, \r\n            T.CurrencyID AS GraphDataGroup_CurrencyID, \r\n            T");
            viewString.Append(".PricePerUnit AS GraphDataGroup_PricePerUnit, \r\n            T.PriceUnitID AS Gra");
            viewString.Append("phDataGroup_PriceUnitID, \r\n            T.Description AS GraphDataGroup_Descripti");
            viewString.Append("on, \r\n            T.Thumbnail AS GraphDataGroup_Thumbnail, \r\n            T.Origi");
            viewString.Append("nalFileDataID AS GraphDataGroup_OriginalFileDataID, \r\n            T.StartGraphDa");
            viewString.Append("taID AS GraphDataGroup_StartGraphDataID, \r\n            True AS _from0\r\n        F");
            viewString.Append("ROM NKDModuleBusinessObjectsStoreContainer.E_GraphDataGroup AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.GraphDataGroups", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryAlterationJointTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView659()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2888);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryAlterationJointTypes\r\n        [NKD.");
            viewString.Append("Module.BusinessObjects.DictionaryAlterationJointType](T1.DictionaryAlterationJoi");
            viewString.Append("ntType_AlterationJointTypeID, T1.DictionaryAlterationJointType_StandardAlteratio");
            viewString.Append("nJointTypeName, T1.DictionaryAlterationJointType_CoalAlterationJointTypeName, T1");
            viewString.Append(".DictionaryAlterationJointType_GoldAlterationJointTypeName, T1.DictionaryAlterat");
            viewString.Append("ionJointType_CustomAlterationJointTypeName, T1.DictionaryAlterationJointType_Des");
            viewString.Append("cription, T1.DictionaryAlterationJointType_FullDescription, T1.DictionaryAlterat");
            viewString.Append("ionJointType_Thumbnail, T1.DictionaryAlterationJointType_OriginalFileDataID, T1.");
            viewString.Append("DictionaryAlterationJointType_Version, T1.DictionaryAlterationJointType_VersionA");
            viewString.Append("ntecedentID, T1.DictionaryAlterationJointType_VersionCertainty, T1.DictionaryAlt");
            viewString.Append("erationJointType_VersionWorkflowInstanceID, T1.DictionaryAlterationJointType_Ver");
            viewString.Append("sionUpdatedBy, T1.DictionaryAlterationJointType_VersionDeletedBy, T1.DictionaryA");
            viewString.Append("lterationJointType_VersionOwnerContactID, T1.DictionaryAlterationJointType_Versi");
            viewString.Append("onOwnerCompanyID, T1.DictionaryAlterationJointType_VersionUpdated)\r\n    FROM (\r\n");
            viewString.Append("        SELECT \r\n            T.AlterationJointTypeID AS DictionaryAlterationJoin");
            viewString.Append("tType_AlterationJointTypeID, \r\n            T.StandardAlterationJointTypeName AS ");
            viewString.Append("DictionaryAlterationJointType_StandardAlterationJointTypeName, \r\n            T.C");
            viewString.Append("oalAlterationJointTypeName AS DictionaryAlterationJointType_CoalAlterationJointT");
            viewString.Append("ypeName, \r\n            T.GoldAlterationJointTypeName AS DictionaryAlterationJoin");
            viewString.Append("tType_GoldAlterationJointTypeName, \r\n            T.CustomAlterationJointTypeName");
            viewString.Append(" AS DictionaryAlterationJointType_CustomAlterationJointTypeName, \r\n            T");
            viewString.Append(".Description AS DictionaryAlterationJointType_Description, \r\n            T.FullD");
            viewString.Append("escription AS DictionaryAlterationJointType_FullDescription, \r\n            T.Thu");
            viewString.Append("mbnail AS DictionaryAlterationJointType_Thumbnail, \r\n            T.OriginalFileD");
            viewString.Append("ataID AS DictionaryAlterationJointType_OriginalFileDataID, \r\n            T.Versi");
            viewString.Append("on AS DictionaryAlterationJointType_Version, \r\n            T.VersionAntecedentID");
            viewString.Append(" AS DictionaryAlterationJointType_VersionAntecedentID, \r\n            T.VersionCe");
            viewString.Append("rtainty AS DictionaryAlterationJointType_VersionCertainty, \r\n            T.Versi");
            viewString.Append("onWorkflowInstanceID AS DictionaryAlterationJointType_VersionWorkflowInstanceID,");
            viewString.Append(" \r\n            T.VersionUpdatedBy AS DictionaryAlterationJointType_VersionUpdate");
            viewString.Append("dBy, \r\n            T.VersionDeletedBy AS DictionaryAlterationJointType_VersionDe");
            viewString.Append("letedBy, \r\n            T.VersionOwnerContactID AS DictionaryAlterationJointType_");
            viewString.Append("VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS DictionaryAltera");
            viewString.Append("tionJointType_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS Dictionar");
            viewString.Append("yAlterationJointType_VersionUpdated, \r\n            True AS _from0\r\n        FROM ");
            viewString.Append("NKDModuleBusinessObjectsStoreContainer.X_DictionaryAlterationJointType AS T\r\n   ");
            viewString.Append(" ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryAlterationJointTypes", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryBedDevelopments
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView660()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2618);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryBedDevelopments\r\n        [NKD.Modul");
            viewString.Append("e.BusinessObjects.DictionaryBedDevelopment](T1.DictionaryBedDevelopment_BedDevel");
            viewString.Append("opmentID, T1.DictionaryBedDevelopment_StandardBedDevelopmentName, T1.DictionaryB");
            viewString.Append("edDevelopment_CoalBedDevelopmentName, T1.DictionaryBedDevelopment_GoldBedDevelop");
            viewString.Append("mentName, T1.DictionaryBedDevelopment_CustomBedDevelopmentName, T1.DictionaryBed");
            viewString.Append("Development_Description, T1.DictionaryBedDevelopment_FullDescription, T1.Diction");
            viewString.Append("aryBedDevelopment_Thumbnail, T1.DictionaryBedDevelopment_OriginalFileDataID, T1.");
            viewString.Append("DictionaryBedDevelopment_Version, T1.DictionaryBedDevelopment_VersionAntecedentI");
            viewString.Append("D, T1.DictionaryBedDevelopment_VersionCertainty, T1.DictionaryBedDevelopment_Ver");
            viewString.Append("sionWorkflowInstanceID, T1.DictionaryBedDevelopment_VersionUpdatedBy, T1.Diction");
            viewString.Append("aryBedDevelopment_VersionDeletedBy, T1.DictionaryBedDevelopment_VersionOwnerCont");
            viewString.Append("actID, T1.DictionaryBedDevelopment_VersionOwnerCompanyID, T1.DictionaryBedDevelo");
            viewString.Append("pment_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.BedDevelopment");
            viewString.Append("ID AS DictionaryBedDevelopment_BedDevelopmentID, \r\n            T.StandardBedDeve");
            viewString.Append("lopmentName AS DictionaryBedDevelopment_StandardBedDevelopmentName, \r\n          ");
            viewString.Append("  T.CoalBedDevelopmentName AS DictionaryBedDevelopment_CoalBedDevelopmentName, \r");
            viewString.Append("\n            T.GoldBedDevelopmentName AS DictionaryBedDevelopment_GoldBedDevelop");
            viewString.Append("mentName, \r\n            T.CustomBedDevelopmentName AS DictionaryBedDevelopment_C");
            viewString.Append("ustomBedDevelopmentName, \r\n            T.Description AS DictionaryBedDevelopment");
            viewString.Append("_Description, \r\n            T.FullDescription AS DictionaryBedDevelopment_FullDe");
            viewString.Append("scription, \r\n            T.Thumbnail AS DictionaryBedDevelopment_Thumbnail, \r\n  ");
            viewString.Append("          T.OriginalFileDataID AS DictionaryBedDevelopment_OriginalFileDataID, \r");
            viewString.Append("\n            T.Version AS DictionaryBedDevelopment_Version, \r\n            T.Vers");
            viewString.Append("ionAntecedentID AS DictionaryBedDevelopment_VersionAntecedentID, \r\n            T");
            viewString.Append(".VersionCertainty AS DictionaryBedDevelopment_VersionCertainty, \r\n            T.");
            viewString.Append("VersionWorkflowInstanceID AS DictionaryBedDevelopment_VersionWorkflowInstanceID,");
            viewString.Append(" \r\n            T.VersionUpdatedBy AS DictionaryBedDevelopment_VersionUpdatedBy, ");
            viewString.Append("\r\n            T.VersionDeletedBy AS DictionaryBedDevelopment_VersionDeletedBy, \r");
            viewString.Append("\n            T.VersionOwnerContactID AS DictionaryBedDevelopment_VersionOwnerCon");
            viewString.Append("tactID, \r\n            T.VersionOwnerCompanyID AS DictionaryBedDevelopment_Versio");
            viewString.Append("nOwnerCompanyID, \r\n            T.VersionUpdated AS DictionaryBedDevelopment_Vers");
            viewString.Append("ionUpdated, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjectsS");
            viewString.Append("toreContainer.X_DictionaryBedDevelopment AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryBedDevelopments", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryFriabilityTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView661()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2618);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryFriabilityTypes\r\n        [NKD.Modul");
            viewString.Append("e.BusinessObjects.DictionaryFriabilityType](T1.DictionaryFriabilityType_Friabili");
            viewString.Append("tyTypeID, T1.DictionaryFriabilityType_StandardFriabilityTypeName, T1.DictionaryF");
            viewString.Append("riabilityType_CoalFriabilityTypeName, T1.DictionaryFriabilityType_GoldFriability");
            viewString.Append("TypeName, T1.DictionaryFriabilityType_CustomFriabilityTypeName, T1.DictionaryFri");
            viewString.Append("abilityType_Description, T1.DictionaryFriabilityType_FullDescription, T1.Diction");
            viewString.Append("aryFriabilityType_Thumbnail, T1.DictionaryFriabilityType_OriginalFileDataID, T1.");
            viewString.Append("DictionaryFriabilityType_Version, T1.DictionaryFriabilityType_VersionAntecedentI");
            viewString.Append("D, T1.DictionaryFriabilityType_VersionCertainty, T1.DictionaryFriabilityType_Ver");
            viewString.Append("sionWorkflowInstanceID, T1.DictionaryFriabilityType_VersionUpdatedBy, T1.Diction");
            viewString.Append("aryFriabilityType_VersionDeletedBy, T1.DictionaryFriabilityType_VersionOwnerCont");
            viewString.Append("actID, T1.DictionaryFriabilityType_VersionOwnerCompanyID, T1.DictionaryFriabilit");
            viewString.Append("yType_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.FriabilityType");
            viewString.Append("ID AS DictionaryFriabilityType_FriabilityTypeID, \r\n            T.StandardFriabil");
            viewString.Append("ityTypeName AS DictionaryFriabilityType_StandardFriabilityTypeName, \r\n          ");
            viewString.Append("  T.CoalFriabilityTypeName AS DictionaryFriabilityType_CoalFriabilityTypeName, \r");
            viewString.Append("\n            T.GoldFriabilityTypeName AS DictionaryFriabilityType_GoldFriability");
            viewString.Append("TypeName, \r\n            T.CustomFriabilityTypeName AS DictionaryFriabilityType_C");
            viewString.Append("ustomFriabilityTypeName, \r\n            T.Description AS DictionaryFriabilityType");
            viewString.Append("_Description, \r\n            T.FullDescription AS DictionaryFriabilityType_FullDe");
            viewString.Append("scription, \r\n            T.Thumbnail AS DictionaryFriabilityType_Thumbnail, \r\n  ");
            viewString.Append("          T.OriginalFileDataID AS DictionaryFriabilityType_OriginalFileDataID, \r");
            viewString.Append("\n            T.Version AS DictionaryFriabilityType_Version, \r\n            T.Vers");
            viewString.Append("ionAntecedentID AS DictionaryFriabilityType_VersionAntecedentID, \r\n            T");
            viewString.Append(".VersionCertainty AS DictionaryFriabilityType_VersionCertainty, \r\n            T.");
            viewString.Append("VersionWorkflowInstanceID AS DictionaryFriabilityType_VersionWorkflowInstanceID,");
            viewString.Append(" \r\n            T.VersionUpdatedBy AS DictionaryFriabilityType_VersionUpdatedBy, ");
            viewString.Append("\r\n            T.VersionDeletedBy AS DictionaryFriabilityType_VersionDeletedBy, \r");
            viewString.Append("\n            T.VersionOwnerContactID AS DictionaryFriabilityType_VersionOwnerCon");
            viewString.Append("tactID, \r\n            T.VersionOwnerCompanyID AS DictionaryFriabilityType_Versio");
            viewString.Append("nOwnerCompanyID, \r\n            T.VersionUpdated AS DictionaryFriabilityType_Vers");
            viewString.Append("ionUpdated, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjectsS");
            viewString.Append("toreContainer.X_DictionaryFriabilityType AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryFriabilityTypes", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryStructureSets
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView662()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2510);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryStructureSets\r\n        [NKD.Module.");
            viewString.Append("BusinessObjects.DictionaryStructureSet](T1.DictionaryStructureSet_StructureSetID");
            viewString.Append(", T1.DictionaryStructureSet_StandardStructureSetName, T1.DictionaryStructureSet_");
            viewString.Append("CoalStructureSetName, T1.DictionaryStructureSet_GoldStructureSetName, T1.Diction");
            viewString.Append("aryStructureSet_CustomStructureSetName, T1.DictionaryStructureSet_Description, T");
            viewString.Append("1.DictionaryStructureSet_FullDescription, T1.DictionaryStructureSet_Thumbnail, T");
            viewString.Append("1.DictionaryStructureSet_OriginalFileDataID, T1.DictionaryStructureSet_Version, ");
            viewString.Append("T1.DictionaryStructureSet_VersionAntecedentID, T1.DictionaryStructureSet_Version");
            viewString.Append("Certainty, T1.DictionaryStructureSet_VersionWorkflowInstanceID, T1.DictionaryStr");
            viewString.Append("uctureSet_VersionUpdatedBy, T1.DictionaryStructureSet_VersionDeletedBy, T1.Dicti");
            viewString.Append("onaryStructureSet_VersionOwnerContactID, T1.DictionaryStructureSet_VersionOwnerC");
            viewString.Append("ompanyID, T1.DictionaryStructureSet_VersionUpdated)\r\n    FROM (\r\n        SELECT ");
            viewString.Append("\r\n            T.StructureSetID AS DictionaryStructureSet_StructureSetID, \r\n     ");
            viewString.Append("       T.StandardStructureSetName AS DictionaryStructureSet_StandardStructureSet");
            viewString.Append("Name, \r\n            T.CoalStructureSetName AS DictionaryStructureSet_CoalStructu");
            viewString.Append("reSetName, \r\n            T.GoldStructureSetName AS DictionaryStructureSet_GoldSt");
            viewString.Append("ructureSetName, \r\n            T.CustomStructureSetName AS DictionaryStructureSet");
            viewString.Append("_CustomStructureSetName, \r\n            T.Description AS DictionaryStructureSet_D");
            viewString.Append("escription, \r\n            T.FullDescription AS DictionaryStructureSet_FullDescri");
            viewString.Append("ption, \r\n            T.Thumbnail AS DictionaryStructureSet_Thumbnail, \r\n        ");
            viewString.Append("    T.OriginalFileDataID AS DictionaryStructureSet_OriginalFileDataID, \r\n       ");
            viewString.Append("     T.Version AS DictionaryStructureSet_Version, \r\n            T.VersionAnteced");
            viewString.Append("entID AS DictionaryStructureSet_VersionAntecedentID, \r\n            T.VersionCert");
            viewString.Append("ainty AS DictionaryStructureSet_VersionCertainty, \r\n            T.VersionWorkflo");
            viewString.Append("wInstanceID AS DictionaryStructureSet_VersionWorkflowInstanceID, \r\n            T");
            viewString.Append(".VersionUpdatedBy AS DictionaryStructureSet_VersionUpdatedBy, \r\n            T.Ve");
            viewString.Append("rsionDeletedBy AS DictionaryStructureSet_VersionDeletedBy, \r\n            T.Versi");
            viewString.Append("onOwnerContactID AS DictionaryStructureSet_VersionOwnerContactID, \r\n            ");
            viewString.Append("T.VersionOwnerCompanyID AS DictionaryStructureSet_VersionOwnerCompanyID, \r\n     ");
            viewString.Append("       T.VersionUpdated AS DictionaryStructureSet_VersionUpdated, \r\n            ");
            viewString.Append("True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_Dictionary");
            viewString.Append("StructureSet AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryStructureSets", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.Forms
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView663()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.Forms", "\r\n    SELECT VALUE -- Constructing Forms\r\n        [NKD.Module.BusinessObjects.For" +
                    "m](T1.Form_FormID, T1.Form_FormStructure, T1.Form_FormActions, T1.Form_FormType," +
                    " T1.Form_TemplateMulti, T1.Form_TemplateSingle, T1.Form_Version, T1.Form_Version" +
                    "AntecedentID, T1.Form_VersionCertainty, T1.Form_VersionWorkflowInstanceID, T1.Fo" +
                    "rm_VersionUpdatedBy, T1.Form_VersionDeletedBy, T1.Form_VersionOwnerContactID, T1" +
                    ".Form_VersionOwnerCompanyID, T1.Form_VersionUpdated, T1.Form_FormStructureChecks" +
                    "um, T1.Form_FormName)\r\n    FROM (\r\n        SELECT \r\n            T.FormID AS Form" +
                    "_FormID, \r\n            T.FormStructure AS Form_FormStructure, \r\n            T.Fo" +
                    "rmActions AS Form_FormActions, \r\n            T.FormType AS Form_FormType, \r\n    " +
                    "        T.TemplateMulti AS Form_TemplateMulti, \r\n            T.TemplateSingle AS" +
                    " Form_TemplateSingle, \r\n            T.Version AS Form_Version, \r\n            T.V" +
                    "ersionAntecedentID AS Form_VersionAntecedentID, \r\n            T.VersionCertainty" +
                    " AS Form_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS Form_Ver" +
                    "sionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS Form_VersionUpdatedB" +
                    "y, \r\n            T.VersionDeletedBy AS Form_VersionDeletedBy, \r\n            T.Ve" +
                    "rsionOwnerContactID AS Form_VersionOwnerContactID, \r\n            T.VersionOwnerC" +
                    "ompanyID AS Form_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS Form_V" +
                    "ersionUpdated, \r\n            T.FormStructureChecksum AS Form_FormStructureChecks" +
                    "um, \r\n            T.FormName AS Form_FormName, \r\n            True AS _from0\r\n   " +
                    "     FROM NKDModuleBusinessObjectsStoreContainer.E_Form AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.FormDatas
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView664()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.FormDatas", "\r\n    SELECT VALUE -- Constructing FormDatas\r\n        [NKD.Module.BusinessObjects" +
                    ".FormData](T1.FormData_FormDataID, T1.FormData_FormID, T1.FormData_TableType, T1" +
                    ".FormData_ReferenceID, T1.FormData_FormOrigin, T1.FormData_FormDestination, T1.F" +
                    "ormData_FormContent, T1.FormData_Version, T1.FormData_VersionAntecedentID, T1.Fo" +
                    "rmData_VersionCertainty, T1.FormData_VersionWorkflowInstanceID, T1.FormData_Vers" +
                    "ionUpdatedBy, T1.FormData_VersionDeletedBy, T1.FormData_VersionOwnerContactID, T" +
                    "1.FormData_VersionOwnerCompanyID, T1.FormData_VersionUpdated)\r\n    FROM (\r\n     " +
                    "   SELECT \r\n            T.FormDataID AS FormData_FormDataID, \r\n            T.For" +
                    "mID AS FormData_FormID, \r\n            T.TableType AS FormData_TableType, \r\n     " +
                    "       T.ReferenceID AS FormData_ReferenceID, \r\n            T.FormOrigin AS Form" +
                    "Data_FormOrigin, \r\n            T.FormDestination AS FormData_FormDestination, \r\n" +
                    "            T.FormContent AS FormData_FormContent, \r\n            T.Version AS Fo" +
                    "rmData_Version, \r\n            T.VersionAntecedentID AS FormData_VersionAnteceden" +
                    "tID, \r\n            T.VersionCertainty AS FormData_VersionCertainty, \r\n          " +
                    "  T.VersionWorkflowInstanceID AS FormData_VersionWorkflowInstanceID, \r\n         " +
                    "   T.VersionUpdatedBy AS FormData_VersionUpdatedBy, \r\n            T.VersionDelet" +
                    "edBy AS FormData_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS Form" +
                    "Data_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS FormData_Ve" +
                    "rsionOwnerCompanyID, \r\n            T.VersionUpdated AS FormData_VersionUpdated, " +
                    "\r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContaine" +
                    "r.E_FormData AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.GraphDataHistories
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView665()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.GraphDataHistories", "\r\n    SELECT VALUE -- Constructing GraphDataHistories\r\n        [NKD.Module.Busine" +
                    "ssObjects.GraphDataHistory](T1.GraphDataHistory_GraphDataHistoryID, T1.GraphData" +
                    "History_Session, T1.GraphDataHistory_GraphDataID, T1.GraphDataHistory_Opened, T1" +
                    ".GraphDataHistory_ContactID, T1.GraphDataHistory_Version, T1.GraphDataHistory_Ve" +
                    "rsionAntecedentID, T1.GraphDataHistory_VersionCertainty, T1.GraphDataHistory_Ver" +
                    "sionWorkflowInstanceID, T1.GraphDataHistory_VersionUpdatedBy, T1.GraphDataHistor" +
                    "y_VersionDeletedBy, T1.GraphDataHistory_VersionOwnerContactID, T1.GraphDataHisto" +
                    "ry_VersionOwnerCompanyID, T1.GraphDataHistory_VersionUpdated)\r\n    FROM (\r\n     " +
                    "   SELECT \r\n            T.GraphDataHistoryID AS GraphDataHistory_GraphDataHistor" +
                    "yID, \r\n            T.Session AS GraphDataHistory_Session, \r\n            T.GraphD" +
                    "ataID AS GraphDataHistory_GraphDataID, \r\n            T.Opened AS GraphDataHistor" +
                    "y_Opened, \r\n            T.ContactID AS GraphDataHistory_ContactID, \r\n           " +
                    " T.Version AS GraphDataHistory_Version, \r\n            T.VersionAntecedentID AS G" +
                    "raphDataHistory_VersionAntecedentID, \r\n            T.VersionCertainty AS GraphDa" +
                    "taHistory_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS GraphDa" +
                    "taHistory_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS GraphDa" +
                    "taHistory_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS GraphDataHistory" +
                    "_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS GraphDataHistory_Ver" +
                    "sionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS GraphDataHistory_Ve" +
                    "rsionOwnerCompanyID, \r\n            T.VersionUpdated AS GraphDataHistory_VersionU" +
                    "pdated, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjectsStore" +
                    "Container.E_GraphDataHistory AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.Precondition
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView666()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.Precondition", "\r\n    SELECT VALUE -- Constructing Precondition\r\n        [NKD.Module.BusinessObje" +
                    "cts.Precondition](T1.Precondition_ConditionID, T1.Precondition_OverrideProjectDa" +
                    "taWithJsonCustomVars, T1.Precondition_Condition, T1.Precondition_Version, T1.Pre" +
                    "condition_VersionAntecedentID, T1.Precondition_VersionCertainty, T1.Precondition" +
                    "_VersionWorkflowInstanceID, T1.Precondition_VersionUpdatedBy, T1.Precondition_Ve" +
                    "rsionDeletedBy, T1.Precondition_VersionOwnerContactID, T1.Precondition_VersionOw" +
                    "nerCompanyID, T1.Precondition_VersionUpdated, T1.Precondition_JSON)\r\n    FROM (\r" +
                    "\n        SELECT \r\n            T.ConditionID AS Precondition_ConditionID, \r\n     " +
                    "       T.OverrideProjectDataWithJsonCustomVars AS Precondition_OverrideProjectDa" +
                    "taWithJsonCustomVars, \r\n            T.Condition AS Precondition_Condition, \r\n   " +
                    "         T.Version AS Precondition_Version, \r\n            T.VersionAntecedentID " +
                    "AS Precondition_VersionAntecedentID, \r\n            T.VersionCertainty AS Precond" +
                    "ition_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS Preconditio" +
                    "n_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS Precondition_Ve" +
                    "rsionUpdatedBy, \r\n            T.VersionDeletedBy AS Precondition_VersionDeletedB" +
                    "y, \r\n            T.VersionOwnerContactID AS Precondition_VersionOwnerContactID, " +
                    "\r\n            T.VersionOwnerCompanyID AS Precondition_VersionOwnerCompanyID, \r\n " +
                    "           T.VersionUpdated AS Precondition_VersionUpdated, \r\n            T.JSON" +
                    " AS Precondition_JSON, \r\n            True AS _from0\r\n        FROM NKDModuleBusin" +
                    "essObjectsStoreContainer.E_Condition AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryTriggerType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView667()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2199);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryTriggerType\r\n        [NKD.Module.Bu");
            viewString.Append("sinessObjects.DictionaryTriggerType](T1.DictionaryTriggerType_TriggerTypeID, T1.");
            viewString.Append("DictionaryTriggerType_StandardTriggerTypeName, T1.DictionaryTriggerType_CustomTr");
            viewString.Append("iggerTypeName, T1.DictionaryTriggerType_Description, T1.DictionaryTriggerType_Fu");
            viewString.Append("llDescription, T1.DictionaryTriggerType_Thumbnail, T1.DictionaryTriggerType_Orig");
            viewString.Append("inalFileDataID, T1.DictionaryTriggerType_Version, T1.DictionaryTriggerType_Versi");
            viewString.Append("onAntecedentID, T1.DictionaryTriggerType_VersionCertainty, T1.DictionaryTriggerT");
            viewString.Append("ype_VersionWorkflowInstanceID, T1.DictionaryTriggerType_VersionUpdatedBy, T1.Dic");
            viewString.Append("tionaryTriggerType_VersionDeletedBy, T1.DictionaryTriggerType_VersionOwnerContac");
            viewString.Append("tID, T1.DictionaryTriggerType_VersionOwnerCompanyID, T1.DictionaryTriggerType_Ve");
            viewString.Append("rsionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.TriggerTypeID AS Dicti");
            viewString.Append("onaryTriggerType_TriggerTypeID, \r\n            T.StandardTriggerTypeName AS Dicti");
            viewString.Append("onaryTriggerType_StandardTriggerTypeName, \r\n            T.CustomTriggerTypeName ");
            viewString.Append("AS DictionaryTriggerType_CustomTriggerTypeName, \r\n            T.Description AS D");
            viewString.Append("ictionaryTriggerType_Description, \r\n            T.FullDescription AS DictionaryT");
            viewString.Append("riggerType_FullDescription, \r\n            T.Thumbnail AS DictionaryTriggerType_T");
            viewString.Append("humbnail, \r\n            T.OriginalFileDataID AS DictionaryTriggerType_OriginalFi");
            viewString.Append("leDataID, \r\n            T.Version AS DictionaryTriggerType_Version, \r\n          ");
            viewString.Append("  T.VersionAntecedentID AS DictionaryTriggerType_VersionAntecedentID, \r\n        ");
            viewString.Append("    T.VersionCertainty AS DictionaryTriggerType_VersionCertainty, \r\n            ");
            viewString.Append("T.VersionWorkflowInstanceID AS DictionaryTriggerType_VersionWorkflowInstanceID, ");
            viewString.Append("\r\n            T.VersionUpdatedBy AS DictionaryTriggerType_VersionUpdatedBy, \r\n  ");
            viewString.Append("          T.VersionDeletedBy AS DictionaryTriggerType_VersionDeletedBy, \r\n      ");
            viewString.Append("      T.VersionOwnerContactID AS DictionaryTriggerType_VersionOwnerContactID, \r\n");
            viewString.Append("            T.VersionOwnerCompanyID AS DictionaryTriggerType_VersionOwnerCompany");
            viewString.Append("ID, \r\n            T.VersionUpdated AS DictionaryTriggerType_VersionUpdated, \r\n  ");
            viewString.Append("          True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.E_");
            viewString.Append("DictionaryTriggerType AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryTriggerType", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.GraphDataRelationConditions
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView668()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2210);
            viewString.Append("\r\n    SELECT VALUE -- Constructing GraphDataRelationConditions\r\n        [NKD.Mod");
            viewString.Append("ule.BusinessObjects.GraphDataRelationCondition](T1.GraphDataRelationCondition_Gr");
            viewString.Append("aphDataRelationConditionID, T1.GraphDataRelationCondition_GraphDataRelationID, T");
            viewString.Append("1.GraphDataRelationCondition_ConditionID, T1.GraphDataRelationCondition_Version,");
            viewString.Append(" T1.GraphDataRelationCondition_VersionAntecedentID, T1.GraphDataRelationConditio");
            viewString.Append("n_VersionCertainty, T1.GraphDataRelationCondition_VersionWorkflowInstanceID, T1.");
            viewString.Append("GraphDataRelationCondition_VersionUpdatedBy, T1.GraphDataRelationCondition_Versi");
            viewString.Append("onDeletedBy, T1.GraphDataRelationCondition_VersionOwnerContactID, T1.GraphDataRe");
            viewString.Append("lationCondition_VersionOwnerCompanyID, T1.GraphDataRelationCondition_VersionUpda");
            viewString.Append("ted, T1.GraphDataRelationCondition_Grouping, T1.GraphDataRelationCondition_Seque");
            viewString.Append("nce, T1.GraphDataRelationCondition_JoinedBy)\r\n    FROM (\r\n        SELECT \r\n     ");
            viewString.Append("       T.GraphDataRelationConditionID AS GraphDataRelationCondition_GraphDataRel");
            viewString.Append("ationConditionID, \r\n            T.GraphDataRelationID AS GraphDataRelationCondit");
            viewString.Append("ion_GraphDataRelationID, \r\n            T.ConditionID AS GraphDataRelationConditi");
            viewString.Append("on_ConditionID, \r\n            T.Version AS GraphDataRelationCondition_Version, \r");
            viewString.Append("\n            T.VersionAntecedentID AS GraphDataRelationCondition_VersionAntecede");
            viewString.Append("ntID, \r\n            T.VersionCertainty AS GraphDataRelationCondition_VersionCert");
            viewString.Append("ainty, \r\n            T.VersionWorkflowInstanceID AS GraphDataRelationCondition_V");
            viewString.Append("ersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS GraphDataRelationC");
            viewString.Append("ondition_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS GraphDataRelation");
            viewString.Append("Condition_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS GraphDataRe");
            viewString.Append("lationCondition_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS ");
            viewString.Append("GraphDataRelationCondition_VersionOwnerCompanyID, \r\n            T.VersionUpdated");
            viewString.Append(" AS GraphDataRelationCondition_VersionUpdated, \r\n            T.Grouping AS Graph");
            viewString.Append("DataRelationCondition_Grouping, \r\n            T.Sequence AS GraphDataRelationCon");
            viewString.Append("dition_Sequence, \r\n            T.JoinedBy AS GraphDataRelationCondition_JoinedBy");
            viewString.Append(", \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContai");
            viewString.Append("ner.E_GraphDataRelationCondition AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.GraphDataRelationConditions", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.ProjectDatas
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView669()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.ProjectDatas", "\r\n    SELECT VALUE -- Constructing ProjectDatas\r\n        [NKD.Module.BusinessObje" +
                    "cts.ProjectData](T1.ProjectData_ProjectDataID, T1.ProjectData_ProjectDataTemplat" +
                    "eID, T1.ProjectData_ProjectID, T1.ProjectData_ProjectPlanTaskResponseID, T1.Proj" +
                    "ectData_Value, T1.ProjectData_NumericValue, T1.ProjectData_TextValue, T1.Project" +
                    "Data_Version, T1.ProjectData_VersionAntecedentID, T1.ProjectData_VersionCertaint" +
                    "y, T1.ProjectData_VersionWorkflowInstanceID, T1.ProjectData_VersionUpdatedBy, T1" +
                    ".ProjectData_VersionDeletedBy, T1.ProjectData_VersionOwnerContactID, T1.ProjectD" +
                    "ata_VersionOwnerCompanyID, T1.ProjectData_VersionUpdated)\r\n    FROM (\r\n        S" +
                    "ELECT \r\n            T.ProjectDataID AS ProjectData_ProjectDataID, \r\n            " +
                    "T.ProjectDataTemplateID AS ProjectData_ProjectDataTemplateID, \r\n            T.Pr" +
                    "ojectID AS ProjectData_ProjectID, \r\n            T.ProjectPlanTaskResponseID AS P" +
                    "rojectData_ProjectPlanTaskResponseID, \r\n            T.[Value] AS ProjectData_Val" +
                    "ue, \r\n            T.NumericValue AS ProjectData_NumericValue, \r\n            T.Te" +
                    "xtValue AS ProjectData_TextValue, \r\n            T.Version AS ProjectData_Version" +
                    ", \r\n            T.VersionAntecedentID AS ProjectData_VersionAntecedentID, \r\n    " +
                    "        T.VersionCertainty AS ProjectData_VersionCertainty, \r\n            T.Vers" +
                    "ionWorkflowInstanceID AS ProjectData_VersionWorkflowInstanceID, \r\n            T." +
                    "VersionUpdatedBy AS ProjectData_VersionUpdatedBy, \r\n            T.VersionDeleted" +
                    "By AS ProjectData_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS Pro" +
                    "jectData_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS Project" +
                    "Data_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS ProjectData_Versio" +
                    "nUpdated, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjectsSto" +
                    "reContainer.E_ProjectData AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.ProjectDataTemplates
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView670()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3154);
            viewString.Append("\r\n    SELECT VALUE -- Constructing ProjectDataTemplates\r\n        [NKD.Module.Bus");
            viewString.Append("inessObjects.ProjectDataTemplate](T1.ProjectDataTemplate_ProjectDataTemplateID, ");
            viewString.Append("T1.ProjectDataTemplate_CommonName, T1.ProjectDataTemplate_UniqueID, T1.ProjectDa");
            viewString.Append("taTemplate_UniqueIDSystemDataType, T1.ProjectDataTemplate_TemplateStructure, T1.");
            viewString.Append("ProjectDataTemplate_TemplateStructureChecksum, T1.ProjectDataTemplate_TemplateAc");
            viewString.Append("tions, T1.ProjectDataTemplate_TemplateType, T1.ProjectDataTemplate_TemplateMulti");
            viewString.Append(", T1.ProjectDataTemplate_TemplateSingle, T1.ProjectDataTemplate_TableType, T1.Pr");
            viewString.Append("ojectDataTemplate_ReferenceID, T1.ProjectDataTemplate_UserDataType, T1.ProjectDa");
            viewString.Append("taTemplate_SystemDataType, T1.ProjectDataTemplate_IsReadOnly, T1.ProjectDataTemp");
            viewString.Append("late_IsVisible, T1.ProjectDataTemplate_Version, T1.ProjectDataTemplate_VersionAn");
            viewString.Append("tecedentID, T1.ProjectDataTemplate_VersionCertainty, T1.ProjectDataTemplate_Vers");
            viewString.Append("ionWorkflowInstanceID, T1.ProjectDataTemplate_VersionUpdatedBy, T1.ProjectDataTe");
            viewString.Append("mplate_VersionDeletedBy, T1.ProjectDataTemplate_VersionOwnerContactID, T1.Projec");
            viewString.Append("tDataTemplate_VersionOwnerCompanyID, T1.ProjectDataTemplate_VersionUpdated, T1.P");
            viewString.Append("rojectDataTemplate_FormID)\r\n    FROM (\r\n        SELECT \r\n            T.ProjectDa");
            viewString.Append("taTemplateID AS ProjectDataTemplate_ProjectDataTemplateID, \r\n            T.Commo");
            viewString.Append("nName AS ProjectDataTemplate_CommonName, \r\n            T.UniqueID AS ProjectData");
            viewString.Append("Template_UniqueID, \r\n            T.UniqueIDSystemDataType AS ProjectDataTemplate");
            viewString.Append("_UniqueIDSystemDataType, \r\n            T.TemplateStructure AS ProjectDataTemplat");
            viewString.Append("e_TemplateStructure, \r\n            T.TemplateStructureChecksum AS ProjectDataTem");
            viewString.Append("plate_TemplateStructureChecksum, \r\n            T.TemplateActions AS ProjectDataT");
            viewString.Append("emplate_TemplateActions, \r\n            T.TemplateType AS ProjectDataTemplate_Tem");
            viewString.Append("plateType, \r\n            T.TemplateMulti AS ProjectDataTemplate_TemplateMulti, \r");
            viewString.Append("\n            T.TemplateSingle AS ProjectDataTemplate_TemplateSingle, \r\n         ");
            viewString.Append("   T.TableType AS ProjectDataTemplate_TableType, \r\n            T.ReferenceID AS ");
            viewString.Append("ProjectDataTemplate_ReferenceID, \r\n            T.UserDataType AS ProjectDataTemp");
            viewString.Append("late_UserDataType, \r\n            T.SystemDataType AS ProjectDataTemplate_SystemD");
            viewString.Append("ataType, \r\n            T.IsReadOnly AS ProjectDataTemplate_IsReadOnly, \r\n       ");
            viewString.Append("     T.IsVisible AS ProjectDataTemplate_IsVisible, \r\n            T.Version AS Pr");
            viewString.Append("ojectDataTemplate_Version, \r\n            T.VersionAntecedentID AS ProjectDataTem");
            viewString.Append("plate_VersionAntecedentID, \r\n            T.VersionCertainty AS ProjectDataTempla");
            viewString.Append("te_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS ProjectDataTem");
            viewString.Append("plate_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS ProjectData");
            viewString.Append("Template_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS ProjectDataTempla");
            viewString.Append("te_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS ProjectDataTemplat");
            viewString.Append("e_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS ProjectDataTem");
            viewString.Append("plate_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS ProjectDataTempla");
            viewString.Append("te_VersionUpdated, \r\n            T.FormID AS ProjectDataTemplate_FormID, \r\n     ");
            viewString.Append("       True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.E_Pro");
            viewString.Append("jectDataTemplate AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.ProjectDataTemplates", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.ProjectPlanTaskResponseEvents
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView671()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3129);
            viewString.Append("\r\n    SELECT VALUE -- Constructing ProjectPlanTaskResponseEvents\r\n        [NKD.M");
            viewString.Append("odule.BusinessObjects.ProjectPlanTaskResponseEvent](T1.ProjectPlanTaskResponseEv");
            viewString.Append("ent_ProjectPlanTaskResponseEventID, T1.ProjectPlanTaskResponseEvent_ProjectPlanT");
            viewString.Append("askResponseID, T1.ProjectPlanTaskResponseEvent_ProjectID, T1.ProjectPlanTaskResp");
            viewString.Append("onseEvent_TaskID, T1.ProjectPlanTaskResponseEvent_OriginTriggerID, T1.ProjectPla");
            viewString.Append("nTaskResponseEvent_DestinationTriggerID, T1.ProjectPlanTaskResponseEvent_JsonCus");
            viewString.Append("tomVars, T1.ProjectPlanTaskResponseEvent_RunNext, T1.ProjectPlanTaskResponseEven");
            viewString.Append("t_Executed, T1.ProjectPlanTaskResponseEvent_Failed, T1.ProjectPlanTaskResponseEv");
            viewString.Append("ent_Reason, T1.ProjectPlanTaskResponseEvent_Version, T1.ProjectPlanTaskResponseE");
            viewString.Append("vent_VersionAntecedentID, T1.ProjectPlanTaskResponseEvent_VersionCertainty, T1.P");
            viewString.Append("rojectPlanTaskResponseEvent_VersionWorkflowInstanceID, T1.ProjectPlanTaskRespons");
            viewString.Append("eEvent_VersionUpdatedBy, T1.ProjectPlanTaskResponseEvent_VersionDeletedBy, T1.Pr");
            viewString.Append("ojectPlanTaskResponseEvent_VersionOwnerContactID, T1.ProjectPlanTaskResponseEven");
            viewString.Append("t_VersionOwnerCompanyID, T1.ProjectPlanTaskResponseEvent_VersionUpdated, T1.Proj");
            viewString.Append("ectPlanTaskResponseEvent_TriggerGraphID, T1.ProjectPlanTaskResponseEvent_RunsLef");
            viewString.Append("t)\r\n    FROM (\r\n        SELECT \r\n            T.ProjectPlanTaskResponseEventID AS");
            viewString.Append(" ProjectPlanTaskResponseEvent_ProjectPlanTaskResponseEventID, \r\n            T.Pr");
            viewString.Append("ojectPlanTaskResponseID AS ProjectPlanTaskResponseEvent_ProjectPlanTaskResponseI");
            viewString.Append("D, \r\n            T.ProjectID AS ProjectPlanTaskResponseEvent_ProjectID, \r\n      ");
            viewString.Append("      T.TaskID AS ProjectPlanTaskResponseEvent_TaskID, \r\n            T.OriginTri");
            viewString.Append("ggerID AS ProjectPlanTaskResponseEvent_OriginTriggerID, \r\n            T.Destinat");
            viewString.Append("ionTriggerID AS ProjectPlanTaskResponseEvent_DestinationTriggerID, \r\n           ");
            viewString.Append(" T.JsonCustomVars AS ProjectPlanTaskResponseEvent_JsonCustomVars, \r\n            ");
            viewString.Append("T.RunNext AS ProjectPlanTaskResponseEvent_RunNext, \r\n            T.Executed AS P");
            viewString.Append("rojectPlanTaskResponseEvent_Executed, \r\n            T.Failed AS ProjectPlanTaskR");
            viewString.Append("esponseEvent_Failed, \r\n            T.Reason AS ProjectPlanTaskResponseEvent_Reas");
            viewString.Append("on, \r\n            T.Version AS ProjectPlanTaskResponseEvent_Version, \r\n         ");
            viewString.Append("   T.VersionAntecedentID AS ProjectPlanTaskResponseEvent_VersionAntecedentID, \r\n");
            viewString.Append("            T.VersionCertainty AS ProjectPlanTaskResponseEvent_VersionCertainty,");
            viewString.Append(" \r\n            T.VersionWorkflowInstanceID AS ProjectPlanTaskResponseEvent_Versi");
            viewString.Append("onWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS ProjectPlanTaskRespons");
            viewString.Append("eEvent_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS ProjectPlanTaskResp");
            viewString.Append("onseEvent_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS ProjectPlan");
            viewString.Append("TaskResponseEvent_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID A");
            viewString.Append("S ProjectPlanTaskResponseEvent_VersionOwnerCompanyID, \r\n            T.VersionUpd");
            viewString.Append("ated AS ProjectPlanTaskResponseEvent_VersionUpdated, \r\n            T.TriggerGrap");
            viewString.Append("hID AS ProjectPlanTaskResponseEvent_TriggerGraphID, \r\n            T.RunsLeft AS ");
            viewString.Append("ProjectPlanTaskResponseEvent_RunsLeft, \r\n            True AS _from0\r\n        FRO");
            viewString.Append("M NKDModuleBusinessObjectsStoreContainer.E_ProjectPlanTaskResponseEvent AS T\r\n  ");
            viewString.Append("  ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.ProjectPlanTaskResponseEvents", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.Triggers
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView672()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3463);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Triggers\r\n        [NKD.Module.BusinessObjects");
            viewString.Append(".Trigger](T1.Trigger_TriggerID, T1.Trigger_CommonName, T1.Trigger_JsonMethod, T1");
            viewString.Append(".Trigger_JsonUsername, T1.Trigger_JsonPassword, T1.Trigger_SystemMethod, T1.Trig");
            viewString.Append("ger_ConditionID, T1.Trigger_Version, T1.Trigger_VersionAntecedentID, T1.Trigger_");
            viewString.Append("VersionCertainty, T1.Trigger_VersionWorkflowInstanceID, T1.Trigger_VersionUpdate");
            viewString.Append("dBy, T1.Trigger_VersionDeletedBy, T1.Trigger_VersionOwnerContactID, T1.Trigger_V");
            viewString.Append("ersionOwnerCompanyID, T1.Trigger_VersionUpdated, T1.Trigger_JsonProxyApplication");
            viewString.Append("ID, T1.Trigger_JsonProxyContactID, T1.Trigger_JsonProxyCompanyID, T1.Trigger_Jso");
            viewString.Append("nAuthorizedBy, T1.Trigger_JsonPasswordType, T1.Trigger_ExternalURL, T1.Trigger_E");
            viewString.Append("xternalRequestMethod, T1.Trigger_ExternalFormType, T1.Trigger_JSON, T1.Trigger_P");
            viewString.Append("assThrough, T1.Trigger_TriggerTypeID, T1.Trigger_DelaySeconds, T1.Trigger_DelayD");
            viewString.Append("ays, T1.Trigger_DelayWeeks, T1.Trigger_DelayMonths, T1.Trigger_DelayYears, T1.Tr");
            viewString.Append("igger_DelayUntil, T1.Trigger_Repeats, T1.Trigger_RepeatAfterSeconds, T1.Trigger_");
            viewString.Append("RepeatAfterMonths, T1.Trigger_RepeatWeekOfMonth, T1.Trigger_RepeatDayOfWeeks)\r\n ");
            viewString.Append("   FROM (\r\n        SELECT \r\n            T.TriggerID AS Trigger_TriggerID, \r\n    ");
            viewString.Append("        T.CommonName AS Trigger_CommonName, \r\n            T.JsonMethod AS Trigge");
            viewString.Append("r_JsonMethod, \r\n            T.JsonUsername AS Trigger_JsonUsername, \r\n          ");
            viewString.Append("  T.JsonPassword AS Trigger_JsonPassword, \r\n            T.SystemMethod AS Trigge");
            viewString.Append("r_SystemMethod, \r\n            T.ConditionID AS Trigger_ConditionID, \r\n          ");
            viewString.Append("  T.Version AS Trigger_Version, \r\n            T.VersionAntecedentID AS Trigger_V");
            viewString.Append("ersionAntecedentID, \r\n            T.VersionCertainty AS Trigger_VersionCertainty");
            viewString.Append(", \r\n            T.VersionWorkflowInstanceID AS Trigger_VersionWorkflowInstanceID");
            viewString.Append(", \r\n            T.VersionUpdatedBy AS Trigger_VersionUpdatedBy, \r\n            T.");
            viewString.Append("VersionDeletedBy AS Trigger_VersionDeletedBy, \r\n            T.VersionOwnerContac");
            viewString.Append("tID AS Trigger_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS T");
            viewString.Append("rigger_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS Trigger_VersionU");
            viewString.Append("pdated, \r\n            T.JsonProxyApplicationID AS Trigger_JsonProxyApplicationID");
            viewString.Append(", \r\n            T.JsonProxyContactID AS Trigger_JsonProxyContactID, \r\n          ");
            viewString.Append("  T.JsonProxyCompanyID AS Trigger_JsonProxyCompanyID, \r\n            T.JsonAuthor");
            viewString.Append("izedBy AS Trigger_JsonAuthorizedBy, \r\n            T.JsonPasswordType AS Trigger_");
            viewString.Append("JsonPasswordType, \r\n            T.ExternalURL AS Trigger_ExternalURL, \r\n        ");
            viewString.Append("    T.ExternalRequestMethod AS Trigger_ExternalRequestMethod, \r\n            T.Ex");
            viewString.Append("ternalFormType AS Trigger_ExternalFormType, \r\n            T.JSON AS Trigger_JSON");
            viewString.Append(", \r\n            T.PassThrough AS Trigger_PassThrough, \r\n            T.TriggerTyp");
            viewString.Append("eID AS Trigger_TriggerTypeID, \r\n            T.DelaySeconds AS Trigger_DelaySecon");
            viewString.Append("ds, \r\n            T.DelayDays AS Trigger_DelayDays, \r\n            T.DelayWeeks A");
            viewString.Append("S Trigger_DelayWeeks, \r\n            T.DelayMonths AS Trigger_DelayMonths, \r\n    ");
            viewString.Append("        T.DelayYears AS Trigger_DelayYears, \r\n            T.DelayUntil AS Trigge");
            viewString.Append("r_DelayUntil, \r\n            T.Repeats AS Trigger_Repeats, \r\n            T.Repeat");
            viewString.Append("AfterSeconds AS Trigger_RepeatAfterSeconds, \r\n            T.RepeatAfterMonths AS");
            viewString.Append(" Trigger_RepeatAfterMonths, \r\n            T.RepeatWeekOfMonth AS Trigger_RepeatW");
            viewString.Append("eekOfMonth, \r\n            T.RepeatDayOfWeeks AS Trigger_RepeatDayOfWeeks, \r\n    ");
            viewString.Append("        True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.E_Tr");
            viewString.Append("igger AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.Triggers", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryRunStateTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView673()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2244);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DictionaryRunStateTypes\r\n        [NKD.Module.");
            viewString.Append("BusinessObjects.DictionaryRunStateType](T1.DictionaryRunStateType_RunStateTypeID");
            viewString.Append(", T1.DictionaryRunStateType_StandardRunStateTypeName, T1.DictionaryRunStateType_");
            viewString.Append("CustomRunStateTypeName, T1.DictionaryRunStateType_Description, T1.DictionaryRunS");
            viewString.Append("tateType_FullDescription, T1.DictionaryRunStateType_Thumbnail, T1.DictionaryRunS");
            viewString.Append("tateType_OriginalFileDataID, T1.DictionaryRunStateType_Version, T1.DictionaryRun");
            viewString.Append("StateType_VersionAntecedentID, T1.DictionaryRunStateType_VersionCertainty, T1.Di");
            viewString.Append("ctionaryRunStateType_VersionWorkflowInstanceID, T1.DictionaryRunStateType_Versio");
            viewString.Append("nUpdatedBy, T1.DictionaryRunStateType_VersionDeletedBy, T1.DictionaryRunStateTyp");
            viewString.Append("e_VersionOwnerContactID, T1.DictionaryRunStateType_VersionOwnerCompanyID, T1.Dic");
            viewString.Append("tionaryRunStateType_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.");
            viewString.Append("RunStateTypeID AS DictionaryRunStateType_RunStateTypeID, \r\n            T.Standar");
            viewString.Append("dRunStateTypeName AS DictionaryRunStateType_StandardRunStateTypeName, \r\n        ");
            viewString.Append("    T.CustomRunStateTypeName AS DictionaryRunStateType_CustomRunStateTypeName, \r");
            viewString.Append("\n            T.Description AS DictionaryRunStateType_Description, \r\n            ");
            viewString.Append("T.FullDescription AS DictionaryRunStateType_FullDescription, \r\n            T.Thu");
            viewString.Append("mbnail AS DictionaryRunStateType_Thumbnail, \r\n            T.OriginalFileDataID A");
            viewString.Append("S DictionaryRunStateType_OriginalFileDataID, \r\n            T.Version AS Dictiona");
            viewString.Append("ryRunStateType_Version, \r\n            T.VersionAntecedentID AS DictionaryRunStat");
            viewString.Append("eType_VersionAntecedentID, \r\n            T.VersionCertainty AS DictionaryRunStat");
            viewString.Append("eType_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS DictionaryR");
            viewString.Append("unStateType_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS Dicti");
            viewString.Append("onaryRunStateType_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS Dictiona");
            viewString.Append("ryRunStateType_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS Dictio");
            viewString.Append("naryRunStateType_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS");
            viewString.Append(" DictionaryRunStateType_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS");
            viewString.Append(" DictionaryRunStateType_VersionUpdated, \r\n            True AS _from0\r\n        FR");
            viewString.Append("OM NKDModuleBusinessObjectsStoreContainer.E_DictionaryRunStateType AS T\r\n    ) A");
            viewString.Append("S T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryRunStateTypes", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.WorkflowInstances
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView674()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2981);
            viewString.Append("\r\n    SELECT VALUE -- Constructing WorkflowInstances\r\n        [NKD.Module.Busine");
            viewString.Append("ssObjects.WorkflowInstance](T1.WorkflowInstance_WorkflowInstanceID, T1.WorkflowI");
            viewString.Append("nstance_WorkflowID, T1.WorkflowInstance_RunStateTypeID, T1.WorkflowInstance_Tabl");
            viewString.Append("eType, T1.WorkflowInstance_ReferenceID, T1.WorkflowInstance_ExecutionStatus, T1.");
            viewString.Append("WorkflowInstance_Began, T1.WorkflowInstance_Resumed, T1.WorkflowInstance_ResumeT");
            viewString.Append("riggers, T1.WorkflowInstance_ResumeAttempts, T1.WorkflowInstance_Pending, T1.Wor");
            viewString.Append("kflowInstance_Idle, T1.WorkflowInstance_CanCancel, T1.WorkflowInstance_Cancelled");
            viewString.Append(", T1.WorkflowInstance_Completed, T1.WorkflowInstance_Version, T1.WorkflowInstanc");
            viewString.Append("e_VersionAntecedentID, T1.WorkflowInstance_VersionCertainty, T1.WorkflowInstance");
            viewString.Append("_VersionWorkflowInstanceID, T1.WorkflowInstance_VersionUpdatedBy, T1.WorkflowIns");
            viewString.Append("tance_VersionDeletedBy, T1.WorkflowInstance_VersionOwnerContactID, T1.WorkflowIn");
            viewString.Append("stance_VersionOwnerCompanyID, T1.WorkflowInstance_VersionUpdated, T1.WorkflowIns");
            viewString.Append("tance_ExecutionTimeoutSeconds, T1.WorkflowInstance_CanResume, T1.WorkflowInstanc");
            viewString.Append("e_IdleTimeoutSeconds)\r\n    FROM (\r\n        SELECT \r\n            T.WorkflowInstan");
            viewString.Append("ceID AS WorkflowInstance_WorkflowInstanceID, \r\n            T.WorkflowID AS Workf");
            viewString.Append("lowInstance_WorkflowID, \r\n            T.RunStateTypeID AS WorkflowInstance_RunSt");
            viewString.Append("ateTypeID, \r\n            T.TableType AS WorkflowInstance_TableType, \r\n          ");
            viewString.Append("  T.ReferenceID AS WorkflowInstance_ReferenceID, \r\n            T.ExecutionStatus");
            viewString.Append(" AS WorkflowInstance_ExecutionStatus, \r\n            T.Began AS WorkflowInstance_");
            viewString.Append("Began, \r\n            T.Resumed AS WorkflowInstance_Resumed, \r\n            T.Resu");
            viewString.Append("meTriggers AS WorkflowInstance_ResumeTriggers, \r\n            T.ResumeAttempts AS");
            viewString.Append(" WorkflowInstance_ResumeAttempts, \r\n            T.Pending AS WorkflowInstance_Pe");
            viewString.Append("nding, \r\n            T.Idle AS WorkflowInstance_Idle, \r\n            T.CanCancel ");
            viewString.Append("AS WorkflowInstance_CanCancel, \r\n            T.Cancelled AS WorkflowInstance_Can");
            viewString.Append("celled, \r\n            T.Completed AS WorkflowInstance_Completed, \r\n            T");
            viewString.Append(".Version AS WorkflowInstance_Version, \r\n            T.VersionAntecedentID AS Wor");
            viewString.Append("kflowInstance_VersionAntecedentID, \r\n            T.VersionCertainty AS WorkflowI");
            viewString.Append("nstance_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS WorkflowI");
            viewString.Append("nstance_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS WorkflowI");
            viewString.Append("nstance_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS WorkflowInstance_V");
            viewString.Append("ersionDeletedBy, \r\n            T.VersionOwnerContactID AS WorkflowInstance_Versi");
            viewString.Append("onOwnerContactID, \r\n            T.VersionOwnerCompanyID AS WorkflowInstance_Vers");
            viewString.Append("ionOwnerCompanyID, \r\n            T.VersionUpdated AS WorkflowInstance_VersionUpd");
            viewString.Append("ated, \r\n            T.ExecutionTimeoutSeconds AS WorkflowInstance_ExecutionTimeo");
            viewString.Append("utSeconds, \r\n            T.CanResume AS WorkflowInstance_CanResume, \r\n          ");
            viewString.Append("  T.IdleTimeoutSeconds AS WorkflowInstance_IdleTimeoutSeconds, \r\n            Tru");
            viewString.Append("e AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.E_WorkflowInsta");
            viewString.Append("nce AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.WorkflowInstances", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.WorkflowInstanceDatas
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView675()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2179);
            viewString.Append("\r\n    SELECT VALUE -- Constructing WorkflowInstanceDatas\r\n        [NKD.Module.Bu");
            viewString.Append("sinessObjects.WorkflowInstanceData](T1.WorkflowInstanceData_WorkflowInstanceData");
            viewString.Append("ID, T1.WorkflowInstanceData_WorkflowInstanceID, T1.WorkflowInstanceData_Name, T1");
            viewString.Append(".WorkflowInstanceData_TableType, T1.WorkflowInstanceData_Value, T1.WorkflowInsta");
            viewString.Append("nceData_ValueID, T1.WorkflowInstanceData_NumericValue, T1.WorkflowInstanceData_S");
            viewString.Append("ystemDataType, T1.WorkflowInstanceData_Version, T1.WorkflowInstanceData_VersionA");
            viewString.Append("ntecedentID, T1.WorkflowInstanceData_VersionCertainty, T1.WorkflowInstanceData_V");
            viewString.Append("ersionWorkflowInstanceID, T1.WorkflowInstanceData_VersionUpdatedBy, T1.WorkflowI");
            viewString.Append("nstanceData_VersionDeletedBy, T1.WorkflowInstanceData_VersionOwnerContactID, T1.");
            viewString.Append("WorkflowInstanceData_VersionOwnerCompanyID, T1.WorkflowInstanceData_VersionUpdat");
            viewString.Append("ed)\r\n    FROM (\r\n        SELECT \r\n            T.WorkflowInstanceDataID AS Workfl");
            viewString.Append("owInstanceData_WorkflowInstanceDataID, \r\n            T.WorkflowInstanceID AS Wor");
            viewString.Append("kflowInstanceData_WorkflowInstanceID, \r\n            T.Name AS WorkflowInstanceDa");
            viewString.Append("ta_Name, \r\n            T.TableType AS WorkflowInstanceData_TableType, \r\n        ");
            viewString.Append("    T.[Value] AS WorkflowInstanceData_Value, \r\n            T.ValueID AS Workflow");
            viewString.Append("InstanceData_ValueID, \r\n            T.NumericValue AS WorkflowInstanceData_Numer");
            viewString.Append("icValue, \r\n            T.SystemDataType AS WorkflowInstanceData_SystemDataType, ");
            viewString.Append("\r\n            T.Version AS WorkflowInstanceData_Version, \r\n            T.Version");
            viewString.Append("AntecedentID AS WorkflowInstanceData_VersionAntecedentID, \r\n            T.Versio");
            viewString.Append("nCertainty AS WorkflowInstanceData_VersionCertainty, \r\n            T.VersionWork");
            viewString.Append("flowInstanceID AS WorkflowInstanceData_VersionWorkflowInstanceID, \r\n            ");
            viewString.Append("T.VersionUpdatedBy AS WorkflowInstanceData_VersionUpdatedBy, \r\n            T.Ver");
            viewString.Append("sionDeletedBy AS WorkflowInstanceData_VersionDeletedBy, \r\n            T.VersionO");
            viewString.Append("wnerContactID AS WorkflowInstanceData_VersionOwnerContactID, \r\n            T.Ver");
            viewString.Append("sionOwnerCompanyID AS WorkflowInstanceData_VersionOwnerCompanyID, \r\n            ");
            viewString.Append("T.VersionUpdated AS WorkflowInstanceData_VersionUpdated, \r\n            True AS _");
            viewString.Append("from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.E_WorkflowInstanceDat");
            viewString.Append("a AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.WorkflowInstanceDatas", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.TriggerGraphs
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView676()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.TriggerGraphs", "\r\n    SELECT VALUE -- Constructing TriggerGraphs\r\n        [NKD.Module.BusinessObj" +
                    "ects.TriggerGraph](T1.TriggerGraph_TriggerGraphID, T1.TriggerGraph_TriggerID, T1" +
                    ".TriggerGraph_GraphDataID, T1.TriggerGraph_GraphDataGroupID, T1.TriggerGraph_Mer" +
                    "geProjectData, T1.TriggerGraph_OnEnter, T1.TriggerGraph_OnDataUpdate, T1.Trigger" +
                    "Graph_OnExit, T1.TriggerGraph_Version, T1.TriggerGraph_VersionAntecedentID, T1.T" +
                    "riggerGraph_VersionCertainty, T1.TriggerGraph_VersionWorkflowInstanceID, T1.Trig" +
                    "gerGraph_VersionUpdatedBy, T1.TriggerGraph_VersionDeletedBy, T1.TriggerGraph_Ver" +
                    "sionOwnerContactID, T1.TriggerGraph_VersionOwnerCompanyID, T1.TriggerGraph_Versi" +
                    "onUpdated, T1.TriggerGraph_OnIdle)\r\n    FROM (\r\n        SELECT \r\n            T.T" +
                    "riggerGraphID AS TriggerGraph_TriggerGraphID, \r\n            T.TriggerID AS Trigg" +
                    "erGraph_TriggerID, \r\n            T.GraphDataID AS TriggerGraph_GraphDataID, \r\n  " +
                    "          T.GraphDataGroupID AS TriggerGraph_GraphDataGroupID, \r\n            T.M" +
                    "ergeProjectData AS TriggerGraph_MergeProjectData, \r\n            T.OnEnter AS Tri" +
                    "ggerGraph_OnEnter, \r\n            T.OnDataUpdate AS TriggerGraph_OnDataUpdate, \r\n" +
                    "            T.OnExit AS TriggerGraph_OnExit, \r\n            T.Version AS TriggerG" +
                    "raph_Version, \r\n            T.VersionAntecedentID AS TriggerGraph_VersionAnteced" +
                    "entID, \r\n            T.VersionCertainty AS TriggerGraph_VersionCertainty, \r\n    " +
                    "        T.VersionWorkflowInstanceID AS TriggerGraph_VersionWorkflowInstanceID, \r" +
                    "\n            T.VersionUpdatedBy AS TriggerGraph_VersionUpdatedBy, \r\n            " +
                    "T.VersionDeletedBy AS TriggerGraph_VersionDeletedBy, \r\n            T.VersionOwne" +
                    "rContactID AS TriggerGraph_VersionOwnerContactID, \r\n            T.VersionOwnerCo" +
                    "mpanyID AS TriggerGraph_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS" +
                    " TriggerGraph_VersionUpdated, \r\n            T.OnIdle AS TriggerGraph_OnIdle, \r\n " +
                    "           True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.E" +
                    "_TriggerGraph AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.SupplierDiscounts
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView677()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2086);
            viewString.Append("\r\n    SELECT VALUE -- Constructing SupplierDiscounts\r\n        [NKD.Module.Busine");
            viewString.Append("ssObjects.SupplierDiscount](T1.SupplierDiscount_SupplierDiscountID, T1.SupplierD");
            viewString.Append("iscount_SupplierID, T1.SupplierDiscount_ModelID, T1.SupplierDiscount_PartID, T1.");
            viewString.Append("SupplierDiscount_ConsumerContactID, T1.SupplierDiscount_ConsumerCompanyID, T1.Su");
            viewString.Append("pplierDiscount_OrderQuantityMinimum, T1.SupplierDiscount_DiscountPercent, T1.Sup");
            viewString.Append("plierDiscount_Version, T1.SupplierDiscount_VersionAntecedentID, T1.SupplierDisco");
            viewString.Append("unt_VersionCertainty, T1.SupplierDiscount_VersionWorkflowInstanceID, T1.Supplier");
            viewString.Append("Discount_VersionUpdatedBy, T1.SupplierDiscount_VersionDeletedBy, T1.SupplierDisc");
            viewString.Append("ount_VersionOwnerContactID, T1.SupplierDiscount_VersionOwnerCompanyID, T1.Suppli");
            viewString.Append("erDiscount_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.SupplierD");
            viewString.Append("iscountID AS SupplierDiscount_SupplierDiscountID, \r\n            T.SupplierID AS ");
            viewString.Append("SupplierDiscount_SupplierID, \r\n            T.ModelID AS SupplierDiscount_ModelID");
            viewString.Append(", \r\n            T.PartID AS SupplierDiscount_PartID, \r\n            T.ConsumerCon");
            viewString.Append("tactID AS SupplierDiscount_ConsumerContactID, \r\n            T.ConsumerCompanyID ");
            viewString.Append("AS SupplierDiscount_ConsumerCompanyID, \r\n            T.OrderQuantityMinimum AS S");
            viewString.Append("upplierDiscount_OrderQuantityMinimum, \r\n            T.DiscountPercent AS Supplie");
            viewString.Append("rDiscount_DiscountPercent, \r\n            T.Version AS SupplierDiscount_Version, ");
            viewString.Append("\r\n            T.VersionAntecedentID AS SupplierDiscount_VersionAntecedentID, \r\n ");
            viewString.Append("           T.VersionCertainty AS SupplierDiscount_VersionCertainty, \r\n          ");
            viewString.Append("  T.VersionWorkflowInstanceID AS SupplierDiscount_VersionWorkflowInstanceID, \r\n ");
            viewString.Append("           T.VersionUpdatedBy AS SupplierDiscount_VersionUpdatedBy, \r\n          ");
            viewString.Append("  T.VersionDeletedBy AS SupplierDiscount_VersionDeletedBy, \r\n            T.Versi");
            viewString.Append("onOwnerContactID AS SupplierDiscount_VersionOwnerContactID, \r\n            T.Vers");
            viewString.Append("ionOwnerCompanyID AS SupplierDiscount_VersionOwnerCompanyID, \r\n            T.Ver");
            viewString.Append("sionUpdated AS SupplierDiscount_VersionUpdated, \r\n            True AS _from0\r\n  ");
            viewString.Append("      FROM NKDModuleBusinessObjectsStoreContainer.E_SupplierDiscount AS T\r\n    )");
            viewString.Append(" AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.SupplierDiscounts", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.Notifications
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView678()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.Notifications", "\r\n    SELECT VALUE -- Constructing Notifications\r\n        [NKD.Module.BusinessObj" +
                    "ects.Notification](T1.Notification_NotificationID, T1.Notification_ContactID, T1" +
                    ".Notification_ReminderMinutes, T1.Notification_BlackoutOutOfHours, T1.Notificati" +
                    "on_Timezone, T1.Notification_Version, T1.Notification_VersionAntecedentID, T1.No" +
                    "tification_VersionCertainty, T1.Notification_VersionWorkflowInstanceID, T1.Notif" +
                    "ication_VersionUpdatedBy, T1.Notification_VersionDeletedBy, T1.Notification_Vers" +
                    "ionOwnerContactID, T1.Notification_VersionOwnerCompanyID, T1.Notification_Versio" +
                    "nUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.NotificationID AS Notifica" +
                    "tion_NotificationID, \r\n            T.ContactID AS Notification_ContactID, \r\n    " +
                    "        T.ReminderMinutes AS Notification_ReminderMinutes, \r\n            T.Black" +
                    "outOutOfHours AS Notification_BlackoutOutOfHours, \r\n            T.Timezone AS No" +
                    "tification_Timezone, \r\n            T.Version AS Notification_Version, \r\n        " +
                    "    T.VersionAntecedentID AS Notification_VersionAntecedentID, \r\n            T.V" +
                    "ersionCertainty AS Notification_VersionCertainty, \r\n            T.VersionWorkflo" +
                    "wInstanceID AS Notification_VersionWorkflowInstanceID, \r\n            T.VersionUp" +
                    "datedBy AS Notification_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS No" +
                    "tification_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS Notificati" +
                    "on_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS Notification_" +
                    "VersionOwnerCompanyID, \r\n            T.VersionUpdated AS Notification_VersionUpd" +
                    "ated, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreCo" +
                    "ntainer.E_Notification AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.NotificationDatas
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView679()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.NotificationDatas", "\r\n    SELECT VALUE -- Constructing NotificationDatas\r\n        [NKD.Module.Busines" +
                    "sObjects.NotificationData](T1.NotificationData_NotificationDataID, T1.Notificati" +
                    "onData_NotificationID, T1.NotificationData_NotificationType, T1.NotificationData" +
                    "_TableType, T1.NotificationData_ReferenceID, T1.NotificationData_JSON, T1.Notifi" +
                    "cationData_Version, T1.NotificationData_VersionAntecedentID, T1.NotificationData" +
                    "_VersionCertainty, T1.NotificationData_VersionWorkflowInstanceID, T1.Notificatio" +
                    "nData_VersionUpdatedBy, T1.NotificationData_VersionDeletedBy, T1.NotificationDat" +
                    "a_VersionOwnerContactID, T1.NotificationData_VersionOwnerCompanyID, T1.Notificat" +
                    "ionData_VersionUpdated, T1.NotificationData_RetriesLeft, T1.NotificationData_Sen" +
                    "t)\r\n    FROM (\r\n        SELECT \r\n            T.NotificationDataID AS Notificatio" +
                    "nData_NotificationDataID, \r\n            T.NotificationID AS NotificationData_Not" +
                    "ificationID, \r\n            T.NotificationType AS NotificationData_NotificationTy" +
                    "pe, \r\n            T.TableType AS NotificationData_TableType, \r\n            T.Ref" +
                    "erenceID AS NotificationData_ReferenceID, \r\n            T.JSON AS NotificationDa" +
                    "ta_JSON, \r\n            T.Version AS NotificationData_Version, \r\n            T.Ve" +
                    "rsionAntecedentID AS NotificationData_VersionAntecedentID, \r\n            T.Versi" +
                    "onCertainty AS NotificationData_VersionCertainty, \r\n            T.VersionWorkflo" +
                    "wInstanceID AS NotificationData_VersionWorkflowInstanceID, \r\n            T.Versi" +
                    "onUpdatedBy AS NotificationData_VersionUpdatedBy, \r\n            T.VersionDeleted" +
                    "By AS NotificationData_VersionDeletedBy, \r\n            T.VersionOwnerContactID A" +
                    "S NotificationData_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID " +
                    "AS NotificationData_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS Not" +
                    "ificationData_VersionUpdated, \r\n            T.RetriesLeft AS NotificationData_Re" +
                    "triesLeft, \r\n            T.Sent AS NotificationData_Sent, \r\n            True AS " +
                    "_from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.E_NotificationData A" +
                    "S T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.NotificationDevices
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView680()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.NotificationDevices", "\r\n    SELECT VALUE -- Constructing NotificationDevices\r\n        [NKD.Module.Busin" +
                    "essObjects.NotificationDevice](T1.NotificationDevice_NotificationDeviceID, T1.No" +
                    "tificationDevice_NotificationID, T1.NotificationDevice_DeviceType, T1.Notificati" +
                    "onDevice_DeviceToken, T1.NotificationDevice_LastRegistered, T1.NotificationDevic" +
                    "e_Version, T1.NotificationDevice_VersionAntecedentID, T1.NotificationDevice_Vers" +
                    "ionCertainty, T1.NotificationDevice_VersionWorkflowInstanceID, T1.NotificationDe" +
                    "vice_VersionUpdatedBy, T1.NotificationDevice_VersionDeletedBy, T1.NotificationDe" +
                    "vice_VersionOwnerContactID, T1.NotificationDevice_VersionOwnerCompanyID, T1.Noti" +
                    "ficationDevice_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.Notif" +
                    "icationDeviceID AS NotificationDevice_NotificationDeviceID, \r\n            T.Noti" +
                    "ficationID AS NotificationDevice_NotificationID, \r\n            T.DeviceType AS N" +
                    "otificationDevice_DeviceType, \r\n            T.DeviceToken AS NotificationDevice_" +
                    "DeviceToken, \r\n            T.LastRegistered AS NotificationDevice_LastRegistered" +
                    ", \r\n            T.Version AS NotificationDevice_Version, \r\n            T.Version" +
                    "AntecedentID AS NotificationDevice_VersionAntecedentID, \r\n            T.VersionC" +
                    "ertainty AS NotificationDevice_VersionCertainty, \r\n            T.VersionWorkflow" +
                    "InstanceID AS NotificationDevice_VersionWorkflowInstanceID, \r\n            T.Vers" +
                    "ionUpdatedBy AS NotificationDevice_VersionUpdatedBy, \r\n            T.VersionDele" +
                    "tedBy AS NotificationDevice_VersionDeletedBy, \r\n            T.VersionOwnerContac" +
                    "tID AS NotificationDevice_VersionOwnerContactID, \r\n            T.VersionOwnerCom" +
                    "panyID AS NotificationDevice_VersionOwnerCompanyID, \r\n            T.VersionUpdat" +
                    "ed AS NotificationDevice_VersionUpdated, \r\n            True AS _from0\r\n        F" +
                    "ROM NKDModuleBusinessObjectsStoreContainer.E_NotificationDevice AS T\r\n    ) AS T" +
                    "1");
        }
        
        /// <Summary>
        /// return view for NKDC.aspnet_UsersInRoles
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView681()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.aspnet_UsersInRoles", @"
    SELECT VALUE -- Constructing aspnet_UsersInRoles
        [NKD.Module.BusinessObjects.aspnet_UsersInRoles](T3.[aspnet_UsersInRoles.aspnet_Roles], T3.[aspnet_UsersInRoles.aspnet_Users])
    FROM (
        SELECT -- Constructing aspnet_Roles
            CreateRef(NKDC.Roles, row(T2.[aspnet_UsersInRoles.aspnet_Roles.RoleId]), [NKD.Module.BusinessObjects.Roles]) AS [aspnet_UsersInRoles.aspnet_Roles], 
            T2.[aspnet_UsersInRoles.aspnet_Users]
        FROM (
            SELECT -- Constructing aspnet_Users
                T1.[aspnet_UsersInRoles.aspnet_Roles.RoleId], 
                CreateRef(NKDC.Users, row(T1.[aspnet_UsersInRoles.aspnet_Users.UserId]), [NKD.Module.BusinessObjects.Users]) AS [aspnet_UsersInRoles.aspnet_Users]
            FROM (
                SELECT 
                    T.RoleId AS [aspnet_UsersInRoles.aspnet_Roles.RoleId], 
                    T.UserId AS [aspnet_UsersInRoles.aspnet_Users.UserId], 
                    True AS _from0
                FROM NKDModuleBusinessObjectsStoreContainer.aspnet_UsersInRoles AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.aspnet_SchemaVersions
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView682()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.aspnet_SchemaVersions", @"
    SELECT VALUE -- Constructing aspnet_SchemaVersions
        [NKD.Module.BusinessObjects.Store.aspnet_SchemaVersions](T1.[aspnet_SchemaVersions.Feature], T1.[aspnet_SchemaVersions.CompatibleSchemaVersion], T1.[aspnet_SchemaVersions.IsCurrentVersion])
    FROM (
        SELECT 
            T.Feature AS [aspnet_SchemaVersions.Feature], 
            T.CompatibleSchemaVersion AS [aspnet_SchemaVersions.CompatibleSchemaVersion], 
            T.IsCurrentVersion AS [aspnet_SchemaVersions.IsCurrentVersion], 
            True AS _from0
        FROM NKDC.SchemaVersions AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.SchemaVersions
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView683()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.SchemaVersions", @"
    SELECT VALUE -- Constructing SchemaVersions
        [NKD.Module.BusinessObjects.SchemaVersions](T1.SchemaVersions_Feature, T1.SchemaVersions_CompatibleSchemaVersion, T1.SchemaVersions_IsCurrentVersion)
    FROM (
        SELECT 
            T.Feature AS SchemaVersions_Feature, 
            T.CompatibleSchemaVersion AS SchemaVersions_CompatibleSchemaVersion, 
            T.IsCurrentVersion AS SchemaVersions_IsCurrentVersion, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.aspnet_SchemaVersions AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.aspnet_WebEvent_Events
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView684()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.aspnet_WebEvent_Events", "\r\n    SELECT VALUE -- Constructing aspnet_WebEvent_Events\r\n        [NKD.Module.Bu" +
                    "sinessObjects.Store.aspnet_WebEvent_Events](T1.[aspnet_WebEvent_Events.EventId]," +
                    " T1.[aspnet_WebEvent_Events.EventTimeUtc], T1.[aspnet_WebEvent_Events.EventTime]" +
                    ", T1.[aspnet_WebEvent_Events.EventType], T1.[aspnet_WebEvent_Events.EventSequenc" +
                    "e], T1.[aspnet_WebEvent_Events.EventOccurrence], T1.[aspnet_WebEvent_Events.Even" +
                    "tCode], T1.[aspnet_WebEvent_Events.EventDetailCode], T1.[aspnet_WebEvent_Events." +
                    "Message], T1.[aspnet_WebEvent_Events.ApplicationPath], T1.[aspnet_WebEvent_Event" +
                    "s.ApplicationVirtualPath], T1.[aspnet_WebEvent_Events.MachineName], T1.[aspnet_W" +
                    "ebEvent_Events.RequestUrl], T1.[aspnet_WebEvent_Events.ExceptionType], T1.[aspne" +
                    "t_WebEvent_Events.Details])\r\n    FROM (\r\n        SELECT \r\n            T.EventId " +
                    "AS [aspnet_WebEvent_Events.EventId], \r\n            T.EventTimeUtc AS [aspnet_Web" +
                    "Event_Events.EventTimeUtc], \r\n            T.EventTime AS [aspnet_WebEvent_Events" +
                    ".EventTime], \r\n            T.EventType AS [aspnet_WebEvent_Events.EventType], \r\n" +
                    "            T.EventSequence AS [aspnet_WebEvent_Events.EventSequence], \r\n       " +
                    "     T.EventOccurrence AS [aspnet_WebEvent_Events.EventOccurrence], \r\n          " +
                    "  T.EventCode AS [aspnet_WebEvent_Events.EventCode], \r\n            T.EventDetail" +
                    "Code AS [aspnet_WebEvent_Events.EventDetailCode], \r\n            T.Message AS [as" +
                    "pnet_WebEvent_Events.Message], \r\n            T.ApplicationPath AS [aspnet_WebEve" +
                    "nt_Events.ApplicationPath], \r\n            T.ApplicationVirtualPath AS [aspnet_We" +
                    "bEvent_Events.ApplicationVirtualPath], \r\n            T.MachineName AS [aspnet_We" +
                    "bEvent_Events.MachineName], \r\n            T.RequestUrl AS [aspnet_WebEvent_Event" +
                    "s.RequestUrl], \r\n            T.ExceptionType AS [aspnet_WebEvent_Events.Exceptio" +
                    "nType], \r\n            T.Details AS [aspnet_WebEvent_Events.Details], \r\n         " +
                    "   True AS _from0\r\n        FROM NKDC.WebEvent_Events AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.WebEvent_Events
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView685()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.WebEvent_Events", "\r\n    SELECT VALUE -- Constructing WebEvent_Events\r\n        [NKD.Module.BusinessO" +
                    "bjects.WebEvent_Events](T1.[WebEvent_Events.EventId], T1.[WebEvent_Events.EventT" +
                    "imeUtc], T1.[WebEvent_Events.EventTime], T1.[WebEvent_Events.EventType], T1.[Web" +
                    "Event_Events.EventSequence], T1.[WebEvent_Events.EventOccurrence], T1.[WebEvent_" +
                    "Events.EventCode], T1.[WebEvent_Events.EventDetailCode], T1.[WebEvent_Events.Mes" +
                    "sage], T1.[WebEvent_Events.ApplicationPath], T1.[WebEvent_Events.ApplicationVirt" +
                    "ualPath], T1.[WebEvent_Events.MachineName], T1.[WebEvent_Events.RequestUrl], T1." +
                    "[WebEvent_Events.ExceptionType], T1.[WebEvent_Events.Details])\r\n    FROM (\r\n    " +
                    "    SELECT \r\n            T.EventId AS [WebEvent_Events.EventId], \r\n            T" +
                    ".EventTimeUtc AS [WebEvent_Events.EventTimeUtc], \r\n            T.EventTime AS [W" +
                    "ebEvent_Events.EventTime], \r\n            T.EventType AS [WebEvent_Events.EventTy" +
                    "pe], \r\n            T.EventSequence AS [WebEvent_Events.EventSequence], \r\n       " +
                    "     T.EventOccurrence AS [WebEvent_Events.EventOccurrence], \r\n            T.Eve" +
                    "ntCode AS [WebEvent_Events.EventCode], \r\n            T.EventDetailCode AS [WebEv" +
                    "ent_Events.EventDetailCode], \r\n            T.Message AS [WebEvent_Events.Message" +
                    "], \r\n            T.ApplicationPath AS [WebEvent_Events.ApplicationPath], \r\n     " +
                    "       T.ApplicationVirtualPath AS [WebEvent_Events.ApplicationVirtualPath], \r\n " +
                    "           T.MachineName AS [WebEvent_Events.MachineName], \r\n            T.Reque" +
                    "stUrl AS [WebEvent_Events.RequestUrl], \r\n            T.ExceptionType AS [WebEven" +
                    "t_Events.ExceptionType], \r\n            T.Details AS [WebEvent_Events.Details], \r" +
                    "\n            True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer" +
                    ".aspnet_WebEvent_Events AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.sysdiagrams
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView686()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.sysdiagrams", @"
    SELECT VALUE -- Constructing sysdiagrams
        [NKD.Module.BusinessObjects.Store.sysdiagrams](T1.sysdiagrams_name, T1.[sysdiagrams.principal_id], T1.[sysdiagrams.diagram_id], T1.sysdiagrams_version, T1.sysdiagrams_definition)
    FROM (
        SELECT 
            T.name AS sysdiagrams_name, 
            T.principal_id AS [sysdiagrams.principal_id], 
            T.diagram_id AS [sysdiagrams.diagram_id], 
            T.version AS sysdiagrams_version, 
            T.definition AS sysdiagrams_definition, 
            True AS _from0
        FROM NKDC.sysdiagrams AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.sysdiagrams
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView687()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.sysdiagrams", @"
    SELECT VALUE -- Constructing sysdiagrams
        [NKD.Module.BusinessObjects.sysdiagram](T1.sysdiagram_name, T1.[sysdiagram.principal_id], T1.[sysdiagram.diagram_id], T1.sysdiagram_version, T1.sysdiagram_definition)
    FROM (
        SELECT 
            T.name AS sysdiagram_name, 
            T.principal_id AS [sysdiagram.principal_id], 
            T.diagram_id AS [sysdiagram.diagram_id], 
            T.version AS sysdiagram_version, 
            T.definition AS sysdiagram_definition, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.sysdiagrams AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_CompanyServer
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView688()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_CompanyServer", "\r\n    SELECT VALUE -- Constructing X_CompanyServer\r\n        [NKD.Module.BusinessO" +
                    "bjects.Store.X_CompanyServer](T1.[X_CompanyServer.CompanyServerID], T1.[X_Compan" +
                    "yServer.CompanyID], T1.[X_CompanyServer.ServerID], T1.[X_CompanyServer.Version]," +
                    " T1.[X_CompanyServer.VersionAntecedentID], T1.[X_CompanyServer.VersionCertainty]" +
                    ", T1.[X_CompanyServer.VersionWorkflowInstanceID], T1.[X_CompanyServer.VersionUpd" +
                    "atedBy], T1.[X_CompanyServer.VersionDeletedBy], T1.[X_CompanyServer.VersionOwner" +
                    "ContactID], T1.[X_CompanyServer.VersionOwnerCompanyID], T1.[X_CompanyServer.Vers" +
                    "ionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.CompanyServerID AS [X_C" +
                    "ompanyServer.CompanyServerID], \r\n            T.CompanyID AS [X_CompanyServer.Com" +
                    "panyID], \r\n            T.ServerID AS [X_CompanyServer.ServerID], \r\n            T" +
                    ".Version AS [X_CompanyServer.Version], \r\n            T.VersionAntecedentID AS [X" +
                    "_CompanyServer.VersionAntecedentID], \r\n            T.VersionCertainty AS [X_Comp" +
                    "anyServer.VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [X_Com" +
                    "panyServer.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_Co" +
                    "mpanyServer.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_CompanySer" +
                    "ver.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [X_CompanyServer" +
                    ".VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [X_CompanyServ" +
                    "er.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [X_CompanyServer.Ve" +
                    "rsionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.CompanyServers AS" +
                    " T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.CompanyServers
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView689()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.CompanyServers", @"
    SELECT VALUE -- Constructing CompanyServers
        [NKD.Module.BusinessObjects.CompanyServer](T1.CompanyServer_CompanyServerID, T1.CompanyServer_CompanyID, T1.CompanyServer_ServerID, T1.CompanyServer_Version, T1.CompanyServer_VersionAntecedentID, T1.CompanyServer_VersionCertainty, T1.CompanyServer_VersionWorkflowInstanceID, T1.CompanyServer_VersionUpdatedBy, T1.CompanyServer_VersionDeletedBy, T1.CompanyServer_VersionOwnerContactID, T1.CompanyServer_VersionOwnerCompanyID, T1.CompanyServer_VersionUpdated)
    FROM (
        SELECT 
            T.CompanyServerID AS CompanyServer_CompanyServerID, 
            T.CompanyID AS CompanyServer_CompanyID, 
            T.ServerID AS CompanyServer_ServerID, 
            T.Version AS CompanyServer_Version, 
            T.VersionAntecedentID AS CompanyServer_VersionAntecedentID, 
            T.VersionCertainty AS CompanyServer_VersionCertainty, 
            T.VersionWorkflowInstanceID AS CompanyServer_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS CompanyServer_VersionUpdatedBy, 
            T.VersionDeletedBy AS CompanyServer_VersionDeletedBy, 
            T.VersionOwnerContactID AS CompanyServer_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS CompanyServer_VersionOwnerCompanyID, 
            T.VersionUpdated AS CompanyServer_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_CompanyServer AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_LicenseAssetModelPart
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView690()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_LicenseAssetModelPart", "\r\n    SELECT VALUE -- Constructing X_LicenseAssetModelPart\r\n        [NKD.Module.B" +
                    "usinessObjects.Store.X_LicenseAssetModelPart](T1.[X_LicenseAssetModelPart.Licens" +
                    "eAssetModelPartID], T1.[X_LicenseAssetModelPart.LicenseAssetID], T1.[X_LicenseAs" +
                    "setModelPart.ModelPartID], T1.[X_LicenseAssetModelPart.Restrictions], T1.[X_Lice" +
                    "nseAssetModelPart.Version], T1.[X_LicenseAssetModelPart.VersionAntecedentID], T1" +
                    ".[X_LicenseAssetModelPart.VersionCertainty], T1.[X_LicenseAssetModelPart.Version" +
                    "WorkflowInstanceID], T1.[X_LicenseAssetModelPart.VersionUpdatedBy], T1.[X_Licens" +
                    "eAssetModelPart.VersionDeletedBy], T1.[X_LicenseAssetModelPart.VersionOwnerConta" +
                    "ctID], T1.[X_LicenseAssetModelPart.VersionOwnerCompanyID], T1.[X_LicenseAssetMod" +
                    "elPart.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.LicenseAsset" +
                    "ModelPartID AS [X_LicenseAssetModelPart.LicenseAssetModelPartID], \r\n            " +
                    "T.LicenseAssetID AS [X_LicenseAssetModelPart.LicenseAssetID], \r\n            T.Mo" +
                    "delPartID AS [X_LicenseAssetModelPart.ModelPartID], \r\n            T.Restrictions" +
                    " AS [X_LicenseAssetModelPart.Restrictions], \r\n            T.Version AS [X_Licens" +
                    "eAssetModelPart.Version], \r\n            T.VersionAntecedentID AS [X_LicenseAsset" +
                    "ModelPart.VersionAntecedentID], \r\n            T.VersionCertainty AS [X_LicenseAs" +
                    "setModelPart.VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [X_" +
                    "LicenseAssetModelPart.VersionWorkflowInstanceID], \r\n            T.VersionUpdated" +
                    "By AS [X_LicenseAssetModelPart.VersionUpdatedBy], \r\n            T.VersionDeleted" +
                    "By AS [X_LicenseAssetModelPart.VersionDeletedBy], \r\n            T.VersionOwnerCo" +
                    "ntactID AS [X_LicenseAssetModelPart.VersionOwnerContactID], \r\n            T.Vers" +
                    "ionOwnerCompanyID AS [X_LicenseAssetModelPart.VersionOwnerCompanyID], \r\n        " +
                    "    T.VersionUpdated AS [X_LicenseAssetModelPart.VersionUpdated], \r\n            " +
                    "True AS _from0\r\n        FROM NKDC.LicenseAssetModelParts AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.LicenseAssetModelParts
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView691()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.LicenseAssetModelParts", "\r\n    SELECT VALUE -- Constructing LicenseAssetModelParts\r\n        [NKD.Module.Bu" +
                    "sinessObjects.LicenseAssetModelPart](T1.LicenseAssetModelPart_LicenseAssetModelP" +
                    "artID, T1.LicenseAssetModelPart_LicenseAssetID, T1.LicenseAssetModelPart_ModelPa" +
                    "rtID, T1.LicenseAssetModelPart_Restrictions, T1.LicenseAssetModelPart_Version, T" +
                    "1.LicenseAssetModelPart_VersionAntecedentID, T1.LicenseAssetModelPart_VersionCer" +
                    "tainty, T1.LicenseAssetModelPart_VersionWorkflowInstanceID, T1.LicenseAssetModel" +
                    "Part_VersionUpdatedBy, T1.LicenseAssetModelPart_VersionDeletedBy, T1.LicenseAsse" +
                    "tModelPart_VersionOwnerContactID, T1.LicenseAssetModelPart_VersionOwnerCompanyID" +
                    ", T1.LicenseAssetModelPart_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n       " +
                    "     T.LicenseAssetModelPartID AS LicenseAssetModelPart_LicenseAssetModelPartID," +
                    " \r\n            T.LicenseAssetID AS LicenseAssetModelPart_LicenseAssetID, \r\n     " +
                    "       T.ModelPartID AS LicenseAssetModelPart_ModelPartID, \r\n            T.Restr" +
                    "ictions AS LicenseAssetModelPart_Restrictions, \r\n            T.Version AS Licens" +
                    "eAssetModelPart_Version, \r\n            T.VersionAntecedentID AS LicenseAssetMode" +
                    "lPart_VersionAntecedentID, \r\n            T.VersionCertainty AS LicenseAssetModel" +
                    "Part_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS LicenseAsset" +
                    "ModelPart_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS License" +
                    "AssetModelPart_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS LicenseAsse" +
                    "tModelPart_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS LicenseAss" +
                    "etModelPart_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS Lice" +
                    "nseAssetModelPart_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS Licen" +
                    "seAssetModelPart_VersionUpdated, \r\n            True AS _from0\r\n        FROM NKDM" +
                    "oduleBusinessObjectsStoreContainer.X_LicenseAssetModelPart AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_LicenseHistory
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView692()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_LicenseHistory", "\r\n    SELECT VALUE -- Constructing X_LicenseHistory\r\n        [NKD.Module.Business" +
                    "Objects.Store.X_LicenseHistory](T1.[X_LicenseHistory.LicenseHistoryID], T1.[X_Li" +
                    "censeHistory.LastLicenseID], T1.[X_LicenseHistory.LicenseeReferenceID], T1.[X_Li" +
                    "censeHistory.LicenseHistoryEncrypted], T1.[X_LicenseHistory.Version], T1.[X_Lice" +
                    "nseHistory.VersionAntecedentID], T1.[X_LicenseHistory.VersionCertainty], T1.[X_L" +
                    "icenseHistory.VersionWorkflowInstanceID], T1.[X_LicenseHistory.VersionUpdatedBy]" +
                    ", T1.[X_LicenseHistory.VersionDeletedBy], T1.[X_LicenseHistory.VersionOwnerConta" +
                    "ctID], T1.[X_LicenseHistory.VersionOwnerCompanyID], T1.[X_LicenseHistory.Version" +
                    "Updated])\r\n    FROM (\r\n        SELECT \r\n            T.LicenseHistoryID AS [X_Lic" +
                    "enseHistory.LicenseHistoryID], \r\n            T.LastLicenseID AS [X_LicenseHistor" +
                    "y.LastLicenseID], \r\n            T.LicenseeReferenceID AS [X_LicenseHistory.Licen" +
                    "seeReferenceID], \r\n            T.LicenseHistoryEncrypted AS [X_LicenseHistory.Li" +
                    "censeHistoryEncrypted], \r\n            T.Version AS [X_LicenseHistory.Version], \r" +
                    "\n            T.VersionAntecedentID AS [X_LicenseHistory.VersionAntecedentID], \r\n" +
                    "            T.VersionCertainty AS [X_LicenseHistory.VersionCertainty], \r\n       " +
                    "     T.VersionWorkflowInstanceID AS [X_LicenseHistory.VersionWorkflowInstanceID]" +
                    ", \r\n            T.VersionUpdatedBy AS [X_LicenseHistory.VersionUpdatedBy], \r\n   " +
                    "         T.VersionDeletedBy AS [X_LicenseHistory.VersionDeletedBy], \r\n          " +
                    "  T.VersionOwnerContactID AS [X_LicenseHistory.VersionOwnerContactID], \r\n       " +
                    "     T.VersionOwnerCompanyID AS [X_LicenseHistory.VersionOwnerCompanyID], \r\n    " +
                    "        T.VersionUpdated AS [X_LicenseHistory.VersionUpdated], \r\n            Tru" +
                    "e AS _from0\r\n        FROM NKDC.LicenseHistories AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.LicenseHistories
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView693()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.LicenseHistories", "\r\n    SELECT VALUE -- Constructing LicenseHistories\r\n        [NKD.Module.Business" +
                    "Objects.LicenseHistory](T1.LicenseHistory_LastLicenseID, T1.LicenseHistory_Licen" +
                    "seHistoryEncrypted, T1.LicenseHistory_Version, T1.LicenseHistory_VersionAntecede" +
                    "ntID, T1.LicenseHistory_VersionCertainty, T1.LicenseHistory_VersionWorkflowInsta" +
                    "nceID, T1.LicenseHistory_VersionUpdatedBy, T1.LicenseHistory_VersionDeletedBy, T" +
                    "1.LicenseHistory_VersionOwnerContactID, T1.LicenseHistory_VersionOwnerCompanyID," +
                    " T1.LicenseHistory_VersionUpdated, T1.LicenseHistory_LicenseHistoryID, T1.Licens" +
                    "eHistory_LicenseeReferenceID)\r\n    FROM (\r\n        SELECT \r\n            T.LastLi" +
                    "censeID AS LicenseHistory_LastLicenseID, \r\n            T.LicenseHistoryEncrypted" +
                    " AS LicenseHistory_LicenseHistoryEncrypted, \r\n            T.Version AS LicenseHi" +
                    "story_Version, \r\n            T.VersionAntecedentID AS LicenseHistory_VersionAnte" +
                    "cedentID, \r\n            T.VersionCertainty AS LicenseHistory_VersionCertainty, \r" +
                    "\n            T.VersionWorkflowInstanceID AS LicenseHistory_VersionWorkflowInstan" +
                    "ceID, \r\n            T.VersionUpdatedBy AS LicenseHistory_VersionUpdatedBy, \r\n   " +
                    "         T.VersionDeletedBy AS LicenseHistory_VersionDeletedBy, \r\n            T." +
                    "VersionOwnerContactID AS LicenseHistory_VersionOwnerContactID, \r\n            T.V" +
                    "ersionOwnerCompanyID AS LicenseHistory_VersionOwnerCompanyID, \r\n            T.Ve" +
                    "rsionUpdated AS LicenseHistory_VersionUpdated, \r\n            T.LicenseHistoryID " +
                    "AS LicenseHistory_LicenseHistoryID, \r\n            T.LicenseeReferenceID AS Licen" +
                    "seHistory_LicenseeReferenceID, \r\n            True AS _from0\r\n        FROM NKDMod" +
                    "uleBusinessObjectsStoreContainer.X_LicenseHistory AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_MetaData
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView694()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_MetaData", @"
    SELECT VALUE -- Constructing X_MetaData
        [NKD.Module.BusinessObjects.Store.X_MetaData](T1.[X_MetaData.MetaDataID], T1.[X_MetaData.MetaDataType], T1.[X_MetaData.ContentToIndex], T1.[X_MetaData.Version], T1.[X_MetaData.VersionAntecedentID], T1.[X_MetaData.VersionCertainty], T1.[X_MetaData.VersionWorkflowInstanceID], T1.[X_MetaData.VersionUpdatedBy], T1.[X_MetaData.VersionDeletedBy], T1.[X_MetaData.VersionOwnerContactID], T1.[X_MetaData.VersionOwnerCompanyID], T1.[X_MetaData.VersionUpdated])
    FROM (
        SELECT 
            T.MetaDataID AS [X_MetaData.MetaDataID], 
            T.MetaDataType AS [X_MetaData.MetaDataType], 
            T.ContentToIndex AS [X_MetaData.ContentToIndex], 
            T.Version AS [X_MetaData.Version], 
            T.VersionAntecedentID AS [X_MetaData.VersionAntecedentID], 
            T.VersionCertainty AS [X_MetaData.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [X_MetaData.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [X_MetaData.VersionUpdatedBy], 
            T.VersionDeletedBy AS [X_MetaData.VersionDeletedBy], 
            T.VersionOwnerContactID AS [X_MetaData.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [X_MetaData.VersionOwnerCompanyID], 
            T.VersionUpdated AS [X_MetaData.VersionUpdated], 
            True AS _from0
        FROM NKDC.MetaDatas AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_MetaDataRelation
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView695()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_MetaDataRelation", "\r\n    SELECT VALUE -- Constructing X_MetaDataRelation\r\n        [NKD.Module.Busine" +
                    "ssObjects.Store.X_MetaDataRelation](T1.[X_MetaDataRelation.MetaDataRelationID], " +
                    "T1.[X_MetaDataRelation.MetaDataID], T1.[X_MetaDataRelation.TableType], T1.[X_Met" +
                    "aDataRelation.ReferenceID], T1.[X_MetaDataRelation.Version], T1.[X_MetaDataRelat" +
                    "ion.VersionAntecedentID], T1.[X_MetaDataRelation.VersionCertainty], T1.[X_MetaDa" +
                    "taRelation.VersionWorkflowInstanceID], T1.[X_MetaDataRelation.VersionUpdatedBy]," +
                    " T1.[X_MetaDataRelation.VersionDeletedBy], T1.[X_MetaDataRelation.VersionOwnerCo" +
                    "ntactID], T1.[X_MetaDataRelation.VersionOwnerCompanyID], T1.[X_MetaDataRelation." +
                    "VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.MetaDataRelationID " +
                    "AS [X_MetaDataRelation.MetaDataRelationID], \r\n            T.MetaDataID AS [X_Met" +
                    "aDataRelation.MetaDataID], \r\n            T.TableType AS [X_MetaDataRelation.Tabl" +
                    "eType], \r\n            T.ReferenceID AS [X_MetaDataRelation.ReferenceID], \r\n     " +
                    "       T.Version AS [X_MetaDataRelation.Version], \r\n            T.VersionAnteced" +
                    "entID AS [X_MetaDataRelation.VersionAntecedentID], \r\n            T.VersionCertai" +
                    "nty AS [X_MetaDataRelation.VersionCertainty], \r\n            T.VersionWorkflowIns" +
                    "tanceID AS [X_MetaDataRelation.VersionWorkflowInstanceID], \r\n            T.Versi" +
                    "onUpdatedBy AS [X_MetaDataRelation.VersionUpdatedBy], \r\n            T.VersionDel" +
                    "etedBy AS [X_MetaDataRelation.VersionDeletedBy], \r\n            T.VersionOwnerCon" +
                    "tactID AS [X_MetaDataRelation.VersionOwnerContactID], \r\n            T.VersionOwn" +
                    "erCompanyID AS [X_MetaDataRelation.VersionOwnerCompanyID], \r\n            T.Versi" +
                    "onUpdated AS [X_MetaDataRelation.VersionUpdated], \r\n            True AS _from0\r\n" +
                    "        FROM NKDC.MetaDataRelations AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.MetaDatas
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView696()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.MetaDatas", @"
    SELECT VALUE -- Constructing MetaDatas
        [NKD.Module.BusinessObjects.MetaData](T1.MetaData_MetaDataID, T1.MetaData_MetaDataType, T1.MetaData_ContentToIndex, T1.MetaData_Version, T1.MetaData_VersionAntecedentID, T1.MetaData_VersionCertainty, T1.MetaData_VersionWorkflowInstanceID, T1.MetaData_VersionUpdatedBy, T1.MetaData_VersionDeletedBy, T1.MetaData_VersionOwnerContactID, T1.MetaData_VersionOwnerCompanyID, T1.MetaData_VersionUpdated)
    FROM (
        SELECT 
            T.MetaDataID AS MetaData_MetaDataID, 
            T.MetaDataType AS MetaData_MetaDataType, 
            T.ContentToIndex AS MetaData_ContentToIndex, 
            T.Version AS MetaData_Version, 
            T.VersionAntecedentID AS MetaData_VersionAntecedentID, 
            T.VersionCertainty AS MetaData_VersionCertainty, 
            T.VersionWorkflowInstanceID AS MetaData_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS MetaData_VersionUpdatedBy, 
            T.VersionDeletedBy AS MetaData_VersionDeletedBy, 
            T.VersionOwnerContactID AS MetaData_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS MetaData_VersionOwnerCompanyID, 
            T.VersionUpdated AS MetaData_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_MetaData AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.MetaDataRelations
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView697()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.MetaDataRelations", "\r\n    SELECT VALUE -- Constructing MetaDataRelations\r\n        [NKD.Module.Busines" +
                    "sObjects.MetaDataRelation](T1.MetaDataRelation_MetaDataRelationID, T1.MetaDataRe" +
                    "lation_MetaDataID, T1.MetaDataRelation_TableType, T1.MetaDataRelation_ReferenceI" +
                    "D, T1.MetaDataRelation_Version, T1.MetaDataRelation_VersionAntecedentID, T1.Meta" +
                    "DataRelation_VersionCertainty, T1.MetaDataRelation_VersionWorkflowInstanceID, T1" +
                    ".MetaDataRelation_VersionUpdatedBy, T1.MetaDataRelation_VersionDeletedBy, T1.Met" +
                    "aDataRelation_VersionOwnerContactID, T1.MetaDataRelation_VersionOwnerCompanyID, " +
                    "T1.MetaDataRelation_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T." +
                    "MetaDataRelationID AS MetaDataRelation_MetaDataRelationID, \r\n            T.MetaD" +
                    "ataID AS MetaDataRelation_MetaDataID, \r\n            T.TableType AS MetaDataRelat" +
                    "ion_TableType, \r\n            T.ReferenceID AS MetaDataRelation_ReferenceID, \r\n  " +
                    "          T.Version AS MetaDataRelation_Version, \r\n            T.VersionAntecede" +
                    "ntID AS MetaDataRelation_VersionAntecedentID, \r\n            T.VersionCertainty A" +
                    "S MetaDataRelation_VersionCertainty, \r\n            T.VersionWorkflowInstanceID A" +
                    "S MetaDataRelation_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy A" +
                    "S MetaDataRelation_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS MetaDat" +
                    "aRelation_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS MetaDataRel" +
                    "ation_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS MetaDataRe" +
                    "lation_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS MetaDataRelation" +
                    "_VersionUpdated, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObj" +
                    "ectsStoreContainer.X_MetaDataRelation AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_PrivateData
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView698()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2140);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_PrivateData\r\n        [NKD.Module.BusinessOb");
            viewString.Append("jects.Store.X_PrivateData](T1.[X_PrivateData.PrivateDataID], T1.[X_PrivateData.U");
            viewString.Append("niqueID], T1.[X_PrivateData.UniqueIDSystemDataType], T1.[X_PrivateData.TableType");
            viewString.Append("], T1.[X_PrivateData.ReferenceID], T1.[X_PrivateData.UserDataType], T1.[X_Privat");
            viewString.Append("eData.Value], T1.[X_PrivateData.SystemDataType], T1.[X_PrivateData.IsReadOnly], ");
            viewString.Append("T1.[X_PrivateData.IsVisible], T1.[X_PrivateData.Version], T1.[X_PrivateData.Vers");
            viewString.Append("ionAntecedentID], T1.[X_PrivateData.VersionCertainty], T1.[X_PrivateData.Version");
            viewString.Append("WorkflowInstanceID], T1.[X_PrivateData.VersionUpdatedBy], T1.[X_PrivateData.Vers");
            viewString.Append("ionDeletedBy], T1.[X_PrivateData.VersionOwnerContactID], T1.[X_PrivateData.Versi");
            viewString.Append("onOwnerCompanyID], T1.[X_PrivateData.VersionUpdated])\r\n    FROM (\r\n        SELEC");
            viewString.Append("T \r\n            T.PrivateDataID AS [X_PrivateData.PrivateDataID], \r\n            ");
            viewString.Append("T.UniqueID AS [X_PrivateData.UniqueID], \r\n            T.UniqueIDSystemDataType A");
            viewString.Append("S [X_PrivateData.UniqueIDSystemDataType], \r\n            T.TableType AS [X_Privat");
            viewString.Append("eData.TableType], \r\n            T.ReferenceID AS [X_PrivateData.ReferenceID], \r\n");
            viewString.Append("            T.UserDataType AS [X_PrivateData.UserDataType], \r\n            T.[Val");
            viewString.Append("ue] AS [X_PrivateData.Value], \r\n            T.SystemDataType AS [X_PrivateData.S");
            viewString.Append("ystemDataType], \r\n            T.IsReadOnly AS [X_PrivateData.IsReadOnly], \r\n    ");
            viewString.Append("        T.IsVisible AS [X_PrivateData.IsVisible], \r\n            T.Version AS [X_");
            viewString.Append("PrivateData.Version], \r\n            T.VersionAntecedentID AS [X_PrivateData.Vers");
            viewString.Append("ionAntecedentID], \r\n            T.VersionCertainty AS [X_PrivateData.VersionCert");
            viewString.Append("ainty], \r\n            T.VersionWorkflowInstanceID AS [X_PrivateData.VersionWorkf");
            viewString.Append("lowInstanceID], \r\n            T.VersionUpdatedBy AS [X_PrivateData.VersionUpdate");
            viewString.Append("dBy], \r\n            T.VersionDeletedBy AS [X_PrivateData.VersionDeletedBy], \r\n  ");
            viewString.Append("          T.VersionOwnerContactID AS [X_PrivateData.VersionOwnerContactID], \r\n  ");
            viewString.Append("          T.VersionOwnerCompanyID AS [X_PrivateData.VersionOwnerCompanyID], \r\n  ");
            viewString.Append("          T.VersionUpdated AS [X_PrivateData.VersionUpdated], \r\n            True");
            viewString.Append(" AS _from0\r\n        FROM NKDC.PrivateDatas AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_PrivateData", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.PrivateDatas
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView699()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.PrivateDatas", "\r\n    SELECT VALUE -- Constructing PrivateDatas\r\n        [NKD.Module.BusinessObje" +
                    "cts.PrivateData](T1.PrivateData_PrivateDataID, T1.PrivateData_UniqueID, T1.Priva" +
                    "teData_UniqueIDSystemDataType, T1.PrivateData_TableType, T1.PrivateData_Referenc" +
                    "eID, T1.PrivateData_UserDataType, T1.PrivateData_Value, T1.PrivateData_SystemDat" +
                    "aType, T1.PrivateData_IsReadOnly, T1.PrivateData_IsVisible, T1.PrivateData_Versi" +
                    "on, T1.PrivateData_VersionAntecedentID, T1.PrivateData_VersionCertainty, T1.Priv" +
                    "ateData_VersionWorkflowInstanceID, T1.PrivateData_VersionUpdatedBy, T1.PrivateDa" +
                    "ta_VersionDeletedBy, T1.PrivateData_VersionOwnerContactID, T1.PrivateData_Versio" +
                    "nOwnerCompanyID, T1.PrivateData_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n  " +
                    "          T.PrivateDataID AS PrivateData_PrivateDataID, \r\n            T.UniqueID" +
                    " AS PrivateData_UniqueID, \r\n            T.UniqueIDSystemDataType AS PrivateData_" +
                    "UniqueIDSystemDataType, \r\n            T.TableType AS PrivateData_TableType, \r\n  " +
                    "          T.ReferenceID AS PrivateData_ReferenceID, \r\n            T.UserDataType" +
                    " AS PrivateData_UserDataType, \r\n            T.[Value] AS PrivateData_Value, \r\n  " +
                    "          T.SystemDataType AS PrivateData_SystemDataType, \r\n            T.IsRead" +
                    "Only AS PrivateData_IsReadOnly, \r\n            T.IsVisible AS PrivateData_IsVisib" +
                    "le, \r\n            T.Version AS PrivateData_Version, \r\n            T.VersionAntec" +
                    "edentID AS PrivateData_VersionAntecedentID, \r\n            T.VersionCertainty AS " +
                    "PrivateData_VersionCertainty, \r\n            T.VersionWorkflowInstanceID AS Priva" +
                    "teData_VersionWorkflowInstanceID, \r\n            T.VersionUpdatedBy AS PrivateDat" +
                    "a_VersionUpdatedBy, \r\n            T.VersionDeletedBy AS PrivateData_VersionDelet" +
                    "edBy, \r\n            T.VersionOwnerContactID AS PrivateData_VersionOwnerContactID" +
                    ", \r\n            T.VersionOwnerCompanyID AS PrivateData_VersionOwnerCompanyID, \r\n" +
                    "            T.VersionUpdated AS PrivateData_VersionUpdated, \r\n            True A" +
                    "S _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_PrivateData AS T" +
                    "\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_ServerApplication
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView700()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_ServerApplication", "\r\n    SELECT VALUE -- Constructing X_ServerApplication\r\n        [NKD.Module.Busin" +
                    "essObjects.Store.X_ServerApplication](T1.[X_ServerApplication.ServerApplicationI" +
                    "D], T1.[X_ServerApplication.ServerID], T1.[X_ServerApplication.ApplicationID], T" +
                    "1.[X_ServerApplication.Version], T1.[X_ServerApplication.VersionAntecedentID], T" +
                    "1.[X_ServerApplication.VersionCertainty], T1.[X_ServerApplication.VersionWorkflo" +
                    "wInstanceID], T1.[X_ServerApplication.VersionUpdatedBy], T1.[X_ServerApplication" +
                    ".VersionDeletedBy], T1.[X_ServerApplication.VersionOwnerContactID], T1.[X_Server" +
                    "Application.VersionOwnerCompanyID], T1.[X_ServerApplication.VersionUpdated])\r\n  " +
                    "  FROM (\r\n        SELECT \r\n            T.ServerApplicationID AS [X_ServerApplica" +
                    "tion.ServerApplicationID], \r\n            T.ServerID AS [X_ServerApplication.Serv" +
                    "erID], \r\n            T.ApplicationID AS [X_ServerApplication.ApplicationID], \r\n " +
                    "           T.Version AS [X_ServerApplication.Version], \r\n            T.VersionAn" +
                    "tecedentID AS [X_ServerApplication.VersionAntecedentID], \r\n            T.Version" +
                    "Certainty AS [X_ServerApplication.VersionCertainty], \r\n            T.VersionWork" +
                    "flowInstanceID AS [X_ServerApplication.VersionWorkflowInstanceID], \r\n           " +
                    " T.VersionUpdatedBy AS [X_ServerApplication.VersionUpdatedBy], \r\n            T.V" +
                    "ersionDeletedBy AS [X_ServerApplication.VersionDeletedBy], \r\n            T.Versi" +
                    "onOwnerContactID AS [X_ServerApplication.VersionOwnerContactID], \r\n            T" +
                    ".VersionOwnerCompanyID AS [X_ServerApplication.VersionOwnerCompanyID], \r\n       " +
                    "     T.VersionUpdated AS [X_ServerApplication.VersionUpdated], \r\n            Tru" +
                    "e AS _from0\r\n        FROM NKDC.ServerApplications AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.ServerApplications
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView701()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.ServerApplications", "\r\n    SELECT VALUE -- Constructing ServerApplications\r\n        [NKD.Module.Busine" +
                    "ssObjects.ServerApplication](T1.ServerApplication_ServerApplicationID, T1.Server" +
                    "Application_ServerID, T1.ServerApplication_ApplicationID, T1.ServerApplication_V" +
                    "ersion, T1.ServerApplication_VersionAntecedentID, T1.ServerApplication_VersionCe" +
                    "rtainty, T1.ServerApplication_VersionWorkflowInstanceID, T1.ServerApplication_Ve" +
                    "rsionUpdatedBy, T1.ServerApplication_VersionDeletedBy, T1.ServerApplication_Vers" +
                    "ionOwnerContactID, T1.ServerApplication_VersionOwnerCompanyID, T1.ServerApplicat" +
                    "ion_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.ServerApplicatio" +
                    "nID AS ServerApplication_ServerApplicationID, \r\n            T.ServerID AS Server" +
                    "Application_ServerID, \r\n            T.ApplicationID AS ServerApplication_Applica" +
                    "tionID, \r\n            T.Version AS ServerApplication_Version, \r\n            T.Ve" +
                    "rsionAntecedentID AS ServerApplication_VersionAntecedentID, \r\n            T.Vers" +
                    "ionCertainty AS ServerApplication_VersionCertainty, \r\n            T.VersionWorkf" +
                    "lowInstanceID AS ServerApplication_VersionWorkflowInstanceID, \r\n            T.Ve" +
                    "rsionUpdatedBy AS ServerApplication_VersionUpdatedBy, \r\n            T.VersionDel" +
                    "etedBy AS ServerApplication_VersionDeletedBy, \r\n            T.VersionOwnerContac" +
                    "tID AS ServerApplication_VersionOwnerContactID, \r\n            T.VersionOwnerComp" +
                    "anyID AS ServerApplication_VersionOwnerCompanyID, \r\n            T.VersionUpdated" +
                    " AS ServerApplication_VersionUpdated, \r\n            True AS _from0\r\n        FROM" +
                    " NKDModuleBusinessObjectsStoreContainer.X_ServerApplication AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_Usage
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView702()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_Usage", "\r\n    SELECT VALUE -- Constructing X_Usage\r\n        [NKD.Module.BusinessObjects.S" +
                    "tore.X_Usage](T1.[X_Usage.UsageID], T1.[X_Usage.AssetID], T1.[X_Usage.ModelID], " +
                    "T1.[X_Usage.PartID], T1.[X_Usage.DurationStart], T1.[X_Usage.DurationEnd], T1.[X" +
                    "_Usage.UnitID], T1.[X_Usage.Measurement], T1.[X_Usage.Version], T1.[X_Usage.Vers" +
                    "ionAntecedentID], T1.[X_Usage.VersionCertainty], T1.[X_Usage.VersionWorkflowInst" +
                    "anceID], T1.[X_Usage.VersionUpdatedBy], T1.[X_Usage.VersionDeletedBy], T1.[X_Usa" +
                    "ge.VersionOwnerContactID], T1.[X_Usage.VersionOwnerCompanyID], T1.[X_Usage.Versi" +
                    "onUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.UsageID AS [X_Usage.Usag" +
                    "eID], \r\n            T.AssetID AS [X_Usage.AssetID], \r\n            T.ModelID AS [" +
                    "X_Usage.ModelID], \r\n            T.PartID AS [X_Usage.PartID], \r\n            T.Du" +
                    "rationStart AS [X_Usage.DurationStart], \r\n            T.DurationEnd AS [X_Usage." +
                    "DurationEnd], \r\n            T.UnitID AS [X_Usage.UnitID], \r\n            T.Measur" +
                    "ement AS [X_Usage.Measurement], \r\n            T.Version AS [X_Usage.Version], \r\n" +
                    "            T.VersionAntecedentID AS [X_Usage.VersionAntecedentID], \r\n          " +
                    "  T.VersionCertainty AS [X_Usage.VersionCertainty], \r\n            T.VersionWorkf" +
                    "lowInstanceID AS [X_Usage.VersionWorkflowInstanceID], \r\n            T.VersionUpd" +
                    "atedBy AS [X_Usage.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [X_Usa" +
                    "ge.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [X_Usage.VersionO" +
                    "wnerContactID], \r\n            T.VersionOwnerCompanyID AS [X_Usage.VersionOwnerCo" +
                    "mpanyID], \r\n            T.VersionUpdated AS [X_Usage.VersionUpdated], \r\n        " +
                    "    True AS _from0\r\n        FROM NKDC.Usages AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.Usages
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView703()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.Usages", "\r\n    SELECT VALUE -- Constructing Usages\r\n        [NKD.Module.BusinessObjects.Us" +
                    "age](T1.Usage_UsageID, T1.Usage_AssetID, T1.Usage_ModelID, T1.Usage_PartID, T1.U" +
                    "sage_DurationStart, T1.Usage_DurationEnd, T1.Usage_UnitID, T1.Usage_Measurement," +
                    " T1.Usage_Version, T1.Usage_VersionAntecedentID, T1.Usage_VersionCertainty, T1.U" +
                    "sage_VersionWorkflowInstanceID, T1.Usage_VersionUpdatedBy, T1.Usage_VersionDelet" +
                    "edBy, T1.Usage_VersionOwnerContactID, T1.Usage_VersionOwnerCompanyID, T1.Usage_V" +
                    "ersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.UsageID AS Usage_Usag" +
                    "eID, \r\n            T.AssetID AS Usage_AssetID, \r\n            T.ModelID AS Usage_" +
                    "ModelID, \r\n            T.PartID AS Usage_PartID, \r\n            T.DurationStart A" +
                    "S Usage_DurationStart, \r\n            T.DurationEnd AS Usage_DurationEnd, \r\n     " +
                    "       T.UnitID AS Usage_UnitID, \r\n            T.Measurement AS Usage_Measuremen" +
                    "t, \r\n            T.Version AS Usage_Version, \r\n            T.VersionAntecedentID" +
                    " AS Usage_VersionAntecedentID, \r\n            T.VersionCertainty AS Usage_Version" +
                    "Certainty, \r\n            T.VersionWorkflowInstanceID AS Usage_VersionWorkflowIns" +
                    "tanceID, \r\n            T.VersionUpdatedBy AS Usage_VersionUpdatedBy, \r\n         " +
                    "   T.VersionDeletedBy AS Usage_VersionDeletedBy, \r\n            T.VersionOwnerCon" +
                    "tactID AS Usage_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS " +
                    "Usage_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS Usage_VersionUpda" +
                    "ted, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreCon" +
                    "tainer.X_Usage AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_UserData
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView704()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_UserData", "\r\n    SELECT VALUE -- Constructing X_UserData\r\n        [NKD.Module.BusinessObject" +
                    "s.Store.X_UserData](T1.[X_UserData.UserDataID], T1.[X_UserData.TableType], T1.[X" +
                    "_UserData.ReferenceID], T1.[X_UserData.UserDataType], T1.[X_UserData.SystemDataT" +
                    "ype], T1.[X_UserData.Value], T1.[X_UserData.Version], T1.[X_UserData.VersionAnte" +
                    "cedentID], T1.[X_UserData.VersionCertainty], T1.[X_UserData.VersionWorkflowInsta" +
                    "nceID], T1.[X_UserData.VersionUpdatedBy], T1.[X_UserData.VersionDeletedBy], T1.[" +
                    "X_UserData.VersionOwnerContactID], T1.[X_UserData.VersionOwnerCompanyID], T1.[X_" +
                    "UserData.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.UserDataID" +
                    " AS [X_UserData.UserDataID], \r\n            T.TableType AS [X_UserData.TableType]" +
                    ", \r\n            T.ReferenceID AS [X_UserData.ReferenceID], \r\n            T.UserD" +
                    "ataType AS [X_UserData.UserDataType], \r\n            T.SystemDataType AS [X_UserD" +
                    "ata.SystemDataType], \r\n            T.[Value] AS [X_UserData.Value], \r\n          " +
                    "  T.Version AS [X_UserData.Version], \r\n            T.VersionAntecedentID AS [X_U" +
                    "serData.VersionAntecedentID], \r\n            T.VersionCertainty AS [X_UserData.Ve" +
                    "rsionCertainty], \r\n            T.VersionWorkflowInstanceID AS [X_UserData.Versio" +
                    "nWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [X_UserData.VersionUpd" +
                    "atedBy], \r\n            T.VersionDeletedBy AS [X_UserData.VersionDeletedBy], \r\n  " +
                    "          T.VersionOwnerContactID AS [X_UserData.VersionOwnerContactID], \r\n     " +
                    "       T.VersionOwnerCompanyID AS [X_UserData.VersionOwnerCompanyID], \r\n        " +
                    "    T.VersionUpdated AS [X_UserData.VersionUpdated], \r\n            True AS _from" +
                    "0\r\n        FROM NKDC.UserDatas AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.UserDatas
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView705()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.UserDatas", "\r\n    SELECT VALUE -- Constructing UserDatas\r\n        [NKD.Module.BusinessObjects" +
                    ".UserData](T1.UserData_UserDataID, T1.UserData_TableType, T1.UserData_ReferenceI" +
                    "D, T1.UserData_UserDataType, T1.UserData_SystemDataType, T1.UserData_Value, T1.U" +
                    "serData_Version, T1.UserData_VersionAntecedentID, T1.UserData_VersionCertainty, " +
                    "T1.UserData_VersionWorkflowInstanceID, T1.UserData_VersionUpdatedBy, T1.UserData" +
                    "_VersionDeletedBy, T1.UserData_VersionOwnerContactID, T1.UserData_VersionOwnerCo" +
                    "mpanyID, T1.UserData_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T" +
                    ".UserDataID AS UserData_UserDataID, \r\n            T.TableType AS UserData_TableT" +
                    "ype, \r\n            T.ReferenceID AS UserData_ReferenceID, \r\n            T.UserDa" +
                    "taType AS UserData_UserDataType, \r\n            T.SystemDataType AS UserData_Syst" +
                    "emDataType, \r\n            T.[Value] AS UserData_Value, \r\n            T.Version A" +
                    "S UserData_Version, \r\n            T.VersionAntecedentID AS UserData_VersionAntec" +
                    "edentID, \r\n            T.VersionCertainty AS UserData_VersionCertainty, \r\n      " +
                    "      T.VersionWorkflowInstanceID AS UserData_VersionWorkflowInstanceID, \r\n     " +
                    "       T.VersionUpdatedBy AS UserData_VersionUpdatedBy, \r\n            T.VersionD" +
                    "eletedBy AS UserData_VersionDeletedBy, \r\n            T.VersionOwnerContactID AS " +
                    "UserData_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID AS UserDat" +
                    "a_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS UserData_VersionUpdat" +
                    "ed, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreCont" +
                    "ainer.X_UserData AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.DefinitionIdentityTable
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView706()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.DefinitionIdentityTable", @"
    SELECT VALUE -- Constructing DefinitionIdentityTable
        [NKD.Module.BusinessObjects.Store.DefinitionIdentityTable](T1.DefinitionIdentityTable_SurrogateIdentityId, T1.DefinitionIdentityTable_DefinitionIdentityHash, T1.DefinitionIdentityTable_DefinitionIdentityAnyRevisionHash, T1.DefinitionIdentityTable_Name, T1.DefinitionIdentityTable_Package, T1.DefinitionIdentityTable_Build, T1.DefinitionIdentityTable_Major, T1.DefinitionIdentityTable_Minor, T1.DefinitionIdentityTable_Revision)
    FROM (
        SELECT 
            T.SurrogateIdentityId AS DefinitionIdentityTable_SurrogateIdentityId, 
            T.DefinitionIdentityHash AS DefinitionIdentityTable_DefinitionIdentityHash, 
            T.DefinitionIdentityAnyRevisionHash AS DefinitionIdentityTable_DefinitionIdentityAnyRevisionHash, 
            T.Name AS DefinitionIdentityTable_Name, 
            T.Package AS DefinitionIdentityTable_Package, 
            T.Build AS DefinitionIdentityTable_Build, 
            T.Major AS DefinitionIdentityTable_Major, 
            T.Minor AS DefinitionIdentityTable_Minor, 
            T.Revision AS DefinitionIdentityTable_Revision, 
            True AS _from0
        FROM NKDC.DefinitionIdentityTables AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.DefinitionIdentityTables
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView707()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DefinitionIdentityTables", @"
    SELECT VALUE -- Constructing DefinitionIdentityTables
        [NKD.Module.BusinessObjects.DefinitionIdentityTable](T1.DefinitionIdentityTable_SurrogateIdentityId, T1.DefinitionIdentityTable_DefinitionIdentityHash, T1.DefinitionIdentityTable_DefinitionIdentityAnyRevisionHash, T1.DefinitionIdentityTable_Name, T1.DefinitionIdentityTable_Package, T1.DefinitionIdentityTable_Build, T1.DefinitionIdentityTable_Major, T1.DefinitionIdentityTable_Minor, T1.DefinitionIdentityTable_Revision)
    FROM (
        SELECT 
            T.SurrogateIdentityId AS DefinitionIdentityTable_SurrogateIdentityId, 
            T.DefinitionIdentityHash AS DefinitionIdentityTable_DefinitionIdentityHash, 
            T.DefinitionIdentityAnyRevisionHash AS DefinitionIdentityTable_DefinitionIdentityAnyRevisionHash, 
            T.Name AS DefinitionIdentityTable_Name, 
            T.Package AS DefinitionIdentityTable_Package, 
            T.Build AS DefinitionIdentityTable_Build, 
            T.Major AS DefinitionIdentityTable_Major, 
            T.Minor AS DefinitionIdentityTable_Minor, 
            T.Revision AS DefinitionIdentityTable_Revision, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.DefinitionIdentityTable AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.IdentityOwnerTable
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView708()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.IdentityOwnerTable", @"
    SELECT VALUE -- Constructing IdentityOwnerTable
        [NKD.Module.BusinessObjects.Store.IdentityOwnerTable](T1.IdentityOwnerTable_SurrogateIdentityId, T1.IdentityOwnerTable_SurrogateLockOwnerId)
    FROM (
        SELECT 
            T.SurrogateIdentityId AS IdentityOwnerTable_SurrogateIdentityId, 
            T.SurrogateLockOwnerId AS IdentityOwnerTable_SurrogateLockOwnerId, 
            True AS _from0
        FROM NKDC.IdentityOwnerTables AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.IdentityOwnerTables
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView709()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.IdentityOwnerTables", @"
    SELECT VALUE -- Constructing IdentityOwnerTables
        [NKD.Module.BusinessObjects.IdentityOwnerTable](T1.IdentityOwnerTable_SurrogateIdentityId, T1.IdentityOwnerTable_SurrogateLockOwnerId)
    FROM (
        SELECT 
            T.SurrogateIdentityId AS IdentityOwnerTable_SurrogateIdentityId, 
            T.SurrogateLockOwnerId AS IdentityOwnerTable_SurrogateLockOwnerId, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.IdentityOwnerTable AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.InstanceMetadataChangesTable
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView710()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.InstanceMetadataChangesTable", @"
    SELECT VALUE -- Constructing InstanceMetadataChangesTable
        [NKD.Module.BusinessObjects.Store.InstanceMetadataChangesTable](T1.InstanceMetadataChangesTable_SurrogateInstanceId, T1.InstanceMetadataChangesTable_ChangeTime, T1.InstanceMetadataChangesTable_EncodingOption, T1.InstanceMetadataChangesTable_Change)
    FROM (
        SELECT 
            T.SurrogateInstanceId AS InstanceMetadataChangesTable_SurrogateInstanceId, 
            T.ChangeTime AS InstanceMetadataChangesTable_ChangeTime, 
            T.EncodingOption AS InstanceMetadataChangesTable_EncodingOption, 
            T.Change AS InstanceMetadataChangesTable_Change, 
            True AS _from0
        FROM NKDC.InstanceMetadataChangesTables AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.InstanceMetadataChangesTables
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView711()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.InstanceMetadataChangesTables", @"
    SELECT VALUE -- Constructing InstanceMetadataChangesTables
        [NKD.Module.BusinessObjects.InstanceMetadataChangesTable](T1.InstanceMetadataChangesTable_SurrogateInstanceId, T1.InstanceMetadataChangesTable_ChangeTime, T1.InstanceMetadataChangesTable_EncodingOption, T1.InstanceMetadataChangesTable_Change)
    FROM (
        SELECT 
            T.SurrogateInstanceId AS InstanceMetadataChangesTable_SurrogateInstanceId, 
            T.ChangeTime AS InstanceMetadataChangesTable_ChangeTime, 
            T.EncodingOption AS InstanceMetadataChangesTable_EncodingOption, 
            T.Change AS InstanceMetadataChangesTable_Change, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.InstanceMetadataChangesTable AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.InstancePromotedPropertiesTable
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView712()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(4131);
            viewString.Append("\r\n    SELECT VALUE -- Constructing InstancePromotedPropertiesTable\r\n        [NKD");
            viewString.Append(".Module.BusinessObjects.Store.InstancePromotedPropertiesTable](T1.InstancePromot");
            viewString.Append("edPropertiesTable_SurrogateInstanceId, T1.InstancePromotedPropertiesTable_Promot");
            viewString.Append("ionName, T1.InstancePromotedPropertiesTable_Value33, T1.InstancePromotedProperti");
            viewString.Append("esTable_Value34, T1.InstancePromotedPropertiesTable_Value35, T1.InstancePromoted");
            viewString.Append("PropertiesTable_Value36, T1.InstancePromotedPropertiesTable_Value37, T1.Instance");
            viewString.Append("PromotedPropertiesTable_Value38, T1.InstancePromotedPropertiesTable_Value39, T1.");
            viewString.Append("InstancePromotedPropertiesTable_Value40, T1.InstancePromotedPropertiesTable_Valu");
            viewString.Append("e41, T1.InstancePromotedPropertiesTable_Value42, T1.InstancePromotedPropertiesTa");
            viewString.Append("ble_Value43, T1.InstancePromotedPropertiesTable_Value44, T1.InstancePromotedProp");
            viewString.Append("ertiesTable_Value45, T1.InstancePromotedPropertiesTable_Value46, T1.InstanceProm");
            viewString.Append("otedPropertiesTable_Value47, T1.InstancePromotedPropertiesTable_Value48, T1.Inst");
            viewString.Append("ancePromotedPropertiesTable_Value49, T1.InstancePromotedPropertiesTable_Value50,");
            viewString.Append(" T1.InstancePromotedPropertiesTable_Value51, T1.InstancePromotedPropertiesTable_");
            viewString.Append("Value52, T1.InstancePromotedPropertiesTable_Value53, T1.InstancePromotedProperti");
            viewString.Append("esTable_Value54, T1.InstancePromotedPropertiesTable_Value55, T1.InstancePromoted");
            viewString.Append("PropertiesTable_Value56, T1.InstancePromotedPropertiesTable_Value57, T1.Instance");
            viewString.Append("PromotedPropertiesTable_Value58, T1.InstancePromotedPropertiesTable_Value59, T1.");
            viewString.Append("InstancePromotedPropertiesTable_Value60, T1.InstancePromotedPropertiesTable_Valu");
            viewString.Append("e61, T1.InstancePromotedPropertiesTable_Value62, T1.InstancePromotedPropertiesTa");
            viewString.Append("ble_Value63, T1.InstancePromotedPropertiesTable_Value64)\r\n    FROM (\r\n        SE");
            viewString.Append("LECT \r\n            T.SurrogateInstanceId AS InstancePromotedPropertiesTable_Surr");
            viewString.Append("ogateInstanceId, \r\n            T.PromotionName AS InstancePromotedPropertiesTabl");
            viewString.Append("e_PromotionName, \r\n            T.Value33 AS InstancePromotedPropertiesTable_Valu");
            viewString.Append("e33, \r\n            T.Value34 AS InstancePromotedPropertiesTable_Value34, \r\n     ");
            viewString.Append("       T.Value35 AS InstancePromotedPropertiesTable_Value35, \r\n            T.Val");
            viewString.Append("ue36 AS InstancePromotedPropertiesTable_Value36, \r\n            T.Value37 AS Inst");
            viewString.Append("ancePromotedPropertiesTable_Value37, \r\n            T.Value38 AS InstancePromoted");
            viewString.Append("PropertiesTable_Value38, \r\n            T.Value39 AS InstancePromotedPropertiesTa");
            viewString.Append("ble_Value39, \r\n            T.Value40 AS InstancePromotedPropertiesTable_Value40,");
            viewString.Append(" \r\n            T.Value41 AS InstancePromotedPropertiesTable_Value41, \r\n         ");
            viewString.Append("   T.Value42 AS InstancePromotedPropertiesTable_Value42, \r\n            T.Value43");
            viewString.Append(" AS InstancePromotedPropertiesTable_Value43, \r\n            T.Value44 AS Instance");
            viewString.Append("PromotedPropertiesTable_Value44, \r\n            T.Value45 AS InstancePromotedProp");
            viewString.Append("ertiesTable_Value45, \r\n            T.Value46 AS InstancePromotedPropertiesTable_");
            viewString.Append("Value46, \r\n            T.Value47 AS InstancePromotedPropertiesTable_Value47, \r\n ");
            viewString.Append("           T.Value48 AS InstancePromotedPropertiesTable_Value48, \r\n            T");
            viewString.Append(".Value49 AS InstancePromotedPropertiesTable_Value49, \r\n            T.Value50 AS ");
            viewString.Append("InstancePromotedPropertiesTable_Value50, \r\n            T.Value51 AS InstanceProm");
            viewString.Append("otedPropertiesTable_Value51, \r\n            T.Value52 AS InstancePromotedProperti");
            viewString.Append("esTable_Value52, \r\n            T.Value53 AS InstancePromotedPropertiesTable_Valu");
            viewString.Append("e53, \r\n            T.Value54 AS InstancePromotedPropertiesTable_Value54, \r\n     ");
            viewString.Append("       T.Value55 AS InstancePromotedPropertiesTable_Value55, \r\n            T.Val");
            viewString.Append("ue56 AS InstancePromotedPropertiesTable_Value56, \r\n            T.Value57 AS Inst");
            viewString.Append("ancePromotedPropertiesTable_Value57, \r\n            T.Value58 AS InstancePromoted");
            viewString.Append("PropertiesTable_Value58, \r\n            T.Value59 AS InstancePromotedPropertiesTa");
            viewString.Append("ble_Value59, \r\n            T.Value60 AS InstancePromotedPropertiesTable_Value60,");
            viewString.Append(" \r\n            T.Value61 AS InstancePromotedPropertiesTable_Value61, \r\n         ");
            viewString.Append("   T.Value62 AS InstancePromotedPropertiesTable_Value62, \r\n            T.Value63");
            viewString.Append(" AS InstancePromotedPropertiesTable_Value63, \r\n            T.Value64 AS Instance");
            viewString.Append("PromotedPropertiesTable_Value64, \r\n            True AS _from0\r\n        FROM NKDC");
            viewString.Append(".InstancePromotedPropertiesTables AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.InstancePromotedPropertiesTable", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.InstancePromotedPropertiesTables
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView713()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(4159);
            viewString.Append("\r\n    SELECT VALUE -- Constructing InstancePromotedPropertiesTables\r\n        [NK");
            viewString.Append("D.Module.BusinessObjects.InstancePromotedPropertiesTable](T1.InstancePromotedPro");
            viewString.Append("pertiesTable_SurrogateInstanceId, T1.InstancePromotedPropertiesTable_PromotionNa");
            viewString.Append("me, T1.InstancePromotedPropertiesTable_Value33, T1.InstancePromotedPropertiesTab");
            viewString.Append("le_Value34, T1.InstancePromotedPropertiesTable_Value35, T1.InstancePromotedPrope");
            viewString.Append("rtiesTable_Value36, T1.InstancePromotedPropertiesTable_Value37, T1.InstancePromo");
            viewString.Append("tedPropertiesTable_Value38, T1.InstancePromotedPropertiesTable_Value39, T1.Insta");
            viewString.Append("ncePromotedPropertiesTable_Value40, T1.InstancePromotedPropertiesTable_Value41, ");
            viewString.Append("T1.InstancePromotedPropertiesTable_Value42, T1.InstancePromotedPropertiesTable_V");
            viewString.Append("alue43, T1.InstancePromotedPropertiesTable_Value44, T1.InstancePromotedPropertie");
            viewString.Append("sTable_Value45, T1.InstancePromotedPropertiesTable_Value46, T1.InstancePromotedP");
            viewString.Append("ropertiesTable_Value47, T1.InstancePromotedPropertiesTable_Value48, T1.InstanceP");
            viewString.Append("romotedPropertiesTable_Value49, T1.InstancePromotedPropertiesTable_Value50, T1.I");
            viewString.Append("nstancePromotedPropertiesTable_Value51, T1.InstancePromotedPropertiesTable_Value");
            viewString.Append("52, T1.InstancePromotedPropertiesTable_Value53, T1.InstancePromotedPropertiesTab");
            viewString.Append("le_Value54, T1.InstancePromotedPropertiesTable_Value55, T1.InstancePromotedPrope");
            viewString.Append("rtiesTable_Value56, T1.InstancePromotedPropertiesTable_Value57, T1.InstancePromo");
            viewString.Append("tedPropertiesTable_Value58, T1.InstancePromotedPropertiesTable_Value59, T1.Insta");
            viewString.Append("ncePromotedPropertiesTable_Value60, T1.InstancePromotedPropertiesTable_Value61, ");
            viewString.Append("T1.InstancePromotedPropertiesTable_Value62, T1.InstancePromotedPropertiesTable_V");
            viewString.Append("alue63, T1.InstancePromotedPropertiesTable_Value64)\r\n    FROM (\r\n        SELECT ");
            viewString.Append("\r\n            T.SurrogateInstanceId AS InstancePromotedPropertiesTable_Surrogate");
            viewString.Append("InstanceId, \r\n            T.PromotionName AS InstancePromotedPropertiesTable_Pro");
            viewString.Append("motionName, \r\n            T.Value33 AS InstancePromotedPropertiesTable_Value33, ");
            viewString.Append("\r\n            T.Value34 AS InstancePromotedPropertiesTable_Value34, \r\n          ");
            viewString.Append("  T.Value35 AS InstancePromotedPropertiesTable_Value35, \r\n            T.Value36 ");
            viewString.Append("AS InstancePromotedPropertiesTable_Value36, \r\n            T.Value37 AS InstanceP");
            viewString.Append("romotedPropertiesTable_Value37, \r\n            T.Value38 AS InstancePromotedPrope");
            viewString.Append("rtiesTable_Value38, \r\n            T.Value39 AS InstancePromotedPropertiesTable_V");
            viewString.Append("alue39, \r\n            T.Value40 AS InstancePromotedPropertiesTable_Value40, \r\n  ");
            viewString.Append("          T.Value41 AS InstancePromotedPropertiesTable_Value41, \r\n            T.");
            viewString.Append("Value42 AS InstancePromotedPropertiesTable_Value42, \r\n            T.Value43 AS I");
            viewString.Append("nstancePromotedPropertiesTable_Value43, \r\n            T.Value44 AS InstancePromo");
            viewString.Append("tedPropertiesTable_Value44, \r\n            T.Value45 AS InstancePromotedPropertie");
            viewString.Append("sTable_Value45, \r\n            T.Value46 AS InstancePromotedPropertiesTable_Value");
            viewString.Append("46, \r\n            T.Value47 AS InstancePromotedPropertiesTable_Value47, \r\n      ");
            viewString.Append("      T.Value48 AS InstancePromotedPropertiesTable_Value48, \r\n            T.Valu");
            viewString.Append("e49 AS InstancePromotedPropertiesTable_Value49, \r\n            T.Value50 AS Insta");
            viewString.Append("ncePromotedPropertiesTable_Value50, \r\n            T.Value51 AS InstancePromotedP");
            viewString.Append("ropertiesTable_Value51, \r\n            T.Value52 AS InstancePromotedPropertiesTab");
            viewString.Append("le_Value52, \r\n            T.Value53 AS InstancePromotedPropertiesTable_Value53, ");
            viewString.Append("\r\n            T.Value54 AS InstancePromotedPropertiesTable_Value54, \r\n          ");
            viewString.Append("  T.Value55 AS InstancePromotedPropertiesTable_Value55, \r\n            T.Value56 ");
            viewString.Append("AS InstancePromotedPropertiesTable_Value56, \r\n            T.Value57 AS InstanceP");
            viewString.Append("romotedPropertiesTable_Value57, \r\n            T.Value58 AS InstancePromotedPrope");
            viewString.Append("rtiesTable_Value58, \r\n            T.Value59 AS InstancePromotedPropertiesTable_V");
            viewString.Append("alue59, \r\n            T.Value60 AS InstancePromotedPropertiesTable_Value60, \r\n  ");
            viewString.Append("          T.Value61 AS InstancePromotedPropertiesTable_Value61, \r\n            T.");
            viewString.Append("Value62 AS InstancePromotedPropertiesTable_Value62, \r\n            T.Value63 AS I");
            viewString.Append("nstancePromotedPropertiesTable_Value63, \r\n            T.Value64 AS InstancePromo");
            viewString.Append("tedPropertiesTable_Value64, \r\n            True AS _from0\r\n        FROM NKDModule");
            viewString.Append("BusinessObjectsStoreContainer.InstancePromotedPropertiesTable AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.InstancePromotedPropertiesTables", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.InstancesTable
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView714()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3005);
            viewString.Append("\r\n    SELECT VALUE -- Constructing InstancesTable\r\n        [NKD.Module.BusinessO");
            viewString.Append("bjects.Store.InstancesTable](T1.InstancesTable_Id, T1.InstancesTable_SurrogateIn");
            viewString.Append("stanceId, T1.InstancesTable_SurrogateLockOwnerId, T1.InstancesTable_PrimitiveDat");
            viewString.Append("aProperties, T1.InstancesTable_ComplexDataProperties, T1.InstancesTable_WriteOnl");
            viewString.Append("yPrimitiveDataProperties, T1.InstancesTable_WriteOnlyComplexDataProperties, T1.I");
            viewString.Append("nstancesTable_MetadataProperties, T1.InstancesTable_DataEncodingOption, T1.Insta");
            viewString.Append("ncesTable_MetadataEncodingOption, T1.InstancesTable_Version, T1.InstancesTable_P");
            viewString.Append("endingTimer, T1.InstancesTable_CreationTime, T1.InstancesTable_LastUpdated, T1.I");
            viewString.Append("nstancesTable_WorkflowHostType, T1.InstancesTable_ServiceDeploymentId, T1.Instan");
            viewString.Append("cesTable_SuspensionExceptionName, T1.InstancesTable_SuspensionReason, T1.Instanc");
            viewString.Append("esTable_BlockingBookmarks, T1.InstancesTable_LastMachineRunOn, T1.InstancesTable");
            viewString.Append("_ExecutionStatus, T1.InstancesTable_IsInitialized, T1.InstancesTable_IsSuspended");
            viewString.Append(", T1.InstancesTable_IsReadyToRun, T1.InstancesTable_IsCompleted, T1.InstancesTab");
            viewString.Append("le_SurrogateIdentityId)\r\n    FROM (\r\n        SELECT \r\n            T.Id AS Instan");
            viewString.Append("cesTable_Id, \r\n            T.SurrogateInstanceId AS InstancesTable_SurrogateInst");
            viewString.Append("anceId, \r\n            T.SurrogateLockOwnerId AS InstancesTable_SurrogateLockOwne");
            viewString.Append("rId, \r\n            T.PrimitiveDataProperties AS InstancesTable_PrimitiveDataProp");
            viewString.Append("erties, \r\n            T.ComplexDataProperties AS InstancesTable_ComplexDataPrope");
            viewString.Append("rties, \r\n            T.WriteOnlyPrimitiveDataProperties AS InstancesTable_WriteO");
            viewString.Append("nlyPrimitiveDataProperties, \r\n            T.WriteOnlyComplexDataProperties AS In");
            viewString.Append("stancesTable_WriteOnlyComplexDataProperties, \r\n            T.MetadataProperties ");
            viewString.Append("AS InstancesTable_MetadataProperties, \r\n            T.DataEncodingOption AS Inst");
            viewString.Append("ancesTable_DataEncodingOption, \r\n            T.MetadataEncodingOption AS Instanc");
            viewString.Append("esTable_MetadataEncodingOption, \r\n            T.Version AS InstancesTable_Versio");
            viewString.Append("n, \r\n            T.PendingTimer AS InstancesTable_PendingTimer, \r\n            T.");
            viewString.Append("CreationTime AS InstancesTable_CreationTime, \r\n            T.LastUpdated AS Inst");
            viewString.Append("ancesTable_LastUpdated, \r\n            T.WorkflowHostType AS InstancesTable_Workf");
            viewString.Append("lowHostType, \r\n            T.ServiceDeploymentId AS InstancesTable_ServiceDeploy");
            viewString.Append("mentId, \r\n            T.SuspensionExceptionName AS InstancesTable_SuspensionExce");
            viewString.Append("ptionName, \r\n            T.SuspensionReason AS InstancesTable_SuspensionReason, ");
            viewString.Append("\r\n            T.BlockingBookmarks AS InstancesTable_BlockingBookmarks, \r\n       ");
            viewString.Append("     T.LastMachineRunOn AS InstancesTable_LastMachineRunOn, \r\n            T.Exec");
            viewString.Append("utionStatus AS InstancesTable_ExecutionStatus, \r\n            T.IsInitialized AS ");
            viewString.Append("InstancesTable_IsInitialized, \r\n            T.IsSuspended AS InstancesTable_IsSu");
            viewString.Append("spended, \r\n            T.IsReadyToRun AS InstancesTable_IsReadyToRun, \r\n        ");
            viewString.Append("    T.IsCompleted AS InstancesTable_IsCompleted, \r\n            T.SurrogateIdenti");
            viewString.Append("tyId AS InstancesTable_SurrogateIdentityId, \r\n            True AS _from0\r\n      ");
            viewString.Append("  FROM NKDC.InstancesTables AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.InstancesTable", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.InstancesTables
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView715()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3033);
            viewString.Append("\r\n    SELECT VALUE -- Constructing InstancesTables\r\n        [NKD.Module.Business");
            viewString.Append("Objects.InstancesTable](T1.InstancesTable_Id, T1.InstancesTable_SurrogateInstanc");
            viewString.Append("eId, T1.InstancesTable_SurrogateLockOwnerId, T1.InstancesTable_PrimitiveDataProp");
            viewString.Append("erties, T1.InstancesTable_ComplexDataProperties, T1.InstancesTable_WriteOnlyPrim");
            viewString.Append("itiveDataProperties, T1.InstancesTable_WriteOnlyComplexDataProperties, T1.Instan");
            viewString.Append("cesTable_MetadataProperties, T1.InstancesTable_DataEncodingOption, T1.InstancesT");
            viewString.Append("able_MetadataEncodingOption, T1.InstancesTable_Version, T1.InstancesTable_Pendin");
            viewString.Append("gTimer, T1.InstancesTable_CreationTime, T1.InstancesTable_LastUpdated, T1.Instan");
            viewString.Append("cesTable_WorkflowHostType, T1.InstancesTable_ServiceDeploymentId, T1.InstancesTa");
            viewString.Append("ble_SuspensionExceptionName, T1.InstancesTable_SuspensionReason, T1.InstancesTab");
            viewString.Append("le_BlockingBookmarks, T1.InstancesTable_LastMachineRunOn, T1.InstancesTable_Exec");
            viewString.Append("utionStatus, T1.InstancesTable_IsInitialized, T1.InstancesTable_IsSuspended, T1.");
            viewString.Append("InstancesTable_IsReadyToRun, T1.InstancesTable_IsCompleted, T1.InstancesTable_Su");
            viewString.Append("rrogateIdentityId)\r\n    FROM (\r\n        SELECT \r\n            T.Id AS InstancesTa");
            viewString.Append("ble_Id, \r\n            T.SurrogateInstanceId AS InstancesTable_SurrogateInstanceI");
            viewString.Append("d, \r\n            T.SurrogateLockOwnerId AS InstancesTable_SurrogateLockOwnerId, ");
            viewString.Append("\r\n            T.PrimitiveDataProperties AS InstancesTable_PrimitiveDataPropertie");
            viewString.Append("s, \r\n            T.ComplexDataProperties AS InstancesTable_ComplexDataProperties");
            viewString.Append(", \r\n            T.WriteOnlyPrimitiveDataProperties AS InstancesTable_WriteOnlyPr");
            viewString.Append("imitiveDataProperties, \r\n            T.WriteOnlyComplexDataProperties AS Instanc");
            viewString.Append("esTable_WriteOnlyComplexDataProperties, \r\n            T.MetadataProperties AS In");
            viewString.Append("stancesTable_MetadataProperties, \r\n            T.DataEncodingOption AS Instances");
            viewString.Append("Table_DataEncodingOption, \r\n            T.MetadataEncodingOption AS InstancesTab");
            viewString.Append("le_MetadataEncodingOption, \r\n            T.Version AS InstancesTable_Version, \r\n");
            viewString.Append("            T.PendingTimer AS InstancesTable_PendingTimer, \r\n            T.Creat");
            viewString.Append("ionTime AS InstancesTable_CreationTime, \r\n            T.LastUpdated AS Instances");
            viewString.Append("Table_LastUpdated, \r\n            T.WorkflowHostType AS InstancesTable_WorkflowHo");
            viewString.Append("stType, \r\n            T.ServiceDeploymentId AS InstancesTable_ServiceDeploymentI");
            viewString.Append("d, \r\n            T.SuspensionExceptionName AS InstancesTable_SuspensionException");
            viewString.Append("Name, \r\n            T.SuspensionReason AS InstancesTable_SuspensionReason, \r\n   ");
            viewString.Append("         T.BlockingBookmarks AS InstancesTable_BlockingBookmarks, \r\n            ");
            viewString.Append("T.LastMachineRunOn AS InstancesTable_LastMachineRunOn, \r\n            T.Execution");
            viewString.Append("Status AS InstancesTable_ExecutionStatus, \r\n            T.IsInitialized AS Insta");
            viewString.Append("ncesTable_IsInitialized, \r\n            T.IsSuspended AS InstancesTable_IsSuspend");
            viewString.Append("ed, \r\n            T.IsReadyToRun AS InstancesTable_IsReadyToRun, \r\n            T");
            viewString.Append(".IsCompleted AS InstancesTable_IsCompleted, \r\n            T.SurrogateIdentityId ");
            viewString.Append("AS InstancesTable_SurrogateIdentityId, \r\n            True AS _from0\r\n        FRO");
            viewString.Append("M NKDModuleBusinessObjectsStoreContainer.InstancesTable AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.InstancesTables", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.KeysTable
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView716()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.KeysTable", @"
    SELECT VALUE -- Constructing KeysTable
        [NKD.Module.BusinessObjects.Store.KeysTable](T1.KeysTable_Id, T1.KeysTable_SurrogateKeyId, T1.KeysTable_SurrogateInstanceId, T1.KeysTable_EncodingOption, T1.KeysTable_Properties, T1.KeysTable_IsAssociated)
    FROM (
        SELECT 
            T.Id AS KeysTable_Id, 
            T.SurrogateKeyId AS KeysTable_SurrogateKeyId, 
            T.SurrogateInstanceId AS KeysTable_SurrogateInstanceId, 
            T.EncodingOption AS KeysTable_EncodingOption, 
            T.Properties AS KeysTable_Properties, 
            T.IsAssociated AS KeysTable_IsAssociated, 
            True AS _from0
        FROM NKDC.KeysTables AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.KeysTables
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView717()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.KeysTables", @"
    SELECT VALUE -- Constructing KeysTables
        [NKD.Module.BusinessObjects.KeysTable](T1.KeysTable_Id, T1.KeysTable_SurrogateKeyId, T1.KeysTable_SurrogateInstanceId, T1.KeysTable_EncodingOption, T1.KeysTable_Properties, T1.KeysTable_IsAssociated)
    FROM (
        SELECT 
            T.Id AS KeysTable_Id, 
            T.SurrogateKeyId AS KeysTable_SurrogateKeyId, 
            T.SurrogateInstanceId AS KeysTable_SurrogateInstanceId, 
            T.EncodingOption AS KeysTable_EncodingOption, 
            T.Properties AS KeysTable_Properties, 
            T.IsAssociated AS KeysTable_IsAssociated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.KeysTable AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.LockOwnersTable
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView718()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.LockOwnersTable", "\r\n    SELECT VALUE -- Constructing LockOwnersTable\r\n        [NKD.Module.BusinessO" +
                    "bjects.Store.LockOwnersTable](T1.LockOwnersTable_Id, T1.LockOwnersTable_Surrogat" +
                    "eLockOwnerId, T1.LockOwnersTable_LockExpiration, T1.LockOwnersTable_WorkflowHost" +
                    "Type, T1.LockOwnersTable_MachineName, T1.LockOwnersTable_EnqueueCommand, T1.Lock" +
                    "OwnersTable_DeletesInstanceOnCompletion, T1.LockOwnersTable_PrimitiveLockOwnerDa" +
                    "ta, T1.LockOwnersTable_ComplexLockOwnerData, T1.LockOwnersTable_WriteOnlyPrimiti" +
                    "veLockOwnerData, T1.LockOwnersTable_WriteOnlyComplexLockOwnerData, T1.LockOwners" +
                    "Table_EncodingOption, T1.LockOwnersTable_WorkflowIdentityFilter)\r\n    FROM (\r\n  " +
                    "      SELECT \r\n            T.Id AS LockOwnersTable_Id, \r\n            T.Surrogate" +
                    "LockOwnerId AS LockOwnersTable_SurrogateLockOwnerId, \r\n            T.LockExpirat" +
                    "ion AS LockOwnersTable_LockExpiration, \r\n            T.WorkflowHostType AS LockO" +
                    "wnersTable_WorkflowHostType, \r\n            T.MachineName AS LockOwnersTable_Mach" +
                    "ineName, \r\n            T.EnqueueCommand AS LockOwnersTable_EnqueueCommand, \r\n   " +
                    "         T.DeletesInstanceOnCompletion AS LockOwnersTable_DeletesInstanceOnCompl" +
                    "etion, \r\n            T.PrimitiveLockOwnerData AS LockOwnersTable_PrimitiveLockOw" +
                    "nerData, \r\n            T.ComplexLockOwnerData AS LockOwnersTable_ComplexLockOwne" +
                    "rData, \r\n            T.WriteOnlyPrimitiveLockOwnerData AS LockOwnersTable_WriteO" +
                    "nlyPrimitiveLockOwnerData, \r\n            T.WriteOnlyComplexLockOwnerData AS Lock" +
                    "OwnersTable_WriteOnlyComplexLockOwnerData, \r\n            T.EncodingOption AS Loc" +
                    "kOwnersTable_EncodingOption, \r\n            T.WorkflowIdentityFilter AS LockOwner" +
                    "sTable_WorkflowIdentityFilter, \r\n            True AS _from0\r\n        FROM NKDC.L" +
                    "ockOwnersTables AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.LockOwnersTables
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView719()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.LockOwnersTables", "\r\n    SELECT VALUE -- Constructing LockOwnersTables\r\n        [NKD.Module.Business" +
                    "Objects.LockOwnersTable](T1.LockOwnersTable_Id, T1.LockOwnersTable_SurrogateLock" +
                    "OwnerId, T1.LockOwnersTable_LockExpiration, T1.LockOwnersTable_WorkflowHostType," +
                    " T1.LockOwnersTable_MachineName, T1.LockOwnersTable_EnqueueCommand, T1.LockOwner" +
                    "sTable_DeletesInstanceOnCompletion, T1.LockOwnersTable_PrimitiveLockOwnerData, T" +
                    "1.LockOwnersTable_ComplexLockOwnerData, T1.LockOwnersTable_WriteOnlyPrimitiveLoc" +
                    "kOwnerData, T1.LockOwnersTable_WriteOnlyComplexLockOwnerData, T1.LockOwnersTable" +
                    "_EncodingOption, T1.LockOwnersTable_WorkflowIdentityFilter)\r\n    FROM (\r\n       " +
                    " SELECT \r\n            T.Id AS LockOwnersTable_Id, \r\n            T.SurrogateLockO" +
                    "wnerId AS LockOwnersTable_SurrogateLockOwnerId, \r\n            T.LockExpiration A" +
                    "S LockOwnersTable_LockExpiration, \r\n            T.WorkflowHostType AS LockOwners" +
                    "Table_WorkflowHostType, \r\n            T.MachineName AS LockOwnersTable_MachineNa" +
                    "me, \r\n            T.EnqueueCommand AS LockOwnersTable_EnqueueCommand, \r\n        " +
                    "    T.DeletesInstanceOnCompletion AS LockOwnersTable_DeletesInstanceOnCompletion" +
                    ", \r\n            T.PrimitiveLockOwnerData AS LockOwnersTable_PrimitiveLockOwnerDa" +
                    "ta, \r\n            T.ComplexLockOwnerData AS LockOwnersTable_ComplexLockOwnerData" +
                    ", \r\n            T.WriteOnlyPrimitiveLockOwnerData AS LockOwnersTable_WriteOnlyPr" +
                    "imitiveLockOwnerData, \r\n            T.WriteOnlyComplexLockOwnerData AS LockOwner" +
                    "sTable_WriteOnlyComplexLockOwnerData, \r\n            T.EncodingOption AS LockOwne" +
                    "rsTable_EncodingOption, \r\n            T.WorkflowIdentityFilter AS LockOwnersTabl" +
                    "e_WorkflowIdentityFilter, \r\n            True AS _from0\r\n        FROM NKDModuleBu" +
                    "sinessObjectsStoreContainer.LockOwnersTable AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.RunnableInstancesTable
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView720()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.RunnableInstancesTable", @"
    SELECT VALUE -- Constructing RunnableInstancesTable
        [NKD.Module.BusinessObjects.Store.RunnableInstancesTable](T1.RunnableInstancesTable_SurrogateInstanceId, T1.RunnableInstancesTable_WorkflowHostType, T1.RunnableInstancesTable_ServiceDeploymentId, T1.RunnableInstancesTable_RunnableTime, T1.RunnableInstancesTable_SurrogateIdentityId)
    FROM (
        SELECT 
            T.SurrogateInstanceId AS RunnableInstancesTable_SurrogateInstanceId, 
            T.WorkflowHostType AS RunnableInstancesTable_WorkflowHostType, 
            T.ServiceDeploymentId AS RunnableInstancesTable_ServiceDeploymentId, 
            T.RunnableTime AS RunnableInstancesTable_RunnableTime, 
            T.SurrogateIdentityId AS RunnableInstancesTable_SurrogateIdentityId, 
            True AS _from0
        FROM NKDC.RunnableInstancesTables AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.RunnableInstancesTables
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView721()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.RunnableInstancesTables", @"
    SELECT VALUE -- Constructing RunnableInstancesTables
        [NKD.Module.BusinessObjects.RunnableInstancesTable](T1.RunnableInstancesTable_SurrogateInstanceId, T1.RunnableInstancesTable_WorkflowHostType, T1.RunnableInstancesTable_ServiceDeploymentId, T1.RunnableInstancesTable_RunnableTime, T1.RunnableInstancesTable_SurrogateIdentityId)
    FROM (
        SELECT 
            T.SurrogateInstanceId AS RunnableInstancesTable_SurrogateInstanceId, 
            T.WorkflowHostType AS RunnableInstancesTable_WorkflowHostType, 
            T.ServiceDeploymentId AS RunnableInstancesTable_ServiceDeploymentId, 
            T.RunnableTime AS RunnableInstancesTable_RunnableTime, 
            T.SurrogateIdentityId AS RunnableInstancesTable_SurrogateIdentityId, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.RunnableInstancesTable AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.ServiceDeploymentsTable
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView722()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.ServiceDeploymentsTable", @"
    SELECT VALUE -- Constructing ServiceDeploymentsTable
        [NKD.Module.BusinessObjects.Store.ServiceDeploymentsTable](T1.ServiceDeploymentsTable_Id, T1.ServiceDeploymentsTable_ServiceDeploymentHash, T1.ServiceDeploymentsTable_SiteName, T1.ServiceDeploymentsTable_RelativeServicePath, T1.ServiceDeploymentsTable_RelativeApplicationPath, T1.ServiceDeploymentsTable_ServiceName, T1.ServiceDeploymentsTable_ServiceNamespace)
    FROM (
        SELECT 
            T.Id AS ServiceDeploymentsTable_Id, 
            T.ServiceDeploymentHash AS ServiceDeploymentsTable_ServiceDeploymentHash, 
            T.SiteName AS ServiceDeploymentsTable_SiteName, 
            T.RelativeServicePath AS ServiceDeploymentsTable_RelativeServicePath, 
            T.RelativeApplicationPath AS ServiceDeploymentsTable_RelativeApplicationPath, 
            T.ServiceName AS ServiceDeploymentsTable_ServiceName, 
            T.ServiceNamespace AS ServiceDeploymentsTable_ServiceNamespace, 
            True AS _from0
        FROM NKDC.ServiceDeploymentsTables AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.ServiceDeploymentsTables
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView723()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.ServiceDeploymentsTables", @"
    SELECT VALUE -- Constructing ServiceDeploymentsTables
        [NKD.Module.BusinessObjects.ServiceDeploymentsTable](T1.ServiceDeploymentsTable_Id, T1.ServiceDeploymentsTable_ServiceDeploymentHash, T1.ServiceDeploymentsTable_SiteName, T1.ServiceDeploymentsTable_RelativeServicePath, T1.ServiceDeploymentsTable_RelativeApplicationPath, T1.ServiceDeploymentsTable_ServiceName, T1.ServiceDeploymentsTable_ServiceNamespace)
    FROM (
        SELECT 
            T.Id AS ServiceDeploymentsTable_Id, 
            T.ServiceDeploymentHash AS ServiceDeploymentsTable_ServiceDeploymentHash, 
            T.SiteName AS ServiceDeploymentsTable_SiteName, 
            T.RelativeServicePath AS ServiceDeploymentsTable_RelativeServicePath, 
            T.RelativeApplicationPath AS ServiceDeploymentsTable_RelativeApplicationPath, 
            T.ServiceName AS ServiceDeploymentsTable_ServiceName, 
            T.ServiceNamespace AS ServiceDeploymentsTable_ServiceNamespace, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.ServiceDeploymentsTable AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.vw_aspnet_Applications
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView724()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.vw_aspnet_Applications", @"
    SELECT VALUE -- Constructing vw_aspnet_Applications
        [NKD.Module.BusinessObjects.Store.vw_aspnet_Applications](T1.[vw_aspnet_Applications.ApplicationName], T1.[vw_aspnet_Applications.LoweredApplicationName], T1.[vw_aspnet_Applications.ApplicationId], T1.[vw_aspnet_Applications.Description])
    FROM (
        SELECT 
            T.ApplicationName AS [vw_aspnet_Applications.ApplicationName], 
            T.LoweredApplicationName AS [vw_aspnet_Applications.LoweredApplicationName], 
            T.ApplicationId AS [vw_aspnet_Applications.ApplicationId], 
            T.Description AS [vw_aspnet_Applications.Description], 
            True AS _from0
        FROM NKDC.ApplicationsViews AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.ApplicationsViews
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView725()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.ApplicationsViews", @"
    SELECT VALUE -- Constructing ApplicationsViews
        [NKD.Module.BusinessObjects.ApplicationsView](T1.ApplicationsView_ApplicationName, T1.ApplicationsView_LoweredApplicationName, T1.ApplicationsView_ApplicationId, T1.ApplicationsView_Description)
    FROM (
        SELECT 
            T.ApplicationName AS ApplicationsView_ApplicationName, 
            T.LoweredApplicationName AS ApplicationsView_LoweredApplicationName, 
            T.ApplicationId AS ApplicationsView_ApplicationId, 
            T.Description AS ApplicationsView_Description, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.vw_aspnet_Applications AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.vw_aspnet_MembershipUsers
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView726()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3210);
            viewString.Append("\r\n    SELECT VALUE -- Constructing vw_aspnet_MembershipUsers\r\n        [NKD.Modul");
            viewString.Append("e.BusinessObjects.Store.vw_aspnet_MembershipUsers](T1.[vw_aspnet_MembershipUsers");
            viewString.Append(".UserId], T1.[vw_aspnet_MembershipUsers.PasswordFormat], T1.[vw_aspnet_Membershi");
            viewString.Append("pUsers.MobilePIN], T1.[vw_aspnet_MembershipUsers.Email], T1.[vw_aspnet_Membershi");
            viewString.Append("pUsers.LoweredEmail], T1.[vw_aspnet_MembershipUsers.PasswordQuestion], T1.[vw_as");
            viewString.Append("pnet_MembershipUsers.PasswordAnswer], T1.[vw_aspnet_MembershipUsers.IsApproved],");
            viewString.Append(" T1.[vw_aspnet_MembershipUsers.IsLockedOut], T1.[vw_aspnet_MembershipUsers.Creat");
            viewString.Append("eDate], T1.[vw_aspnet_MembershipUsers.LastLoginDate], T1.[vw_aspnet_MembershipUs");
            viewString.Append("ers.LastPasswordChangedDate], T1.[vw_aspnet_MembershipUsers.LastLockoutDate], T1");
            viewString.Append(".[vw_aspnet_MembershipUsers.FailedPasswordAttemptCount], T1.[vw_aspnet_Membershi");
            viewString.Append("pUsers.FailedPasswordAttemptWindowStart], T1.[vw_aspnet_MembershipUsers.FailedPa");
            viewString.Append("sswordAnswerAttemptCount], T1.[vw_aspnet_MembershipUsers.FailedPasswordAnswerAtt");
            viewString.Append("emptWindowStart], T1.[vw_aspnet_MembershipUsers.Comment], T1.[vw_aspnet_Membersh");
            viewString.Append("ipUsers.ApplicationId], T1.[vw_aspnet_MembershipUsers.UserName], T1.[vw_aspnet_M");
            viewString.Append("embershipUsers.MobileAlias], T1.[vw_aspnet_MembershipUsers.IsAnonymous], T1.[vw_");
            viewString.Append("aspnet_MembershipUsers.LastActivityDate])\r\n    FROM (\r\n        SELECT \r\n        ");
            viewString.Append("    T.UserId AS [vw_aspnet_MembershipUsers.UserId], \r\n            T.PasswordForm");
            viewString.Append("at AS [vw_aspnet_MembershipUsers.PasswordFormat], \r\n            T.MobilePIN AS [");
            viewString.Append("vw_aspnet_MembershipUsers.MobilePIN], \r\n            T.Email AS [vw_aspnet_Member");
            viewString.Append("shipUsers.Email], \r\n            T.LoweredEmail AS [vw_aspnet_MembershipUsers.Low");
            viewString.Append("eredEmail], \r\n            T.PasswordQuestion AS [vw_aspnet_MembershipUsers.Passw");
            viewString.Append("ordQuestion], \r\n            T.PasswordAnswer AS [vw_aspnet_MembershipUsers.Passw");
            viewString.Append("ordAnswer], \r\n            T.IsApproved AS [vw_aspnet_MembershipUsers.IsApproved]");
            viewString.Append(", \r\n            T.IsLockedOut AS [vw_aspnet_MembershipUsers.IsLockedOut], \r\n    ");
            viewString.Append("        T.CreateDate AS [vw_aspnet_MembershipUsers.CreateDate], \r\n            T.");
            viewString.Append("LastLoginDate AS [vw_aspnet_MembershipUsers.LastLoginDate], \r\n            T.Last");
            viewString.Append("PasswordChangedDate AS [vw_aspnet_MembershipUsers.LastPasswordChangedDate], \r\n  ");
            viewString.Append("          T.LastLockoutDate AS [vw_aspnet_MembershipUsers.LastLockoutDate], \r\n  ");
            viewString.Append("          T.FailedPasswordAttemptCount AS [vw_aspnet_MembershipUsers.FailedPassw");
            viewString.Append("ordAttemptCount], \r\n            T.FailedPasswordAttemptWindowStart AS [vw_aspnet");
            viewString.Append("_MembershipUsers.FailedPasswordAttemptWindowStart], \r\n            T.FailedPasswo");
            viewString.Append("rdAnswerAttemptCount AS [vw_aspnet_MembershipUsers.FailedPasswordAnswerAttemptCo");
            viewString.Append("unt], \r\n            T.FailedPasswordAnswerAttemptWindowStart AS [vw_aspnet_Membe");
            viewString.Append("rshipUsers.FailedPasswordAnswerAttemptWindowStart], \r\n            T.Comment AS [");
            viewString.Append("vw_aspnet_MembershipUsers.Comment], \r\n            T.ApplicationId AS [vw_aspnet_");
            viewString.Append("MembershipUsers.ApplicationId], \r\n            T.UserName AS [vw_aspnet_Membershi");
            viewString.Append("pUsers.UserName], \r\n            T.MobileAlias AS [vw_aspnet_MembershipUsers.Mobi");
            viewString.Append("leAlias], \r\n            T.IsAnonymous AS [vw_aspnet_MembershipUsers.IsAnonymous]");
            viewString.Append(", \r\n            T.LastActivityDate AS [vw_aspnet_MembershipUsers.LastActivityDat");
            viewString.Append("e], \r\n            True AS _from0\r\n        FROM NKDC.MembershipUsersViews AS T\r\n ");
            viewString.Append("   ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.vw_aspnet_MembershipUsers", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.MembershipUsersViews
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView727()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2864);
            viewString.Append("\r\n    SELECT VALUE -- Constructing MembershipUsersViews\r\n        [NKD.Module.Bus");
            viewString.Append("inessObjects.MembershipUsersView](T1.MembershipUsersView_UserId, T1.MembershipUs");
            viewString.Append("ersView_PasswordFormat, T1.MembershipUsersView_MobilePIN, T1.MembershipUsersView");
            viewString.Append("_Email, T1.MembershipUsersView_LoweredEmail, T1.MembershipUsersView_PasswordQues");
            viewString.Append("tion, T1.MembershipUsersView_PasswordAnswer, T1.MembershipUsersView_IsApproved, ");
            viewString.Append("T1.MembershipUsersView_IsLockedOut, T1.MembershipUsersView_CreateDate, T1.Member");
            viewString.Append("shipUsersView_LastLoginDate, T1.MembershipUsersView_LastPasswordChangedDate, T1.");
            viewString.Append("MembershipUsersView_LastLockoutDate, T1.MembershipUsersView_FailedPasswordAttemp");
            viewString.Append("tCount, T1.MembershipUsersView_FailedPasswordAttemptWindowStart, T1.MembershipUs");
            viewString.Append("ersView_FailedPasswordAnswerAttemptCount, T1.MembershipUsersView_FailedPasswordA");
            viewString.Append("nswerAttemptWindowStart, T1.MembershipUsersView_Comment, T1.MembershipUsersView_");
            viewString.Append("ApplicationId, T1.MembershipUsersView_UserName, T1.MembershipUsersView_MobileAli");
            viewString.Append("as, T1.MembershipUsersView_IsAnonymous, T1.MembershipUsersView_LastActivityDate)");
            viewString.Append("\r\n    FROM (\r\n        SELECT \r\n            T.UserId AS MembershipUsersView_UserI");
            viewString.Append("d, \r\n            T.PasswordFormat AS MembershipUsersView_PasswordFormat, \r\n     ");
            viewString.Append("       T.MobilePIN AS MembershipUsersView_MobilePIN, \r\n            T.Email AS Me");
            viewString.Append("mbershipUsersView_Email, \r\n            T.LoweredEmail AS MembershipUsersView_Low");
            viewString.Append("eredEmail, \r\n            T.PasswordQuestion AS MembershipUsersView_PasswordQuest");
            viewString.Append("ion, \r\n            T.PasswordAnswer AS MembershipUsersView_PasswordAnswer, \r\n   ");
            viewString.Append("         T.IsApproved AS MembershipUsersView_IsApproved, \r\n            T.IsLocke");
            viewString.Append("dOut AS MembershipUsersView_IsLockedOut, \r\n            T.CreateDate AS Membershi");
            viewString.Append("pUsersView_CreateDate, \r\n            T.LastLoginDate AS MembershipUsersView_Last");
            viewString.Append("LoginDate, \r\n            T.LastPasswordChangedDate AS MembershipUsersView_LastPa");
            viewString.Append("sswordChangedDate, \r\n            T.LastLockoutDate AS MembershipUsersView_LastLo");
            viewString.Append("ckoutDate, \r\n            T.FailedPasswordAttemptCount AS MembershipUsersView_Fai");
            viewString.Append("ledPasswordAttemptCount, \r\n            T.FailedPasswordAttemptWindowStart AS Mem");
            viewString.Append("bershipUsersView_FailedPasswordAttemptWindowStart, \r\n            T.FailedPasswor");
            viewString.Append("dAnswerAttemptCount AS MembershipUsersView_FailedPasswordAnswerAttemptCount, \r\n ");
            viewString.Append("           T.FailedPasswordAnswerAttemptWindowStart AS MembershipUsersView_Faile");
            viewString.Append("dPasswordAnswerAttemptWindowStart, \r\n            T.Comment AS MembershipUsersVie");
            viewString.Append("w_Comment, \r\n            T.ApplicationId AS MembershipUsersView_ApplicationId, \r");
            viewString.Append("\n            T.UserName AS MembershipUsersView_UserName, \r\n            T.MobileA");
            viewString.Append("lias AS MembershipUsersView_MobileAlias, \r\n            T.IsAnonymous AS Membersh");
            viewString.Append("ipUsersView_IsAnonymous, \r\n            T.LastActivityDate AS MembershipUsersView");
            viewString.Append("_LastActivityDate, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessO");
            viewString.Append("bjectsStoreContainer.vw_aspnet_MembershipUsers AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.MembershipUsersViews", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.vw_aspnet_Profiles
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView728()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.vw_aspnet_Profiles", @"
    SELECT VALUE -- Constructing vw_aspnet_Profiles
        [NKD.Module.BusinessObjects.Store.vw_aspnet_Profiles](T1.[vw_aspnet_Profiles.UserId], T1.[vw_aspnet_Profiles.LastUpdatedDate], T1.[vw_aspnet_Profiles.DataSize])
    FROM (
        SELECT 
            T.UserId AS [vw_aspnet_Profiles.UserId], 
            T.LastUpdatedDate AS [vw_aspnet_Profiles.LastUpdatedDate], 
            T.DataSize AS [vw_aspnet_Profiles.DataSize], 
            True AS _from0
        FROM NKDC.ProfilesViews AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.ProfilesViews
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView729()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.ProfilesViews", @"
    SELECT VALUE -- Constructing ProfilesViews
        [NKD.Module.BusinessObjects.ProfilesView](T1.ProfilesView_UserId, T1.ProfilesView_LastUpdatedDate, T1.ProfilesView_DataSize)
    FROM (
        SELECT 
            T.UserId AS ProfilesView_UserId, 
            T.LastUpdatedDate AS ProfilesView_LastUpdatedDate, 
            T.DataSize AS ProfilesView_DataSize, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.vw_aspnet_Profiles AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.vw_aspnet_Roles
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView730()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.vw_aspnet_Roles", @"
    SELECT VALUE -- Constructing vw_aspnet_Roles
        [NKD.Module.BusinessObjects.Store.vw_aspnet_Roles](T1.[vw_aspnet_Roles.ApplicationId], T1.[vw_aspnet_Roles.RoleId], T1.[vw_aspnet_Roles.RoleName], T1.[vw_aspnet_Roles.LoweredRoleName], T1.[vw_aspnet_Roles.Description])
    FROM (
        SELECT 
            T.ApplicationId AS [vw_aspnet_Roles.ApplicationId], 
            T.RoleId AS [vw_aspnet_Roles.RoleId], 
            T.RoleName AS [vw_aspnet_Roles.RoleName], 
            T.LoweredRoleName AS [vw_aspnet_Roles.LoweredRoleName], 
            T.Description AS [vw_aspnet_Roles.Description], 
            True AS _from0
        FROM NKDC.RolesViews AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.RolesViews
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView731()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.RolesViews", @"
    SELECT VALUE -- Constructing RolesViews
        [NKD.Module.BusinessObjects.RolesView](T1.RolesView_ApplicationId, T1.RolesView_RoleId, T1.RolesView_RoleName, T1.RolesView_LoweredRoleName, T1.RolesView_Description)
    FROM (
        SELECT 
            T.ApplicationId AS RolesView_ApplicationId, 
            T.RoleId AS RolesView_RoleId, 
            T.RoleName AS RolesView_RoleName, 
            T.LoweredRoleName AS RolesView_LoweredRoleName, 
            T.Description AS RolesView_Description, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.vw_aspnet_Roles AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.vw_aspnet_Users
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView732()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.vw_aspnet_Users", @"
    SELECT VALUE -- Constructing vw_aspnet_Users
        [NKD.Module.BusinessObjects.Store.vw_aspnet_Users](T1.[vw_aspnet_Users.ApplicationId], T1.[vw_aspnet_Users.UserId], T1.[vw_aspnet_Users.UserName], T1.[vw_aspnet_Users.LoweredUserName], T1.[vw_aspnet_Users.MobileAlias], T1.[vw_aspnet_Users.IsAnonymous], T1.[vw_aspnet_Users.LastActivityDate])
    FROM (
        SELECT 
            T.ApplicationId AS [vw_aspnet_Users.ApplicationId], 
            T.UserId AS [vw_aspnet_Users.UserId], 
            T.UserName AS [vw_aspnet_Users.UserName], 
            T.LoweredUserName AS [vw_aspnet_Users.LoweredUserName], 
            T.MobileAlias AS [vw_aspnet_Users.MobileAlias], 
            T.IsAnonymous AS [vw_aspnet_Users.IsAnonymous], 
            T.LastActivityDate AS [vw_aspnet_Users.LastActivityDate], 
            True AS _from0
        FROM NKDC.UsersViews AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.UsersViews
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView733()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.UsersViews", @"
    SELECT VALUE -- Constructing UsersViews
        [NKD.Module.BusinessObjects.UsersView](T1.UsersView_ApplicationId, T1.UsersView_UserId, T1.UsersView_UserName, T1.UsersView_LoweredUserName, T1.UsersView_MobileAlias, T1.UsersView_IsAnonymous, T1.UsersView_LastActivityDate)
    FROM (
        SELECT 
            T.ApplicationId AS UsersView_ApplicationId, 
            T.UserId AS UsersView_UserId, 
            T.UserName AS UsersView_UserName, 
            T.LoweredUserName AS UsersView_LoweredUserName, 
            T.MobileAlias AS UsersView_MobileAlias, 
            T.IsAnonymous AS UsersView_IsAnonymous, 
            T.LastActivityDate AS UsersView_LastActivityDate, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.vw_aspnet_Users AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.vw_aspnet_UsersInRoles
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView734()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.vw_aspnet_UsersInRoles", @"
    SELECT VALUE -- Constructing vw_aspnet_UsersInRoles
        [NKD.Module.BusinessObjects.Store.vw_aspnet_UsersInRoles](T1.[vw_aspnet_UsersInRoles.UserId], T1.[vw_aspnet_UsersInRoles.RoleId])
    FROM (
        SELECT 
            T.UserId AS [vw_aspnet_UsersInRoles.UserId], 
            T.RoleId AS [vw_aspnet_UsersInRoles.RoleId], 
            True AS _from0
        FROM NKDC.UsersInRolesViews AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.UsersInRolesViews
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView735()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.UsersInRolesViews", @"
    SELECT VALUE -- Constructing UsersInRolesViews
        [NKD.Module.BusinessObjects.UsersInRolesView](T1.UsersInRolesView_UserId, T1.UsersInRolesView_RoleId)
    FROM (
        SELECT 
            T.UserId AS UsersInRolesView_UserId, 
            T.RoleId AS UsersInRolesView_RoleId, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.vw_aspnet_UsersInRoles AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.vw_aspnet_WebPartState_Paths
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView736()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.vw_aspnet_WebPartState_Paths", @"
    SELECT VALUE -- Constructing vw_aspnet_WebPartState_Paths
        [NKD.Module.BusinessObjects.Store.vw_aspnet_WebPartState_Paths](T1.[vw_aspnet_WebPartState_Paths.ApplicationId], T1.[vw_aspnet_WebPartState_Paths.PathId], T1.[vw_aspnet_WebPartState_Paths.Path], T1.[vw_aspnet_WebPartState_Paths.LoweredPath])
    FROM (
        SELECT 
            T.ApplicationId AS [vw_aspnet_WebPartState_Paths.ApplicationId], 
            T.PathId AS [vw_aspnet_WebPartState_Paths.PathId], 
            T.Path AS [vw_aspnet_WebPartState_Paths.Path], 
            T.LoweredPath AS [vw_aspnet_WebPartState_Paths.LoweredPath], 
            True AS _from0
        FROM NKDC.WebPartState_PathsView AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.WebPartState_PathsView
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView737()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.WebPartState_PathsView", @"
    SELECT VALUE -- Constructing WebPartState_PathsView
        [NKD.Module.BusinessObjects.WebPartState_PathsView](T1.[WebPartState_PathsView.ApplicationId], T1.[WebPartState_PathsView.PathId], T1.[WebPartState_PathsView.Path], T1.[WebPartState_PathsView.LoweredPath])
    FROM (
        SELECT 
            T.ApplicationId AS [WebPartState_PathsView.ApplicationId], 
            T.PathId AS [WebPartState_PathsView.PathId], 
            T.Path AS [WebPartState_PathsView.Path], 
            T.LoweredPath AS [WebPartState_PathsView.LoweredPath], 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.vw_aspnet_WebPartState_Paths AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.vw_aspnet_WebPartState_Shared
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView738()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.vw_aspnet_WebPartState_Shared", @"
    SELECT VALUE -- Constructing vw_aspnet_WebPartState_Shared
        [NKD.Module.BusinessObjects.Store.vw_aspnet_WebPartState_Shared](T1.[vw_aspnet_WebPartState_Shared.PathId], T1.[vw_aspnet_WebPartState_Shared.DataSize], T1.[vw_aspnet_WebPartState_Shared.LastUpdatedDate])
    FROM (
        SELECT 
            T.PathId AS [vw_aspnet_WebPartState_Shared.PathId], 
            T.DataSize AS [vw_aspnet_WebPartState_Shared.DataSize], 
            T.LastUpdatedDate AS [vw_aspnet_WebPartState_Shared.LastUpdatedDate], 
            True AS _from0
        FROM NKDC.WebPartState_SharedView AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.WebPartState_SharedView
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView739()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.WebPartState_SharedView", @"
    SELECT VALUE -- Constructing WebPartState_SharedView
        [NKD.Module.BusinessObjects.WebPartState_SharedView](T1.[WebPartState_SharedView.PathId], T1.[WebPartState_SharedView.DataSize], T1.[WebPartState_SharedView.LastUpdatedDate])
    FROM (
        SELECT 
            T.PathId AS [WebPartState_SharedView.PathId], 
            T.DataSize AS [WebPartState_SharedView.DataSize], 
            T.LastUpdatedDate AS [WebPartState_SharedView.LastUpdatedDate], 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.vw_aspnet_WebPartState_Shared AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.vw_aspnet_WebPartState_User
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView740()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.vw_aspnet_WebPartState_User", @"
    SELECT VALUE -- Constructing vw_aspnet_WebPartState_User
        [NKD.Module.BusinessObjects.Store.vw_aspnet_WebPartState_User](T1.[vw_aspnet_WebPartState_User.PathId], T1.[vw_aspnet_WebPartState_User.UserId], T1.[vw_aspnet_WebPartState_User.DataSize], T1.[vw_aspnet_WebPartState_User.LastUpdatedDate])
    FROM (
        SELECT 
            T.PathId AS [vw_aspnet_WebPartState_User.PathId], 
            T.UserId AS [vw_aspnet_WebPartState_User.UserId], 
            T.DataSize AS [vw_aspnet_WebPartState_User.DataSize], 
            T.LastUpdatedDate AS [vw_aspnet_WebPartState_User.LastUpdatedDate], 
            True AS _from0
        FROM NKDC.WebPartState_UserView AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.WebPartState_UserView
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView741()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.WebPartState_UserView", @"
    SELECT VALUE -- Constructing WebPartState_UserView
        [NKD.Module.BusinessObjects.WebPartState_UserView](T1.[WebPartState_UserView.PathId], T1.[WebPartState_UserView.UserId], T1.[WebPartState_UserView.DataSize], T1.[WebPartState_UserView.LastUpdatedDate])
    FROM (
        SELECT 
            T.PathId AS [WebPartState_UserView.PathId], 
            T.UserId AS [WebPartState_UserView.UserId], 
            T.DataSize AS [WebPartState_UserView.DataSize], 
            T.LastUpdatedDate AS [WebPartState_UserView.LastUpdatedDate], 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.vw_aspnet_WebPartState_User AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_VW_Company
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView742()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_VW_Company", @"
    SELECT VALUE -- Constructing X_VW_Company
        [NKD.Module.BusinessObjects.Store.X_VW_Company](T1.[X_VW_Company.CompanyID], T1.[X_VW_Company.CompanyName], T1.[X_VW_Company.ParentCompanyID])
    FROM (
        SELECT 
            T.CompanyID AS [X_VW_Company.CompanyID], 
            T.CompanyName AS [X_VW_Company.CompanyName], 
            T.ParentCompanyID AS [X_VW_Company.ParentCompanyID], 
            True AS _from0
        FROM NKDC.CompanyViews AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.CompanyViews
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView743()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.CompanyViews", @"
    SELECT VALUE -- Constructing CompanyViews
        [NKD.Module.BusinessObjects.CompanyView](T1.CompanyView_CompanyID, T1.CompanyView_CompanyName, T1.CompanyView_ParentCompanyID)
    FROM (
        SELECT 
            T.CompanyID AS CompanyView_CompanyID, 
            T.CompanyName AS CompanyView_CompanyName, 
            T.ParentCompanyID AS CompanyView_ParentCompanyID, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_VW_Company AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_VW_DictionaryHeader
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView744()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_VW_DictionaryHeader", @"
    SELECT VALUE -- Constructing X_VW_DictionaryHeader
        [NKD.Module.BusinessObjects.Store.X_VW_DictionaryHeader](T1.[X_VW_DictionaryHeader.HeaderID], T1.[X_VW_DictionaryHeader.HoleName])
    FROM (
        SELECT 
            T.HeaderID AS [X_VW_DictionaryHeader.HeaderID], 
            T.HoleName AS [X_VW_DictionaryHeader.HoleName], 
            True AS _from0
        FROM NKDC.DictionaryHeaderViews AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryHeaderViews
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView745()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryHeaderViews", @"
    SELECT VALUE -- Constructing DictionaryHeaderViews
        [NKD.Module.BusinessObjects.DictionaryHeaderView](T1.DictionaryHeaderView_HeaderID, T1.DictionaryHeaderView_HoleName)
    FROM (
        SELECT 
            T.HeaderID AS DictionaryHeaderView_HeaderID, 
            T.HoleName AS DictionaryHeaderView_HoleName, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_VW_DictionaryHeader AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_VW_ExperienceBasicView
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView746()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3843);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_VW_ExperienceBasicView\r\n        [NKD.Module");
            viewString.Append(".BusinessObjects.Store.X_VW_ExperienceBasicView](T1.[X_VW_ExperienceBasicView.Co");
            viewString.Append("ntactName], T1.[X_VW_ExperienceBasicView.Title], T1.[X_VW_ExperienceBasicView.Su");
            viewString.Append("rname], T1.[X_VW_ExperienceBasicView.Firstname], T1.[X_VW_ExperienceBasicView.Ex");
            viewString.Append("perienceName], T1.[X_VW_ExperienceBasicView.LocationID], T1.[X_VW_ExperienceBasi");
            viewString.Append("cView.LatitudeWGS84], T1.[X_VW_ExperienceBasicView.LongitudeWGS84], T1.[X_VW_Exp");
            viewString.Append("erienceBasicView.DefaultLocationName], T1.[X_VW_ExperienceBasicView.DateStart], ");
            viewString.Append("T1.[X_VW_ExperienceBasicView.DateFinished], T1.[X_VW_ExperienceBasicView.Comment");
            viewString.Append("], T1.[X_VW_ExperienceBasicView.LocationGeography], T1.[X_VW_ExperienceBasicView");
            viewString.Append(".StandardCountryName], T1.[X_VW_ExperienceBasicView.ProjectName], T1.[X_VW_Exper");
            viewString.Append("ienceBasicView.ProvinceID], T1.[X_VW_ExperienceBasicView.WorkTypeID], T1.[X_VW_E");
            viewString.Append("xperienceBasicView.PositionID], T1.[X_VW_ExperienceBasicView.ProfessionID], T1.[");
            viewString.Append("X_VW_ExperienceBasicView.ContactID], T1.[X_VW_ExperienceBasicView.ProjectID], T1");
            viewString.Append(".[X_VW_ExperienceBasicView.ExperienceID], T1.[X_VW_ExperienceBasicView.Experienc");
            viewString.Append("eGroupID], T1.[X_VW_ExperienceBasicView.CompanyID], T1.[X_VW_ExperienceBasicView");
            viewString.Append(".WorkTypeName], T1.[X_VW_ExperienceBasicView.WorkTypeDescription], T1.[X_VW_Expe");
            viewString.Append("rienceBasicView.FullDescription], T1.[X_VW_ExperienceBasicView.WorkTypeClassName");
            viewString.Append("], T1.[X_VW_ExperienceBasicView.WorkTypeClassDescription], T1.[X_VW_ExperienceBa");
            viewString.Append("sicView.WorkTypeClassFullDescription])\r\n    FROM (\r\n        SELECT \r\n           ");
            viewString.Append(" T.ContactName AS [X_VW_ExperienceBasicView.ContactName], \r\n            T.Title ");
            viewString.Append("AS [X_VW_ExperienceBasicView.Title], \r\n            T.Surname AS [X_VW_Experience");
            viewString.Append("BasicView.Surname], \r\n            T.Firstname AS [X_VW_ExperienceBasicView.First");
            viewString.Append("name], \r\n            T.ExperienceName AS [X_VW_ExperienceBasicView.ExperienceNam");
            viewString.Append("e], \r\n            T.LocationID AS [X_VW_ExperienceBasicView.LocationID], \r\n     ");
            viewString.Append("       T.LatitudeWGS84 AS [X_VW_ExperienceBasicView.LatitudeWGS84], \r\n          ");
            viewString.Append("  T.LongitudeWGS84 AS [X_VW_ExperienceBasicView.LongitudeWGS84], \r\n            T");
            viewString.Append(".DefaultLocationName AS [X_VW_ExperienceBasicView.DefaultLocationName], \r\n      ");
            viewString.Append("      T.DateStart AS [X_VW_ExperienceBasicView.DateStart], \r\n            T.DateF");
            viewString.Append("inished AS [X_VW_ExperienceBasicView.DateFinished], \r\n            T.Comment AS [");
            viewString.Append("X_VW_ExperienceBasicView.Comment], \r\n            T.LocationGeography AS [X_VW_Ex");
            viewString.Append("perienceBasicView.LocationGeography], \r\n            T.StandardCountryName AS [X_");
            viewString.Append("VW_ExperienceBasicView.StandardCountryName], \r\n            T.ProjectName AS [X_V");
            viewString.Append("W_ExperienceBasicView.ProjectName], \r\n            T.ProvinceID AS [X_VW_Experien");
            viewString.Append("ceBasicView.ProvinceID], \r\n            T.WorkTypeID AS [X_VW_ExperienceBasicView");
            viewString.Append(".WorkTypeID], \r\n            T.PositionID AS [X_VW_ExperienceBasicView.PositionID");
            viewString.Append("], \r\n            T.ProfessionID AS [X_VW_ExperienceBasicView.ProfessionID], \r\n  ");
            viewString.Append("          T.ContactID AS [X_VW_ExperienceBasicView.ContactID], \r\n            T.P");
            viewString.Append("rojectID AS [X_VW_ExperienceBasicView.ProjectID], \r\n            T.ExperienceID A");
            viewString.Append("S [X_VW_ExperienceBasicView.ExperienceID], \r\n            T.ExperienceGroupID AS ");
            viewString.Append("[X_VW_ExperienceBasicView.ExperienceGroupID], \r\n            T.CompanyID AS [X_VW");
            viewString.Append("_ExperienceBasicView.CompanyID], \r\n            T.WorkTypeName AS [X_VW_Experienc");
            viewString.Append("eBasicView.WorkTypeName], \r\n            T.WorkTypeDescription AS [X_VW_Experienc");
            viewString.Append("eBasicView.WorkTypeDescription], \r\n            T.FullDescription AS [X_VW_Experi");
            viewString.Append("enceBasicView.FullDescription], \r\n            T.WorkTypeClassName AS [X_VW_Exper");
            viewString.Append("ienceBasicView.WorkTypeClassName], \r\n            T.WorkTypeClassDescription AS [");
            viewString.Append("X_VW_ExperienceBasicView.WorkTypeClassDescription], \r\n            T.WorkTypeClas");
            viewString.Append("sFullDescription AS [X_VW_ExperienceBasicView.WorkTypeClassFullDescription], \r\n ");
            viewString.Append("           True AS _from0\r\n        FROM NKDC.ExperienceBasicViews AS T\r\n    ) AS");
            viewString.Append(" T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_VW_ExperienceBasicView", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.ExperienceBasicViews
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView747()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3446);
            viewString.Append("\r\n    SELECT VALUE -- Constructing ExperienceBasicViews\r\n        [NKD.Module.Bus");
            viewString.Append("inessObjects.ExperienceBasicView](T1.ExperienceBasicView_ContactName, T1.Experie");
            viewString.Append("nceBasicView_Title, T1.ExperienceBasicView_Surname, T1.ExperienceBasicView_First");
            viewString.Append("name, T1.ExperienceBasicView_ExperienceName, T1.ExperienceBasicView_LocationID, ");
            viewString.Append("T1.ExperienceBasicView_LatitudeWGS84, T1.ExperienceBasicView_LongitudeWGS84, T1.");
            viewString.Append("ExperienceBasicView_DefaultLocationName, T1.ExperienceBasicView_DateStart, T1.Ex");
            viewString.Append("perienceBasicView_DateFinished, T1.ExperienceBasicView_Comment, T1.ExperienceBas");
            viewString.Append("icView_LocationGeography, T1.ExperienceBasicView_StandardCountryName, T1.Experie");
            viewString.Append("nceBasicView_ProjectName, T1.ExperienceBasicView_ProvinceID, T1.ExperienceBasicV");
            viewString.Append("iew_WorkTypeID, T1.ExperienceBasicView_PositionID, T1.ExperienceBasicView_Profes");
            viewString.Append("sionID, T1.ExperienceBasicView_ContactID, T1.ExperienceBasicView_ProjectID, T1.E");
            viewString.Append("xperienceBasicView_ExperienceID, T1.ExperienceBasicView_ExperienceGroupID, T1.Ex");
            viewString.Append("perienceBasicView_CompanyID, T1.ExperienceBasicView_WorkTypeName, T1.ExperienceB");
            viewString.Append("asicView_WorkTypeDescription, T1.ExperienceBasicView_FullDescription, T1.Experie");
            viewString.Append("nceBasicView_WorkTypeClassName, T1.ExperienceBasicView_WorkTypeClassDescription,");
            viewString.Append(" T1.ExperienceBasicView_WorkTypeClassFullDescription)\r\n    FROM (\r\n        SELEC");
            viewString.Append("T \r\n            T.ContactName AS ExperienceBasicView_ContactName, \r\n            ");
            viewString.Append("T.Title AS ExperienceBasicView_Title, \r\n            T.Surname AS ExperienceBasic");
            viewString.Append("View_Surname, \r\n            T.Firstname AS ExperienceBasicView_Firstname, \r\n    ");
            viewString.Append("        T.ExperienceName AS ExperienceBasicView_ExperienceName, \r\n            T.");
            viewString.Append("LocationID AS ExperienceBasicView_LocationID, \r\n            T.LatitudeWGS84 AS E");
            viewString.Append("xperienceBasicView_LatitudeWGS84, \r\n            T.LongitudeWGS84 AS ExperienceBa");
            viewString.Append("sicView_LongitudeWGS84, \r\n            T.DefaultLocationName AS ExperienceBasicVi");
            viewString.Append("ew_DefaultLocationName, \r\n            T.DateStart AS ExperienceBasicView_DateSta");
            viewString.Append("rt, \r\n            T.DateFinished AS ExperienceBasicView_DateFinished, \r\n        ");
            viewString.Append("    T.Comment AS ExperienceBasicView_Comment, \r\n            T.LocationGeography ");
            viewString.Append("AS ExperienceBasicView_LocationGeography, \r\n            T.StandardCountryName AS");
            viewString.Append(" ExperienceBasicView_StandardCountryName, \r\n            T.ProjectName AS Experie");
            viewString.Append("nceBasicView_ProjectName, \r\n            T.ProvinceID AS ExperienceBasicView_Prov");
            viewString.Append("inceID, \r\n            T.WorkTypeID AS ExperienceBasicView_WorkTypeID, \r\n        ");
            viewString.Append("    T.PositionID AS ExperienceBasicView_PositionID, \r\n            T.ProfessionID");
            viewString.Append(" AS ExperienceBasicView_ProfessionID, \r\n            T.ContactID AS ExperienceBas");
            viewString.Append("icView_ContactID, \r\n            T.ProjectID AS ExperienceBasicView_ProjectID, \r\n");
            viewString.Append("            T.ExperienceID AS ExperienceBasicView_ExperienceID, \r\n            T.");
            viewString.Append("ExperienceGroupID AS ExperienceBasicView_ExperienceGroupID, \r\n            T.Comp");
            viewString.Append("anyID AS ExperienceBasicView_CompanyID, \r\n            T.WorkTypeName AS Experien");
            viewString.Append("ceBasicView_WorkTypeName, \r\n            T.WorkTypeDescription AS ExperienceBasic");
            viewString.Append("View_WorkTypeDescription, \r\n            T.FullDescription AS ExperienceBasicView");
            viewString.Append("_FullDescription, \r\n            T.WorkTypeClassName AS ExperienceBasicView_WorkT");
            viewString.Append("ypeClassName, \r\n            T.WorkTypeClassDescription AS ExperienceBasicView_Wo");
            viewString.Append("rkTypeClassDescription, \r\n            T.WorkTypeClassFullDescription AS Experien");
            viewString.Append("ceBasicView_WorkTypeClassFullDescription, \r\n            True AS _from0\r\n        ");
            viewString.Append("FROM NKDModuleBusinessObjectsStoreContainer.X_VW_ExperienceBasicView AS T\r\n    )");
            viewString.Append(" AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.ExperienceBasicViews", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_VW_License
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView748()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(5530);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_VW_License\r\n        [NKD.Module.BusinessObj");
            viewString.Append("ects.Store.X_VW_License](T1.[X_VW_License.LicenseID], T1.[X_VW_License.CompanyID");
            viewString.Append("], T1.[X_VW_License.ContactID], T1.[X_VW_License.LicenseeGUID], T1.[X_VW_License");
            viewString.Append(".LicenseeName], T1.[X_VW_License.LicenseeUsername], T1.[X_VW_License.LicenseeUni");
            viewString.Append("queMachineCode1], T1.[X_VW_License.LicenseeUniqueMachineCode2], T1.[X_VW_License");
            viewString.Append(".LicenseeGroupID], T1.[X_VW_License.LicensorIP], T1.[X_VW_License.LicensorName],");
            viewString.Append(" T1.[X_VW_License.LicenseTypeID], T1.[X_VW_License.LicenseType], T1.[X_VW_Licens");
            viewString.Append("e.LicenseURL], T1.[X_VW_License.RootServerName], T1.[X_VW_License.RootServerID],");
            viewString.Append(" T1.[X_VW_License.ServerName], T1.[X_VW_License.ServerID], T1.[X_VW_License.Appl");
            viewString.Append("icationID], T1.[X_VW_License.ServiceAuthenticationMethod], T1.[X_VW_License.Serv");
            viewString.Append("iceAuthorisationMethod], T1.[X_VW_License.ValidFrom], T1.[X_VW_License.Expiry], ");
            viewString.Append("T1.[X_VW_License.SupportExpiry], T1.[X_VW_License.ValidForDuration], T1.[X_VW_Li");
            viewString.Append("cense.ValidForUnitID], T1.[X_VW_License.ValidForUnitTarget], T1.[X_VW_License.Ve");
            viewString.Append("rsionMajor], T1.[X_VW_License.VersionMinor], T1.[X_VW_License.VersionBuild], T1.");
            viewString.Append("[X_VW_License.SupportedToMajor], T1.[X_VW_License.SupportedToMinor], T1.[X_VW_Li");
            viewString.Append("cense.SupportedToBuild], T1.[X_VW_License.Nuked], T1.[X_VW_License.NukedReason],");
            viewString.Append(" T1.[X_VW_License.TimeServerID], T1.[X_VW_License.TimeServerName], T1.[X_VW_Lice");
            viewString.Append("nse.TimeServerResolutionMask], T1.[X_VW_License.TimeServerIP], T1.[X_VW_License.");
            viewString.Append("PreAuthorizationCode], T1.[X_VW_License.PreAuthorizationExecuted], T1.[X_VW_Lice");
            viewString.Append("nse.Signatory1], T1.[X_VW_License.Signatory2], T1.[X_VW_License.Signatory3], T1.");
            viewString.Append("[X_VW_License.Signature1], T1.[X_VW_License.Signature2], T1.[X_VW_License.Signat");
            viewString.Append("ure3], T1.[X_VW_License.Received], T1.[X_VW_License.CheckedIn], T1.[X_VW_License");
            viewString.Append(".LicenceeCertificate], T1.[X_VW_License.LicensorCertificate], T1.[X_VW_License.A");
            viewString.Append("ssets], T1.[X_VW_License.Parts], T1.[X_VW_License.ChecksumType], T1.[X_VW_Licens");
            viewString.Append("e.Checksum])\r\n    FROM (\r\n        SELECT \r\n            T.LicenseID AS [X_VW_Lice");
            viewString.Append("nse.LicenseID], \r\n            T.CompanyID AS [X_VW_License.CompanyID], \r\n       ");
            viewString.Append("     T.ContactID AS [X_VW_License.ContactID], \r\n            T.LicenseeGUID AS [X");
            viewString.Append("_VW_License.LicenseeGUID], \r\n            T.LicenseeName AS [X_VW_License.License");
            viewString.Append("eName], \r\n            T.LicenseeUsername AS [X_VW_License.LicenseeUsername], \r\n ");
            viewString.Append("           T.LicenseeUniqueMachineCode1 AS [X_VW_License.LicenseeUniqueMachineCo");
            viewString.Append("de1], \r\n            T.LicenseeUniqueMachineCode2 AS [X_VW_License.LicenseeUnique");
            viewString.Append("MachineCode2], \r\n            T.LicenseeGroupID AS [X_VW_License.LicenseeGroupID]");
            viewString.Append(", \r\n            T.LicensorIP AS [X_VW_License.LicensorIP], \r\n            T.Licen");
            viewString.Append("sorName AS [X_VW_License.LicensorName], \r\n            T.LicenseTypeID AS [X_VW_L");
            viewString.Append("icense.LicenseTypeID], \r\n            T.LicenseType AS [X_VW_License.LicenseType]");
            viewString.Append(", \r\n            T.LicenseURL AS [X_VW_License.LicenseURL], \r\n            T.RootS");
            viewString.Append("erverName AS [X_VW_License.RootServerName], \r\n            T.RootServerID AS [X_V");
            viewString.Append("W_License.RootServerID], \r\n            T.ServerName AS [X_VW_License.ServerName]");
            viewString.Append(", \r\n            T.ServerID AS [X_VW_License.ServerID], \r\n            T.Applicati");
            viewString.Append("onID AS [X_VW_License.ApplicationID], \r\n            T.ServiceAuthenticationMetho");
            viewString.Append("d AS [X_VW_License.ServiceAuthenticationMethod], \r\n            T.ServiceAuthoris");
            viewString.Append("ationMethod AS [X_VW_License.ServiceAuthorisationMethod], \r\n            T.ValidF");
            viewString.Append("rom AS [X_VW_License.ValidFrom], \r\n            T.Expiry AS [X_VW_License.Expiry]");
            viewString.Append(", \r\n            T.SupportExpiry AS [X_VW_License.SupportExpiry], \r\n            T");
            viewString.Append(".ValidForDuration AS [X_VW_License.ValidForDuration], \r\n            T.ValidForUn");
            viewString.Append("itID AS [X_VW_License.ValidForUnitID], \r\n            T.ValidForUnitTarget AS [X_");
            viewString.Append("VW_License.ValidForUnitTarget], \r\n            T.VersionMajor AS [X_VW_License.Ve");
            viewString.Append("rsionMajor], \r\n            T.VersionMinor AS [X_VW_License.VersionMinor], \r\n    ");
            viewString.Append("        T.VersionBuild AS [X_VW_License.VersionBuild], \r\n            T.Supported");
            viewString.Append("ToMajor AS [X_VW_License.SupportedToMajor], \r\n            T.SupportedToMinor AS ");
            viewString.Append("[X_VW_License.SupportedToMinor], \r\n            T.SupportedToBuild AS [X_VW_Licen");
            viewString.Append("se.SupportedToBuild], \r\n            T.Nuked AS [X_VW_License.Nuked], \r\n         ");
            viewString.Append("   T.NukedReason AS [X_VW_License.NukedReason], \r\n            T.TimeServerID AS ");
            viewString.Append("[X_VW_License.TimeServerID], \r\n            T.TimeServerName AS [X_VW_License.Tim");
            viewString.Append("eServerName], \r\n            T.TimeServerResolutionMask AS [X_VW_License.TimeServ");
            viewString.Append("erResolutionMask], \r\n            T.TimeServerIP AS [X_VW_License.TimeServerIP], ");
            viewString.Append("\r\n            T.PreAuthorizationCode AS [X_VW_License.PreAuthorizationCode], \r\n ");
            viewString.Append("           T.PreAuthorizationExecuted AS [X_VW_License.PreAuthorizationExecuted]");
            viewString.Append(", \r\n            T.Signatory1 AS [X_VW_License.Signatory1], \r\n            T.Signa");
            viewString.Append("tory2 AS [X_VW_License.Signatory2], \r\n            T.Signatory3 AS [X_VW_License.");
            viewString.Append("Signatory3], \r\n            T.Signature1 AS [X_VW_License.Signature1], \r\n        ");
            viewString.Append("    T.Signature2 AS [X_VW_License.Signature2], \r\n            T.Signature3 AS [X_");
            viewString.Append("VW_License.Signature3], \r\n            T.Received AS [X_VW_License.Received], \r\n ");
            viewString.Append("           T.CheckedIn AS [X_VW_License.CheckedIn], \r\n            T.LicenceeCert");
            viewString.Append("ificate AS [X_VW_License.LicenceeCertificate], \r\n            T.LicensorCertifica");
            viewString.Append("te AS [X_VW_License.LicensorCertificate], \r\n            T.Assets AS [X_VW_Licens");
            viewString.Append("e.Assets], \r\n            T.Parts AS [X_VW_License.Parts], \r\n            T.Checks");
            viewString.Append("umType AS [X_VW_License.ChecksumType], \r\n            T.Checksum AS [X_VW_License");
            viewString.Append(".Checksum], \r\n            True AS _from0\r\n        FROM NKDC.LicenseViews AS T\r\n ");
            viewString.Append("   ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_VW_License", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.LicenseViews
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView749()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(5227);
            viewString.Append("\r\n    SELECT VALUE -- Constructing LicenseViews\r\n        [NKD.Module.BusinessObj");
            viewString.Append("ects.LicenseView](T1.LicenseView_LicenseID, T1.LicenseView_CompanyID, T1.License");
            viewString.Append("View_ContactID, T1.LicenseView_LicenseeGUID, T1.LicenseView_LicenseeName, T1.Lic");
            viewString.Append("enseView_LicenseeUsername, T1.LicenseView_LicenseeUniqueMachineCode1, T1.License");
            viewString.Append("View_LicenseeUniqueMachineCode2, T1.LicenseView_LicenseeGroupID, T1.LicenseView_");
            viewString.Append("LicensorIP, T1.LicenseView_LicensorName, T1.LicenseView_LicenseTypeID, T1.Licens");
            viewString.Append("eView_LicenseType, T1.LicenseView_LicenseURL, T1.LicenseView_RootServerName, T1.");
            viewString.Append("LicenseView_RootServerID, T1.LicenseView_ServerName, T1.LicenseView_ServerID, T1");
            viewString.Append(".LicenseView_ApplicationID, T1.LicenseView_ServiceAuthenticationMethod, T1.Licen");
            viewString.Append("seView_ServiceAuthorisationMethod, T1.LicenseView_ValidFrom, T1.LicenseView_Expi");
            viewString.Append("ry, T1.LicenseView_SupportExpiry, T1.LicenseView_ValidForDuration, T1.LicenseVie");
            viewString.Append("w_ValidForUnitID, T1.LicenseView_ValidForUnitTarget, T1.LicenseView_VersionMajor");
            viewString.Append(", T1.LicenseView_VersionMinor, T1.LicenseView_VersionBuild, T1.LicenseView_Suppo");
            viewString.Append("rtedToMajor, T1.LicenseView_SupportedToMinor, T1.LicenseView_SupportedToBuild, T");
            viewString.Append("1.LicenseView_Nuked, T1.LicenseView_NukedReason, T1.LicenseView_TimeServerID, T1");
            viewString.Append(".LicenseView_TimeServerName, T1.LicenseView_TimeServerResolutionMask, T1.License");
            viewString.Append("View_TimeServerIP, T1.LicenseView_PreAuthorizationCode, T1.LicenseView_PreAuthor");
            viewString.Append("izationExecuted, T1.LicenseView_Signatory1, T1.LicenseView_Signatory2, T1.Licens");
            viewString.Append("eView_Signatory3, T1.LicenseView_Signature1, T1.LicenseView_Signature2, T1.Licen");
            viewString.Append("seView_Signature3, T1.LicenseView_Received, T1.LicenseView_CheckedIn, T1.License");
            viewString.Append("View_LicenceeCertificate, T1.LicenseView_LicensorCertificate, T1.LicenseView_Ass");
            viewString.Append("ets, T1.LicenseView_Parts, T1.LicenseView_ChecksumType, T1.LicenseView_Checksum)");
            viewString.Append("\r\n    FROM (\r\n        SELECT \r\n            T.LicenseID AS LicenseView_LicenseID,");
            viewString.Append(" \r\n            T.CompanyID AS LicenseView_CompanyID, \r\n            T.ContactID A");
            viewString.Append("S LicenseView_ContactID, \r\n            T.LicenseeGUID AS LicenseView_LicenseeGUI");
            viewString.Append("D, \r\n            T.LicenseeName AS LicenseView_LicenseeName, \r\n            T.Lic");
            viewString.Append("enseeUsername AS LicenseView_LicenseeUsername, \r\n            T.LicenseeUniqueMac");
            viewString.Append("hineCode1 AS LicenseView_LicenseeUniqueMachineCode1, \r\n            T.LicenseeUni");
            viewString.Append("queMachineCode2 AS LicenseView_LicenseeUniqueMachineCode2, \r\n            T.Licen");
            viewString.Append("seeGroupID AS LicenseView_LicenseeGroupID, \r\n            T.LicensorIP AS License");
            viewString.Append("View_LicensorIP, \r\n            T.LicensorName AS LicenseView_LicensorName, \r\n   ");
            viewString.Append("         T.LicenseTypeID AS LicenseView_LicenseTypeID, \r\n            T.LicenseTy");
            viewString.Append("pe AS LicenseView_LicenseType, \r\n            T.LicenseURL AS LicenseView_License");
            viewString.Append("URL, \r\n            T.RootServerName AS LicenseView_RootServerName, \r\n           ");
            viewString.Append(" T.RootServerID AS LicenseView_RootServerID, \r\n            T.ServerName AS Licen");
            viewString.Append("seView_ServerName, \r\n            T.ServerID AS LicenseView_ServerID, \r\n         ");
            viewString.Append("   T.ApplicationID AS LicenseView_ApplicationID, \r\n            T.ServiceAuthenti");
            viewString.Append("cationMethod AS LicenseView_ServiceAuthenticationMethod, \r\n            T.Service");
            viewString.Append("AuthorisationMethod AS LicenseView_ServiceAuthorisationMethod, \r\n            T.V");
            viewString.Append("alidFrom AS LicenseView_ValidFrom, \r\n            T.Expiry AS LicenseView_Expiry,");
            viewString.Append(" \r\n            T.SupportExpiry AS LicenseView_SupportExpiry, \r\n            T.Val");
            viewString.Append("idForDuration AS LicenseView_ValidForDuration, \r\n            T.ValidForUnitID AS");
            viewString.Append(" LicenseView_ValidForUnitID, \r\n            T.ValidForUnitTarget AS LicenseView_V");
            viewString.Append("alidForUnitTarget, \r\n            T.VersionMajor AS LicenseView_VersionMajor, \r\n ");
            viewString.Append("           T.VersionMinor AS LicenseView_VersionMinor, \r\n            T.VersionBu");
            viewString.Append("ild AS LicenseView_VersionBuild, \r\n            T.SupportedToMajor AS LicenseView");
            viewString.Append("_SupportedToMajor, \r\n            T.SupportedToMinor AS LicenseView_SupportedToMi");
            viewString.Append("nor, \r\n            T.SupportedToBuild AS LicenseView_SupportedToBuild, \r\n       ");
            viewString.Append("     T.Nuked AS LicenseView_Nuked, \r\n            T.NukedReason AS LicenseView_Nu");
            viewString.Append("kedReason, \r\n            T.TimeServerID AS LicenseView_TimeServerID, \r\n         ");
            viewString.Append("   T.TimeServerName AS LicenseView_TimeServerName, \r\n            T.TimeServerRes");
            viewString.Append("olutionMask AS LicenseView_TimeServerResolutionMask, \r\n            T.TimeServerI");
            viewString.Append("P AS LicenseView_TimeServerIP, \r\n            T.PreAuthorizationCode AS LicenseVi");
            viewString.Append("ew_PreAuthorizationCode, \r\n            T.PreAuthorizationExecuted AS LicenseView");
            viewString.Append("_PreAuthorizationExecuted, \r\n            T.Signatory1 AS LicenseView_Signatory1,");
            viewString.Append(" \r\n            T.Signatory2 AS LicenseView_Signatory2, \r\n            T.Signatory");
            viewString.Append("3 AS LicenseView_Signatory3, \r\n            T.Signature1 AS LicenseView_Signature");
            viewString.Append("1, \r\n            T.Signature2 AS LicenseView_Signature2, \r\n            T.Signatu");
            viewString.Append("re3 AS LicenseView_Signature3, \r\n            T.Received AS LicenseView_Received,");
            viewString.Append(" \r\n            T.CheckedIn AS LicenseView_CheckedIn, \r\n            T.LicenceeCer");
            viewString.Append("tificate AS LicenseView_LicenceeCertificate, \r\n            T.LicensorCertificate");
            viewString.Append(" AS LicenseView_LicensorCertificate, \r\n            T.Assets AS LicenseView_Asset");
            viewString.Append("s, \r\n            T.Parts AS LicenseView_Parts, \r\n            T.ChecksumType AS L");
            viewString.Append("icenseView_ChecksumType, \r\n            T.Checksum AS LicenseView_Checksum, \r\n   ");
            viewString.Append("         True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_V");
            viewString.Append("W_License AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.LicenseViews", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_VW_ModelsCurrent
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView750()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_VW_ModelsCurrent", "\r\n    SELECT VALUE -- Constructing X_VW_ModelsCurrent\r\n        [NKD.Module.Busine" +
                    "ssObjects.Store.X_VW_ModelsCurrent](T1.[X_VW_ModelsCurrent.ProjectID], T1.[X_VW_" +
                    "ModelsCurrent.ProjectName], T1.[X_VW_ModelsCurrent.BlockModelID], T1.[X_VW_Model" +
                    "sCurrent.Alias], T1.[X_VW_ModelsCurrent.ModelStage], T1.[X_VW_ModelsCurrent.HasS" +
                    "ubcells], T1.[X_VW_ModelsCurrent.Filename], T1.[X_VW_ModelsCurrent.Comment], T1." +
                    "[X_VW_ModelsCurrent.Uploaded], T1.[X_VW_ModelsCurrent.Author], T1.[X_VW_ModelsCu" +
                    "rrent.AuthorName], T1.[X_VW_ModelsCurrent.Approver], T1.[X_VW_ModelsCurrent.Appr" +
                    "overName], T1.[X_VW_ModelsCurrent.ExternalReviewer], T1.[X_VW_ModelsCurrent.Exte" +
                    "rnalReviewerName])\r\n    FROM (\r\n        SELECT \r\n            T.ProjectID AS [X_V" +
                    "W_ModelsCurrent.ProjectID], \r\n            T.ProjectName AS [X_VW_ModelsCurrent.P" +
                    "rojectName], \r\n            T.BlockModelID AS [X_VW_ModelsCurrent.BlockModelID], " +
                    "\r\n            T.Alias AS [X_VW_ModelsCurrent.Alias], \r\n            T.ModelStage " +
                    "AS [X_VW_ModelsCurrent.ModelStage], \r\n            T.HasSubcells AS [X_VW_ModelsC" +
                    "urrent.HasSubcells], \r\n            T.Filename AS [X_VW_ModelsCurrent.Filename], " +
                    "\r\n            T.Comment AS [X_VW_ModelsCurrent.Comment], \r\n            T.Uploade" +
                    "d AS [X_VW_ModelsCurrent.Uploaded], \r\n            T.Author AS [X_VW_ModelsCurren" +
                    "t.Author], \r\n            T.AuthorName AS [X_VW_ModelsCurrent.AuthorName], \r\n    " +
                    "        T.Approver AS [X_VW_ModelsCurrent.Approver], \r\n            T.ApproverNam" +
                    "e AS [X_VW_ModelsCurrent.ApproverName], \r\n            T.ExternalReviewer AS [X_V" +
                    "W_ModelsCurrent.ExternalReviewer], \r\n            T.ExternalReviewerName AS [X_VW" +
                    "_ModelsCurrent.ExternalReviewerName], \r\n            True AS _from0\r\n        FROM" +
                    " NKDC.ModelsCurrentViews AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.ModelsCurrentViews
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView751()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.ModelsCurrentViews", "\r\n    SELECT VALUE -- Constructing ModelsCurrentViews\r\n        [NKD.Module.Busine" +
                    "ssObjects.ModelsCurrentView](T1.ModelsCurrentView_ProjectID, T1.ModelsCurrentVie" +
                    "w_ProjectName, T1.ModelsCurrentView_BlockModelID, T1.ModelsCurrentView_Alias, T1" +
                    ".ModelsCurrentView_ModelStage, T1.ModelsCurrentView_HasSubcells, T1.ModelsCurren" +
                    "tView_Filename, T1.ModelsCurrentView_Comment, T1.ModelsCurrentView_Uploaded, T1." +
                    "ModelsCurrentView_Author, T1.ModelsCurrentView_AuthorName, T1.ModelsCurrentView_" +
                    "Approver, T1.ModelsCurrentView_ApproverName, T1.ModelsCurrentView_ExternalReview" +
                    "er, T1.ModelsCurrentView_ExternalReviewerName)\r\n    FROM (\r\n        SELECT \r\n   " +
                    "         T.ProjectID AS ModelsCurrentView_ProjectID, \r\n            T.ProjectName" +
                    " AS ModelsCurrentView_ProjectName, \r\n            T.BlockModelID AS ModelsCurrent" +
                    "View_BlockModelID, \r\n            T.Alias AS ModelsCurrentView_Alias, \r\n         " +
                    "   T.ModelStage AS ModelsCurrentView_ModelStage, \r\n            T.HasSubcells AS " +
                    "ModelsCurrentView_HasSubcells, \r\n            T.Filename AS ModelsCurrentView_Fil" +
                    "ename, \r\n            T.Comment AS ModelsCurrentView_Comment, \r\n            T.Upl" +
                    "oaded AS ModelsCurrentView_Uploaded, \r\n            T.Author AS ModelsCurrentView" +
                    "_Author, \r\n            T.AuthorName AS ModelsCurrentView_AuthorName, \r\n         " +
                    "   T.Approver AS ModelsCurrentView_Approver, \r\n            T.ApproverName AS Mod" +
                    "elsCurrentView_ApproverName, \r\n            T.ExternalReviewer AS ModelsCurrentVi" +
                    "ew_ExternalReviewer, \r\n            T.ExternalReviewerName AS ModelsCurrentView_E" +
                    "xternalReviewerName, \r\n            True AS _from0\r\n        FROM NKDModuleBusines" +
                    "sObjectsStoreContainer.X_VW_ModelsCurrent AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_VW_ModelStatus
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView752()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_VW_ModelStatus", "\r\n    SELECT VALUE -- Constructing X_VW_ModelStatus\r\n        [NKD.Module.Business" +
                    "Objects.Store.X_VW_ModelStatus](T1.[X_VW_ModelStatus.ProjectID], T1.[X_VW_ModelS" +
                    "tatus.ProjectName], T1.[X_VW_ModelStatus.BlockModelID], T1.[X_VW_ModelStatus.Ali" +
                    "as], T1.[X_VW_ModelStatus.ModelStage], T1.[X_VW_ModelStatus.HasSubcells], T1.[X_" +
                    "VW_ModelStatus.Filename], T1.[X_VW_ModelStatus.Comment], T1.[X_VW_ModelStatus.Up" +
                    "loaded], T1.[X_VW_ModelStatus.Author], T1.[X_VW_ModelStatus.AuthorName], T1.[X_V" +
                    "W_ModelStatus.Approver], T1.[X_VW_ModelStatus.ApproverName], T1.[X_VW_ModelStatu" +
                    "s.ExternalReviewer], T1.[X_VW_ModelStatus.ExternalReviewerName])\r\n    FROM (\r\n  " +
                    "      SELECT \r\n            T.ProjectID AS [X_VW_ModelStatus.ProjectID], \r\n      " +
                    "      T.ProjectName AS [X_VW_ModelStatus.ProjectName], \r\n            T.BlockMode" +
                    "lID AS [X_VW_ModelStatus.BlockModelID], \r\n            T.Alias AS [X_VW_ModelStat" +
                    "us.Alias], \r\n            T.ModelStage AS [X_VW_ModelStatus.ModelStage], \r\n      " +
                    "      T.HasSubcells AS [X_VW_ModelStatus.HasSubcells], \r\n            T.Filename " +
                    "AS [X_VW_ModelStatus.Filename], \r\n            T.Comment AS [X_VW_ModelStatus.Com" +
                    "ment], \r\n            T.Uploaded AS [X_VW_ModelStatus.Uploaded], \r\n            T." +
                    "Author AS [X_VW_ModelStatus.Author], \r\n            T.AuthorName AS [X_VW_ModelSt" +
                    "atus.AuthorName], \r\n            T.Approver AS [X_VW_ModelStatus.Approver], \r\n   " +
                    "         T.ApproverName AS [X_VW_ModelStatus.ApproverName], \r\n            T.Exte" +
                    "rnalReviewer AS [X_VW_ModelStatus.ExternalReviewer], \r\n            T.ExternalRev" +
                    "iewerName AS [X_VW_ModelStatus.ExternalReviewerName], \r\n            True AS _fro" +
                    "m0\r\n        FROM NKDC.ModelStatusViews AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.ModelStatusViews
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView753()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.ModelStatusViews", "\r\n    SELECT VALUE -- Constructing ModelStatusViews\r\n        [NKD.Module.Business" +
                    "Objects.ModelStatusView](T1.ModelStatusView_ProjectID, T1.ModelStatusView_Projec" +
                    "tName, T1.ModelStatusView_BlockModelID, T1.ModelStatusView_Alias, T1.ModelStatus" +
                    "View_ModelStage, T1.ModelStatusView_HasSubcells, T1.ModelStatusView_Filename, T1" +
                    ".ModelStatusView_Comment, T1.ModelStatusView_Uploaded, T1.ModelStatusView_Author" +
                    ", T1.ModelStatusView_AuthorName, T1.ModelStatusView_Approver, T1.ModelStatusView" +
                    "_ApproverName, T1.ModelStatusView_ExternalReviewer, T1.ModelStatusView_ExternalR" +
                    "eviewerName)\r\n    FROM (\r\n        SELECT \r\n            T.ProjectID AS ModelStatu" +
                    "sView_ProjectID, \r\n            T.ProjectName AS ModelStatusView_ProjectName, \r\n " +
                    "           T.BlockModelID AS ModelStatusView_BlockModelID, \r\n            T.Alias" +
                    " AS ModelStatusView_Alias, \r\n            T.ModelStage AS ModelStatusView_ModelSt" +
                    "age, \r\n            T.HasSubcells AS ModelStatusView_HasSubcells, \r\n            T" +
                    ".Filename AS ModelStatusView_Filename, \r\n            T.Comment AS ModelStatusVie" +
                    "w_Comment, \r\n            T.Uploaded AS ModelStatusView_Uploaded, \r\n            T" +
                    ".Author AS ModelStatusView_Author, \r\n            T.AuthorName AS ModelStatusView" +
                    "_AuthorName, \r\n            T.Approver AS ModelStatusView_Approver, \r\n           " +
                    " T.ApproverName AS ModelStatusView_ApproverName, \r\n            T.ExternalReviewe" +
                    "r AS ModelStatusView_ExternalReviewer, \r\n            T.ExternalReviewerName AS M" +
                    "odelStatusView_ExternalReviewerName, \r\n            True AS _from0\r\n        FROM " +
                    "NKDModuleBusinessObjectsStoreContainer.X_VW_ModelStatus AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_VW_ProjectModelsAwaitingAuthorisation
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView754()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_VW_ProjectModelsAwaitingAuthorisation", "\r\n    SELECT VALUE -- Constructing X_VW_ProjectModelsAwaitingAuthorisation\r\n     " +
                    "   [NKD.Module.BusinessObjects.Store.X_VW_ProjectModelsAwaitingAuthorisation](T1" +
                    ".[X_VW_ProjectModelsAwaitingAuthorisation.ProjectID], T1.[X_VW_ProjectModelsAwai" +
                    "tingAuthorisation.ProjectName], T1.[X_VW_ProjectModelsAwaitingAuthorisation.Bloc" +
                    "kModelID], T1.[X_VW_ProjectModelsAwaitingAuthorisation.Alias], T1.[X_VW_ProjectM" +
                    "odelsAwaitingAuthorisation.ProjectTaskName], T1.[X_VW_ProjectModelsAwaitingAutho" +
                    "risation.Creator], T1.[X_VW_ProjectModelsAwaitingAuthorisation.CreatorName], T1." +
                    "[X_VW_ProjectModelsAwaitingAuthorisation.Reviewer], T1.[X_VW_ProjectModelsAwaiti" +
                    "ngAuthorisation.ReviewerName], T1.[X_VW_ProjectModelsAwaitingAuthorisation.Comme" +
                    "nt], T1.[X_VW_ProjectModelsAwaitingAuthorisation.VersionUpdated])\r\n    FROM (\r\n " +
                    "       SELECT \r\n            T.ProjectID AS [X_VW_ProjectModelsAwaitingAuthorisat" +
                    "ion.ProjectID], \r\n            T.ProjectName AS [X_VW_ProjectModelsAwaitingAuthor" +
                    "isation.ProjectName], \r\n            T.BlockModelID AS [X_VW_ProjectModelsAwaitin" +
                    "gAuthorisation.BlockModelID], \r\n            T.Alias AS [X_VW_ProjectModelsAwaiti" +
                    "ngAuthorisation.Alias], \r\n            T.ProjectTaskName AS [X_VW_ProjectModelsAw" +
                    "aitingAuthorisation.ProjectTaskName], \r\n            T.Creator AS [X_VW_ProjectMo" +
                    "delsAwaitingAuthorisation.Creator], \r\n            T.CreatorName AS [X_VW_Project" +
                    "ModelsAwaitingAuthorisation.CreatorName], \r\n            T.Reviewer AS [X_VW_Proj" +
                    "ectModelsAwaitingAuthorisation.Reviewer], \r\n            T.ReviewerName AS [X_VW_" +
                    "ProjectModelsAwaitingAuthorisation.ReviewerName], \r\n            T.Comment AS [X_" +
                    "VW_ProjectModelsAwaitingAuthorisation.Comment], \r\n            T.VersionUpdated A" +
                    "S [X_VW_ProjectModelsAwaitingAuthorisation.VersionUpdated], \r\n            True A" +
                    "S _from0\r\n        FROM NKDC.ProjectModelsAwaitingAuthorisationViews AS T\r\n    ) " +
                    "AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.ProjectModelsAwaitingAuthorisationViews
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView755()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.ProjectModelsAwaitingAuthorisationViews", "\r\n    SELECT VALUE -- Constructing ProjectModelsAwaitingAuthorisationViews\r\n     " +
                    "   [NKD.Module.BusinessObjects.ProjectModelsAwaitingAuthorisationView](T1.Projec" +
                    "tModelsAwaitingAuthorisationView_ProjectID, T1.ProjectModelsAwaitingAuthorisatio" +
                    "nView_ProjectName, T1.ProjectModelsAwaitingAuthorisationView_BlockModelID, T1.Pr" +
                    "ojectModelsAwaitingAuthorisationView_Alias, T1.ProjectModelsAwaitingAuthorisatio" +
                    "nView_ProjectTaskName, T1.ProjectModelsAwaitingAuthorisationView_Creator, T1.Pro" +
                    "jectModelsAwaitingAuthorisationView_CreatorName, T1.ProjectModelsAwaitingAuthori" +
                    "sationView_Reviewer, T1.ProjectModelsAwaitingAuthorisationView_ReviewerName, T1." +
                    "ProjectModelsAwaitingAuthorisationView_Comment, T1.ProjectModelsAwaitingAuthoris" +
                    "ationView_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n            T.ProjectID " +
                    "AS ProjectModelsAwaitingAuthorisationView_ProjectID, \r\n            T.ProjectName" +
                    " AS ProjectModelsAwaitingAuthorisationView_ProjectName, \r\n            T.BlockMod" +
                    "elID AS ProjectModelsAwaitingAuthorisationView_BlockModelID, \r\n            T.Ali" +
                    "as AS ProjectModelsAwaitingAuthorisationView_Alias, \r\n            T.ProjectTaskN" +
                    "ame AS ProjectModelsAwaitingAuthorisationView_ProjectTaskName, \r\n            T.C" +
                    "reator AS ProjectModelsAwaitingAuthorisationView_Creator, \r\n            T.Creato" +
                    "rName AS ProjectModelsAwaitingAuthorisationView_CreatorName, \r\n            T.Rev" +
                    "iewer AS ProjectModelsAwaitingAuthorisationView_Reviewer, \r\n            T.Review" +
                    "erName AS ProjectModelsAwaitingAuthorisationView_ReviewerName, \r\n            T.C" +
                    "omment AS ProjectModelsAwaitingAuthorisationView_Comment, \r\n            T.Versio" +
                    "nUpdated AS ProjectModelsAwaitingAuthorisationView_VersionUpdated, \r\n           " +
                    " True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_VW_Projec" +
                    "tModelsAwaitingAuthorisation AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_VW_ProjectStatus
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView756()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_VW_ProjectStatus", @"
    SELECT VALUE -- Constructing X_VW_ProjectStatus
        [NKD.Module.BusinessObjects.Store.X_VW_ProjectStatus](T1.[X_VW_ProjectStatus.ProjectID], T1.[X_VW_ProjectStatus.ProjectName], T1.[X_VW_ProjectStatus.ProjectTaskName], T1.[X_VW_ProjectStatus.Creator], T1.[X_VW_ProjectStatus.CreatorName], T1.[X_VW_ProjectStatus.Reviewer], T1.[X_VW_ProjectStatus.ReviewerName], T1.[X_VW_ProjectStatus.Comment], T1.[X_VW_ProjectStatus.VersionUpdated])
    FROM (
        SELECT 
            T.ProjectID AS [X_VW_ProjectStatus.ProjectID], 
            T.ProjectName AS [X_VW_ProjectStatus.ProjectName], 
            T.ProjectTaskName AS [X_VW_ProjectStatus.ProjectTaskName], 
            T.Creator AS [X_VW_ProjectStatus.Creator], 
            T.CreatorName AS [X_VW_ProjectStatus.CreatorName], 
            T.Reviewer AS [X_VW_ProjectStatus.Reviewer], 
            T.ReviewerName AS [X_VW_ProjectStatus.ReviewerName], 
            T.Comment AS [X_VW_ProjectStatus.Comment], 
            T.VersionUpdated AS [X_VW_ProjectStatus.VersionUpdated], 
            True AS _from0
        FROM NKDC.ProjectStatusViews AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.ProjectStatusViews
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView757()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.ProjectStatusViews", @"
    SELECT VALUE -- Constructing ProjectStatusViews
        [NKD.Module.BusinessObjects.ProjectStatusView](T1.ProjectStatusView_ProjectID, T1.ProjectStatusView_ProjectName, T1.ProjectStatusView_ProjectTaskName, T1.ProjectStatusView_Creator, T1.ProjectStatusView_CreatorName, T1.ProjectStatusView_Reviewer, T1.ProjectStatusView_ReviewerName, T1.ProjectStatusView_Comment, T1.ProjectStatusView_VersionUpdated)
    FROM (
        SELECT 
            T.ProjectID AS ProjectStatusView_ProjectID, 
            T.ProjectName AS ProjectStatusView_ProjectName, 
            T.ProjectTaskName AS ProjectStatusView_ProjectTaskName, 
            T.Creator AS ProjectStatusView_Creator, 
            T.CreatorName AS ProjectStatusView_CreatorName, 
            T.Reviewer AS ProjectStatusView_Reviewer, 
            T.ReviewerName AS ProjectStatusView_ReviewerName, 
            T.Comment AS ProjectStatusView_Comment, 
            T.VersionUpdated AS ProjectStatusView_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_VW_ProjectStatus AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_VW_SurveyViews
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView758()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_VW_SurveyViews", @"
    SELECT VALUE -- Constructing X_VW_SurveyViews
        [NKD.Module.BusinessObjects.Store.X_VW_SurveyViews](T1.[X_VW_SurveyViews.HoleName], T1.[X_VW_SurveyViews.ProjectName], T1.[X_VW_SurveyViews.ProjectCode], T1.[X_VW_SurveyViews.Depth], T1.[X_VW_SurveyViews.Dip], T1.[X_VW_SurveyViews.MagnetAffected], T1.[X_VW_SurveyViews.MagneticDip], T1.[X_VW_SurveyViews.OriginalAzimuth], T1.[X_VW_SurveyViews.CorrectedAzimuth], T1.[X_VW_SurveyViews.Gravity], T1.[X_VW_SurveyViews.Surveyed])
    FROM (
        SELECT 
            T.HoleName AS [X_VW_SurveyViews.HoleName], 
            T.ProjectName AS [X_VW_SurveyViews.ProjectName], 
            T.ProjectCode AS [X_VW_SurveyViews.ProjectCode], 
            T.Depth AS [X_VW_SurveyViews.Depth], 
            T.Dip AS [X_VW_SurveyViews.Dip], 
            T.MagnetAffected AS [X_VW_SurveyViews.MagnetAffected], 
            T.MagneticDip AS [X_VW_SurveyViews.MagneticDip], 
            T.OriginalAzimuth AS [X_VW_SurveyViews.OriginalAzimuth], 
            T.CorrectedAzimuth AS [X_VW_SurveyViews.CorrectedAzimuth], 
            T.Gravity AS [X_VW_SurveyViews.Gravity], 
            T.Surveyed AS [X_VW_SurveyViews.Surveyed], 
            True AS _from0
        FROM NKDC.SurveyViewsViews AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.SurveyViewsViews
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView759()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.SurveyViewsViews", @"
    SELECT VALUE -- Constructing SurveyViewsViews
        [NKD.Module.BusinessObjects.SurveyViewsView](T1.SurveyViewsView_HoleName, T1.SurveyViewsView_ProjectName, T1.SurveyViewsView_ProjectCode, T1.SurveyViewsView_Depth, T1.SurveyViewsView_Dip, T1.SurveyViewsView_MagnetAffected, T1.SurveyViewsView_MagneticDip, T1.SurveyViewsView_OriginalAzimuth, T1.SurveyViewsView_CorrectedAzimuth, T1.SurveyViewsView_Gravity, T1.SurveyViewsView_Surveyed)
    FROM (
        SELECT 
            T.HoleName AS SurveyViewsView_HoleName, 
            T.ProjectName AS SurveyViewsView_ProjectName, 
            T.ProjectCode AS SurveyViewsView_ProjectCode, 
            T.Depth AS SurveyViewsView_Depth, 
            T.Dip AS SurveyViewsView_Dip, 
            T.MagnetAffected AS SurveyViewsView_MagnetAffected, 
            T.MagneticDip AS SurveyViewsView_MagneticDip, 
            T.OriginalAzimuth AS SurveyViewsView_OriginalAzimuth, 
            T.CorrectedAzimuth AS SurveyViewsView_CorrectedAzimuth, 
            T.Gravity AS SurveyViewsView_Gravity, 
            T.Surveyed AS SurveyViewsView_Surveyed, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_VW_SurveyViews AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_VW_WorkType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView760()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_VW_WorkType", @"
    SELECT VALUE -- Constructing X_VW_WorkType
        [NKD.Module.BusinessObjects.Store.X_VW_WorkType](T1.[X_VW_WorkType.WorkTypeID], T1.[X_VW_WorkType.WorkTypeName], T1.[X_VW_WorkType.ParentWorkTypeID], T1.[X_VW_WorkType.WorkTypeClassID])
    FROM (
        SELECT 
            T.WorkTypeID AS [X_VW_WorkType.WorkTypeID], 
            T.WorkTypeName AS [X_VW_WorkType.WorkTypeName], 
            T.ParentWorkTypeID AS [X_VW_WorkType.ParentWorkTypeID], 
            T.WorkTypeClassID AS [X_VW_WorkType.WorkTypeClassID], 
            True AS _from0
        FROM NKDC.WorkTypeViews AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.WorkTypeViews
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView761()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.WorkTypeViews", @"
    SELECT VALUE -- Constructing WorkTypeViews
        [NKD.Module.BusinessObjects.WorkTypeView](T1.WorkTypeView_WorkTypeID, T1.WorkTypeView_WorkTypeName, T1.WorkTypeView_ParentWorkTypeID, T1.WorkTypeView_WorkTypeClassID)
    FROM (
        SELECT 
            T.WorkTypeID AS WorkTypeView_WorkTypeID, 
            T.WorkTypeName AS WorkTypeView_WorkTypeName, 
            T.ParentWorkTypeID AS WorkTypeView_ParentWorkTypeID, 
            T.WorkTypeClassID AS WorkTypeView_WorkTypeClassID, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_VW_WorkType AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.InstancePromotedProperties
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView762()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3871);
            viewString.Append("\r\n    SELECT VALUE -- Constructing InstancePromotedProperties\r\n        [NKD.Modu");
            viewString.Append("le.BusinessObjects.Store.InstancePromotedProperties](T1.InstancePromotedProperti");
            viewString.Append("es_InstanceId, T1.InstancePromotedProperties_EncodingOption, T1.InstancePromoted");
            viewString.Append("Properties_PromotionName, T1.InstancePromotedProperties_Value33, T1.InstanceProm");
            viewString.Append("otedProperties_Value34, T1.InstancePromotedProperties_Value35, T1.InstancePromot");
            viewString.Append("edProperties_Value36, T1.InstancePromotedProperties_Value37, T1.InstancePromoted");
            viewString.Append("Properties_Value38, T1.InstancePromotedProperties_Value39, T1.InstancePromotedPr");
            viewString.Append("operties_Value40, T1.InstancePromotedProperties_Value41, T1.InstancePromotedProp");
            viewString.Append("erties_Value42, T1.InstancePromotedProperties_Value43, T1.InstancePromotedProper");
            viewString.Append("ties_Value44, T1.InstancePromotedProperties_Value45, T1.InstancePromotedProperti");
            viewString.Append("es_Value46, T1.InstancePromotedProperties_Value47, T1.InstancePromotedProperties");
            viewString.Append("_Value48, T1.InstancePromotedProperties_Value49, T1.InstancePromotedProperties_V");
            viewString.Append("alue50, T1.InstancePromotedProperties_Value51, T1.InstancePromotedProperties_Val");
            viewString.Append("ue52, T1.InstancePromotedProperties_Value53, T1.InstancePromotedProperties_Value");
            viewString.Append("54, T1.InstancePromotedProperties_Value55, T1.InstancePromotedProperties_Value56");
            viewString.Append(", T1.InstancePromotedProperties_Value57, T1.InstancePromotedProperties_Value58, ");
            viewString.Append("T1.InstancePromotedProperties_Value59, T1.InstancePromotedProperties_Value60, T1");
            viewString.Append(".InstancePromotedProperties_Value61, T1.InstancePromotedProperties_Value62, T1.I");
            viewString.Append("nstancePromotedProperties_Value63, T1.InstancePromotedProperties_Value64)\r\n    F");
            viewString.Append("ROM (\r\n        SELECT \r\n            T.InstanceId AS InstancePromotedProperties_I");
            viewString.Append("nstanceId, \r\n            T.EncodingOption AS InstancePromotedProperties_Encoding");
            viewString.Append("Option, \r\n            T.PromotionName AS InstancePromotedProperties_PromotionNam");
            viewString.Append("e, \r\n            T.Value33 AS InstancePromotedProperties_Value33, \r\n            ");
            viewString.Append("T.Value34 AS InstancePromotedProperties_Value34, \r\n            T.Value35 AS Inst");
            viewString.Append("ancePromotedProperties_Value35, \r\n            T.Value36 AS InstancePromotedPrope");
            viewString.Append("rties_Value36, \r\n            T.Value37 AS InstancePromotedProperties_Value37, \r\n");
            viewString.Append("            T.Value38 AS InstancePromotedProperties_Value38, \r\n            T.Val");
            viewString.Append("ue39 AS InstancePromotedProperties_Value39, \r\n            T.Value40 AS InstanceP");
            viewString.Append("romotedProperties_Value40, \r\n            T.Value41 AS InstancePromotedProperties");
            viewString.Append("_Value41, \r\n            T.Value42 AS InstancePromotedProperties_Value42, \r\n     ");
            viewString.Append("       T.Value43 AS InstancePromotedProperties_Value43, \r\n            T.Value44 ");
            viewString.Append("AS InstancePromotedProperties_Value44, \r\n            T.Value45 AS InstancePromot");
            viewString.Append("edProperties_Value45, \r\n            T.Value46 AS InstancePromotedProperties_Valu");
            viewString.Append("e46, \r\n            T.Value47 AS InstancePromotedProperties_Value47, \r\n          ");
            viewString.Append("  T.Value48 AS InstancePromotedProperties_Value48, \r\n            T.Value49 AS In");
            viewString.Append("stancePromotedProperties_Value49, \r\n            T.Value50 AS InstancePromotedPro");
            viewString.Append("perties_Value50, \r\n            T.Value51 AS InstancePromotedProperties_Value51, ");
            viewString.Append("\r\n            T.Value52 AS InstancePromotedProperties_Value52, \r\n            T.V");
            viewString.Append("alue53 AS InstancePromotedProperties_Value53, \r\n            T.Value54 AS Instanc");
            viewString.Append("ePromotedProperties_Value54, \r\n            T.Value55 AS InstancePromotedProperti");
            viewString.Append("es_Value55, \r\n            T.Value56 AS InstancePromotedProperties_Value56, \r\n   ");
            viewString.Append("         T.Value57 AS InstancePromotedProperties_Value57, \r\n            T.Value5");
            viewString.Append("8 AS InstancePromotedProperties_Value58, \r\n            T.Value59 AS InstanceProm");
            viewString.Append("otedProperties_Value59, \r\n            T.Value60 AS InstancePromotedProperties_Va");
            viewString.Append("lue60, \r\n            T.Value61 AS InstancePromotedProperties_Value61, \r\n        ");
            viewString.Append("    T.Value62 AS InstancePromotedProperties_Value62, \r\n            T.Value63 AS ");
            viewString.Append("InstancePromotedProperties_Value63, \r\n            T.Value64 AS InstancePromotedP");
            viewString.Append("roperties_Value64, \r\n            True AS _from0\r\n        FROM NKDC.InstancePromo");
            viewString.Append("tedProperties AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.InstancePromotedProperties", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.InstancePromotedProperties
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView763()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3757);
            viewString.Append("\r\n    SELECT VALUE -- Constructing InstancePromotedProperties\r\n        [NKD.Modu");
            viewString.Append("le.BusinessObjects.InstancePromotedProperty](T1.InstancePromotedProperty_Instanc");
            viewString.Append("eId, T1.InstancePromotedProperty_EncodingOption, T1.InstancePromotedProperty_Pro");
            viewString.Append("motionName, T1.InstancePromotedProperty_Value33, T1.InstancePromotedProperty_Val");
            viewString.Append("ue34, T1.InstancePromotedProperty_Value35, T1.InstancePromotedProperty_Value36, ");
            viewString.Append("T1.InstancePromotedProperty_Value37, T1.InstancePromotedProperty_Value38, T1.Ins");
            viewString.Append("tancePromotedProperty_Value39, T1.InstancePromotedProperty_Value40, T1.InstanceP");
            viewString.Append("romotedProperty_Value41, T1.InstancePromotedProperty_Value42, T1.InstancePromote");
            viewString.Append("dProperty_Value43, T1.InstancePromotedProperty_Value44, T1.InstancePromotedPrope");
            viewString.Append("rty_Value45, T1.InstancePromotedProperty_Value46, T1.InstancePromotedProperty_Va");
            viewString.Append("lue47, T1.InstancePromotedProperty_Value48, T1.InstancePromotedProperty_Value49,");
            viewString.Append(" T1.InstancePromotedProperty_Value50, T1.InstancePromotedProperty_Value51, T1.In");
            viewString.Append("stancePromotedProperty_Value52, T1.InstancePromotedProperty_Value53, T1.Instance");
            viewString.Append("PromotedProperty_Value54, T1.InstancePromotedProperty_Value55, T1.InstancePromot");
            viewString.Append("edProperty_Value56, T1.InstancePromotedProperty_Value57, T1.InstancePromotedProp");
            viewString.Append("erty_Value58, T1.InstancePromotedProperty_Value59, T1.InstancePromotedProperty_V");
            viewString.Append("alue60, T1.InstancePromotedProperty_Value61, T1.InstancePromotedProperty_Value62");
            viewString.Append(", T1.InstancePromotedProperty_Value63, T1.InstancePromotedProperty_Value64)\r\n   ");
            viewString.Append(" FROM (\r\n        SELECT \r\n            T.InstanceId AS InstancePromotedProperty_I");
            viewString.Append("nstanceId, \r\n            T.EncodingOption AS InstancePromotedProperty_EncodingOp");
            viewString.Append("tion, \r\n            T.PromotionName AS InstancePromotedProperty_PromotionName, \r");
            viewString.Append("\n            T.Value33 AS InstancePromotedProperty_Value33, \r\n            T.Valu");
            viewString.Append("e34 AS InstancePromotedProperty_Value34, \r\n            T.Value35 AS InstanceProm");
            viewString.Append("otedProperty_Value35, \r\n            T.Value36 AS InstancePromotedProperty_Value3");
            viewString.Append("6, \r\n            T.Value37 AS InstancePromotedProperty_Value37, \r\n            T.");
            viewString.Append("Value38 AS InstancePromotedProperty_Value38, \r\n            T.Value39 AS Instance");
            viewString.Append("PromotedProperty_Value39, \r\n            T.Value40 AS InstancePromotedProperty_Va");
            viewString.Append("lue40, \r\n            T.Value41 AS InstancePromotedProperty_Value41, \r\n          ");
            viewString.Append("  T.Value42 AS InstancePromotedProperty_Value42, \r\n            T.Value43 AS Inst");
            viewString.Append("ancePromotedProperty_Value43, \r\n            T.Value44 AS InstancePromotedPropert");
            viewString.Append("y_Value44, \r\n            T.Value45 AS InstancePromotedProperty_Value45, \r\n      ");
            viewString.Append("      T.Value46 AS InstancePromotedProperty_Value46, \r\n            T.Value47 AS ");
            viewString.Append("InstancePromotedProperty_Value47, \r\n            T.Value48 AS InstancePromotedPro");
            viewString.Append("perty_Value48, \r\n            T.Value49 AS InstancePromotedProperty_Value49, \r\n  ");
            viewString.Append("          T.Value50 AS InstancePromotedProperty_Value50, \r\n            T.Value51");
            viewString.Append(" AS InstancePromotedProperty_Value51, \r\n            T.Value52 AS InstancePromote");
            viewString.Append("dProperty_Value52, \r\n            T.Value53 AS InstancePromotedProperty_Value53, ");
            viewString.Append("\r\n            T.Value54 AS InstancePromotedProperty_Value54, \r\n            T.Val");
            viewString.Append("ue55 AS InstancePromotedProperty_Value55, \r\n            T.Value56 AS InstancePro");
            viewString.Append("motedProperty_Value56, \r\n            T.Value57 AS InstancePromotedProperty_Value");
            viewString.Append("57, \r\n            T.Value58 AS InstancePromotedProperty_Value58, \r\n            T");
            viewString.Append(".Value59 AS InstancePromotedProperty_Value59, \r\n            T.Value60 AS Instanc");
            viewString.Append("ePromotedProperty_Value60, \r\n            T.Value61 AS InstancePromotedProperty_V");
            viewString.Append("alue61, \r\n            T.Value62 AS InstancePromotedProperty_Value62, \r\n         ");
            viewString.Append("   T.Value63 AS InstancePromotedProperty_Value63, \r\n            T.Value64 AS Ins");
            viewString.Append("tancePromotedProperty_Value64, \r\n            True AS _from0\r\n        FROM NKDMod");
            viewString.Append("uleBusinessObjectsStoreContainer.InstancePromotedProperties AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.InstancePromotedProperties", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.Instances
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView764()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2532);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Instances\r\n        [NKD.Module.BusinessObject");
            viewString.Append("s.Store.Instances](T1.Instances_InstanceId, T1.Instances_PendingTimer, T1.Instan");
            viewString.Append("ces_CreationTime, T1.Instances_LastUpdatedTime, T1.Instances_ServiceDeploymentId");
            viewString.Append(", T1.Instances_SuspensionExceptionName, T1.Instances_SuspensionReason, T1.Instan");
            viewString.Append("ces_ActiveBookmarks, T1.Instances_CurrentMachine, T1.Instances_LastMachine, T1.I");
            viewString.Append("nstances_ExecutionStatus, T1.Instances_IsInitialized, T1.Instances_IsSuspended, ");
            viewString.Append("T1.Instances_IsCompleted, T1.Instances_EncodingOption, T1.Instances_ReadWritePri");
            viewString.Append("mitiveDataProperties, T1.Instances_WriteOnlyPrimitiveDataProperties, T1.Instance");
            viewString.Append("s_ReadWriteComplexDataProperties, T1.Instances_WriteOnlyComplexDataProperties, T");
            viewString.Append("1.Instances_IdentityName, T1.Instances_IdentityPackage, T1.Instances_Build, T1.I");
            viewString.Append("nstances_Major, T1.Instances_Minor, T1.Instances_Revision)\r\n    FROM (\r\n        ");
            viewString.Append("SELECT \r\n            T.InstanceId AS Instances_InstanceId, \r\n            T.Pendi");
            viewString.Append("ngTimer AS Instances_PendingTimer, \r\n            T.CreationTime AS Instances_Cre");
            viewString.Append("ationTime, \r\n            T.LastUpdatedTime AS Instances_LastUpdatedTime, \r\n     ");
            viewString.Append("       T.ServiceDeploymentId AS Instances_ServiceDeploymentId, \r\n            T.S");
            viewString.Append("uspensionExceptionName AS Instances_SuspensionExceptionName, \r\n            T.Sus");
            viewString.Append("pensionReason AS Instances_SuspensionReason, \r\n            T.ActiveBookmarks AS ");
            viewString.Append("Instances_ActiveBookmarks, \r\n            T.CurrentMachine AS Instances_CurrentMa");
            viewString.Append("chine, \r\n            T.LastMachine AS Instances_LastMachine, \r\n            T.Exe");
            viewString.Append("cutionStatus AS Instances_ExecutionStatus, \r\n            T.IsInitialized AS Inst");
            viewString.Append("ances_IsInitialized, \r\n            T.IsSuspended AS Instances_IsSuspended, \r\n   ");
            viewString.Append("         T.IsCompleted AS Instances_IsCompleted, \r\n            T.EncodingOption ");
            viewString.Append("AS Instances_EncodingOption, \r\n            T.ReadWritePrimitiveDataProperties AS");
            viewString.Append(" Instances_ReadWritePrimitiveDataProperties, \r\n            T.WriteOnlyPrimitiveD");
            viewString.Append("ataProperties AS Instances_WriteOnlyPrimitiveDataProperties, \r\n            T.Rea");
            viewString.Append("dWriteComplexDataProperties AS Instances_ReadWriteComplexDataProperties, \r\n     ");
            viewString.Append("       T.WriteOnlyComplexDataProperties AS Instances_WriteOnlyComplexDataPropert");
            viewString.Append("ies, \r\n            T.IdentityName AS Instances_IdentityName, \r\n            T.Ide");
            viewString.Append("ntityPackage AS Instances_IdentityPackage, \r\n            T.Build AS Instances_Bu");
            viewString.Append("ild, \r\n            T.Major AS Instances_Major, \r\n            T.Minor AS Instance");
            viewString.Append("s_Minor, \r\n            T.Revision AS Instances_Revision, \r\n            True AS _");
            viewString.Append("from0\r\n        FROM NKDC.Instances AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.Instances", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.Instances
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView765()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2509);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Instances\r\n        [NKD.Module.BusinessObject");
            viewString.Append("s.Instance](T1.Instance_InstanceId, T1.Instance_PendingTimer, T1.Instance_Creati");
            viewString.Append("onTime, T1.Instance_LastUpdatedTime, T1.Instance_ServiceDeploymentId, T1.Instanc");
            viewString.Append("e_SuspensionExceptionName, T1.Instance_SuspensionReason, T1.Instance_ActiveBookm");
            viewString.Append("arks, T1.Instance_CurrentMachine, T1.Instance_LastMachine, T1.Instance_Execution");
            viewString.Append("Status, T1.Instance_IsInitialized, T1.Instance_IsSuspended, T1.Instance_IsComple");
            viewString.Append("ted, T1.Instance_EncodingOption, T1.Instance_ReadWritePrimitiveDataProperties, T");
            viewString.Append("1.Instance_WriteOnlyPrimitiveDataProperties, T1.Instance_ReadWriteComplexDataPro");
            viewString.Append("perties, T1.Instance_WriteOnlyComplexDataProperties, T1.Instance_IdentityName, T");
            viewString.Append("1.Instance_IdentityPackage, T1.Instance_Build, T1.Instance_Major, T1.Instance_Mi");
            viewString.Append("nor, T1.Instance_Revision)\r\n    FROM (\r\n        SELECT \r\n            T.InstanceI");
            viewString.Append("d AS Instance_InstanceId, \r\n            T.PendingTimer AS Instance_PendingTimer,");
            viewString.Append(" \r\n            T.CreationTime AS Instance_CreationTime, \r\n            T.LastUpda");
            viewString.Append("tedTime AS Instance_LastUpdatedTime, \r\n            T.ServiceDeploymentId AS Inst");
            viewString.Append("ance_ServiceDeploymentId, \r\n            T.SuspensionExceptionName AS Instance_Su");
            viewString.Append("spensionExceptionName, \r\n            T.SuspensionReason AS Instance_SuspensionRe");
            viewString.Append("ason, \r\n            T.ActiveBookmarks AS Instance_ActiveBookmarks, \r\n           ");
            viewString.Append(" T.CurrentMachine AS Instance_CurrentMachine, \r\n            T.LastMachine AS Ins");
            viewString.Append("tance_LastMachine, \r\n            T.ExecutionStatus AS Instance_ExecutionStatus, ");
            viewString.Append("\r\n            T.IsInitialized AS Instance_IsInitialized, \r\n            T.IsSuspe");
            viewString.Append("nded AS Instance_IsSuspended, \r\n            T.IsCompleted AS Instance_IsComplete");
            viewString.Append("d, \r\n            T.EncodingOption AS Instance_EncodingOption, \r\n            T.Re");
            viewString.Append("adWritePrimitiveDataProperties AS Instance_ReadWritePrimitiveDataProperties, \r\n ");
            viewString.Append("           T.WriteOnlyPrimitiveDataProperties AS Instance_WriteOnlyPrimitiveData");
            viewString.Append("Properties, \r\n            T.ReadWriteComplexDataProperties AS Instance_ReadWrite");
            viewString.Append("ComplexDataProperties, \r\n            T.WriteOnlyComplexDataProperties AS Instanc");
            viewString.Append("e_WriteOnlyComplexDataProperties, \r\n            T.IdentityName AS Instance_Ident");
            viewString.Append("ityName, \r\n            T.IdentityPackage AS Instance_IdentityPackage, \r\n        ");
            viewString.Append("    T.Build AS Instance_Build, \r\n            T.Major AS Instance_Major, \r\n      ");
            viewString.Append("      T.Minor AS Instance_Minor, \r\n            T.Revision AS Instance_Revision, ");
            viewString.Append("\r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContaine");
            viewString.Append("r.Instances AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.Instances", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.ServiceDeployments
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView766()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.ServiceDeployments", @"
    SELECT VALUE -- Constructing ServiceDeployments
        [NKD.Module.BusinessObjects.Store.ServiceDeployments](T1.ServiceDeployments_ServiceDeploymentId, T1.ServiceDeployments_SiteName, T1.ServiceDeployments_RelativeServicePath, T1.ServiceDeployments_RelativeApplicationPath, T1.ServiceDeployments_ServiceName, T1.ServiceDeployments_ServiceNamespace)
    FROM (
        SELECT 
            T.ServiceDeploymentId AS ServiceDeployments_ServiceDeploymentId, 
            T.SiteName AS ServiceDeployments_SiteName, 
            T.RelativeServicePath AS ServiceDeployments_RelativeServicePath, 
            T.RelativeApplicationPath AS ServiceDeployments_RelativeApplicationPath, 
            T.ServiceName AS ServiceDeployments_ServiceName, 
            T.ServiceNamespace AS ServiceDeployments_ServiceNamespace, 
            True AS _from0
        FROM NKDC.ServiceDeployments AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.ServiceDeployments
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView767()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.ServiceDeployments", @"
    SELECT VALUE -- Constructing ServiceDeployments
        [NKD.Module.BusinessObjects.ServiceDeployment](T1.ServiceDeployment_ServiceDeploymentId, T1.ServiceDeployment_SiteName, T1.ServiceDeployment_RelativeServicePath, T1.ServiceDeployment_RelativeApplicationPath, T1.ServiceDeployment_ServiceName, T1.ServiceDeployment_ServiceNamespace)
    FROM (
        SELECT 
            T.ServiceDeploymentId AS ServiceDeployment_ServiceDeploymentId, 
            T.SiteName AS ServiceDeployment_SiteName, 
            T.RelativeServicePath AS ServiceDeployment_RelativeServicePath, 
            T.RelativeApplicationPath AS ServiceDeployment_RelativeApplicationPath, 
            T.ServiceName AS ServiceDeployment_ServiceName, 
            T.ServiceNamespace AS ServiceDeployment_ServiceNamespace, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.ServiceDeployments AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.M_VW_DictionaryCompositeCoal
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView768()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.M_VW_DictionaryCompositeCoal", @"
    SELECT VALUE -- Constructing M_VW_DictionaryCompositeCoal
        [NKD.Module.BusinessObjects.Store.M_VW_DictionaryCompositeCoal](T1.[M_VW_DictionaryCompositeCoal.DictionaryName], T1.[M_VW_DictionaryCompositeCoal.Description], T1.[M_VW_DictionaryCompositeCoal.DictionaryCode], T1.[M_VW_DictionaryCompositeCoal.DictionaryID])
    FROM (
        SELECT 
            T.DictionaryName AS [M_VW_DictionaryCompositeCoal.DictionaryName], 
            T.Description AS [M_VW_DictionaryCompositeCoal.Description], 
            T.DictionaryCode AS [M_VW_DictionaryCompositeCoal.DictionaryCode], 
            T.DictionaryID AS [M_VW_DictionaryCompositeCoal.DictionaryID], 
            True AS _from0
        FROM NKDC.DictionaryCompositeCoalViews AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryCompositeCoalViews
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView769()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryCompositeCoalViews", @"
    SELECT VALUE -- Constructing DictionaryCompositeCoalViews
        [NKD.Module.BusinessObjects.DictionaryCompositeCoalView](T1.DictionaryCompositeCoalView_DictionaryName, T1.DictionaryCompositeCoalView_Description, T1.DictionaryCompositeCoalView_DictionaryCode, T1.DictionaryCompositeCoalView_DictionaryID)
    FROM (
        SELECT 
            T.DictionaryName AS DictionaryCompositeCoalView_DictionaryName, 
            T.Description AS DictionaryCompositeCoalView_Description, 
            T.DictionaryCode AS DictionaryCompositeCoalView_DictionaryCode, 
            T.DictionaryID AS DictionaryCompositeCoalView_DictionaryID, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.M_VW_DictionaryCompositeCoal AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_VW_DictionaryCompositeStandard
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView770()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_VW_DictionaryCompositeStandard", @"
    SELECT VALUE -- Constructing X_VW_DictionaryCompositeStandard
        [NKD.Module.BusinessObjects.Store.X_VW_DictionaryCompositeStandard](T1.[X_VW_DictionaryCompositeStandard.DictionaryName], T1.[X_VW_DictionaryCompositeStandard.Description], T1.[X_VW_DictionaryCompositeStandard.DictionaryCode], T1.[X_VW_DictionaryCompositeStandard.DictionaryID])
    FROM (
        SELECT 
            T.DictionaryName AS [X_VW_DictionaryCompositeStandard.DictionaryName], 
            T.Description AS [X_VW_DictionaryCompositeStandard.Description], 
            T.DictionaryCode AS [X_VW_DictionaryCompositeStandard.DictionaryCode], 
            T.DictionaryID AS [X_VW_DictionaryCompositeStandard.DictionaryID], 
            True AS _from0
        FROM NKDC.DictionaryCompositeStandardViews AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.DictionaryCompositeStandardViews
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView771()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.DictionaryCompositeStandardViews", @"
    SELECT VALUE -- Constructing DictionaryCompositeStandardViews
        [NKD.Module.BusinessObjects.DictionaryCompositeStandardView](T1.DictionaryCompositeStandardView_DictionaryName, T1.DictionaryCompositeStandardView_Description, T1.DictionaryCompositeStandardView_DictionaryCode, T1.DictionaryCompositeStandardView_DictionaryID)
    FROM (
        SELECT 
            T.DictionaryName AS DictionaryCompositeStandardView_DictionaryName, 
            T.Description AS DictionaryCompositeStandardView_Description, 
            T.DictionaryCode AS DictionaryCompositeStandardView_DictionaryCode, 
            T.DictionaryID AS DictionaryCompositeStandardView_DictionaryID, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_VW_DictionaryCompositeStandard AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_VW_ModelPartInfo
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView772()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3457);
            viewString.Append("\r\n    SELECT VALUE -- Constructing X_VW_ModelPartInfo\r\n        [NKD.Module.Busin");
            viewString.Append("essObjects.Store.X_VW_ModelPartInfo](T1.[X_VW_ModelPartInfo.ModelID], T1.[X_VW_M");
            viewString.Append("odelPartInfo.ModelName], T1.[X_VW_ModelPartInfo.ModelLifetime], T1.[X_VW_ModelPa");
            viewString.Append("rtInfo.ModelLifetimeUnit], T1.[X_VW_ModelPartInfo.ModelDeviceType], T1.[X_VW_Mod");
            viewString.Append("elPartInfo.ModelCharacteristicType], T1.[X_VW_ModelPartInfo.ModelCharacteristic]");
            viewString.Append(", T1.[X_VW_ModelPartInfo.ModelCompany], T1.[X_VW_ModelPartInfo.ModelValue], T1.[");
            viewString.Append("X_VW_ModelPartInfo.ModelValueUnit], T1.[X_VW_ModelPartInfo.StandardCostTypeName]");
            viewString.Append(", T1.[X_VW_ModelPartInfo.ProRataUnit], T1.[X_VW_ModelPartInfo.ProRataUnits], T1.");
            viewString.Append("[X_VW_ModelPartInfo.ProRataCost], T1.[X_VW_ModelPartInfo.Accrued], T1.[X_VW_Mode");
            viewString.Append("lPartInfo.CostEstimateModelID], T1.[X_VW_ModelPartInfo.ParentCostEstimateModelID");
            viewString.Append("], T1.[X_VW_ModelPartInfo.IsAccruableWithParentCost], T1.[X_VW_ModelPartInfo.Acc");
            viewString.Append("rualUnit], T1.[X_VW_ModelPartInfo.PartID], T1.[X_VW_ModelPartInfo.PartName], T1.");
            viewString.Append("[X_VW_ModelPartInfo.PartLifetime], T1.[X_VW_ModelPartInfo.PartLifetimeUnit], T1.");
            viewString.Append("[X_VW_ModelPartInfo.PartDeviceType], T1.[X_VW_ModelPartInfo.PartCharacteristicTy");
            viewString.Append("pe], T1.[X_VW_ModelPartInfo.PartCharacteristic], T1.[X_VW_ModelPartInfo.PartComp");
            viewString.Append("any], T1.[X_VW_ModelPartInfo.PartValue], T1.[X_VW_ModelPartInfo.PartValueUnit])\r");
            viewString.Append("\n    FROM (\r\n        SELECT \r\n            T.ModelID AS [X_VW_ModelPartInfo.Model");
            viewString.Append("ID], \r\n            T.ModelName AS [X_VW_ModelPartInfo.ModelName], \r\n            ");
            viewString.Append("T.ModelLifetime AS [X_VW_ModelPartInfo.ModelLifetime], \r\n            T.ModelLife");
            viewString.Append("timeUnit AS [X_VW_ModelPartInfo.ModelLifetimeUnit], \r\n            T.ModelDeviceT");
            viewString.Append("ype AS [X_VW_ModelPartInfo.ModelDeviceType], \r\n            T.ModelCharacteristic");
            viewString.Append("Type AS [X_VW_ModelPartInfo.ModelCharacteristicType], \r\n            T.ModelChara");
            viewString.Append("cteristic AS [X_VW_ModelPartInfo.ModelCharacteristic], \r\n            T.ModelComp");
            viewString.Append("any AS [X_VW_ModelPartInfo.ModelCompany], \r\n            T.ModelValue AS [X_VW_Mo");
            viewString.Append("delPartInfo.ModelValue], \r\n            T.ModelValueUnit AS [X_VW_ModelPartInfo.M");
            viewString.Append("odelValueUnit], \r\n            T.StandardCostTypeName AS [X_VW_ModelPartInfo.Stan");
            viewString.Append("dardCostTypeName], \r\n            T.ProRataUnit AS [X_VW_ModelPartInfo.ProRataUni");
            viewString.Append("t], \r\n            T.ProRataUnits AS [X_VW_ModelPartInfo.ProRataUnits], \r\n       ");
            viewString.Append("     T.ProRataCost AS [X_VW_ModelPartInfo.ProRataCost], \r\n            T.Accrued ");
            viewString.Append("AS [X_VW_ModelPartInfo.Accrued], \r\n            T.CostEstimateModelID AS [X_VW_Mo");
            viewString.Append("delPartInfo.CostEstimateModelID], \r\n            T.ParentCostEstimateModelID AS [");
            viewString.Append("X_VW_ModelPartInfo.ParentCostEstimateModelID], \r\n            T.IsAccruableWithPa");
            viewString.Append("rentCost AS [X_VW_ModelPartInfo.IsAccruableWithParentCost], \r\n            T.Accr");
            viewString.Append("ualUnit AS [X_VW_ModelPartInfo.AccrualUnit], \r\n            T.PartID AS [X_VW_Mod");
            viewString.Append("elPartInfo.PartID], \r\n            T.PartName AS [X_VW_ModelPartInfo.PartName], \r");
            viewString.Append("\n            T.PartLifetime AS [X_VW_ModelPartInfo.PartLifetime], \r\n            ");
            viewString.Append("T.PartLifetimeUnit AS [X_VW_ModelPartInfo.PartLifetimeUnit], \r\n            T.Par");
            viewString.Append("tDeviceType AS [X_VW_ModelPartInfo.PartDeviceType], \r\n            T.PartCharacte");
            viewString.Append("risticType AS [X_VW_ModelPartInfo.PartCharacteristicType], \r\n            T.PartC");
            viewString.Append("haracteristic AS [X_VW_ModelPartInfo.PartCharacteristic], \r\n            T.PartCo");
            viewString.Append("mpany AS [X_VW_ModelPartInfo.PartCompany], \r\n            T.PartValue AS [X_VW_Mo");
            viewString.Append("delPartInfo.PartValue], \r\n            T.PartValueUnit AS [X_VW_ModelPartInfo.Par");
            viewString.Append("tValueUnit], \r\n            True AS _from0\r\n        FROM NKDC.ModelPartInfoViews ");
            viewString.Append("AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_VW_ModelPartInfo", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.ModelPartInfoViews
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView773()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3310);
            viewString.Append("\r\n    SELECT VALUE -- Constructing ModelPartInfoViews\r\n        [NKD.Module.Busin");
            viewString.Append("essObjects.ModelPartInfoView](T1.ModelPartInfoView_ModelID, T1.ModelPartInfoView");
            viewString.Append("_ModelName, T1.ModelPartInfoView_ModelLifetime, T1.ModelPartInfoView_ModelLifeti");
            viewString.Append("meUnit, T1.ModelPartInfoView_ModelDeviceType, T1.ModelPartInfoView_ModelCharacte");
            viewString.Append("risticType, T1.ModelPartInfoView_ModelCharacteristic, T1.ModelPartInfoView_Model");
            viewString.Append("Company, T1.ModelPartInfoView_ModelValue, T1.ModelPartInfoView_ModelValueUnit, T");
            viewString.Append("1.ModelPartInfoView_StandardCostTypeName, T1.ModelPartInfoView_ProRataUnit, T1.M");
            viewString.Append("odelPartInfoView_ProRataUnits, T1.ModelPartInfoView_ProRataCost, T1.ModelPartInf");
            viewString.Append("oView_Accrued, T1.ModelPartInfoView_CostEstimateModelID, T1.ModelPartInfoView_Pa");
            viewString.Append("rentCostEstimateModelID, T1.ModelPartInfoView_IsAccruableWithParentCost, T1.Mode");
            viewString.Append("lPartInfoView_AccrualUnit, T1.ModelPartInfoView_PartID, T1.ModelPartInfoView_Par");
            viewString.Append("tName, T1.ModelPartInfoView_PartLifetime, T1.ModelPartInfoView_PartLifetimeUnit,");
            viewString.Append(" T1.ModelPartInfoView_PartDeviceType, T1.ModelPartInfoView_PartCharacteristicTyp");
            viewString.Append("e, T1.ModelPartInfoView_PartCharacteristic, T1.ModelPartInfoView_PartCompany, T1");
            viewString.Append(".ModelPartInfoView_PartValue, T1.ModelPartInfoView_PartValueUnit)\r\n    FROM (\r\n ");
            viewString.Append("       SELECT \r\n            T.ModelID AS ModelPartInfoView_ModelID, \r\n          ");
            viewString.Append("  T.ModelName AS ModelPartInfoView_ModelName, \r\n            T.ModelLifetime AS M");
            viewString.Append("odelPartInfoView_ModelLifetime, \r\n            T.ModelLifetimeUnit AS ModelPartIn");
            viewString.Append("foView_ModelLifetimeUnit, \r\n            T.ModelDeviceType AS ModelPartInfoView_M");
            viewString.Append("odelDeviceType, \r\n            T.ModelCharacteristicType AS ModelPartInfoView_Mod");
            viewString.Append("elCharacteristicType, \r\n            T.ModelCharacteristic AS ModelPartInfoView_M");
            viewString.Append("odelCharacteristic, \r\n            T.ModelCompany AS ModelPartInfoView_ModelCompa");
            viewString.Append("ny, \r\n            T.ModelValue AS ModelPartInfoView_ModelValue, \r\n            T.");
            viewString.Append("ModelValueUnit AS ModelPartInfoView_ModelValueUnit, \r\n            T.StandardCost");
            viewString.Append("TypeName AS ModelPartInfoView_StandardCostTypeName, \r\n            T.ProRataUnit ");
            viewString.Append("AS ModelPartInfoView_ProRataUnit, \r\n            T.ProRataUnits AS ModelPartInfoV");
            viewString.Append("iew_ProRataUnits, \r\n            T.ProRataCost AS ModelPartInfoView_ProRataCost, ");
            viewString.Append("\r\n            T.Accrued AS ModelPartInfoView_Accrued, \r\n            T.CostEstima");
            viewString.Append("teModelID AS ModelPartInfoView_CostEstimateModelID, \r\n            T.ParentCostEs");
            viewString.Append("timateModelID AS ModelPartInfoView_ParentCostEstimateModelID, \r\n            T.Is");
            viewString.Append("AccruableWithParentCost AS ModelPartInfoView_IsAccruableWithParentCost, \r\n      ");
            viewString.Append("      T.AccrualUnit AS ModelPartInfoView_AccrualUnit, \r\n            T.PartID AS ");
            viewString.Append("ModelPartInfoView_PartID, \r\n            T.PartName AS ModelPartInfoView_PartName");
            viewString.Append(", \r\n            T.PartLifetime AS ModelPartInfoView_PartLifetime, \r\n            ");
            viewString.Append("T.PartLifetimeUnit AS ModelPartInfoView_PartLifetimeUnit, \r\n            T.PartDe");
            viewString.Append("viceType AS ModelPartInfoView_PartDeviceType, \r\n            T.PartCharacteristic");
            viewString.Append("Type AS ModelPartInfoView_PartCharacteristicType, \r\n            T.PartCharacteri");
            viewString.Append("stic AS ModelPartInfoView_PartCharacteristic, \r\n            T.PartCompany AS Mod");
            viewString.Append("elPartInfoView_PartCompany, \r\n            T.PartValue AS ModelPartInfoView_PartV");
            viewString.Append("alue, \r\n            T.PartValueUnit AS ModelPartInfoView_PartValueUnit, \r\n      ");
            viewString.Append("      True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.X_VW_M");
            viewString.Append("odelPartInfo AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.ModelPartInfoViews", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_StatisticData
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView774()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3321);
            viewString.Append("\r\n    SELECT VALUE -- Constructing E_StatisticData\r\n        [NKD.Module.Business");
            viewString.Append("Objects.Store.E_StatisticData](T1.[E_StatisticData.StatisticDataID], T1.[E_Stati");
            viewString.Append("sticData.StatisticDataName], T1.[E_StatisticData.StatisticValue], T1.[E_Statisti");
            viewString.Append("cData.TableType], T1.[E_StatisticData.ReferenceID], T1.[E_StatisticData.Referenc");
            viewString.Append("eExternal], T1.[E_StatisticData.Count], T1.[E_StatisticData.Sigma], T1.[E_Statis");
            viewString.Append("ticData.Mean], T1.[E_StatisticData.Updated], T1.[E_StatisticData.Multiplier], T1");
            viewString.Append(".[E_StatisticData.MultiplierWithPriority], T1.[E_StatisticData.Integral], T1.[E_");
            viewString.Append("StatisticData.IntegralWithPriority], T1.[E_StatisticData.Minimum], T1.[E_Statist");
            viewString.Append("icData.Maximum], T1.[E_StatisticData.ScaleMinimum], T1.[E_StatisticData.ScaleMax");
            viewString.Append("imum], T1.[E_StatisticData.Movement], T1.[E_StatisticData.Velocity], T1.[E_Stati");
            viewString.Append("sticData.Total], T1.[E_StatisticData.Scale], T1.[E_StatisticData.Version], T1.[E");
            viewString.Append("_StatisticData.VersionAntecedentID], T1.[E_StatisticData.VersionCertainty], T1.[");
            viewString.Append("E_StatisticData.VersionWorkflowInstanceID], T1.[E_StatisticData.VersionUpdatedBy");
            viewString.Append("], T1.[E_StatisticData.VersionDeletedBy], T1.[E_StatisticData.VersionOwnerContac");
            viewString.Append("tID], T1.[E_StatisticData.VersionOwnerCompanyID], T1.[E_StatisticData.VersionUpd");
            viewString.Append("ated])\r\n    FROM (\r\n        SELECT \r\n            T.StatisticDataID AS [E_Statist");
            viewString.Append("icData.StatisticDataID], \r\n            T.StatisticDataName AS [E_StatisticData.S");
            viewString.Append("tatisticDataName], \r\n            T.StatisticValue AS [E_StatisticData.StatisticV");
            viewString.Append("alue], \r\n            T.TableType AS [E_StatisticData.TableType], \r\n            T");
            viewString.Append(".ReferenceID AS [E_StatisticData.ReferenceID], \r\n            T.ReferenceExternal");
            viewString.Append(" AS [E_StatisticData.ReferenceExternal], \r\n            T.Count AS [E_StatisticDa");
            viewString.Append("ta.Count], \r\n            T.Sigma AS [E_StatisticData.Sigma], \r\n            T.Mea");
            viewString.Append("n AS [E_StatisticData.Mean], \r\n            T.Updated AS [E_StatisticData.Updated");
            viewString.Append("], \r\n            T.Multiplier AS [E_StatisticData.Multiplier], \r\n            T.M");
            viewString.Append("ultiplierWithPriority AS [E_StatisticData.MultiplierWithPriority], \r\n           ");
            viewString.Append(" T.Integral AS [E_StatisticData.Integral], \r\n            T.IntegralWithPriority ");
            viewString.Append("AS [E_StatisticData.IntegralWithPriority], \r\n            T.Minimum AS [E_Statist");
            viewString.Append("icData.Minimum], \r\n            T.Maximum AS [E_StatisticData.Maximum], \r\n       ");
            viewString.Append("     T.ScaleMinimum AS [E_StatisticData.ScaleMinimum], \r\n            T.ScaleMaxi");
            viewString.Append("mum AS [E_StatisticData.ScaleMaximum], \r\n            T.Movement AS [E_StatisticD");
            viewString.Append("ata.Movement], \r\n            T.Velocity AS [E_StatisticData.Velocity], \r\n       ");
            viewString.Append("     T.Total AS [E_StatisticData.Total], \r\n            T.Scale AS [E_StatisticDa");
            viewString.Append("ta.Scale], \r\n            T.Version AS [E_StatisticData.Version], \r\n            T");
            viewString.Append(".VersionAntecedentID AS [E_StatisticData.VersionAntecedentID], \r\n            T.V");
            viewString.Append("ersionCertainty AS [E_StatisticData.VersionCertainty], \r\n            T.VersionWo");
            viewString.Append("rkflowInstanceID AS [E_StatisticData.VersionWorkflowInstanceID], \r\n            T");
            viewString.Append(".VersionUpdatedBy AS [E_StatisticData.VersionUpdatedBy], \r\n            T.Version");
            viewString.Append("DeletedBy AS [E_StatisticData.VersionDeletedBy], \r\n            T.VersionOwnerCon");
            viewString.Append("tactID AS [E_StatisticData.VersionOwnerContactID], \r\n            T.VersionOwnerC");
            viewString.Append("ompanyID AS [E_StatisticData.VersionOwnerCompanyID], \r\n            T.VersionUpda");
            viewString.Append("ted AS [E_StatisticData.VersionUpdated], \r\n            True AS _from0\r\n        F");
            viewString.Append("ROM NKDC.StatisticDatas AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_StatisticData", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.StatisticDatas
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView775()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3099);
            viewString.Append("\r\n    SELECT VALUE -- Constructing StatisticDatas\r\n        [NKD.Module.BusinessO");
            viewString.Append("bjects.StatisticData](T1.StatisticData_StatisticDataID, T1.StatisticData_Statist");
            viewString.Append("icDataName, T1.StatisticData_StatisticValue, T1.StatisticData_TableType, T1.Stat");
            viewString.Append("isticData_ReferenceID, T1.StatisticData_Count, T1.StatisticData_Sigma, T1.Statis");
            viewString.Append("ticData_Mean, T1.StatisticData_Updated, T1.StatisticData_Multiplier, T1.Statisti");
            viewString.Append("cData_MultiplierWithPriority, T1.StatisticData_Integral, T1.StatisticData_Integr");
            viewString.Append("alWithPriority, T1.StatisticData_Minimum, T1.StatisticData_Maximum, T1.Statistic");
            viewString.Append("Data_ScaleMinimum, T1.StatisticData_ScaleMaximum, T1.StatisticData_Movement, T1.");
            viewString.Append("StatisticData_Velocity, T1.StatisticData_Total, T1.StatisticData_Scale, T1.Stati");
            viewString.Append("sticData_Version, T1.StatisticData_VersionAntecedentID, T1.StatisticData_Version");
            viewString.Append("Certainty, T1.StatisticData_VersionWorkflowInstanceID, T1.StatisticData_VersionU");
            viewString.Append("pdatedBy, T1.StatisticData_VersionDeletedBy, T1.StatisticData_VersionOwnerContac");
            viewString.Append("tID, T1.StatisticData_VersionOwnerCompanyID, T1.StatisticData_VersionUpdated, T1");
            viewString.Append(".StatisticData_ReferenceExternal)\r\n    FROM (\r\n        SELECT \r\n            T.St");
            viewString.Append("atisticDataID AS StatisticData_StatisticDataID, \r\n            T.StatisticDataNam");
            viewString.Append("e AS StatisticData_StatisticDataName, \r\n            T.StatisticValue AS Statisti");
            viewString.Append("cData_StatisticValue, \r\n            T.TableType AS StatisticData_TableType, \r\n  ");
            viewString.Append("          T.ReferenceID AS StatisticData_ReferenceID, \r\n            T.Count AS S");
            viewString.Append("tatisticData_Count, \r\n            T.Sigma AS StatisticData_Sigma, \r\n            ");
            viewString.Append("T.Mean AS StatisticData_Mean, \r\n            T.Updated AS StatisticData_Updated, ");
            viewString.Append("\r\n            T.Multiplier AS StatisticData_Multiplier, \r\n            T.Multipli");
            viewString.Append("erWithPriority AS StatisticData_MultiplierWithPriority, \r\n            T.Integral");
            viewString.Append(" AS StatisticData_Integral, \r\n            T.IntegralWithPriority AS StatisticDat");
            viewString.Append("a_IntegralWithPriority, \r\n            T.Minimum AS StatisticData_Minimum, \r\n    ");
            viewString.Append("        T.Maximum AS StatisticData_Maximum, \r\n            T.ScaleMinimum AS Stat");
            viewString.Append("isticData_ScaleMinimum, \r\n            T.ScaleMaximum AS StatisticData_ScaleMaxim");
            viewString.Append("um, \r\n            T.Movement AS StatisticData_Movement, \r\n            T.Velocity");
            viewString.Append(" AS StatisticData_Velocity, \r\n            T.Total AS StatisticData_Total, \r\n    ");
            viewString.Append("        T.Scale AS StatisticData_Scale, \r\n            T.Version AS StatisticData");
            viewString.Append("_Version, \r\n            T.VersionAntecedentID AS StatisticData_VersionAntecedent");
            viewString.Append("ID, \r\n            T.VersionCertainty AS StatisticData_VersionCertainty, \r\n      ");
            viewString.Append("      T.VersionWorkflowInstanceID AS StatisticData_VersionWorkflowInstanceID, \r\n");
            viewString.Append("            T.VersionUpdatedBy AS StatisticData_VersionUpdatedBy, \r\n            ");
            viewString.Append("T.VersionDeletedBy AS StatisticData_VersionDeletedBy, \r\n            T.VersionOwn");
            viewString.Append("erContactID AS StatisticData_VersionOwnerContactID, \r\n            T.VersionOwner");
            viewString.Append("CompanyID AS StatisticData_VersionOwnerCompanyID, \r\n            T.VersionUpdated");
            viewString.Append(" AS StatisticData_VersionUpdated, \r\n            T.ReferenceExternal AS Statistic");
            viewString.Append("Data_ReferenceExternal, \r\n            True AS _from0\r\n        FROM NKDModuleBusi");
            viewString.Append("nessObjectsStoreContainer.E_StatisticData AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.StatisticDatas", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_XMLData
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView776()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_XMLData", "\r\n    SELECT VALUE -- Constructing E_XMLData\r\n        [NKD.Module.BusinessObjects" +
                    ".Store.E_XMLData](T1.[E_XMLData.XMLDataID], T1.[E_XMLData.ParentXMLDataID], T1.[" +
                    "E_XMLData.XMLData], T1.[E_XMLData.TableType], T1.[E_XMLData.ReferenceID], T1.[E_" +
                    "XMLData.SchemaID], T1.[E_XMLData.Comment], T1.[E_XMLData.Version], T1.[E_XMLData" +
                    ".VersionAntecedentID], T1.[E_XMLData.VersionCertainty], T1.[E_XMLData.VersionWor" +
                    "kflowInstanceID], T1.[E_XMLData.VersionUpdatedBy], T1.[E_XMLData.VersionDeletedB" +
                    "y], T1.[E_XMLData.VersionOwnerContactID], T1.[E_XMLData.VersionOwnerCompanyID], " +
                    "T1.[E_XMLData.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n            T.XMLDa" +
                    "taID AS [E_XMLData.XMLDataID], \r\n            T.ParentXMLDataID AS [E_XMLData.Par" +
                    "entXMLDataID], \r\n            T.XMLData AS [E_XMLData.XMLData], \r\n            T.T" +
                    "ableType AS [E_XMLData.TableType], \r\n            T.ReferenceID AS [E_XMLData.Ref" +
                    "erenceID], \r\n            T.SchemaID AS [E_XMLData.SchemaID], \r\n            T.Com" +
                    "ment AS [E_XMLData.Comment], \r\n            T.Version AS [E_XMLData.Version], \r\n " +
                    "           T.VersionAntecedentID AS [E_XMLData.VersionAntecedentID], \r\n         " +
                    "   T.VersionCertainty AS [E_XMLData.VersionCertainty], \r\n            T.VersionWo" +
                    "rkflowInstanceID AS [E_XMLData.VersionWorkflowInstanceID], \r\n            T.Versi" +
                    "onUpdatedBy AS [E_XMLData.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS" +
                    " [E_XMLData.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [E_XMLDa" +
                    "ta.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [E_XMLData.V" +
                    "ersionOwnerCompanyID], \r\n            T.VersionUpdated AS [E_XMLData.VersionUpdat" +
                    "ed], \r\n            True AS _from0\r\n        FROM NKDC.XMLs AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.XMLs
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView777()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.XMLs", @"
    SELECT VALUE -- Constructing XMLs
        [NKD.Module.BusinessObjects.XML](T1.XML_XMLDataID, T1.XML_ParentXMLDataID, T1.XML_XMLData, T1.XML_TableType, T1.XML_ReferenceID, T1.XML_SchemaID, T1.XML_Comment, T1.XML_Version, T1.XML_VersionAntecedentID, T1.XML_VersionCertainty, T1.XML_VersionWorkflowInstanceID, T1.XML_VersionUpdatedBy, T1.XML_VersionDeletedBy, T1.XML_VersionOwnerContactID, T1.XML_VersionOwnerCompanyID, T1.XML_VersionUpdated)
    FROM (
        SELECT 
            T.XMLDataID AS XML_XMLDataID, 
            T.ParentXMLDataID AS XML_ParentXMLDataID, 
            T.XMLData AS XML_XMLData, 
            T.TableType AS XML_TableType, 
            T.ReferenceID AS XML_ReferenceID, 
            T.SchemaID AS XML_SchemaID, 
            T.Comment AS XML_Comment, 
            T.Version AS XML_Version, 
            T.VersionAntecedentID AS XML_VersionAntecedentID, 
            T.VersionCertainty AS XML_VersionCertainty, 
            T.VersionWorkflowInstanceID AS XML_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS XML_VersionUpdatedBy, 
            T.VersionDeletedBy AS XML_VersionDeletedBy, 
            T.VersionOwnerContactID AS XML_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS XML_VersionOwnerCompanyID, 
            T.VersionUpdated AS XML_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_XMLData AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_VW_PaymentProviderProductDetails
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView778()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2339);
            viewString.Append("\r\n    SELECT VALUE -- Constructing E_VW_PaymentProviderProductDetails\r\n        [");
            viewString.Append("NKD.Module.BusinessObjects.Store.E_VW_PaymentProviderProductDetails](T1.[E_VW_Pa");
            viewString.Append("ymentProviderProductDetails.ApplicationPaymentProviderID], T1.[E_VW_PaymentProvi");
            viewString.Append("derProductDetails.ApplicationPaymentProviderProductID], T1.[E_VW_PaymentProvider");
            viewString.Append("ProductDetails.PaymentProviderProductName], T1.[E_VW_PaymentProviderProductDetai");
            viewString.Append("ls.IsRecurring], T1.[E_VW_PaymentProviderProductDetails.ProductUnitID], T1.[E_VW");
            viewString.Append("_PaymentProviderProductDetails.PaymentProviderUnitName], T1.[E_VW_PaymentProvide");
            viewString.Append("rProductDetails.UnitName], T1.[E_VW_PaymentProviderProductDetails.KitDefault], T");
            viewString.Append("1.[E_VW_PaymentProviderProductDetails.KitMaximum], T1.[E_VW_PaymentProviderProdu");
            viewString.Append("ctDetails.KitMinimum], T1.[E_VW_PaymentProviderProductDetails.ProductID], T1.[E_");
            viewString.Append("VW_PaymentProviderProductDetails.UnitDefault], T1.[E_VW_PaymentProviderProductDe");
            viewString.Append("tails.UnitMaximum], T1.[E_VW_PaymentProviderProductDetails.UnitMinimum])\r\n    FR");
            viewString.Append("OM (\r\n        SELECT \r\n            T.ApplicationPaymentProviderID AS [E_VW_Payme");
            viewString.Append("ntProviderProductDetails.ApplicationPaymentProviderID], \r\n            T.Applicat");
            viewString.Append("ionPaymentProviderProductID AS [E_VW_PaymentProviderProductDetails.ApplicationPa");
            viewString.Append("ymentProviderProductID], \r\n            T.PaymentProviderProductName AS [E_VW_Pay");
            viewString.Append("mentProviderProductDetails.PaymentProviderProductName], \r\n            T.IsRecurr");
            viewString.Append("ing AS [E_VW_PaymentProviderProductDetails.IsRecurring], \r\n            T.Product");
            viewString.Append("UnitID AS [E_VW_PaymentProviderProductDetails.ProductUnitID], \r\n            T.Pa");
            viewString.Append("ymentProviderUnitName AS [E_VW_PaymentProviderProductDetails.PaymentProviderUnit");
            viewString.Append("Name], \r\n            T.UnitName AS [E_VW_PaymentProviderProductDetails.UnitName]");
            viewString.Append(", \r\n            T.KitDefault AS [E_VW_PaymentProviderProductDetails.KitDefault],");
            viewString.Append(" \r\n            T.KitMaximum AS [E_VW_PaymentProviderProductDetails.KitMaximum], ");
            viewString.Append("\r\n            T.KitMinimum AS [E_VW_PaymentProviderProductDetails.KitMinimum], \r");
            viewString.Append("\n            T.ProductID AS [E_VW_PaymentProviderProductDetails.ProductID], \r\n  ");
            viewString.Append("          T.UnitDefault AS [E_VW_PaymentProviderProductDetails.UnitDefault], \r\n ");
            viewString.Append("           T.UnitMaximum AS [E_VW_PaymentProviderProductDetails.UnitMaximum], \r\n");
            viewString.Append("            T.UnitMinimum AS [E_VW_PaymentProviderProductDetails.UnitMinimum], \r");
            viewString.Append("\n            True AS _from0\r\n        FROM NKDC.PaymentProviderProductDetailsView");
            viewString.Append("s AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_VW_PaymentProviderProductDetails", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.PaymentProviderProductDetailsViews
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView779()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2282);
            viewString.Append("\r\n    SELECT VALUE -- Constructing PaymentProviderProductDetailsViews\r\n        [");
            viewString.Append("NKD.Module.BusinessObjects.PaymentProviderProductDetailsView](T1.PaymentProvider");
            viewString.Append("ProductDetailsView_ApplicationPaymentProviderID, T1.PaymentProviderProductDetail");
            viewString.Append("sView_ApplicationPaymentProviderProductID, T1.PaymentProviderProductDetailsView_");
            viewString.Append("PaymentProviderProductName, T1.PaymentProviderProductDetailsView_IsRecurring, T1");
            viewString.Append(".PaymentProviderProductDetailsView_ProductUnitID, T1.PaymentProviderProductDetai");
            viewString.Append("lsView_PaymentProviderUnitName, T1.PaymentProviderProductDetailsView_UnitName, T");
            viewString.Append("1.PaymentProviderProductDetailsView_KitDefault, T1.PaymentProviderProductDetails");
            viewString.Append("View_KitMaximum, T1.PaymentProviderProductDetailsView_KitMinimum, T1.PaymentProv");
            viewString.Append("iderProductDetailsView_ProductID, T1.PaymentProviderProductDetailsView_UnitDefau");
            viewString.Append("lt, T1.PaymentProviderProductDetailsView_UnitMaximum, T1.PaymentProviderProductD");
            viewString.Append("etailsView_UnitMinimum)\r\n    FROM (\r\n        SELECT \r\n            T.ApplicationP");
            viewString.Append("aymentProviderID AS PaymentProviderProductDetailsView_ApplicationPaymentProvider");
            viewString.Append("ID, \r\n            T.ApplicationPaymentProviderProductID AS PaymentProviderProduc");
            viewString.Append("tDetailsView_ApplicationPaymentProviderProductID, \r\n            T.PaymentProvide");
            viewString.Append("rProductName AS PaymentProviderProductDetailsView_PaymentProviderProductName, \r\n");
            viewString.Append("            T.IsRecurring AS PaymentProviderProductDetailsView_IsRecurring, \r\n  ");
            viewString.Append("          T.ProductUnitID AS PaymentProviderProductDetailsView_ProductUnitID, \r\n");
            viewString.Append("            T.PaymentProviderUnitName AS PaymentProviderProductDetailsView_Payme");
            viewString.Append("ntProviderUnitName, \r\n            T.UnitName AS PaymentProviderProductDetailsVie");
            viewString.Append("w_UnitName, \r\n            T.KitDefault AS PaymentProviderProductDetailsView_KitD");
            viewString.Append("efault, \r\n            T.KitMaximum AS PaymentProviderProductDetailsView_KitMaxim");
            viewString.Append("um, \r\n            T.KitMinimum AS PaymentProviderProductDetailsView_KitMinimum, ");
            viewString.Append("\r\n            T.ProductID AS PaymentProviderProductDetailsView_ProductID, \r\n    ");
            viewString.Append("        T.UnitDefault AS PaymentProviderProductDetailsView_UnitDefault, \r\n      ");
            viewString.Append("      T.UnitMaximum AS PaymentProviderProductDetailsView_UnitMaximum, \r\n        ");
            viewString.Append("    T.UnitMinimum AS PaymentProviderProductDetailsView_UnitMinimum, \r\n          ");
            viewString.Append("  True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreContainer.E_VW_Payme");
            viewString.Append("ntProviderProductDetails AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.PaymentProviderProductDetailsViews", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.X_VW_AssayGroupSample
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView780()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.X_VW_AssayGroupSample", @"
    SELECT VALUE -- Constructing X_VW_AssayGroupSample
        [NKD.Module.BusinessObjects.Store.X_VW_AssayGroupSample](T1.[X_VW_AssayGroupSample.SampleID])
    FROM (
        SELECT 
            T.SampleID AS [X_VW_AssayGroupSample.SampleID], 
            True AS _from0
        FROM NKDC.AssayGroupSampleViews AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.AssayGroupSampleViews
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView781()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.AssayGroupSampleViews", @"
    SELECT VALUE -- Constructing AssayGroupSampleViews
        [NKD.Module.BusinessObjects.AssayGroupSampleView](T1.AssayGroupSampleView_SampleID)
    FROM (
        SELECT 
            T.SampleID AS AssayGroupSampleView_SampleID, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.X_VW_AssayGroupSample AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_VW_ApplicationUserRoles
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView782()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_VW_ApplicationUserRoles", @"
    SELECT VALUE -- Constructing E_VW_ApplicationUserRoles
        [NKD.Module.BusinessObjects.Store.E_VW_ApplicationUserRoles](T1.[E_VW_ApplicationUserRoles.ApplicationId], T1.[E_VW_ApplicationUserRoles.ContactID], T1.[E_VW_ApplicationUserRoles.ContactUsername], T1.[E_VW_ApplicationUserRoles.DefaultEmail], T1.[E_VW_ApplicationUserRoles.UserId], T1.[E_VW_ApplicationUserRoles.UserName], T1.[E_VW_ApplicationUserRoles.RoleId], T1.[E_VW_ApplicationUserRoles.RoleName])
    FROM (
        SELECT 
            T.ApplicationId AS [E_VW_ApplicationUserRoles.ApplicationId], 
            T.ContactID AS [E_VW_ApplicationUserRoles.ContactID], 
            T.ContactUsername AS [E_VW_ApplicationUserRoles.ContactUsername], 
            T.DefaultEmail AS [E_VW_ApplicationUserRoles.DefaultEmail], 
            T.UserId AS [E_VW_ApplicationUserRoles.UserId], 
            T.UserName AS [E_VW_ApplicationUserRoles.UserName], 
            T.RoleId AS [E_VW_ApplicationUserRoles.RoleId], 
            T.RoleName AS [E_VW_ApplicationUserRoles.RoleName], 
            True AS _from0
        FROM NKDC.ApplicationUserRoles AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.ApplicationUserRoles
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView783()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.ApplicationUserRoles", @"
    SELECT VALUE -- Constructing ApplicationUserRoles
        [NKD.Module.BusinessObjects.ApplicationUserRoles](T1.ApplicationUserRoles_ApplicationId, T1.ApplicationUserRoles_ContactID, T1.ApplicationUserRoles_ContactUsername, T1.ApplicationUserRoles_DefaultEmail, T1.ApplicationUserRoles_UserId, T1.ApplicationUserRoles_UserName, T1.ApplicationUserRoles_RoleId, T1.ApplicationUserRoles_RoleName)
    FROM (
        SELECT 
            T.ApplicationId AS ApplicationUserRoles_ApplicationId, 
            T.ContactID AS ApplicationUserRoles_ContactID, 
            T.ContactUsername AS ApplicationUserRoles_ContactUsername, 
            T.DefaultEmail AS ApplicationUserRoles_DefaultEmail, 
            T.UserId AS ApplicationUserRoles_UserId, 
            T.UserName AS ApplicationUserRoles_UserName, 
            T.RoleId AS ApplicationUserRoles_RoleId, 
            T.RoleName AS ApplicationUserRoles_RoleName, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_VW_ApplicationUserRoles AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_VW_ContactEmails
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView784()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_VW_ContactEmails", @"
    SELECT VALUE -- Constructing E_VW_ContactEmails
        [NKD.Module.BusinessObjects.Store.E_VW_ContactEmails](T1.[E_VW_ContactEmails.ContactID], T1.[E_VW_ContactEmails.Email])
    FROM (
        SELECT 
            T.ContactID AS [E_VW_ContactEmails.ContactID], 
            T.Email AS [E_VW_ContactEmails.Email], 
            True AS _from0
        FROM NKDC.ContactEmailsViews AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.ContactEmailsViews
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView785()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.ContactEmailsViews", @"
    SELECT VALUE -- Constructing ContactEmailsViews
        [NKD.Module.BusinessObjects.ContactEmailsView](T1.ContactEmailsView_ContactID, T1.ContactEmailsView_Email)
    FROM (
        SELECT 
            T.ContactID AS ContactEmailsView_ContactID, 
            T.Email AS ContactEmailsView_Email, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_VW_ContactEmails AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.ModuleInfo
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView786()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.ModuleInfo", @"
    SELECT VALUE -- Constructing ModuleInfo
        [NKD.Module.BusinessObjects.Store.ModuleInfo](T1.ModuleInfo_ID, T1.ModuleInfo_Version, T1.ModuleInfo_Name, T1.ModuleInfo_AssemblyFileName, T1.ModuleInfo_IsMain, T1.ModuleInfo_OptimisticLockField)
    FROM (
        SELECT 
            T.ID AS ModuleInfo_ID, 
            T.Version AS ModuleInfo_Version, 
            T.Name AS ModuleInfo_Name, 
            T.AssemblyFileName AS ModuleInfo_AssemblyFileName, 
            T.IsMain AS ModuleInfo_IsMain, 
            T.OptimisticLockField AS ModuleInfo_OptimisticLockField, 
            True AS _from0
        FROM NKDC.ModuleInfoes AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.ModuleInfoes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView787()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.ModuleInfoes", @"
    SELECT VALUE -- Constructing ModuleInfoes
        [NKD.Module.BusinessObjects.ModuleInfo](T1.ModuleInfo_ID, T1.ModuleInfo_Version, T1.ModuleInfo_Name, T1.ModuleInfo_AssemblyFileName, T1.ModuleInfo_IsMain, T1.ModuleInfo_OptimisticLockField)
    FROM (
        SELECT 
            T.ID AS ModuleInfo_ID, 
            T.Version AS ModuleInfo_Version, 
            T.Name AS ModuleInfo_Name, 
            T.AssemblyFileName AS ModuleInfo_AssemblyFileName, 
            T.IsMain AS ModuleInfo_IsMain, 
            T.OptimisticLockField AS ModuleInfo_OptimisticLockField, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.ModuleInfo AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.ReportData
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView788()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.ReportData", @"
    SELECT VALUE -- Constructing ReportData
        [NKD.Module.BusinessObjects.Store.ReportData](T1.ReportData_OID, T1.ReportData_ObjectTypeName, T1.ReportData_Content, T1.ReportData_Name, T1.ReportData_IsInplaceReport, T1.ReportData_OptimisticLockField, T1.ReportData_GCRecord)
    FROM (
        SELECT 
            T.OID AS ReportData_OID, 
            T.ObjectTypeName AS ReportData_ObjectTypeName, 
            T.Content AS ReportData_Content, 
            T.Name AS ReportData_Name, 
            T.IsInplaceReport AS ReportData_IsInplaceReport, 
            T.OptimisticLockField AS ReportData_OptimisticLockField, 
            T.GCRecord AS ReportData_GCRecord, 
            True AS _from0
        FROM NKDC.ReportDatas AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.ReportDatas
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView789()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.ReportDatas", @"
    SELECT VALUE -- Constructing ReportDatas
        [NKD.Module.BusinessObjects.ReportData](T1.ReportData_OID, T1.ReportData_ObjectTypeName, T1.ReportData_Content, T1.ReportData_Name, T1.ReportData_IsInplaceReport, T1.ReportData_OptimisticLockField, T1.ReportData_GCRecord)
    FROM (
        SELECT 
            T.OID AS ReportData_OID, 
            T.ObjectTypeName AS ReportData_ObjectTypeName, 
            T.Content AS ReportData_Content, 
            T.Name AS ReportData_Name, 
            T.IsInplaceReport AS ReportData_IsInplaceReport, 
            T.OptimisticLockField AS ReportData_OptimisticLockField, 
            T.GCRecord AS ReportData_GCRecord, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.ReportData AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.T_Dictionary
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView790()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.T_Dictionary", @"
    SELECT VALUE -- Constructing T_Dictionary
        [NKD.Module.BusinessObjects.Store.T_Dictionary](T1.[T_Dictionary.CategoryID], T1.[T_Dictionary.CodeID], T1.[T_Dictionary.Description], T1.[T_Dictionary.Version], T1.[T_Dictionary.VersionAntecedentID], T1.[T_Dictionary.VersionCertainty], T1.[T_Dictionary.VersionWorkflowInstanceID], T1.[T_Dictionary.VersionUpdatedBy], T1.[T_Dictionary.VersionDeletedBy], T1.[T_Dictionary.VersionOwnerContactID], T1.[T_Dictionary.VersionOwnerCompanyID], T1.[T_Dictionary.VersionUpdated])
    FROM (
        SELECT 
            T.CategoryID AS [T_Dictionary.CategoryID], 
            T.CodeID AS [T_Dictionary.CodeID], 
            T.Description AS [T_Dictionary.Description], 
            T.Version AS [T_Dictionary.Version], 
            T.VersionAntecedentID AS [T_Dictionary.VersionAntecedentID], 
            T.VersionCertainty AS [T_Dictionary.VersionCertainty], 
            T.VersionWorkflowInstanceID AS [T_Dictionary.VersionWorkflowInstanceID], 
            T.VersionUpdatedBy AS [T_Dictionary.VersionUpdatedBy], 
            T.VersionDeletedBy AS [T_Dictionary.VersionDeletedBy], 
            T.VersionOwnerContactID AS [T_Dictionary.VersionOwnerContactID], 
            T.VersionOwnerCompanyID AS [T_Dictionary.VersionOwnerCompanyID], 
            T.VersionUpdated AS [T_Dictionary.VersionUpdated], 
            True AS _from0
        FROM NKDC.Dictionaries AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.Dictionaries
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView791()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.Dictionaries", @"
    SELECT VALUE -- Constructing Dictionaries
        [NKD.Module.BusinessObjects.Dictionary](T1.Dictionary_CategoryID, T1.Dictionary_CodeID, T1.Dictionary_Description, T1.Dictionary_Version, T1.Dictionary_VersionAntecedentID, T1.Dictionary_VersionCertainty, T1.Dictionary_VersionWorkflowInstanceID, T1.Dictionary_VersionUpdatedBy, T1.Dictionary_VersionDeletedBy, T1.Dictionary_VersionOwnerContactID, T1.Dictionary_VersionOwnerCompanyID, T1.Dictionary_VersionUpdated)
    FROM (
        SELECT 
            T.CategoryID AS Dictionary_CategoryID, 
            T.CodeID AS Dictionary_CodeID, 
            T.Description AS Dictionary_Description, 
            T.Version AS Dictionary_Version, 
            T.VersionAntecedentID AS Dictionary_VersionAntecedentID, 
            T.VersionCertainty AS Dictionary_VersionCertainty, 
            T.VersionWorkflowInstanceID AS Dictionary_VersionWorkflowInstanceID, 
            T.VersionUpdatedBy AS Dictionary_VersionUpdatedBy, 
            T.VersionDeletedBy AS Dictionary_VersionDeletedBy, 
            T.VersionOwnerContactID AS Dictionary_VersionOwnerContactID, 
            T.VersionOwnerCompanyID AS Dictionary_VersionOwnerCompanyID, 
            T.VersionUpdated AS Dictionary_VersionUpdated, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.T_Dictionary AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.XPObjectType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView792()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.XPObjectType", @"
    SELECT VALUE -- Constructing XPObjectType
        [NKD.Module.BusinessObjects.Store.XPObjectType](T1.XPObjectType_OID, T1.XPObjectType_TypeName, T1.XPObjectType_AssemblyName)
    FROM (
        SELECT 
            T.OID AS XPObjectType_OID, 
            T.TypeName AS XPObjectType_TypeName, 
            T.AssemblyName AS XPObjectType_AssemblyName, 
            True AS _from0
        FROM NKDC.XPObjectTypes AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.XPObjectTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView793()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.XPObjectTypes", @"
    SELECT VALUE -- Constructing XPObjectTypes
        [NKD.Module.BusinessObjects.XPObjectType](T1.XPObjectType_OID, T1.XPObjectType_TypeName, T1.XPObjectType_AssemblyName)
    FROM (
        SELECT 
            T.OID AS XPObjectType_OID, 
            T.TypeName AS XPObjectType_TypeName, 
            T.AssemblyName AS XPObjectType_AssemblyName, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.XPObjectType AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_VW_ApplicationContacts
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView794()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_VW_ApplicationContacts", @"
    SELECT VALUE -- Constructing E_VW_ApplicationContacts
        [NKD.Module.BusinessObjects.Store.E_VW_ApplicationContacts](T1.[E_VW_ApplicationContacts.ApplicationId], T1.[E_VW_ApplicationContacts.ContactID], T1.[E_VW_ApplicationContacts.ContactName])
    FROM (
        SELECT 
            T.ApplicationId AS [E_VW_ApplicationContacts.ApplicationId], 
            T.ContactID AS [E_VW_ApplicationContacts.ContactID], 
            T.ContactName AS [E_VW_ApplicationContacts.ContactName], 
            True AS _from0
        FROM NKDC.ApplicationContactsViews AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.ApplicationContactsViews
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView795()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.ApplicationContactsViews", @"
    SELECT VALUE -- Constructing ApplicationContactsViews
        [NKD.Module.BusinessObjects.ApplicationContactsView](T1.ApplicationContactsView_ApplicationId, T1.ApplicationContactsView_ContactID, T1.ApplicationContactsView_ContactName)
    FROM (
        SELECT 
            T.ApplicationId AS ApplicationContactsView_ApplicationId, 
            T.ContactID AS ApplicationContactsView_ContactID, 
            T.ContactName AS ApplicationContactsView_ContactName, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_VW_ApplicationContacts AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_VW_SupplyItemDetail
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView796()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(7168);
            viewString.Append("\r\n    SELECT VALUE -- Constructing E_VW_SupplyItemDetail\r\n        [NKD.Module.Bu");
            viewString.Append("sinessObjects.Store.E_VW_SupplyItemDetail](T1.[E_VW_SupplyItemDetail.SupplyItemI");
            viewString.Append("D], T1.[E_VW_SupplyItemDetail.SupplyID], T1.[E_VW_SupplyItemDetail.ModelID], T1.");
            viewString.Append("[E_VW_SupplyItemDetail.PartID], T1.[E_VW_SupplyItemDetail.SupplierModelID], T1.[");
            viewString.Append("E_VW_SupplyItemDetail.SupplierPartID], T1.[E_VW_SupplyItemDetail.WarehouseID], T");
            viewString.Append("1.[E_VW_SupplyItemDetail.ProjectPlanTaskModelID], T1.[E_VW_SupplyItemDetail.Proj");
            viewString.Append("ectPlanTaskPartID], T1.[E_VW_SupplyItemDetail.ProjectPlanTaskResponseID], T1.[E_");
            viewString.Append("VW_SupplyItemDetail.ApplicationPaymentProviderProductID], T1.[E_VW_SupplyItemDet");
            viewString.Append("ail.ApplicationPaymentProviderProductModelID], T1.[E_VW_SupplyItemDetail.Applica");
            viewString.Append("tionPaymentProviderProductPartID], T1.[E_VW_SupplyItemDetail.CustomerAccountID],");
            viewString.Append(" T1.[E_VW_SupplyItemDetail.ModelUnitID], T1.[E_VW_SupplyItemDetail.LabourUnitID]");
            viewString.Append(", T1.[E_VW_SupplyItemDetail.PartUnitID], T1.[E_VW_SupplyItemDetail.CostPerUnitMo");
            viewString.Append("del], T1.[E_VW_SupplyItemDetail.CostPerUnitLabour], T1.[E_VW_SupplyItemDetail.Co");
            viewString.Append("stPerUnitPart], T1.[E_VW_SupplyItemDetail.QuantityModel], T1.[E_VW_SupplyItemDet");
            viewString.Append("ail.QuantityLabour], T1.[E_VW_SupplyItemDetail.QuantityPart], T1.[E_VW_SupplyIte");
            viewString.Append("mDetail.CostModel], T1.[E_VW_SupplyItemDetail.CostLabour], T1.[E_VW_SupplyItemDe");
            viewString.Append("tail.CostPart], T1.[E_VW_SupplyItemDetail.SubtotalModel], T1.[E_VW_SupplyItemDet");
            viewString.Append("ail.SubtotalLabour], T1.[E_VW_SupplyItemDetail.SubtotalPart], T1.[E_VW_SupplyIte");
            viewString.Append("mDetail.DiscountModel], T1.[E_VW_SupplyItemDetail.DiscountLabour], T1.[E_VW_Supp");
            viewString.Append("lyItemDetail.DiscountPart], T1.[E_VW_SupplyItemDetail.DiscountAmount], T1.[E_VW_");
            viewString.Append("SupplyItemDetail.TaxModel], T1.[E_VW_SupplyItemDetail.TaxLabour], T1.[E_VW_Suppl");
            viewString.Append("yItemDetail.TaxPart], T1.[E_VW_SupplyItemDetail.Tax], T1.[E_VW_SupplyItemDetail.");
            viewString.Append("OriginalSubtotal], T1.[E_VW_SupplyItemDetail.CurrencyID], T1.[E_VW_SupplyItemDet");
            viewString.Append("ail.Subtotal], T1.[E_VW_SupplyItemDetail.Notes], T1.[E_VW_SupplyItemDetail.Versi");
            viewString.Append("on], T1.[E_VW_SupplyItemDetail.VersionAntecedentID], T1.[E_VW_SupplyItemDetail.V");
            viewString.Append("ersionCertainty], T1.[E_VW_SupplyItemDetail.VersionWorkflowInstanceID], T1.[E_VW");
            viewString.Append("_SupplyItemDetail.VersionUpdatedBy], T1.[E_VW_SupplyItemDetail.VersionDeletedBy]");
            viewString.Append(", T1.[E_VW_SupplyItemDetail.VersionOwnerContactID], T1.[E_VW_SupplyItemDetail.Ve");
            viewString.Append("rsionOwnerCompanyID], T1.[E_VW_SupplyItemDetail.VersionUpdated], T1.[E_VW_Supply");
            viewString.Append("ItemDetail.StandardModelName], T1.[E_VW_SupplyItemDetail.ModelUnitName], T1.[E_V");
            viewString.Append("W_SupplyItemDetail.StandardPartName], T1.[E_VW_SupplyItemDetail.PartUnitName], T");
            viewString.Append("1.[E_VW_SupplyItemDetail.LabourUnitName], T1.[E_VW_SupplyItemDetail.PrefixCharac");
            viewString.Append("ters], T1.[E_VW_SupplyItemDetail.PostfixCharacters], T1.[E_VW_SupplyItemDetail.C");
            viewString.Append("ustomerPurchaseOrderID])\r\n    FROM (\r\n        SELECT \r\n            T.SupplyItemI");
            viewString.Append("D AS [E_VW_SupplyItemDetail.SupplyItemID], \r\n            T.SupplyID AS [E_VW_Sup");
            viewString.Append("plyItemDetail.SupplyID], \r\n            T.ModelID AS [E_VW_SupplyItemDetail.Model");
            viewString.Append("ID], \r\n            T.PartID AS [E_VW_SupplyItemDetail.PartID], \r\n            T.S");
            viewString.Append("upplierModelID AS [E_VW_SupplyItemDetail.SupplierModelID], \r\n            T.Suppl");
            viewString.Append("ierPartID AS [E_VW_SupplyItemDetail.SupplierPartID], \r\n            T.WarehouseID");
            viewString.Append(" AS [E_VW_SupplyItemDetail.WarehouseID], \r\n            T.ProjectPlanTaskModelID ");
            viewString.Append("AS [E_VW_SupplyItemDetail.ProjectPlanTaskModelID], \r\n            T.ProjectPlanTa");
            viewString.Append("skPartID AS [E_VW_SupplyItemDetail.ProjectPlanTaskPartID], \r\n            T.Proje");
            viewString.Append("ctPlanTaskResponseID AS [E_VW_SupplyItemDetail.ProjectPlanTaskResponseID], \r\n   ");
            viewString.Append("         T.ApplicationPaymentProviderProductID AS [E_VW_SupplyItemDetail.Applica");
            viewString.Append("tionPaymentProviderProductID], \r\n            T.ApplicationPaymentProviderProduct");
            viewString.Append("ModelID AS [E_VW_SupplyItemDetail.ApplicationPaymentProviderProductModelID], \r\n ");
            viewString.Append("           T.ApplicationPaymentProviderProductPartID AS [E_VW_SupplyItemDetail.A");
            viewString.Append("pplicationPaymentProviderProductPartID], \r\n            T.CustomerAccountID AS [E");
            viewString.Append("_VW_SupplyItemDetail.CustomerAccountID], \r\n            T.ModelUnitID AS [E_VW_Su");
            viewString.Append("pplyItemDetail.ModelUnitID], \r\n            T.LabourUnitID AS [E_VW_SupplyItemDet");
            viewString.Append("ail.LabourUnitID], \r\n            T.PartUnitID AS [E_VW_SupplyItemDetail.PartUnit");
            viewString.Append("ID], \r\n            T.CostPerUnitModel AS [E_VW_SupplyItemDetail.CostPerUnitModel");
            viewString.Append("], \r\n            T.CostPerUnitLabour AS [E_VW_SupplyItemDetail.CostPerUnitLabour");
            viewString.Append("], \r\n            T.CostPerUnitPart AS [E_VW_SupplyItemDetail.CostPerUnitPart], \r");
            viewString.Append("\n            T.QuantityModel AS [E_VW_SupplyItemDetail.QuantityModel], \r\n       ");
            viewString.Append("     T.QuantityLabour AS [E_VW_SupplyItemDetail.QuantityLabour], \r\n            T");
            viewString.Append(".QuantityPart AS [E_VW_SupplyItemDetail.QuantityPart], \r\n            T.CostModel");
            viewString.Append(" AS [E_VW_SupplyItemDetail.CostModel], \r\n            T.CostLabour AS [E_VW_Suppl");
            viewString.Append("yItemDetail.CostLabour], \r\n            T.CostPart AS [E_VW_SupplyItemDetail.Cost");
            viewString.Append("Part], \r\n            T.SubtotalModel AS [E_VW_SupplyItemDetail.SubtotalModel], \r");
            viewString.Append("\n            T.SubtotalLabour AS [E_VW_SupplyItemDetail.SubtotalLabour], \r\n     ");
            viewString.Append("       T.SubtotalPart AS [E_VW_SupplyItemDetail.SubtotalPart], \r\n            T.D");
            viewString.Append("iscountModel AS [E_VW_SupplyItemDetail.DiscountModel], \r\n            T.DiscountL");
            viewString.Append("abour AS [E_VW_SupplyItemDetail.DiscountLabour], \r\n            T.DiscountPart AS");
            viewString.Append(" [E_VW_SupplyItemDetail.DiscountPart], \r\n            T.DiscountAmount AS [E_VW_S");
            viewString.Append("upplyItemDetail.DiscountAmount], \r\n            T.TaxModel AS [E_VW_SupplyItemDet");
            viewString.Append("ail.TaxModel], \r\n            T.TaxLabour AS [E_VW_SupplyItemDetail.TaxLabour], \r");
            viewString.Append("\n            T.TaxPart AS [E_VW_SupplyItemDetail.TaxPart], \r\n            T.Tax A");
            viewString.Append("S [E_VW_SupplyItemDetail.Tax], \r\n            T.OriginalSubtotal AS [E_VW_SupplyI");
            viewString.Append("temDetail.OriginalSubtotal], \r\n            T.CurrencyID AS [E_VW_SupplyItemDetai");
            viewString.Append("l.CurrencyID], \r\n            T.Subtotal AS [E_VW_SupplyItemDetail.Subtotal], \r\n ");
            viewString.Append("           T.Notes AS [E_VW_SupplyItemDetail.Notes], \r\n            T.Version AS ");
            viewString.Append("[E_VW_SupplyItemDetail.Version], \r\n            T.VersionAntecedentID AS [E_VW_Su");
            viewString.Append("pplyItemDetail.VersionAntecedentID], \r\n            T.VersionCertainty AS [E_VW_S");
            viewString.Append("upplyItemDetail.VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS ");
            viewString.Append("[E_VW_SupplyItemDetail.VersionWorkflowInstanceID], \r\n            T.VersionUpdate");
            viewString.Append("dBy AS [E_VW_SupplyItemDetail.VersionUpdatedBy], \r\n            T.VersionDeletedB");
            viewString.Append("y AS [E_VW_SupplyItemDetail.VersionDeletedBy], \r\n            T.VersionOwnerConta");
            viewString.Append("ctID AS [E_VW_SupplyItemDetail.VersionOwnerContactID], \r\n            T.VersionOw");
            viewString.Append("nerCompanyID AS [E_VW_SupplyItemDetail.VersionOwnerCompanyID], \r\n            T.V");
            viewString.Append("ersionUpdated AS [E_VW_SupplyItemDetail.VersionUpdated], \r\n            T.Standar");
            viewString.Append("dModelName AS [E_VW_SupplyItemDetail.StandardModelName], \r\n            T.ModelUn");
            viewString.Append("itName AS [E_VW_SupplyItemDetail.ModelUnitName], \r\n            T.StandardPartNam");
            viewString.Append("e AS [E_VW_SupplyItemDetail.StandardPartName], \r\n            T.PartUnitName AS [");
            viewString.Append("E_VW_SupplyItemDetail.PartUnitName], \r\n            T.LabourUnitName AS [E_VW_Sup");
            viewString.Append("plyItemDetail.LabourUnitName], \r\n            T.PrefixCharacters AS [E_VW_SupplyI");
            viewString.Append("temDetail.PrefixCharacters], \r\n            T.PostfixCharacters AS [E_VW_SupplyIt");
            viewString.Append("emDetail.PostfixCharacters], \r\n            T.CustomerPurchaseOrderID AS [E_VW_Su");
            viewString.Append("pplyItemDetail.CustomerPurchaseOrderID], \r\n            True AS _from0\r\n        F");
            viewString.Append("ROM NKDC.SupplyItemDetailViews AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_VW_SupplyItemDetail", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.SupplyItemDetailViews
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView797()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(6847);
            viewString.Append("\r\n    SELECT VALUE -- Constructing SupplyItemDetailViews\r\n        [NKD.Module.Bu");
            viewString.Append("sinessObjects.SupplyItemDetailView](T1.SupplyItemDetailView_SupplyItemID, T1.Sup");
            viewString.Append("plyItemDetailView_SupplyID, T1.SupplyItemDetailView_ModelID, T1.SupplyItemDetail");
            viewString.Append("View_PartID, T1.SupplyItemDetailView_SupplierModelID, T1.SupplyItemDetailView_Su");
            viewString.Append("pplierPartID, T1.SupplyItemDetailView_WarehouseID, T1.SupplyItemDetailView_Proje");
            viewString.Append("ctPlanTaskModelID, T1.SupplyItemDetailView_ProjectPlanTaskPartID, T1.SupplyItemD");
            viewString.Append("etailView_ProjectPlanTaskResponseID, T1.SupplyItemDetailView_ApplicationPaymentP");
            viewString.Append("roviderProductID, T1.SupplyItemDetailView_ApplicationPaymentProviderProductModel");
            viewString.Append("ID, T1.SupplyItemDetailView_ApplicationPaymentProviderProductPartID, T1.SupplyIt");
            viewString.Append("emDetailView_CustomerAccountID, T1.SupplyItemDetailView_ModelUnitID, T1.SupplyIt");
            viewString.Append("emDetailView_LabourUnitID, T1.SupplyItemDetailView_PartUnitID, T1.SupplyItemDeta");
            viewString.Append("ilView_CostPerUnitModel, T1.SupplyItemDetailView_CostPerUnitLabour, T1.SupplyIte");
            viewString.Append("mDetailView_CostPerUnitPart, T1.SupplyItemDetailView_QuantityModel, T1.SupplyIte");
            viewString.Append("mDetailView_QuantityLabour, T1.SupplyItemDetailView_QuantityPart, T1.SupplyItemD");
            viewString.Append("etailView_CostModel, T1.SupplyItemDetailView_CostLabour, T1.SupplyItemDetailView");
            viewString.Append("_CostPart, T1.SupplyItemDetailView_SubtotalModel, T1.SupplyItemDetailView_Subtot");
            viewString.Append("alLabour, T1.SupplyItemDetailView_SubtotalPart, T1.SupplyItemDetailView_Discount");
            viewString.Append("Model, T1.SupplyItemDetailView_DiscountLabour, T1.SupplyItemDetailView_DiscountP");
            viewString.Append("art, T1.SupplyItemDetailView_DiscountAmount, T1.SupplyItemDetailView_TaxModel, T");
            viewString.Append("1.SupplyItemDetailView_TaxLabour, T1.SupplyItemDetailView_TaxPart, T1.SupplyItem");
            viewString.Append("DetailView_Tax, T1.SupplyItemDetailView_OriginalSubtotal, T1.SupplyItemDetailVie");
            viewString.Append("w_CurrencyID, T1.SupplyItemDetailView_Subtotal, T1.SupplyItemDetailView_Notes, T");
            viewString.Append("1.SupplyItemDetailView_Version, T1.SupplyItemDetailView_VersionAntecedentID, T1.");
            viewString.Append("SupplyItemDetailView_VersionCertainty, T1.SupplyItemDetailView_VersionWorkflowIn");
            viewString.Append("stanceID, T1.SupplyItemDetailView_VersionUpdatedBy, T1.SupplyItemDetailView_Vers");
            viewString.Append("ionDeletedBy, T1.SupplyItemDetailView_VersionOwnerContactID, T1.SupplyItemDetail");
            viewString.Append("View_VersionOwnerCompanyID, T1.SupplyItemDetailView_VersionUpdated, T1.SupplyIte");
            viewString.Append("mDetailView_StandardModelName, T1.SupplyItemDetailView_ModelUnitName, T1.SupplyI");
            viewString.Append("temDetailView_StandardPartName, T1.SupplyItemDetailView_PartUnitName, T1.SupplyI");
            viewString.Append("temDetailView_LabourUnitName, T1.SupplyItemDetailView_PrefixCharacters, T1.Suppl");
            viewString.Append("yItemDetailView_PostfixCharacters, T1.SupplyItemDetailView_CustomerPurchaseOrder");
            viewString.Append("ID)\r\n    FROM (\r\n        SELECT \r\n            T.SupplyItemID AS SupplyItemDetail");
            viewString.Append("View_SupplyItemID, \r\n            T.SupplyID AS SupplyItemDetailView_SupplyID, \r\n");
            viewString.Append("            T.ModelID AS SupplyItemDetailView_ModelID, \r\n            T.PartID AS");
            viewString.Append(" SupplyItemDetailView_PartID, \r\n            T.SupplierModelID AS SupplyItemDetai");
            viewString.Append("lView_SupplierModelID, \r\n            T.SupplierPartID AS SupplyItemDetailView_Su");
            viewString.Append("pplierPartID, \r\n            T.WarehouseID AS SupplyItemDetailView_WarehouseID, \r");
            viewString.Append("\n            T.ProjectPlanTaskModelID AS SupplyItemDetailView_ProjectPlanTaskMod");
            viewString.Append("elID, \r\n            T.ProjectPlanTaskPartID AS SupplyItemDetailView_ProjectPlanT");
            viewString.Append("askPartID, \r\n            T.ProjectPlanTaskResponseID AS SupplyItemDetailView_Pro");
            viewString.Append("jectPlanTaskResponseID, \r\n            T.ApplicationPaymentProviderProductID AS S");
            viewString.Append("upplyItemDetailView_ApplicationPaymentProviderProductID, \r\n            T.Applica");
            viewString.Append("tionPaymentProviderProductModelID AS SupplyItemDetailView_ApplicationPaymentProv");
            viewString.Append("iderProductModelID, \r\n            T.ApplicationPaymentProviderProductPartID AS S");
            viewString.Append("upplyItemDetailView_ApplicationPaymentProviderProductPartID, \r\n            T.Cus");
            viewString.Append("tomerAccountID AS SupplyItemDetailView_CustomerAccountID, \r\n            T.ModelU");
            viewString.Append("nitID AS SupplyItemDetailView_ModelUnitID, \r\n            T.LabourUnitID AS Suppl");
            viewString.Append("yItemDetailView_LabourUnitID, \r\n            T.PartUnitID AS SupplyItemDetailView");
            viewString.Append("_PartUnitID, \r\n            T.CostPerUnitModel AS SupplyItemDetailView_CostPerUni");
            viewString.Append("tModel, \r\n            T.CostPerUnitLabour AS SupplyItemDetailView_CostPerUnitLab");
            viewString.Append("our, \r\n            T.CostPerUnitPart AS SupplyItemDetailView_CostPerUnitPart, \r\n");
            viewString.Append("            T.QuantityModel AS SupplyItemDetailView_QuantityModel, \r\n           ");
            viewString.Append(" T.QuantityLabour AS SupplyItemDetailView_QuantityLabour, \r\n            T.Quanti");
            viewString.Append("tyPart AS SupplyItemDetailView_QuantityPart, \r\n            T.CostModel AS Supply");
            viewString.Append("ItemDetailView_CostModel, \r\n            T.CostLabour AS SupplyItemDetailView_Cos");
            viewString.Append("tLabour, \r\n            T.CostPart AS SupplyItemDetailView_CostPart, \r\n          ");
            viewString.Append("  T.SubtotalModel AS SupplyItemDetailView_SubtotalModel, \r\n            T.Subtota");
            viewString.Append("lLabour AS SupplyItemDetailView_SubtotalLabour, \r\n            T.SubtotalPart AS ");
            viewString.Append("SupplyItemDetailView_SubtotalPart, \r\n            T.DiscountModel AS SupplyItemDe");
            viewString.Append("tailView_DiscountModel, \r\n            T.DiscountLabour AS SupplyItemDetailView_D");
            viewString.Append("iscountLabour, \r\n            T.DiscountPart AS SupplyItemDetailView_DiscountPart");
            viewString.Append(", \r\n            T.DiscountAmount AS SupplyItemDetailView_DiscountAmount, \r\n     ");
            viewString.Append("       T.TaxModel AS SupplyItemDetailView_TaxModel, \r\n            T.TaxLabour AS");
            viewString.Append(" SupplyItemDetailView_TaxLabour, \r\n            T.TaxPart AS SupplyItemDetailView");
            viewString.Append("_TaxPart, \r\n            T.Tax AS SupplyItemDetailView_Tax, \r\n            T.Origi");
            viewString.Append("nalSubtotal AS SupplyItemDetailView_OriginalSubtotal, \r\n            T.CurrencyID");
            viewString.Append(" AS SupplyItemDetailView_CurrencyID, \r\n            T.Subtotal AS SupplyItemDetai");
            viewString.Append("lView_Subtotal, \r\n            T.Notes AS SupplyItemDetailView_Notes, \r\n         ");
            viewString.Append("   T.Version AS SupplyItemDetailView_Version, \r\n            T.VersionAntecedentI");
            viewString.Append("D AS SupplyItemDetailView_VersionAntecedentID, \r\n            T.VersionCertainty ");
            viewString.Append("AS SupplyItemDetailView_VersionCertainty, \r\n            T.VersionWorkflowInstanc");
            viewString.Append("eID AS SupplyItemDetailView_VersionWorkflowInstanceID, \r\n            T.VersionUp");
            viewString.Append("datedBy AS SupplyItemDetailView_VersionUpdatedBy, \r\n            T.VersionDeleted");
            viewString.Append("By AS SupplyItemDetailView_VersionDeletedBy, \r\n            T.VersionOwnerContact");
            viewString.Append("ID AS SupplyItemDetailView_VersionOwnerContactID, \r\n            T.VersionOwnerCo");
            viewString.Append("mpanyID AS SupplyItemDetailView_VersionOwnerCompanyID, \r\n            T.VersionUp");
            viewString.Append("dated AS SupplyItemDetailView_VersionUpdated, \r\n            T.StandardModelName ");
            viewString.Append("AS SupplyItemDetailView_StandardModelName, \r\n            T.ModelUnitName AS Supp");
            viewString.Append("lyItemDetailView_ModelUnitName, \r\n            T.StandardPartName AS SupplyItemDe");
            viewString.Append("tailView_StandardPartName, \r\n            T.PartUnitName AS SupplyItemDetailView_");
            viewString.Append("PartUnitName, \r\n            T.LabourUnitName AS SupplyItemDetailView_LabourUnitN");
            viewString.Append("ame, \r\n            T.PrefixCharacters AS SupplyItemDetailView_PrefixCharacters, ");
            viewString.Append("\r\n            T.PostfixCharacters AS SupplyItemDetailView_PostfixCharacters, \r\n ");
            viewString.Append("           T.CustomerPurchaseOrderID AS SupplyItemDetailView_CustomerPurchaseOrd");
            viewString.Append("erID, \r\n            True AS _from0\r\n        FROM NKDModuleBusinessObjectsStoreCo");
            viewString.Append("ntainer.E_VW_SupplyItemDetail AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.SupplyItemDetailViews", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_TranslationData
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView798()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2264);
            viewString.Append("\r\n    SELECT VALUE -- Constructing E_TranslationData\r\n        [NKD.Module.Busine");
            viewString.Append("ssObjects.Store.E_TranslationData](T1.[E_TranslationData.TranslationDataID], T1.");
            viewString.Append("[E_TranslationData.TableType], T1.[E_TranslationData.ReferenceID], T1.[E_Transla");
            viewString.Append("tionData.ReferenceName], T1.[E_TranslationData.ReferenceUpdated], T1.[E_Translat");
            viewString.Append("ionData.OriginCulture], T1.[E_TranslationData.TranslationCulture], T1.[E_Transla");
            viewString.Append("tionData.TranslationName], T1.[E_TranslationData.Translation], T1.[E_Translation");
            viewString.Append("Data.Version], T1.[E_TranslationData.VersionAntecedentID], T1.[E_TranslationData");
            viewString.Append(".VersionCertainty], T1.[E_TranslationData.VersionWorkflowInstanceID], T1.[E_Tran");
            viewString.Append("slationData.VersionUpdatedBy], T1.[E_TranslationData.VersionDeletedBy], T1.[E_Tr");
            viewString.Append("anslationData.VersionOwnerContactID], T1.[E_TranslationData.VersionOwnerCompanyI");
            viewString.Append("D], T1.[E_TranslationData.VersionUpdated])\r\n    FROM (\r\n        SELECT \r\n       ");
            viewString.Append("     T.TranslationDataID AS [E_TranslationData.TranslationDataID], \r\n           ");
            viewString.Append(" T.TableType AS [E_TranslationData.TableType], \r\n            T.ReferenceID AS [E");
            viewString.Append("_TranslationData.ReferenceID], \r\n            T.ReferenceName AS [E_TranslationDa");
            viewString.Append("ta.ReferenceName], \r\n            T.ReferenceUpdated AS [E_TranslationData.Refere");
            viewString.Append("nceUpdated], \r\n            T.OriginCulture AS [E_TranslationData.OriginCulture],");
            viewString.Append(" \r\n            T.TranslationCulture AS [E_TranslationData.TranslationCulture], \r");
            viewString.Append("\n            T.TranslationName AS [E_TranslationData.TranslationName], \r\n       ");
            viewString.Append("     T.Translation AS [E_TranslationData.Translation], \r\n            T.Version A");
            viewString.Append("S [E_TranslationData.Version], \r\n            T.VersionAntecedentID AS [E_Transla");
            viewString.Append("tionData.VersionAntecedentID], \r\n            T.VersionCertainty AS [E_Translatio");
            viewString.Append("nData.VersionCertainty], \r\n            T.VersionWorkflowInstanceID AS [E_Transla");
            viewString.Append("tionData.VersionWorkflowInstanceID], \r\n            T.VersionUpdatedBy AS [E_Tran");
            viewString.Append("slationData.VersionUpdatedBy], \r\n            T.VersionDeletedBy AS [E_Translatio");
            viewString.Append("nData.VersionDeletedBy], \r\n            T.VersionOwnerContactID AS [E_Translation");
            viewString.Append("Data.VersionOwnerContactID], \r\n            T.VersionOwnerCompanyID AS [E_Transla");
            viewString.Append("tionData.VersionOwnerCompanyID], \r\n            T.VersionUpdated AS [E_Translatio");
            viewString.Append("nData.VersionUpdated], \r\n            True AS _from0\r\n        FROM NKDC.Translati");
            viewString.Append("onData AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_TranslationData", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDC.TranslationData
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView799()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2146);
            viewString.Append("\r\n    SELECT VALUE -- Constructing TranslationData\r\n        [NKD.Module.Business");
            viewString.Append("Objects.TranslationData](T1.TranslationData_TranslationDataID, T1.TranslationDat");
            viewString.Append("a_TableType, T1.TranslationData_ReferenceID, T1.TranslationData_ReferenceName, T");
            viewString.Append("1.TranslationData_ReferenceUpdated, T1.TranslationData_OriginCulture, T1.Transla");
            viewString.Append("tionData_TranslationCulture, T1.TranslationData_TranslationName, T1.TranslationD");
            viewString.Append("ata_Translation, T1.TranslationData_Version, T1.TranslationData_VersionAnteceden");
            viewString.Append("tID, T1.TranslationData_VersionCertainty, T1.TranslationData_VersionWorkflowInst");
            viewString.Append("anceID, T1.TranslationData_VersionUpdatedBy, T1.TranslationData_VersionDeletedBy");
            viewString.Append(", T1.TranslationData_VersionOwnerContactID, T1.TranslationData_VersionOwnerCompa");
            viewString.Append("nyID, T1.TranslationData_VersionUpdated)\r\n    FROM (\r\n        SELECT \r\n         ");
            viewString.Append("   T.TranslationDataID AS TranslationData_TranslationDataID, \r\n            T.Tab");
            viewString.Append("leType AS TranslationData_TableType, \r\n            T.ReferenceID AS TranslationD");
            viewString.Append("ata_ReferenceID, \r\n            T.ReferenceName AS TranslationData_ReferenceName,");
            viewString.Append(" \r\n            T.ReferenceUpdated AS TranslationData_ReferenceUpdated, \r\n       ");
            viewString.Append("     T.OriginCulture AS TranslationData_OriginCulture, \r\n            T.Translati");
            viewString.Append("onCulture AS TranslationData_TranslationCulture, \r\n            T.TranslationName");
            viewString.Append(" AS TranslationData_TranslationName, \r\n            T.Translation AS TranslationD");
            viewString.Append("ata_Translation, \r\n            T.Version AS TranslationData_Version, \r\n         ");
            viewString.Append("   T.VersionAntecedentID AS TranslationData_VersionAntecedentID, \r\n            T");
            viewString.Append(".VersionCertainty AS TranslationData_VersionCertainty, \r\n            T.VersionWo");
            viewString.Append("rkflowInstanceID AS TranslationData_VersionWorkflowInstanceID, \r\n            T.V");
            viewString.Append("ersionUpdatedBy AS TranslationData_VersionUpdatedBy, \r\n            T.VersionDele");
            viewString.Append("tedBy AS TranslationData_VersionDeletedBy, \r\n            T.VersionOwnerContactID");
            viewString.Append(" AS TranslationData_VersionOwnerContactID, \r\n            T.VersionOwnerCompanyID");
            viewString.Append(" AS TranslationData_VersionOwnerCompanyID, \r\n            T.VersionUpdated AS Tra");
            viewString.Append("nslationData_VersionUpdated, \r\n            True AS _from0\r\n        FROM NKDModul");
            viewString.Append("eBusinessObjectsStoreContainer.E_TranslationData AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.TranslationData", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NKDModuleBusinessObjectsStoreContainer.E_VW_CustomerSubscriptions
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView800()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDModuleBusinessObjectsStoreContainer.E_VW_CustomerSubscriptions", "\r\n    SELECT VALUE -- Constructing E_VW_CustomerSubscriptions\r\n        [NKD.Modul" +
                    "e.BusinessObjects.Store.E_VW_CustomerSubscriptions](T1.[E_VW_CustomerSubscriptio" +
                    "ns.CustomerContactID], T1.[E_VW_CustomerSubscriptions.ModelID], T1.[E_VW_Custome" +
                    "rSubscriptions.ExternalReferenceName], T1.[E_VW_CustomerSubscriptions.PaymentPro" +
                    "viderProductName], T1.[E_VW_CustomerSubscriptions.ApplicationPaymentProviderProd" +
                    "uctID], T1.[E_VW_CustomerSubscriptions.SupplyItemID], T1.[E_VW_CustomerSubscript" +
                    "ions.InvoiceID], T1.[E_VW_CustomerSubscriptions.InvoiceLineID], T1.[E_VW_Custome" +
                    "rSubscriptions.PaymentInvoiceID], T1.[E_VW_CustomerSubscriptions.PaymentID])\r\n  " +
                    "  FROM (\r\n        SELECT \r\n            T.CustomerContactID AS [E_VW_CustomerSubs" +
                    "criptions.CustomerContactID], \r\n            T.ModelID AS [E_VW_CustomerSubscript" +
                    "ions.ModelID], \r\n            T.ExternalReferenceName AS [E_VW_CustomerSubscripti" +
                    "ons.ExternalReferenceName], \r\n            T.PaymentProviderProductName AS [E_VW_" +
                    "CustomerSubscriptions.PaymentProviderProductName], \r\n            T.ApplicationPa" +
                    "ymentProviderProductID AS [E_VW_CustomerSubscriptions.ApplicationPaymentProvider" +
                    "ProductID], \r\n            T.SupplyItemID AS [E_VW_CustomerSubscriptions.SupplyIt" +
                    "emID], \r\n            T.InvoiceID AS [E_VW_CustomerSubscriptions.InvoiceID], \r\n  " +
                    "          T.InvoiceLineID AS [E_VW_CustomerSubscriptions.InvoiceLineID], \r\n     " +
                    "       T.PaymentInvoiceID AS [E_VW_CustomerSubscriptions.PaymentInvoiceID], \r\n  " +
                    "          T.PaymentID AS [E_VW_CustomerSubscriptions.PaymentID], \r\n            T" +
                    "rue AS _from0\r\n        FROM NKDC.CustomerSubscriptions AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NKDC.CustomerSubscriptions
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView801()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NKDC.CustomerSubscriptions", @"
    SELECT VALUE -- Constructing CustomerSubscriptions
        [NKD.Module.BusinessObjects.CustomerSubscriptions](T1.CustomerSubscriptions_CustomerContactID, T1.CustomerSubscriptions_ModelID, T1.CustomerSubscriptions_ExternalReferenceName, T1.CustomerSubscriptions_PaymentProviderProductName, T1.CustomerSubscriptions_ApplicationPaymentProviderProductID, T1.CustomerSubscriptions_SupplyItemID, T1.CustomerSubscriptions_InvoiceID, T1.CustomerSubscriptions_InvoiceLineID, T1.CustomerSubscriptions_PaymentInvoiceID, T1.CustomerSubscriptions_PaymentID)
    FROM (
        SELECT 
            T.CustomerContactID AS CustomerSubscriptions_CustomerContactID, 
            T.ModelID AS CustomerSubscriptions_ModelID, 
            T.ExternalReferenceName AS CustomerSubscriptions_ExternalReferenceName, 
            T.PaymentProviderProductName AS CustomerSubscriptions_PaymentProviderProductName, 
            T.ApplicationPaymentProviderProductID AS CustomerSubscriptions_ApplicationPaymentProviderProductID, 
            T.SupplyItemID AS CustomerSubscriptions_SupplyItemID, 
            T.InvoiceID AS CustomerSubscriptions_InvoiceID, 
            T.InvoiceLineID AS CustomerSubscriptions_InvoiceLineID, 
            T.PaymentInvoiceID AS CustomerSubscriptions_PaymentInvoiceID, 
            T.PaymentID AS CustomerSubscriptions_PaymentID, 
            True AS _from0
        FROM NKDModuleBusinessObjectsStoreContainer.E_VW_CustomerSubscriptions AS T
    ) AS T1");
        }
    }
}
